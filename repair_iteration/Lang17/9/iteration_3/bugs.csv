bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(input!=  null  ||  input.length()!=  0)  {  return;  }  [CE]  illegal  start  of  type  [FE]          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input!=  null  ||  input.length()!=  0)  {  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(input!=  null  ||  input.length()!=  0)  {  return;  }	  if(input    ==    null    ||    input.length()!=    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
2	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input.length()  ==  0)  {  if(input!=  null)  {  out.write('n');  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	if(input.length()  ==  0)  {  if(input!=  null)  {  out.write('n');  }	          if(input!=    null)    {    out.write('n');    }    if(input    ==    null)    {    out.write('n');    }    	compilable	  [FE]  ComparisonFailure  	42	10	replace
3	[BUG]  [BUGGY]  if(input.length()  ==  0)  {  if(input!=  null)  {  out.write('n');  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input.length()  ==  0)  {  if(input!=  null)  {  out.write('n');  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(input.length()  ==  0)  {  if(input!=  null)  {  out.write('n');  }	          if(input!=    null)    {    out.write('n');    }    if(input    ==    null)    {    out.write('n');    }    	compilable	  [FE]  ComparisonFailure  	42	10	replace
4	[BUG]  [BUGGY]  Integer  input  =  input.length();  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  Integer  input  =  input.length();  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	Integer  input  =  input.length();	  int    input    =    input.length()    -    1;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
5	[BUG]  [BUGGY]  out.write(input.substring(2));  [CE]  illegal  start  of  type  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write(input.substring(2));  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	out.write(input.substring(2));	  out.write(input.substring(1));    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
6	[BUG]  [BUGGY]  out.write(input.substring(1),  input.length());  [CE]  illegal  start  of  type  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write(input.substring(1),  input.length());  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	out.write(input.substring(1),  input.length());	  out.write(input.substring(1));    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
7	[BUG]  [BUGGY]  out.write(input.substring(0,  input.length()));  [CE]  illegal  start  of  type  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write(input.substring(0,  input.length()));  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	out.write(input.substring(0,  input.length()));	  out.write(input.substring(1));    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
8	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    }    if(input  ==  null)  {  out.write(   "n     ");  }  if(input  ==  null)  {  out.write( "n   ");  }  if(input  ==  null)  {  out.write( "n   ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	                if(input        ==        null)        {        out.write(       "n       ");        }        if(input    ==    null)    {    out.write(   "n       ");    }    if(input  ==  null)  {  out.write( "n   ");  }  if(input  ==  null)  {  out.write( "n   ");  }	  	compilable	  [FE]  ComparisonFailure  	32	3	add
9	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    }    if(input  ==  null)  {  out.write(   "n     ");  }  if(input  ==  null)  {  out.write( "n   ");  }  if(input  ==  null)  {  out.write( "n   ");  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    }    if(input  ==  null)  {  out.write(   "n     ");  }  if(input  ==  null)  {  out.write( "n   ");  }  if(input  ==  null)  {  out.write( "n   ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	                if(input        ==        null)        {        out.write(       "n       ");        }        if(input    ==    null)    {    out.write(   "n       ");    }    if(input  ==  null)  {  out.write( "n   ");  }  if(input  ==  null)  {  out.write( "n   ");  }	  	compilable	  [FE]  ComparisonFailure  	32	3	add
10	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    }    if(input  ==  null)  {  out.write(   "n     ");  }  if(input  ==  null)  {  out.write( "n   ");  }  if(input!=  null)  {  out.write( "n   ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	                if(input        ==        null)        {        out.write(       "n       ");        }        if(input    ==    null)    {    out.write(   "n       ");    }    if(input  ==  null)  {  out.write( "n   ");  }  if(input!=  null)  {  out.write( "n   ");  }	  	compilable	  [FE]  ComparisonFailure  	32	19	add
11	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    }    if(input  ==  null)  {  out.write(   "n     ");  }  if(input  ==  null)  {  out.write( "n   ");  }  if(input!=  null)  {  out.write( "n   ");  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    }    if(input  ==  null)  {  out.write(   "n     ");  }  if(input  ==  null)  {  out.write( "n   ");  }  if(input!=  null)  {  out.write( "n   ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	                if(input        ==        null)        {        out.write(       "n       ");        }        if(input    ==    null)    {    out.write(   "n       ");    }    if(input  ==  null)  {  out.write( "n   ");  }  if(input!=  null)  {  out.write( "n   ");  }	  	compilable	  [FE]  ComparisonFailure  	32	19	add
12	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input!=  null)  {  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	if(input!=  null)  {  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }	          if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input    ==    null    ||    input.length()!=    0)    {    return;    }    	compilable	  [FE]  AssertionFailedError  	75	19	replace
13	[BUG]  [BUGGY]  if(input!=  null)  {  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input!=  null)  {  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(input!=  null)  {  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }	          if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input    ==    null    ||    input.length()!=    0)    {    return;    }    	compilable	  [FE]  AssertionFailedError  	75	19	replace
14	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input  ==  null)  {  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	if(input  ==  null)  {  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }	          if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input    ==    null    ||    input.length()!=    0)    {    return;    }    	compilable	  [FE]  ComparisonFailure  	75	1	replace
15	[BUG]  [BUGGY]  if(input  ==  null)  {  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  [FE]  ComparisonFailure  [FE]      AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input  ==  null)  {  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(input  ==  null)  {  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }	          if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input    ==    null    ||    input.length()!=    0)    {    return;    }    	compilable	  [FE]  ComparisonFailure  	75	1	replace
16	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input.length()  ==  0)  {  if(input  ==  null  ||  input.length()!=  0)  {  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	if(input.length()  ==  0)  {  if(input  ==  null  ||  input.length()!=  0)  {  return;  }	          if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input    ==    null    ||    input.length()!=    0)    {    return;    }    	compilable	  [FE]  NullPointerException  	75	5	replace
17	[BUG]  [BUGGY]  if(input.length()  ==  0)  {  if(input  ==  null  ||  input.length()!=  0)  {  return;  }  [FE]  NullPointerException  [FE]        AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input.length()  ==  0)  {  if(input  ==  null  ||  input.length()!=  0)  {  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(input.length()  ==  0)  {  if(input  ==  null  ||  input.length()!=  0)  {  return;  }	          if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input    ==    null    ||    input.length()!=    0)    {    return;    }    	compilable	  [FE]  NullPointerException  	75	5	replace
18	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input  ==  null)  {  if(input  ==  null  ||  input.length()!=  0)  {  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	if(input  ==  null)  {  if(input  ==  null  ||  input.length()!=  0)  {  return;  }	          if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input    ==    null    ||    input.length()!=    0)    {    return;    }    	compilable	  [FE]  ComparisonFailure  	75	1	replace
19	[BUG]  [BUGGY]  if(input  ==  null)  {  if(input  ==  null  ||  input.length()!=  0)  {  return;  }  [FE]  ComparisonFailure  [FE]          AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input  ==  null)  {  if(input  ==  null  ||  input.length()!=  0)  {  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(input  ==  null)  {  if(input  ==  null  ||  input.length()!=  0)  {  return;  }	          if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input    ==    null    ||    input.length()!=    0)    {    return;    }    	compilable	  [FE]  ComparisonFailure  	75	1	replace
20	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	                if(input        ==        null)        {        out.write('n');        return;        }        if(input!=    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  AssertionFailedError  	7	19	add
21	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	                if(input        ==        null)        {        out.write('n');        return;        }        if(input!=    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  AssertionFailedError  	7	19	add
22	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	                if(input        ==        null)        {        out.write('n');        return;        }        if(input!=    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  AssertionFailedError  	7	19	add
23	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	                if(input        ==        null)        {        out.write('n');        return;        }        if(input!=    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  AssertionFailedError  	7	19	add
24	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	                if(input        ==        null)        {        out.write('n');        return;        }        if(input!=    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  AssertionFailedError  	7	19	add
25	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	                if(input        ==        null)        {        out.write('n');        return;        }        if(input!=    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  AssertionFailedError  	7	19	add
26	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	                if(input        ==        null)        {        out.write('n');        return;        }        if(input!=    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  AssertionFailedError  	7	19	add
27	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	                if(input        ==        null)        {        out.write('n');        return;        }        if(input!=    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  AssertionFailedError  	7	19	add
28	[BUG]  [BUGGY]  out.write(input);  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write(input);  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	out.write(input);	  if(input    ==    null)    {    out.write(input);    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
29	[BUG]  [BUGGY]  if(input!=  null)  {  out.write(input);  }  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input!=  null)  {  out.write(input);  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(input!=  null)  {  out.write(input);  }	  if(input    ==    null)    {    out.write(input);    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
30	[BUG]  [BUGGY]  if(input!=  null)  {  out.write(Integer.toString(pos));  }  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input!=  null)  {  out.write(Integer.toString(pos));  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(input!=  null)  {  out.write(Integer.toString(pos));  }	  if(input    ==    null)    {    out.write(input);    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
31	[BUG]  [BUGGY]  OutputStream  input  =  input.getOutputStream();  [CE]  illegal  start  of  type  [FE]          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  OutputStream  input  =  input.getOutputStream();  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	OutputStream  input  =  input.getOutputStream();	  OutputStream    input    =    output.getOutputStream();    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
32	[BUG]  [BUGGY]  OutputStream  input  =  out.getOutputStream();  [CE]  illegal  start  of  type  [FE]            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  OutputStream  input  =  out.getOutputStream();  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	OutputStream  input  =  out.getOutputStream();	  OutputStream    input    =    output.getOutputStream();    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
33	[BUG]  [BUGGY]  OutputStream  input  =  output.getInputStream();  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  OutputStream  input  =  output.getInputStream();  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	OutputStream  input  =  output.getInputStream();	  OutputStream    input    =    output.getOutputStream();    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
34	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input.length()  ==  0)  {  if(input  ==  null)  {  out.write('n');  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	if(input.length()  ==  0)  {  if(input  ==  null)  {  out.write('n');  }	          if(input    ==    null)    {    out.write('n');    }    if(input!=    null)    {    out.write('n');    }    	compilable	  [FE]  NullPointerException  	53	5	replace
35	[BUG]  [BUGGY]  if(input.length()  ==  0)  {  if(input  ==  null)  {  out.write('n');  }  [FE]  NullPointerException  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input.length()  ==  0)  {  if(input  ==  null)  {  out.write('n');  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(input.length()  ==  0)  {  if(input  ==  null)  {  out.write('n');  }	          if(input    ==    null)    {    out.write('n');    }    if(input!=    null)    {    out.write('n');    }    	compilable	  [FE]  NullPointerException  	53	5	replace
36	[BUG]  [BUGGY]  OutputStream  input  =  new  FileOutputStream(input.getChars());  [CE]  illegal  start  of  type  [FE]            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  OutputStream  input  =  new  FileOutputStream(input.getChars());  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	OutputStream  input  =  new  FileOutputStream(input.getChars());	          if(input!=    null)    {    out.write('n');    }    if(input    >=    null)    {    out.write('n');    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
37	[BUG]  [BUGGY]  out.write(c);  [CE]  illegal  start  of  type  [FE]        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write(c);  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	out.write(c);	  out.write('n');    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
38	[BUG]  [BUGGY]  out.write('n',  pos);  [CE]  illegal  start  of  type  [FE]          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write('n',  pos);  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	out.write('n',  pos);	  out.write('n');    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
39	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input  ==  null  ||  input.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(input  ==  null  ||  input.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(input!=    null    ||    input.length()    ==    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
40	[BUG]  [BUGGY]  out.write(Integer.toString(pos));  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write(Integer.toString(pos));  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	out.write(Integer.toString(pos));	  if(input    ==    null)    {    out.write(out);    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
41	[BUG]  [BUGGY]  char[]  input  =  input.toChars();  [CE]  illegal  start  of  type  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  char[]  input  =  input.toChars();  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	char[]  input  =  input.toChars();	          out.write(input.charAt(0));    char[]    input    =    input.toChars();    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
42	[BUG]  [BUGGY]  out.write(input.charAt(0));  char[]  input  =  input.toString();  [CE]  illegal  start  of  type  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write(input.charAt(0));  char[]  input  =  input.toString();  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	out.write(input.charAt(0));  char[]  input  =  input.toString();	          out.write(input.charAt(0));    char[]    input    =    input.toChars();    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
43	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input!=  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input!=  null  ||  input.length()  ==  0)  {  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	                if(input        ==        null        ||        input.length()        ==        0)        {        return;        }        if(input!=    null    ||    input.length()    ==    0)    {    return;    }    if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input!=  null  ||  input.length()  ==  0)  {  return;  }	  	compilable	  [FE]  AssertionFailedError  	72	19	add
44	[BUG]  [BUGGY]          if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input!=  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input!=  null  ||  input.length()  ==  0)  {  return;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input!=  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input!=  null  ||  input.length()  ==  0)  {  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	                if(input        ==        null        ||        input.length()        ==        0)        {        return;        }        if(input!=    null    ||    input.length()    ==    0)    {    return;    }    if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input!=  null  ||  input.length()  ==  0)  {  return;  }	  	compilable	  [FE]  AssertionFailedError  	72	19	add
45	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input!=  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input!=  null  ||  input.length()  ==  0)  {  return;  }  if(input!=  null  ||  input.length()  ==  0)  {  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	                if(input        ==        null        ||        input.length()        ==        0)        {        return;        }        if(input!=    null    ||    input.length()    ==    0)    {    return;    }    if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input!=  null  ||  input.length()  ==  0)  {  return;  }  if(input!=  null  ||  input.length()  ==  0)  {  return;  }	  	compilable	  [FE]  AssertionFailedError  	72	19	add
46	[BUG]  [BUGGY]          if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input!=  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input!=  null  ||  input.length()  ==  0)  {  return;  }  if(input!=  null  ||  input.length()  ==  0)  {  return;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input!=  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input!=  null  ||  input.length()  ==  0)  {  return;  }  if(input!=  null  ||  input.length()  ==  0)  {  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	                if(input        ==        null        ||        input.length()        ==        0)        {        return;        }        if(input!=    null    ||    input.length()    ==    0)    {    return;    }    if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input!=  null  ||  input.length()  ==  0)  {  return;  }  if(input!=  null  ||  input.length()  ==  0)  {  return;  }	  	compilable	  [FE]  AssertionFailedError  	72	19	add
47	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input!=  null  ||  input.length()  ==  0)  {  return;  }  if(input!=  null  ||  input.length()  ==  0)  {  return;  }  if(input!=  null  ||  input.length()  ==  0)  {  return;  }  if(input!=  null  ||  input.length()  ==  0)  {  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	                if(input        ==        null        ||        input.length()        ==        0)        {        return;        }        if(input!=    null    ||    input.length()    ==    0)    {    return;    }    if(input!=  null  ||  input.length()  ==  0)  {  return;  }  if(input!=  null  ||  input.length()  ==  0)  {  return;  }  if(input!=  null  ||  input.length()  ==  0)  {  return;  }	  	compilable	  [FE]  AssertionFailedError  	72	19	add
48	[BUG]  [BUGGY]          if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input!=  null  ||  input.length()  ==  0)  {  return;  }  if(input!=  null  ||  input.length()  ==  0)  {  return;  }  if(input!=  null  ||  input.length()  ==  0)  {  return;  }  if(input!=  null  ||  input.length()  ==  0)  {  return;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input!=  null  ||  input.length()  ==  0)  {  return;  }  if(input!=  null  ||  input.length()  ==  0)  {  return;  }  if(input!=  null  ||  input.length()  ==  0)  {  return;  }  if(input!=  null  ||  input.length()  ==  0)  {  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	                if(input        ==        null        ||        input.length()        ==        0)        {        return;        }        if(input!=    null    ||    input.length()    ==    0)    {    return;    }    if(input!=  null  ||  input.length()  ==  0)  {  return;  }  if(input!=  null  ||  input.length()  ==  0)  {  return;  }  if(input!=  null  ||  input.length()  ==  0)  {  return;  }	  	compilable	  [FE]  AssertionFailedError  	72	19	add
49	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input!=  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()!=  0)  {  return;  }  if(input!=  null  ||  input.length()  ==  0)  {  return;  }  if(input!=  null  ||  input.length()  ==  0)  {  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	                if(input        ==        null        ||        input.length()        ==        0)        {        return;        }        if(input!=    null    ||    input.length()    ==    0)    {    return;    }    if(input  ==  null  ||  input.length()!=  0)  {  return;  }  if(input!=  null  ||  input.length()  ==  0)  {  return;  }  if(input!=  null  ||  input.length()  ==  0)  {  return;  }	  	compilable	  [FE]  AssertionFailedError  	72	19	add
50	[BUG]  [BUGGY]          if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input!=  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()!=  0)  {  return;  }  if(input!=  null  ||  input.length()  ==  0)  {  return;  }  if(input!=  null  ||  input.length()  ==  0)  {  return;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input!=  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()!=  0)  {  return;  }  if(input!=  null  ||  input.length()  ==  0)  {  return;  }  if(input!=  null  ||  input.length()  ==  0)  {  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	                if(input        ==        null        ||        input.length()        ==        0)        {        return;        }        if(input!=    null    ||    input.length()    ==    0)    {    return;    }    if(input  ==  null  ||  input.length()!=  0)  {  return;  }  if(input!=  null  ||  input.length()  ==  0)  {  return;  }  if(input!=  null  ||  input.length()  ==  0)  {  return;  }	  	compilable	  [FE]  AssertionFailedError  	72	19	add
51	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input!=  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input!=  null  ||  input.length()  ==  0)  {  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	                if(input        ==        null        ||        input.length()        ==        0)        {        return;        }        if(input!=    null    ||    input.length()    ==    0)    {    return;    }    if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input!=  null  ||  input.length()  ==  0)  {  return;  }	  	compilable	  [FE]  AssertionFailedError  	72	19	add
52	[BUG]  [BUGGY]          if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input!=  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input!=  null  ||  input.length()  ==  0)  {  return;  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input!=  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input!=  null  ||  input.length()  ==  0)  {  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	                if(input        ==        null        ||        input.length()        ==        0)        {        return;        }        if(input!=    null    ||    input.length()    ==    0)    {    return;    }    if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input!=  null  ||  input.length()  ==  0)  {  return;  }	  	compilable	  [FE]  AssertionFailedError  	72	19	add
53	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input!=    null)    {    out.write('n');    }    if(input!=  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	                if(input!=        null)        {        out.write('n');        }        if(input!=    null)    {    out.write('n');    }    if(input!=  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	39	19	add
54	[BUG]  [BUGGY]          if(input!=    null)    {    out.write('n');    }    if(input!=  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input!=    null)    {    out.write('n');    }    if(input!=  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	                if(input!=        null)        {        out.write('n');        }        if(input!=    null)    {    out.write('n');    }    if(input!=  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	39	19	add
55	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input!=    null)    {    out.write('n');    }    if(input!=  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	                if(input!=        null)        {        out.write('n');        }        if(input!=    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	39	19	add
56	[BUG]  [BUGGY]          if(input!=    null)    {    out.write('n');    }    if(input!=  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input!=    null)    {    out.write('n');    }    if(input!=  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	                if(input!=        null)        {        out.write('n');        }        if(input!=    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	39	19	add
57	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input!=    null)    {    out.write('n');    }    if(input!=  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	                if(input!=        null)        {        out.write('n');        }        if(input!=    null)    {    out.write('n');    }    if(input!=  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	39	19	add
58	[BUG]  [BUGGY]          if(input!=    null)    {    out.write('n');    }    if(input!=  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input!=    null)    {    out.write('n');    }    if(input!=  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	                if(input!=        null)        {        out.write('n');        }        if(input!=    null)    {    out.write('n');    }    if(input!=  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	39	19	add
59	[BUG]  [BUGGY]          if(input!=    null)    {    out.write('n');    }    if(input!=  null)  {  out.write('n');  }  if(input  >=  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]          ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input!=    null)    {    out.write('n');    }    if(input!=  null)  {  out.write('n');  }  if(input  >=  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	                if(input!=        null)        {        out.write('n');        }        if(input!=    null)    {    out.write('n');    }    if(input  >=  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	39	None	add
60	[BUG]  [BUGGY]  int  outputLength  =  input.length();  [CE]  illegal  start  of  type  [FE]            NullPointerException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  int  outputLength  =  input.length();  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	int  outputLength  =  input.length();	  int    inputLength    =    input.length()    -    2;    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
61	[BUG]  [BUGGY]  out.write(input.length());  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write(input.length());  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	out.write(input.length());	  if(input    ==    null)    {    out.write(input.length());    }    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
62	[BUG]  [BUGGY]  if(input!=  null)  {  out.write(input.length());  }  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input!=  null)  {  out.write(input.length());  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(input!=  null)  {  out.write(input.length());  }	  if(input    ==    null)    {    out.write(input.length());    }    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
63	[BUG]  [BUGGY]  if(input.length()  ==  0)  {  out.write(input.length());  }  [CE]  illegal  start  of  type  [FE]                            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input.length()  ==  0)  {  out.write(input.length());  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(input.length()  ==  0)  {  out.write(input.length());  }	  if(input    ==    null)    {    out.write(input.length());    }    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
64	[BUG]  [BUGGY]  out.write(Integer.toString(input));  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write(Integer.toString(input));  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	out.write(Integer.toString(input));	  if(input    ==    null)    {    out.write(Integer.toString(pos));    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
65	[BUG]  [BUGGY]  Integer  inputLength  =  input.length();  [CE]  illegal  start  of  type  [FE]    NullPointerException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  Integer  inputLength  =  input.length();  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	Integer  inputLength  =  input.length();	          int    inputLength    =    input.length();    int    outputLength    =    input.length();    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
66	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	                if(input        ==        null)        {        out.write('n');        }        if(input    ==    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	50	3	add
67	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	                if(input        ==        null)        {        out.write('n');        }        if(input    ==    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	50	3	add
68	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	                if(input        ==        null)        {        out.write('n');        }        if(input    ==    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	50	19	add
69	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	                if(input        ==        null)        {        out.write('n');        }        if(input    ==    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	50	19	add
70	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	                if(input        ==        null)        {        out.write('n');        }        if(input    ==    null)    {    out.write('n');    }    if(input!=  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	50	19	add
71	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	                if(input        ==        null)        {        out.write('n');        }        if(input    ==    null)    {    out.write('n');    }    if(input!=  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	50	19	add
72	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  }  If(input  ==  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  }  If(input  ==  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	                if(input        ==        null)        {        out.write('n');        }        if(input    ==    null)    {    out.write('n');    }    If(input  ==  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }	  	non-compiled	[CE]  ';'  expected	50	None	add
73	[BUG]  [BUGGY]  if(input!=  null  ||  input.length()!=  0)  {  if(input!=  null  ||  input.length()!=  0)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input!=  null  ||  input.length()!=  0)  {  if(input!=  null  ||  input.length()!=  0)  {  [BUGGY]      return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(input!=    null    ||    input.length()!=    0)    {    if(input!=  null  ||  input.length()!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	121	None	add
74	[BUG]  [BUGGY]  if(input!=  null  ||  input.length()!=  0)  {  if(input!=  null  ||  input.length()  >=  0)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input!=  null  ||  input.length()!=  0)  {  if(input!=  null  ||  input.length()  >=  0)  {  [BUGGY]      return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(input!=    null    ||    input.length()!=    0)    {    if(input!=  null  ||  input.length()  >=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	121	None	add
75	[BUG]  [BUGGY]  if(input!=  null  ||  input.length()!=  0)  {  if(input  ==  null  ||  input.length()!=  0)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input!=  null  ||  input.length()!=  0)  {  if(input  ==  null  ||  input.length()!=  0)  {  [BUGGY]      return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(input!=    null    ||    input.length()!=    0)    {    if(input  ==  null  ||  input.length()!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	121	None	add
76	[BUG]  [BUGGY]  if(input!=  null  ||  input.length()!=  0)  {  if(input!=  null  ||  input.length()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input!=  null  ||  input.length()!=  0)  {  if(input!=  null  ||  input.length()  ==  0)  {  [BUGGY]      return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(input!=    null    ||    input.length()!=    0)    {    if(input!=  null  ||  input.length()  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	121	None	add
77	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()  >=  0)  {  out.write('n');  }  [CE]  illegal  start  of  type  [FE]          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input  ==  null  ||  input.length()  >=  0)  {  out.write('n');  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(input  ==  null  ||  input.length()  >=  0)  {  out.write('n');  }	  if(input    ==    null    ||    input.length()!=    0)    {    out.write('n');    }    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
78	[BUG]  [BUGGY]  out.write(input.charAt(0));  input.write(input.charAt(0));  [CE]  illegal  start  of  type  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write(input.charAt(0));  input.write(input.charAt(0));  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	out.write(input.charAt(0));  input.write(input.charAt(0));	          out.write(input.charAt(0));    in.write(input.charAt(0));    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
79	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()  <  0)  {  return;  }  [CE]  illegal  start  of  type  [FE]        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input  ==  null  ||  input.length()  <  0)  {  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(input  ==  null  ||  input.length()  <  0)  {  return;  }	  if(input    ==    null    ||    input.length()    >=    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
80	[BUG]  [BUGGY]  Int  inputLength  =  input.length();  [CE]  illegal  start  of  type  [FE]        NullPointerException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  Int  inputLength  =  input.length();  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	Int  inputLength  =  input.length();	          int    inputLength    =    input.length();    Int    inputLength    =    input.length();    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
81	[BUG]  [BUGGY]  if(input!=  null  ||  input.length()  <  =  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input!=  null  ||  input.length()  <  =  0)  {  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(input!=  null  ||  input.length()  <  =  0)  {  return;  }	  if(input    ==    null    ||    input.length()    <    =    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
82	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(2));  out.write(input.charAt(0));  out.write(input.charAt(2));  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	                out.write(input.charAt(0));        out.write(input.charAt(2));    out.write(input.charAt(0));  out.write(input.charAt(2));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	85	19	add
83	[BUG]  [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(2));  out.write(input.charAt(0));  out.write(input.charAt(2));  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(2));  out.write(input.charAt(0));  out.write(input.charAt(2));  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	                out.write(input.charAt(0));        out.write(input.charAt(2));    out.write(input.charAt(0));  out.write(input.charAt(2));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	85	19	add
84	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(2));  out.write(input.charAt(1));  out.write(input.charAt(2));  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	                out.write(input.charAt(0));        out.write(input.charAt(2));    out.write(input.charAt(1));  out.write(input.charAt(2));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	85	19	add
85	[BUG]  [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(2));  out.write(input.charAt(1));  out.write(input.charAt(2));  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(2));  out.write(input.charAt(1));  out.write(input.charAt(2));  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	                out.write(input.charAt(0));        out.write(input.charAt(2));    out.write(input.charAt(1));  out.write(input.charAt(2));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	85	19	add
86	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(2));  out.write(input.charAt(0));  out.write(input.charAt(3));  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	                out.write(input.charAt(0));        out.write(input.charAt(2));    out.write(input.charAt(0));  out.write(input.charAt(3));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	85	19	add
87	[BUG]  [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(2));  out.write(input.charAt(0));  out.write(input.charAt(3));  [FE]  StringIndexOutOfBoundsException  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(2));  out.write(input.charAt(0));  out.write(input.charAt(3));  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	                out.write(input.charAt(0));        out.write(input.charAt(2));    out.write(input.charAt(0));  out.write(input.charAt(3));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	85	19	add
88	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(2));  out.write(input.charAt(1));  out.write(input.charAt(3));  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	                out.write(input.charAt(0));        out.write(input.charAt(2));    out.write(input.charAt(1));  out.write(input.charAt(3));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	85	19	add
89	[BUG]  [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(2));  out.write(input.charAt(1));  out.write(input.charAt(3));  [FE]  StringIndexOutOfBoundsException  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(2));  out.write(input.charAt(1));  out.write(input.charAt(3));  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	                out.write(input.charAt(0));        out.write(input.charAt(2));    out.write(input.charAt(1));  out.write(input.charAt(3));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	85	19	add
90	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]            StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(2));  out.write(input.charAt(0));  out.write(input.charAt(1));  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	                out.write(input.charAt(0));        out.write(input.charAt(2));    out.write(input.charAt(0));  out.write(input.charAt(1));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	85	19	add
91	[BUG]  [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(2));  out.write(input.charAt(0));  out.write(input.charAt(1));  [FE]  StringIndexOutOfBoundsException  [FE]            StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(2));  out.write(input.charAt(0));  out.write(input.charAt(1));  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	                out.write(input.charAt(0));        out.write(input.charAt(2));    out.write(input.charAt(0));  out.write(input.charAt(1));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	85	19	add
92	[BUG]  [BUGGY]  OutputStream  input  =  new  FileOutputStream(input.getBytes(),  out);  [CE]  illegal  start  of  type  [FE]          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  OutputStream  input  =  new  FileOutputStream(input.getBytes(),  out);  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	OutputStream  input  =  new  FileOutputStream(input.getBytes(),  out);	  OutputStream    input    =    new    FileOutputStream(input.getBytes());    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
93	[BUG]  [BUGGY]  OutputStream  input  =  new  FileOutputStream(out.getBytes());  [CE]  illegal  start  of  type  [FE]            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  OutputStream  input  =  new  FileOutputStream(out.getBytes());  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	OutputStream  input  =  new  FileOutputStream(out.getBytes());	  OutputStream    input    =    new    FileOutputStream(input.getBytes());    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
94	[BUG]  [BUGGY]  OutputStream  input  =  new  FileOutputStream(input.getBytes(),  output);  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  OutputStream  input  =  new  FileOutputStream(input.getBytes(),  output);  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	OutputStream  input  =  new  FileOutputStream(input.getBytes(),  output);	  OutputStream    input    =    new    FileOutputStream(input.getBytes());    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
95	[BUG]  [BUGGY]  if(input!=  null)  {  out.write( "null ");  }  [CE]  illegal  start  of  type  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input!=  null)  {  out.write( "null ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(input!=  null)  {  out.write( "null ");  }	          if(input    ==    null)    {    out.write(       "n       ");    }    if(input!=    null)    {    out.write(   "n       ");    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
96	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(0));  out.write(input.charAt(0));  out.write(input.charAt(0));  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	                out.write(input.charAt(0));        out.write(input.charAt(0));    out.write(input.charAt(0));  out.write(input.charAt(0));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	18	19	add
97	[BUG]  [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(0));  out.write(input.charAt(0));  out.write(input.charAt(0));  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(0));  out.write(input.charAt(0));  out.write(input.charAt(0));  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	                out.write(input.charAt(0));        out.write(input.charAt(0));    out.write(input.charAt(0));  out.write(input.charAt(0));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	18	19	add
98	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(0));  out.write(input.charAt(0));  out.write(input.charAt(1));  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	                out.write(input.charAt(0));        out.write(input.charAt(0));    out.write(input.charAt(0));  out.write(input.charAt(1));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	18	19	add
99	[BUG]  [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(0));  out.write(input.charAt(0));  out.write(input.charAt(1));  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(0));  out.write(input.charAt(0));  out.write(input.charAt(1));  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	                out.write(input.charAt(0));        out.write(input.charAt(0));    out.write(input.charAt(0));  out.write(input.charAt(1));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	18	19	add
100	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(0));  out.write(input.charAt(1));  out.write(input.charAt(1));  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	                out.write(input.charAt(0));        out.write(input.charAt(0));    out.write(input.charAt(1));  out.write(input.charAt(1));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	18	19	add
101	[BUG]  [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(0));  out.write(input.charAt(1));  out.write(input.charAt(1));  [FE]  StringIndexOutOfBoundsException  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(0));  out.write(input.charAt(1));  out.write(input.charAt(1));  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	                out.write(input.charAt(0));        out.write(input.charAt(0));    out.write(input.charAt(1));  out.write(input.charAt(1));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	18	19	add
102	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(0));  out.write(input.charAt(1));  out.write(input.charAt(0));  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	                out.write(input.charAt(0));        out.write(input.charAt(0));    out.write(input.charAt(1));  out.write(input.charAt(0));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	18	19	add
103	[BUG]  [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(0));  out.write(input.charAt(1));  out.write(input.charAt(0));  [FE]  StringIndexOutOfBoundsException  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(0));  out.write(input.charAt(1));  out.write(input.charAt(0));  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	                out.write(input.charAt(0));        out.write(input.charAt(0));    out.write(input.charAt(1));  out.write(input.charAt(0));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	18	19	add
104	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]            StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(0));  out.write(input.charAt(1));  out.write(input.charAt(2));  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	                out.write(input.charAt(0));        out.write(input.charAt(0));    out.write(input.charAt(1));  out.write(input.charAt(2));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	18	19	add
105	[BUG]  [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(0));  out.write(input.charAt(1));  out.write(input.charAt(2));  [FE]  StringIndexOutOfBoundsException  [FE]            StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(0));  out.write(input.charAt(1));  out.write(input.charAt(2));  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	                out.write(input.charAt(0));        out.write(input.charAt(0));    out.write(input.charAt(1));  out.write(input.charAt(2));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	18	19	add
106	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input.length()  ==  0)  {  if(input  ==  null)  {  out.write('n');  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	if(input.length()  ==  0)  {  if(input  ==  null)  {  out.write('n');  return;  }	          if(input    ==    null)    {    out.write('n');    return;    }    if(input    ==    null)    {    out.write('n');    return;    }    	compilable	  [FE]  NullPointerException  	6	5	replace
107	[BUG]  [BUGGY]  if(input.length()  ==  0)  {  if(input  ==  null)  {  out.write('n');  return;  }  [FE]  NullPointerException  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input.length()  ==  0)  {  if(input  ==  null)  {  out.write('n');  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(input.length()  ==  0)  {  if(input  ==  null)  {  out.write('n');  return;  }	          if(input    ==    null)    {    out.write('n');    return;    }    if(input    ==    null)    {    out.write('n');    return;    }    	compilable	  [FE]  NullPointerException  	6	5	replace
108	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input  ==  null  ||  input.length()  >  0)  {  [BUGGY]      return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	if(input  ==  null  ||  input.length()  >  0)  {	  if(input    ==    null    ||    input.length()    >=    0)    {    	compilable	  [FE]  AssertionFailedError  	29	19	replace
109	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()  >  0)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input  ==  null  ||  input.length()  >  0)  {  [BUGGY]      return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(input  ==  null  ||  input.length()  >  0)  {	  if(input    ==    null    ||    input.length()    >=    0)    {    	compilable	  [FE]  AssertionFailedError  	29	19	replace
110	[BUG]  [BUGGY]  char[]  inputLength  =  input.length();  [CE]  illegal  start  of  type  [FE]              NullPointerException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  char[]  inputLength  =  input.length();  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	char[]  inputLength  =  input.length();	          int    inputLength    =    input.length();    char[]    inputLength    =    input.length();    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
111	[BUG]  [BUGGY]  String  input  =  input.length();  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  String  input  =  input.length();  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	String  input  =  input.length();	  char    input    =    input.length();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
112	[BUG]  [BUGGY]  Char  input  =  input.length();  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  Char  input  =  input.length();  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	Char  input  =  input.length();	  char    input    =    input.length();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
113	[BUG]  [BUGGY]  Character  input  =  input.length();  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  Character  input  =  input.length();  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	Character  input  =  input.length();	  char    input    =    input.length();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
114	[BUG]  [BUGGY]  If(input  ==  null  ||  input.length()  ==  0)  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  If(input  ==  null  ||  input.length()  ==  0)  {  [BUGGY]      return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	If(input  ==  null  ||  input.length()  ==  0)  {	  if(input    ==    null    ||    input.length()    ==    0)    {    If(input    ==    null    ||    input.length()    ==    0)    {    	non-compiled	[CE]  ';'  expected	59	None	replace
115	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    }    if(input!=  null)  {  out.write(   "n     ");  }  if(input  ==  null)  {  out.write( "n   ");  }  if(input!=  null)  {  out.write( "n   ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	                if(input        ==        null)        {        out.write(       "n       ");        }        if(input!=    null)    {    out.write(   "n       ");    }    if(input  ==  null)  {  out.write( "n   ");  }  if(input!=  null)  {  out.write( "n   ");  }	  	compilable	  [FE]  ComparisonFailure  	34	19	add
116	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    }    if(input!=  null)  {  out.write(   "n     ");  }  if(input  ==  null)  {  out.write( "n   ");  }  if(input!=  null)  {  out.write( "n   ");  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    }    if(input!=  null)  {  out.write(   "n     ");  }  if(input  ==  null)  {  out.write( "n   ");  }  if(input!=  null)  {  out.write( "n   ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	                if(input        ==        null)        {        out.write(       "n       ");        }        if(input!=    null)    {    out.write(   "n       ");    }    if(input  ==  null)  {  out.write( "n   ");  }  if(input!=  null)  {  out.write( "n   ");  }	  	compilable	  [FE]  ComparisonFailure  	34	19	add
117	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    }    if(input!=  null)  {  out.write(   "n     ");  }  if(input!=  null)  {  out.write( "n   ");  }  if(input!=  null)  {  out.write( "n   ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	                if(input        ==        null)        {        out.write(       "n       ");        }        if(input!=    null)    {    out.write(   "n       ");    }    if(input!=  null)  {  out.write( "n   ");  }  if(input!=  null)  {  out.write( "n   ");  }	  	compilable	  [FE]  ComparisonFailure  	34	19	add
118	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    }    if(input!=  null)  {  out.write(   "n     ");  }  if(input!=  null)  {  out.write( "n   ");  }  if(input!=  null)  {  out.write( "n   ");  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    }    if(input!=  null)  {  out.write(   "n     ");  }  if(input!=  null)  {  out.write( "n   ");  }  if(input!=  null)  {  out.write( "n   ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	                if(input        ==        null)        {        out.write(       "n       ");        }        if(input!=    null)    {    out.write(   "n       ");    }    if(input!=  null)  {  out.write( "n   ");  }  if(input!=  null)  {  out.write( "n   ");  }	  	compilable	  [FE]  ComparisonFailure  	34	19	add
119	[BUG]  [BUGGY]  out.write(Integer.toString(input.length()  -  1));  [CE]  illegal  start  of  type  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write(Integer.toString(input.length()  -  1));  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	out.write(Integer.toString(input.length()  -  1));	  out.write(Integer.toString(input.length()));    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
120	[BUG]  [BUGGY]  out.write(Integer.toString(input.length()  +  1));  [CE]  illegal  start  of  type  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write(Integer.toString(input.length()  +  1));  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	out.write(Integer.toString(input.length()  +  1));	  out.write(Integer.toString(input.length()));    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
121	[BUG]  [BUGGY]  out.write(Integer.toString(input.length()  -  2));  [CE]  illegal  start  of  type  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write(Integer.toString(input.length()  -  2));  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	out.write(Integer.toString(input.length()  -  2));	  out.write(Integer.toString(input.length()));    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
122	[BUG]  [BUGGY]  If(input  ==  null  ||  input.length()  <  0)  {  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  If(input  ==  null  ||  input.length()  <  0)  {  [BUGGY]      return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	If(input  ==  null  ||  input.length()  <  0)  {	  if(input    ==    null    ||    input.length()    <    0)    {    If(input    ==    null    ||    input.length()    <    0)    {    	non-compiled	[CE]  ';'  expected	68	None	replace
123	[BUG]  [BUGGY]  If(input  ==  null  ||  input.length()!=  0)  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  If(input  ==  null  ||  input.length()!=  0)  {  [BUGGY]      return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	If(input  ==  null  ||  input.length()!=  0)  {	  if(input    ==    null    ||    input.length()    <    0)    {    If(input    ==    null    ||    input.length()    <    0)    {    	non-compiled	[CE]  ';'  expected	68	None	replace
124	[BUG]  [BUGGY]  If(input  ==  null  ||  input.length()  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  If(input  ==  null  ||  input.length()  <  =  0)  {  [BUGGY]      return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	If(input  ==  null  ||  input.length()  <  =  0)  {	  if(input    ==    null    ||    input.length()    <    0)    {    If(input    ==    null    ||    input.length()    <    0)    {    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
125	[BUG]  [BUGGY]  If(input  ==  null  ||  input.length()  >=  0)  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  If(input  ==  null  ||  input.length()  >=  0)  {  [BUGGY]      return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	If(input  ==  null  ||  input.length()  >=  0)  {	  if(input    ==    null    ||    input.length()    <    0)    {    If(input    ==    null    ||    input.length()    <    0)    {    	non-compiled	[CE]  ';'  expected	68	None	replace
126	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	                if(input        ==        null)        {        out.write('n');        return;        }        if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  ComparisonFailure  	5	3	add
127	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	                if(input        ==        null)        {        out.write('n');        return;        }        if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  ComparisonFailure  	5	3	add
128	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	                if(input        ==        null)        {        out.write('n');        return;        }        if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  AssertionFailedError  	5	19	add
129	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  [FE]  AssertionFailedError  [FE]      ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	                if(input        ==        null)        {        out.write('n');        return;        }        if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  AssertionFailedError  	5	19	add
130	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	                if(input        ==        null)        {        out.write('n');        return;        }        if(input    ==    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  AssertionFailedError  	5	19	add
131	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  [FE]  AssertionFailedError  [FE]        ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	                if(input        ==        null)        {        out.write('n');        return;        }        if(input    ==    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  AssertionFailedError  	5	19	add
132	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	                if(input        ==        null)        {        out.write('n');        return;        }        if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  ComparisonFailure  	5	3	add
133	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	                if(input        ==        null)        {        out.write('n');        return;        }        if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  ComparisonFailure  	5	3	add
134	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	                if(input        ==        null)        {        out.write('n');        return;        }        if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  AssertionFailedError  	5	19	add
135	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  [FE]  AssertionFailedError  [FE]            ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	                if(input        ==        null)        {        out.write('n');        return;        }        if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  AssertionFailedError  	5	19	add
136	[BUG]  [BUGGY]  char[]  input  =  input.getChars();  [CE]  illegal  start  of  type  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  char[]  input  =  input.getChars();  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	char[]  input  =  input.getChars();	          out.write(input.charAt(0));    char[]    input    =    input.getChars();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
137	[BUG]  [BUGGY]  out.write(input.charAt(0));  String  input  =  input.getChars();  [CE]  illegal  start  of  type  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write(input.charAt(0));  String  input  =  input.getChars();  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	out.write(input.charAt(0));  String  input  =  input.getChars();	          out.write(input.charAt(0));    char[]    input    =    input.getChars();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
138	[BUG]  [BUGGY]  out.write(input,  0,  input.length());  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write(input,  0,  input.length());  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	out.write(input,  0,  input.length());	  out.write(input);    return;    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
139	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]              ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input.length()  ==  0)  {  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	if(input.length()  ==  0)  {  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }	          if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    If(input    ==    null    ||    input.length()    ==    0)    {    return;    }    	compilable	  [FE]  NullPointerException  	76	5	replace
140	[BUG]  [BUGGY]  if(input.length()  ==  0)  {  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  [FE]  NullPointerException  [FE]              ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input.length()  ==  0)  {  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(input.length()  ==  0)  {  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }	          if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    If(input    ==    null    ||    input.length()    ==    0)    {    return;    }    	compilable	  [FE]  NullPointerException  	76	5	replace
141	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(out  ==  null)  {  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	if(out  ==  null)  {  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }	          if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    If(input    ==    null    ||    input.length()    ==    0)    {    return;    }    	compilable	  [FE]  NullPointerException  	76	5	replace
142	[BUG]  [BUGGY]  if(out  ==  null)  {  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  [FE]  NullPointerException  [FE]                ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(out  ==  null)  {  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(out  ==  null)  {  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }	          if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    If(input    ==    null    ||    input.length()    ==    0)    {    return;    }    	compilable	  [FE]  NullPointerException  	76	5	replace
143	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input!=  null  ||  input.length()  <  0)  {  [BUGGY]      return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	if(input!=  null  ||  input.length()  <  0)  {	  if(input    ==    null    ||    input.length()    <    0)    {    if(input!=    null    ||    input.length()    <    0)    {    	compilable	  [FE]  AssertionFailedError  	67	19	replace
144	[BUG]  [BUGGY]  if(input!=  null  ||  input.length()  <  0)  {  [FE]  AssertionFailedError  [FE]          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input!=  null  ||  input.length()  <  0)  {  [BUGGY]      return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(input!=  null  ||  input.length()  <  0)  {	  if(input    ==    null    ||    input.length()    <    0)    {    if(input!=    null    ||    input.length()    <    0)    {    	compilable	  [FE]  AssertionFailedError  	67	19	replace
145	[BUG]  [BUGGY]  out.write(input.getBytes(),  input.length());  [CE]  illegal  start  of  type  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write(input.getBytes(),  input.length());  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	out.write(input.getBytes(),  input.length());	  out.write(input.getBytes());    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
146	[BUG]  [BUGGY]  out.write(Integer.toString(input.getBytes()));  [CE]  illegal  start  of  type  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write(Integer.toString(input.getBytes()));  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	out.write(Integer.toString(input.getBytes()));	  out.write(input.getBytes());    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
147	[BUG]  [BUGGY]  out.write(input.getBytes()  +  1);  [CE]  illegal  start  of  type  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write(input.getBytes()  +  1);  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	out.write(input.getBytes()  +  1);	  out.write(input.getBytes());    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
148	[BUG]  [BUGGY]  out.write( ".s.IFJDCS ".getBytes());  [CE]  illegal  start  of  type  [FE]          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write( ".s.IFJDCS ".getBytes());  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	out.write( ".s.IFJDCS ".getBytes());	  if(input    ==    null)    {    out.write(   "null   ");    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
149	[BUG]  [BUGGY]  out.write( "null  input ");  [CE]  illegal  start  of  type  [FE]          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write( "null  input ");  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	out.write( "null  input ");	  out.write(   "no    input   ");    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
150	[BUG]  [BUGGY]  out.write( "no  input. ");  [CE]  illegal  start  of  type  [FE]            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write( "no  input. ");  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	out.write( "no  input. ");	  out.write(   "no    input   ");    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
151	[BUG]  [BUGGY]  out.write( "no  input: ");  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write( "no  input: ");  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	out.write( "no  input: ");	  out.write(   "no    input   ");    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
152	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    }    if(input  ==  null)  {  out.write(   ".n     ");  }  if(input  ==  null)  {  out.write( "n   ");  }  if(input  ==  null)  {  out.write( ".n ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	                if(input        ==        null)        {        out.write(       "n       ");        }        if(input    ==    null)    {    out.write(   ".n       ");    }    if(input  ==  null)  {  out.write( "n   ");  }  if(input  ==  null)  {  out.write( ".n ");  }	  	compilable	  [FE]  ComparisonFailure  	105	3	add
153	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    }    if(input  ==  null)  {  out.write(   ".n     ");  }  if(input  ==  null)  {  out.write( "n   ");  }  if(input  ==  null)  {  out.write( ".n ");  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    }    if(input  ==  null)  {  out.write(   ".n     ");  }  if(input  ==  null)  {  out.write( "n   ");  }  if(input  ==  null)  {  out.write( ".n ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	                if(input        ==        null)        {        out.write(       "n       ");        }        if(input    ==    null)    {    out.write(   ".n       ");    }    if(input  ==  null)  {  out.write( "n   ");  }  if(input  ==  null)  {  out.write( ".n ");  }	  	compilable	  [FE]  ComparisonFailure  	105	3	add
154	[BUG]  [BUGGY]  out.write(Input.toString(input));  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write(Input.toString(input));  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	out.write(Input.toString(input));	  if(input    ==    null)    {    out.write(Input.toString(input));    }    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
155	[BUG]  [BUGGY]  if(input!=  null)  {  out.write(Input.toString(input));  }  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input!=  null)  {  out.write(Input.toString(input));  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(input!=  null)  {  out.write(Input.toString(input));  }	  if(input    ==    null)    {    out.write(Input.toString(input));    }    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
156	[BUG]  [BUGGY]  Input  input  =  input.toString();  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  Input  input  =  input.toString();  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	Input  input  =  input.toString();	  if(input    ==    null)    {    out.write(Input.toString(input));    }    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
157	[BUG]  [BUGGY]  out.write( ", ");  [CE]  illegal  start  of  type  [FE]        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write( ", ");  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	out.write( ", ");	  if(input    ==    null)    {    out.write(   ",   ");    }    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
158	[BUG]  [BUGGY]  out.write( "[null] ");  [CE]  illegal  start  of  type  [FE]        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write( "[null] ");  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	out.write( "[null] ");	  out.write(   "n   ");    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
159	[BUG]  [BUGGY]  out.write( "   ");  [CE]  illegal  start  of  type  [FE]          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write( "   ");  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	out.write( "   ");	  out.write(   "n   ");    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
160	[BUG]  [BUGGY]  if(input  ==  null)  {  output.write('n');  return;  }  [CE]  illegal  start  of  type  [FE]        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input  ==  null)  {  output.write('n');  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(input  ==  null)  {  output.write('n');  return;  }	          if(input    ==    null)    {    out.write('n');    return;    }    if(input    ==    null)    {    output.write('n');    return;    }    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
161	[BUG]  [BUGGY]  out.write( ",n ");  [CE]  illegal  start  of  type  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write( ",n ");  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	out.write( ",n ");	          if(input    ==    null)    {    out.write(       "n       ");    }    if(input    ==    null)    {    out.write(   ",n       ");    }    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
162	[BUG]  [BUGGY]  if(input!=  null  ||  input.length()  ==  0)  {  out.write(input);  return;  }  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input!=  null  ||  input.length()  ==  0)  {  out.write(input);  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(input!=  null  ||  input.length()  ==  0)  {  out.write(input);  return;  }	  if(input    ==    null    ||    input.length()    ==    0)    {    out.write(input);    return;    }    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
163	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()!=  0)  {  out.write(input);  return;  }  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input  ==  null  ||  input.length()!=  0)  {  out.write(input);  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(input  ==  null  ||  input.length()!=  0)  {  out.write(input);  return;  }	  if(input    ==    null    ||    input.length()    ==    0)    {    out.write(input);    return;    }    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
164	[BUG]  [BUGGY]  out.write(Input.toString(input.substring(0,  input.length()));  [CE]  ')'  expected  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write(Input.toString(input.substring(0,  input.length()));  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	out.write(Input.toString(input.substring(0,  input.length()));	  out.write(input.substring(0,    input.length()    -    1));    	non-compiled	[CE]  ')'  expected	104	None	replace
165	[BUG]  [BUGGY]  out.write(input.substring(0,  input.length()  +  1));  [CE]  illegal  start  of  type  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write(input.substring(0,  input.length()  +  1));  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	out.write(input.substring(0,  input.length()  +  1));	  out.write(input.substring(0,    input.length()    -    1));    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
166	[BUG]  [BUGGY]  OutputStream  input  =  new  BufferedOutputStream(input.readLine());  [CE]  illegal  start  of  type  [FE]        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  OutputStream  input  =  new  BufferedOutputStream(input.readLine());  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	OutputStream  input  =  new  BufferedOutputStream(input.readLine());	  OutputStream    input    =    new    BufferedOutputStream(out.readLine());    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
167	[BUG]  [BUGGY]  OutputStream  input  =  new  BufferedOutputStream(out.readLine(),  out.length());  [CE]  illegal  start  of  type  [FE]          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  OutputStream  input  =  new  BufferedOutputStream(out.readLine(),  out.length());  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	OutputStream  input  =  new  BufferedOutputStream(out.readLine(),  out.length());	  OutputStream    input    =    new    BufferedOutputStream(out.readLine());    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
168	[BUG]  [BUGGY]  OutputStream  input  =  new  BufferedOutputStream(out.readLine(),  output);  [CE]  illegal  start  of  type  [FE]            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  OutputStream  input  =  new  BufferedOutputStream(out.readLine(),  output);  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	OutputStream  input  =  new  BufferedOutputStream(out.readLine(),  output);	  OutputStream    input    =    new    BufferedOutputStream(out.readLine());    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
169	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(1));  out.write(input.charAt(0));  out.write(input.charAt(1));  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	                out.write(input.charAt(0));        out.write(input.charAt(1));    out.write(input.charAt(0));  out.write(input.charAt(1));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	20	19	add
170	[BUG]  [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(1));  out.write(input.charAt(0));  out.write(input.charAt(1));  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(1));  out.write(input.charAt(0));  out.write(input.charAt(1));  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	                out.write(input.charAt(0));        out.write(input.charAt(1));    out.write(input.charAt(0));  out.write(input.charAt(1));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	20	19	add
171	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(1));  out.write(input.charAt(1));  out.write(input.charAt(1));  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	                out.write(input.charAt(0));        out.write(input.charAt(1));    out.write(input.charAt(1));  out.write(input.charAt(1));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	20	19	add
172	[BUG]  [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(1));  out.write(input.charAt(1));  out.write(input.charAt(1));  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(1));  out.write(input.charAt(1));  out.write(input.charAt(1));  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	                out.write(input.charAt(0));        out.write(input.charAt(1));    out.write(input.charAt(1));  out.write(input.charAt(1));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	20	19	add
173	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(1));  out.write(input.charAt(0));  out.write(input.charAt(2));  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	                out.write(input.charAt(0));        out.write(input.charAt(1));    out.write(input.charAt(0));  out.write(input.charAt(2));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	20	19	add
174	[BUG]  [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(1));  out.write(input.charAt(0));  out.write(input.charAt(2));  [FE]  StringIndexOutOfBoundsException  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(1));  out.write(input.charAt(0));  out.write(input.charAt(2));  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	                out.write(input.charAt(0));        out.write(input.charAt(1));    out.write(input.charAt(0));  out.write(input.charAt(2));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	20	19	add
175	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(1));  out.write(input.charAt(1));  out.write(input.charAt(2));  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	                out.write(input.charAt(0));        out.write(input.charAt(1));    out.write(input.charAt(1));  out.write(input.charAt(2));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	20	19	add
176	[BUG]  [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(1));  out.write(input.charAt(1));  out.write(input.charAt(2));  [FE]  StringIndexOutOfBoundsException  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(1));  out.write(input.charAt(1));  out.write(input.charAt(2));  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	                out.write(input.charAt(0));        out.write(input.charAt(1));    out.write(input.charAt(1));  out.write(input.charAt(2));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	20	19	add
177	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]            StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(1));  out.write(input.charAt(0));  out.write(input.charAt(3));  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	                out.write(input.charAt(0));        out.write(input.charAt(1));    out.write(input.charAt(0));  out.write(input.charAt(3));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	20	19	add
178	[BUG]  [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(1));  out.write(input.charAt(0));  out.write(input.charAt(3));  [FE]  StringIndexOutOfBoundsException  [FE]            StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(1));  out.write(input.charAt(0));  out.write(input.charAt(3));  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	                out.write(input.charAt(0));        out.write(input.charAt(1));    out.write(input.charAt(0));  out.write(input.charAt(3));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	20	19	add
179	[BUG]  [BUGGY]  out.write(input.charAt(0),  input.length()  -  1);  [CE]  illegal  start  of  type  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write(input.charAt(0),  input.length()  -  1);  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	out.write(input.charAt(0),  input.length()  -  1);	  out.write(input.charAt(0),    input.length());    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
180	[BUG]  [BUGGY]  out.write(input.charAt(0),  input.length()  +  1);  [CE]  illegal  start  of  type  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write(input.charAt(0),  input.length()  +  1);  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	out.write(input.charAt(0),  input.length()  +  1);	  out.write(input.charAt(0),    input.length());    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
181	[BUG]  [BUGGY]  out.write(input.charAt(0),  input.length()  -  2);  [CE]  illegal  start  of  type  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write(input.charAt(0),  input.length()  -  2);  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	out.write(input.charAt(0),  input.length()  -  2);	  out.write(input.charAt(0),    input.length());    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
182	[BUG]  [BUGGY]          int    inputLength    =    input.length();    int  outputLength  =  input.length();  int  inputLength  =  input.length();  int  outputLength  =  input.length();  [CE]  variable  inputLength  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]    NullPointerException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          int    inputLength    =    input.length();    int  outputLength  =  input.length();  int  inputLength  =  input.length();  int  outputLength  =  input.length();  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	                int        inputLength        =        input.length();        int    outputLength    =    input.length();    int  inputLength  =  input.length();  int  outputLength  =  input.length();	  	non-compiled	[CE]  variable  inputLength  is  already  defined  in  method  translate(CharSequence,Writer)	62	None	add
183	[BUG]  [BUGGY]          int    inputLength    =    input.length();    int  outputLength  =  input.length();  int  outputLength  =  input.length();  int  outputLength  =  input.length();  [CE]  variable  outputLength  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]      NullPointerException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          int    inputLength    =    input.length();    int  outputLength  =  input.length();  int  outputLength  =  input.length();  int  outputLength  =  input.length();  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	                int        inputLength        =        input.length();        int    outputLength    =    input.length();    int  outputLength  =  input.length();  int  outputLength  =  input.length();	  	non-compiled	[CE]  variable  outputLength  is  already  defined  in  method  translate(CharSequence,Writer)	62	None	add
184	[BUG]  [BUGGY]          int    inputLength    =    input.length();    int  outputLength  =  input.length();  Integer  inputLength  =  input.length();  int  outputLength  =  input.length();  [CE]  variable  inputLength  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]        NullPointerException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          int    inputLength    =    input.length();    int  outputLength  =  input.length();  Integer  inputLength  =  input.length();  int  outputLength  =  input.length();  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	                int        inputLength        =        input.length();        int    outputLength    =    input.length();    Integer  inputLength  =  input.length();  int  outputLength  =  input.length();	  	non-compiled	[CE]  variable  inputLength  is  already  defined  in  method  translate(CharSequence,Writer)	62	None	add
185	[BUG]  [BUGGY]          int    inputLength    =    input.length();    int  outputLength  =  input.length();  int  inputLength  =  outputLength;  int  outputLength  =  input.length();  [CE]  variable  inputLength  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]          NullPointerException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          int    inputLength    =    input.length();    int  outputLength  =  input.length();  int  inputLength  =  outputLength;  int  outputLength  =  input.length();  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	                int        inputLength        =        input.length();        int    outputLength    =    input.length();    int  inputLength  =  outputLength;  int  outputLength  =  input.length();	  	non-compiled	[CE]  variable  inputLength  is  already  defined  in  method  translate(CharSequence,Writer)	62	None	add
186	[BUG]  [BUGGY]  char  input  =  output.length();  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  char  input  =  output.length();  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	char  input  =  output.length();	  int    input    =    output.length();    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
187	[BUG]  [BUGGY]  if(input.length()  ==  0)  {  out.write(input.charAt(0));  out.write(input.charAt(2));  }  [CE]  illegal  start  of  type  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input.length()  ==  0)  {  out.write(input.charAt(0));  out.write(input.charAt(2));  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(input.length()  ==  0)  {  out.write(input.charAt(0));  out.write(input.charAt(2));  }	          out.write(input.charAt(0));    out.write(input.charAt(2));    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
188	[BUG]  [BUGGY]  if(input.length()  >  0)  {  out.write(input.charAt(0));  out.write(input.charAt(2));  }  [CE]  illegal  start  of  type  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input.length()  >  0)  {  out.write(input.charAt(0));  out.write(input.charAt(2));  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(input.length()  >  0)  {  out.write(input.charAt(0));  out.write(input.charAt(2));  }	          out.write(input.charAt(0));    out.write(input.charAt(2));    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
189	[BUG]  [BUGGY]  if(input.length()  ==  0)  {  out.write(input.charAt(0));  out.write(input.charAt(2));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input.length()  ==  0)  {  out.write(input.charAt(0));  out.write(input.charAt(2));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(input.length()  ==  0)  {  out.write(input.charAt(0));  out.write(input.charAt(2));  }  else  {  throw  new  IllegalArgumentException( " ");  }	          out.write(input.charAt(0));    out.write(input.charAt(2));    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
190	[BUG]  [BUGGY]  if(input!=  null)  {  out.write(input,  0,  input.length());  return;  }  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input!=  null)  {  out.write(input,  0,  input.length());  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(input!=  null)  {  out.write(input,  0,  input.length());  return;  }	  if(input    ==    null)    {    out.write(input,    0,    input.length());    return;    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
191	[BUG]  [BUGGY]  if(input!=  null)  {  out.write(input,  0,  input.length());  }  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input!=  null)  {  out.write(input,  0,  input.length());  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(input!=  null)  {  out.write(input,  0,  input.length());  }	  if(input    ==    null)    {    out.write(input,    0,    input.length());    return;    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
192	[BUG]  [BUGGY]  out.write( ".s.IFJDCS ".charAt(0));  [CE]  illegal  start  of  type  [FE]        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write( ".s.IFJDCS ".charAt(0));  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	out.write( ".s.IFJDCS ".charAt(0));	  out.write(   "null   ");    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
193	[BUG]  [BUGGY]  OutputFactory  outputFactory  =  getOutputFactory(out);  [CE]  illegal  start  of  type  [FE]        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  OutputFactory  outputFactory  =  getOutputFactory(out);  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	OutputFactory  outputFactory  =  getOutputFactory(out);	  OutputFactory    outputFactory    =    getOutputFactory();    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
194	[BUG]  [BUGGY]  OutputFactory  outputFactory  =  getOutputFactoryInput();  [CE]  illegal  start  of  type  [FE]          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  OutputFactory  outputFactory  =  getOutputFactoryInput();  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	OutputFactory  outputFactory  =  getOutputFactoryInput();	  OutputFactory    outputFactory    =    getOutputFactory();    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
195	[BUG]  [BUGGY]  OutputFactory  outputFactory  =  getOutputFactory().outputFor(input);  [CE]  illegal  start  of  type  [FE]            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  OutputFactory  outputFactory  =  getOutputFactory().outputFor(input);  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	OutputFactory  outputFactory  =  getOutputFactory().outputFor(input);	  OutputFactory    outputFactory    =    getOutputFactory();    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
196	[BUG]  [BUGGY]  out.write( "None ");  [CE]  illegal  start  of  type  [FE]            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write( "None ");  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	out.write( "None ");	  if(input    ==    null)    {    out.write(   "None   ");    }    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
197	[BUG]  [BUGGY]  out.write(input,  out);  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write(input,  out);  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	out.write(input,  out);	  if(input    ==    null)    {    out.write(input,    out);    return;    }    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
198	[BUG]  [BUGGY]  if(input!=  null)  {  out.write(input,  out);  return;  }  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input!=  null)  {  out.write(input,  out);  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(input!=  null)  {  out.write(input,  out);  return;  }	  if(input    ==    null)    {    out.write(input,    out);    return;    }    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
199	[BUG]  [BUGGY]  out.write(input,  out);  return;  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write(input,  out);  return;  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	out.write(input,  out);  return;	  if(input    ==    null)    {    out.write(input,    out);    return;    }    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
200	[BUG]  [BUGGY]  OutputStream  input  =  new  BufferedOutputStream(input);  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  OutputStream  input  =  new  BufferedOutputStream(input);  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	OutputStream  input  =  new  BufferedOutputStream(input);	  if(out    ==    null)    {    out.write(input);    }    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
201	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input  ==  null  ||  input.length()!=  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()!=  0)  {  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	                if(input        ==        null        ||        input.length()        ==        0)        {        return;        }        if(input    ==    null    ||    input.length()!=    0)    {    return;    }    if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()!=  0)  {  return;  }	  	compilable	  [FE]  AssertionFailedError  	74	19	add
202	[BUG]  [BUGGY]          if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input  ==  null  ||  input.length()!=  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()!=  0)  {  return;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input  ==  null  ||  input.length()!=  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()!=  0)  {  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	                if(input        ==        null        ||        input.length()        ==        0)        {        return;        }        if(input    ==    null    ||    input.length()!=    0)    {    return;    }    if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()!=  0)  {  return;  }	  	compilable	  [FE]  AssertionFailedError  	74	19	add
203	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input  ==  null  ||  input.length()!=  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()!=  0)  {  return;  }  if(input  ==  null  ||  input.length()!=  0)  {  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	                if(input        ==        null        ||        input.length()        ==        0)        {        return;        }        if(input    ==    null    ||    input.length()!=    0)    {    return;    }    if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()!=  0)  {  return;  }  if(input  ==  null  ||  input.length()!=  0)  {  return;  }	  	compilable	  [FE]  AssertionFailedError  	74	19	add
204	[BUG]  [BUGGY]          if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input  ==  null  ||  input.length()!=  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()!=  0)  {  return;  }  if(input  ==  null  ||  input.length()!=  0)  {  return;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input  ==  null  ||  input.length()!=  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()!=  0)  {  return;  }  if(input  ==  null  ||  input.length()!=  0)  {  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	                if(input        ==        null        ||        input.length()        ==        0)        {        return;        }        if(input    ==    null    ||    input.length()!=    0)    {    return;    }    if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()!=  0)  {  return;  }  if(input  ==  null  ||  input.length()!=  0)  {  return;  }	  	compilable	  [FE]  AssertionFailedError  	74	19	add
205	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input  ==  null  ||  input.length()!=  0)  {  return;  }  if(input  ==  null  ||  input.length()!=  0)  {  return;  }  if(input  ==  null  ||  input.length()!=  0)  {  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	                if(input        ==        null        ||        input.length()        ==        0)        {        return;        }        if(input    ==    null    ||    input.length()!=    0)    {    return;    }    if(input  ==  null  ||  input.length()!=  0)  {  return;  }  if(input  ==  null  ||  input.length()!=  0)  {  return;  }	  	compilable	  [FE]  AssertionFailedError  	74	19	add
206	[BUG]  [BUGGY]          if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input  ==  null  ||  input.length()!=  0)  {  return;  }  if(input  ==  null  ||  input.length()!=  0)  {  return;  }  if(input  ==  null  ||  input.length()!=  0)  {  return;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input  ==  null  ||  input.length()!=  0)  {  return;  }  if(input  ==  null  ||  input.length()!=  0)  {  return;  }  if(input  ==  null  ||  input.length()!=  0)  {  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	                if(input        ==        null        ||        input.length()        ==        0)        {        return;        }        if(input    ==    null    ||    input.length()!=    0)    {    return;    }    if(input  ==  null  ||  input.length()!=  0)  {  return;  }  if(input  ==  null  ||  input.length()!=  0)  {  return;  }	  	compilable	  [FE]  AssertionFailedError  	74	19	add
207	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input  ==  null  ||  input.length()!=  0)  {  return;  }  if(input  ==  null  ||  input.length()!=  0)  {  return;  }  if(input  ==  null  ||  input.length()!=  0)  {  return;  }  if(input  ==  null  ||  input.length()!=  0)  {  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	                if(input        ==        null        ||        input.length()        ==        0)        {        return;        }        if(input    ==    null    ||    input.length()!=    0)    {    return;    }    if(input  ==  null  ||  input.length()!=  0)  {  return;  }  if(input  ==  null  ||  input.length()!=  0)  {  return;  }  if(input  ==  null  ||  input.length()!=  0)  {  return;  }	  	compilable	  [FE]  AssertionFailedError  	74	19	add
208	[BUG]  [BUGGY]          if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input  ==  null  ||  input.length()!=  0)  {  return;  }  if(input  ==  null  ||  input.length()!=  0)  {  return;  }  if(input  ==  null  ||  input.length()!=  0)  {  return;  }  if(input  ==  null  ||  input.length()!=  0)  {  return;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input  ==  null  ||  input.length()!=  0)  {  return;  }  if(input  ==  null  ||  input.length()!=  0)  {  return;  }  if(input  ==  null  ||  input.length()!=  0)  {  return;  }  if(input  ==  null  ||  input.length()!=  0)  {  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	                if(input        ==        null        ||        input.length()        ==        0)        {        return;        }        if(input    ==    null    ||    input.length()!=    0)    {    return;    }    if(input  ==  null  ||  input.length()!=  0)  {  return;  }  if(input  ==  null  ||  input.length()!=  0)  {  return;  }  if(input  ==  null  ||  input.length()!=  0)  {  return;  }	  	compilable	  [FE]  AssertionFailedError  	74	19	add
209	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input  ==  null  ||  input.length()!=  0)  {  return;  }  if(input  ==  null  ||  input.length()  >=  0)  {  return;  }  if(input  ==  null  ||  input.length()!=  0)  {  return;  }  if(input  ==  null  ||  input.length()!=  0)  {  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	                if(input        ==        null        ||        input.length()        ==        0)        {        return;        }        if(input    ==    null    ||    input.length()!=    0)    {    return;    }    if(input  ==  null  ||  input.length()  >=  0)  {  return;  }  if(input  ==  null  ||  input.length()!=  0)  {  return;  }  if(input  ==  null  ||  input.length()!=  0)  {  return;  }	  	compilable	  [FE]  AssertionFailedError  	74	19	add
210	[BUG]  [BUGGY]          if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input  ==  null  ||  input.length()!=  0)  {  return;  }  if(input  ==  null  ||  input.length()  >=  0)  {  return;  }  if(input  ==  null  ||  input.length()!=  0)  {  return;  }  if(input  ==  null  ||  input.length()!=  0)  {  return;  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input  ==  null  ||  input.length()!=  0)  {  return;  }  if(input  ==  null  ||  input.length()  >=  0)  {  return;  }  if(input  ==  null  ||  input.length()!=  0)  {  return;  }  if(input  ==  null  ||  input.length()!=  0)  {  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	                if(input        ==        null        ||        input.length()        ==        0)        {        return;        }        if(input    ==    null    ||    input.length()!=    0)    {    return;    }    if(input  ==  null  ||  input.length()  >=  0)  {  return;  }  if(input  ==  null  ||  input.length()!=  0)  {  return;  }  if(input  ==  null  ||  input.length()!=  0)  {  return;  }	  	compilable	  [FE]  AssertionFailedError  	74	19	add
211	[BUG]  [BUGGY]  if(input!=  null  ||  input.length()  ==  0)  {  if(input!=  null  ||  input.length()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input!=  null  ||  input.length()  ==  0)  {  if(input!=  null  ||  input.length()  ==  0)  {  [BUGGY]      return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(input!=    null    ||    input.length()    ==    0)    {    if(input!=  null  ||  input.length()  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	30	None	add
212	[BUG]  [BUGGY]  if(input!=  null  ||  input.length()  ==  0)  {  if(input  ==  null  ||  input.length()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input!=  null  ||  input.length()  ==  0)  {  if(input  ==  null  ||  input.length()  ==  0)  {  [BUGGY]      return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(input!=    null    ||    input.length()    ==    0)    {    if(input  ==  null  ||  input.length()  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	30	None	add
213	[BUG]  [BUGGY]  if(input!=  null  ||  input.length()  ==  0)  {  If(input!=  null  ||  input.length()  ==  0)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input!=  null  ||  input.length()  ==  0)  {  If(input!=  null  ||  input.length()  ==  0)  {  [BUGGY]      return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(input!=    null    ||    input.length()    ==    0)    {    If(input!=  null  ||  input.length()  ==  0)  {	  	non-compiled	[CE]  ';'  expected	30	None	add
214	[BUG]  [BUGGY]  if(input!=  null  ||  input.length()  ==  0)  {  if(input  >=  null  ||  input.length()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input!=  null  ||  input.length()  ==  0)  {  if(input  >=  null  ||  input.length()  ==  0)  {  [BUGGY]      return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(input!=    null    ||    input.length()    ==    0)    {    if(input  >=  null  ||  input.length()  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	30	None	add
215	[BUG]  [BUGGY]  String  inputLength  =  input.length();  [CE]  illegal  start  of  type  [FE]        NullPointerException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  String  inputLength  =  input.length();  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	String  inputLength  =  input.length();	  char    inputLength    =    input.length();    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
216	[BUG]  [BUGGY]  Char  inputLength  =  input.length();  [CE]  illegal  start  of  type  [FE]          NullPointerException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  Char  inputLength  =  input.length();  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	Char  inputLength  =  input.length();	  char    inputLength    =    input.length();    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
217	[BUG]  [BUGGY]  Character  inputLength  =  input.length();  [CE]  illegal  start  of  type  [FE]            NullPointerException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  Character  inputLength  =  input.length();  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	Character  inputLength  =  input.length();	  char    inputLength    =    input.length();    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
218	[BUG]  [BUGGY]  char[]  input  =  input.toChars(pos);  [CE]  illegal  start  of  type  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  char[]  input  =  input.toChars(pos);  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	char[]  input  =  input.toChars(pos);	          out.write(input.charAt(0));    char[]    input    =    input.toChars(pos);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
219	[BUG]  [BUGGY]  out.write(input.charAt(0));  char[]  input  =  input.toChars(pos,  out);  [CE]  illegal  start  of  type  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write(input.charAt(0));  char[]  input  =  input.toChars(pos,  out);  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	out.write(input.charAt(0));  char[]  input  =  input.toChars(pos,  out);	          out.write(input.charAt(0));    char[]    input    =    input.toChars(pos);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
220	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    }    if(input!=  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	                if(input        ==        null)        {        out.write('n');        }        if(input!=    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	52	19	add
221	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write('n');    }    if(input!=  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    }    if(input!=  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	                if(input        ==        null)        {        out.write('n');        }        if(input!=    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	52	19	add
222	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    }    if(input!=  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	                if(input        ==        null)        {        out.write('n');        }        if(input!=    null)    {    out.write('n');    }    if(input!=  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	52	19	add
223	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write('n');    }    if(input!=  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    }    if(input!=  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	                if(input        ==        null)        {        out.write('n');        }        if(input!=    null)    {    out.write('n');    }    if(input!=  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	52	19	add
224	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write('n');    }    if(input!=  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  if(input  >=  null)  {  out.write('n');  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]        ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    }    if(input!=  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  if(input  >=  null)  {  out.write('n');  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	                if(input        ==        null)        {        out.write('n');        }        if(input!=    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  }  if(input  >=  null)  {  out.write('n');  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	52	None	add
225	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write('n');    }    if(input!=  null)  {  out.write('n');  }  If(input  ==  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    }    if(input!=  null)  {  out.write('n');  }  If(input  ==  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	                if(input        ==        null)        {        out.write('n');        }        if(input!=    null)    {    out.write('n');    }    If(input  ==  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }	  	non-compiled	[CE]  ';'  expected	52	None	add
226	[BUG]  [BUGGY]  if(input.length()  ==  0)  {  out.write(input.charAt(0));  out.write(input.charAt(1));  }  [CE]  illegal  start  of  type  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input.length()  ==  0)  {  out.write(input.charAt(0));  out.write(input.charAt(1));  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(input.length()  ==  0)  {  out.write(input.charAt(0));  out.write(input.charAt(1));  }	          out.write(input.charAt(0));    out.write(input.charAt(1));    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
227	[BUG]  [BUGGY]  if(input.length()  ==  1)  {  out.write(input.charAt(0));  out.write(input.charAt(1));  }  [CE]  illegal  start  of  type  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input.length()  ==  1)  {  out.write(input.charAt(0));  out.write(input.charAt(1));  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(input.length()  ==  1)  {  out.write(input.charAt(0));  out.write(input.charAt(1));  }	          out.write(input.charAt(0));    out.write(input.charAt(1));    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
228	[BUG]  [BUGGY]  if(input.length()  ==  1)  {  out.write(input.charAt(0));  out.write(input.charAt(1));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input.length()  ==  1)  {  out.write(input.charAt(0));  out.write(input.charAt(1));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(input.length()  ==  1)  {  out.write(input.charAt(0));  out.write(input.charAt(1));  }  else  {  throw  new  IllegalArgumentException( " ");  }	          out.write(input.charAt(0));    out.write(input.charAt(1));    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
229	[BUG]  [BUGGY]  if(input.length()  ==  0)  {  out.write('n');  return;  }  [CE]  illegal  start  of  type  [FE]        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input.length()  ==  0)  {  out.write('n');  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(input.length()  ==  0)  {  out.write('n');  return;  }	  out.write('n');    return;    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
230	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input  ==  null)  {  if(input!=  null  ||  input.length()  ==  0)  {  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	if(input  ==  null)  {  if(input!=  null  ||  input.length()  ==  0)  {  return;  }	          if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    	compilable	  [FE]  NullPointerException  	71	5	replace
231	[BUG]  [BUGGY]  if(input  ==  null)  {  if(input!=  null  ||  input.length()  ==  0)  {  return;  }  [FE]  NullPointerException  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input  ==  null)  {  if(input!=  null  ||  input.length()  ==  0)  {  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(input  ==  null)  {  if(input!=  null  ||  input.length()  ==  0)  {  return;  }	          if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    	compilable	  [FE]  NullPointerException  	71	5	replace
232	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()!=  0)  {  out.write('n');  return;  }  [CE]  illegal  start  of  type  [FE]        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input  ==  null  ||  input.length()!=  0)  {  out.write('n');  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(input  ==  null  ||  input.length()!=  0)  {  out.write('n');  return;  }	  if(input    ==    null    ||    input.length()    ==    0)    {    out.write('n');    return;    }    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
233	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()  >=  0)  {  if(input  ==  null  ||  input.length()  >=  0)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input  ==  null  ||  input.length()  >=  0)  {  if(input  ==  null  ||  input.length()  >=  0)  {  [BUGGY]      return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(input    ==    null    ||    input.length()    >=    0)    {    if(input  ==  null  ||  input.length()  >=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	28	None	add
234	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()  >=  0)  {  if(input  ==  null  ||  input.length()!=  0)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input  ==  null  ||  input.length()  >=  0)  {  if(input  ==  null  ||  input.length()!=  0)  {  [BUGGY]      return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(input    ==    null    ||    input.length()    >=    0)    {    if(input  ==  null  ||  input.length()!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	28	None	add
235	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()  >=  0)  {  if(input  ==  null  ||  input.length()  >>  0)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input  ==  null  ||  input.length()  >=  0)  {  if(input  ==  null  ||  input.length()  >>  0)  {  [BUGGY]      return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(input    ==    null    ||    input.length()    >=    0)    {    if(input  ==  null  ||  input.length()  >>  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	28	None	add
236	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()  >=  0)  {  if(input!=  null  ||  input.length()  >=  0)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input  ==  null  ||  input.length()  >=  0)  {  if(input!=  null  ||  input.length()  >=  0)  {  [BUGGY]      return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(input    ==    null    ||    input.length()    >=    0)    {    if(input!=  null  ||  input.length()  >=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	28	None	add
237	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input!=    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	                if(input!=        null)        {        out.write('n');        }        if(input    ==    null)    {    out.write('n');    }    if(input!=  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	41	19	add
238	[BUG]  [BUGGY]          if(input!=    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input!=    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	                if(input!=        null)        {        out.write('n');        }        if(input    ==    null)    {    out.write('n');    }    if(input!=  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	41	19	add
239	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input!=    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	                if(input!=        null)        {        out.write('n');        }        if(input    ==    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	41	19	add
240	[BUG]  [BUGGY]          if(input!=    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input!=    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	                if(input!=        null)        {        out.write('n');        }        if(input    ==    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	41	19	add
241	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input!=    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	                if(input!=        null)        {        out.write('n');        }        if(input    ==    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	41	19	add
242	[BUG]  [BUGGY]          if(input!=    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input!=    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	                if(input!=        null)        {        out.write('n');        }        if(input    ==    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	41	19	add
243	[BUG]  [BUGGY]          if(input!=    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  }  if(input  >=  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]          ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input!=    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  }  if(input  >=  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	                if(input!=        null)        {        out.write('n');        }        if(input    ==    null)    {    out.write('n');    }    if(input  >=  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	41	None	add
244	[BUG]  [BUGGY]  if(input.length()  ==  0)  {  out.write(input.charAt(0));  out.write(input.charAt(0));  }  [CE]  illegal  start  of  type  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input.length()  ==  0)  {  out.write(input.charAt(0));  out.write(input.charAt(0));  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(input.length()  ==  0)  {  out.write(input.charAt(0));  out.write(input.charAt(0));  }	          out.write(input.charAt(0));    out.write(input.charAt(0));    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
245	[BUG]  [BUGGY]  if(input.length()  ==  0)  {  out.write(input.charAt(0));  out.write(input.charAt(0));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input.length()  ==  0)  {  out.write(input.charAt(0));  out.write(input.charAt(0));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(input.length()  ==  0)  {  out.write(input.charAt(0));  out.write(input.charAt(0));  }  else  {  throw  new  IllegalArgumentException( " ");  }	          out.write(input.charAt(0));    out.write(input.charAt(0));    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
246	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	                if(input        ==        null)        {        out.write('n');        }        if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  ComparisonFailure  	89	3	add
247	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  return;  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	                if(input        ==        null)        {        out.write('n');        }        if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  ComparisonFailure  	89	3	add
248	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	                if(input        ==        null)        {        out.write('n');        }        if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  AssertionFailedError  	89	19	add
249	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  return;  }  [FE]  AssertionFailedError  [FE]      ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	                if(input        ==        null)        {        out.write('n');        }        if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  AssertionFailedError  	89	19	add
250	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	                if(input        ==        null)        {        out.write('n');        }        if(input    ==    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  ComparisonFailure  	89	19	add
251	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  return;  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	                if(input        ==        null)        {        out.write('n');        }        if(input    ==    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  ComparisonFailure  	89	19	add
252	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  }  if(input  ==  null)  {  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	                if(input        ==        null)        {        out.write('n');        }        if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  }  if(input  ==  null)  {  return;  }	  	compilable	  [FE]  ComparisonFailure  	89	3	add
253	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  }  if(input  ==  null)  {  return;  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  }  if(input  ==  null)  {  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	                if(input        ==        null)        {        out.write('n');        }        if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  }  if(input  ==  null)  {  return;  }	  	compilable	  [FE]  ComparisonFailure  	89	3	add
254	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    }    if(input  ==  null)  {  out.write(   ",n     ");  }  if(input  ==  null)  {  out.write( "n   ");  }  if(input  ==  null)  {  out.write( ",n ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	                if(input        ==        null)        {        out.write(       "n       ");        }        if(input    ==    null)    {    out.write(   ",n       ");    }    if(input  ==  null)  {  out.write( "n   ");  }  if(input  ==  null)  {  out.write( ",n ");  }	  	compilable	  [FE]  ComparisonFailure  	107	3	add
255	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    }    if(input  ==  null)  {  out.write(   ",n     ");  }  if(input  ==  null)  {  out.write( "n   ");  }  if(input  ==  null)  {  out.write( ",n ");  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    }    if(input  ==  null)  {  out.write(   ",n     ");  }  if(input  ==  null)  {  out.write( "n   ");  }  if(input  ==  null)  {  out.write( ",n ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	                if(input        ==        null)        {        out.write(       "n       ");        }        if(input    ==    null)    {    out.write(   ",n       ");    }    if(input  ==  null)  {  out.write( "n   ");  }  if(input  ==  null)  {  out.write( ",n ");  }	  	compilable	  [FE]  ComparisonFailure  	107	3	add
256	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input  ==  null)  {  if(out!=  null)  {  out.write('n');  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	if(input  ==  null)  {  if(out!=  null)  {  out.write('n');  return;  }	          if(input    ==    null)    {    out.write('n');    return;    }    If(input    ==    null)    {    out.write('n');    return;    }    	compilable	  [FE]  ComparisonFailure  	9	3	replace
257	[BUG]  [BUGGY]  if(input  ==  null)  {  if(out!=  null)  {  out.write('n');  return;  }  [FE]  ComparisonFailure  [FE]            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input  ==  null)  {  if(out!=  null)  {  out.write('n');  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(input  ==  null)  {  if(out!=  null)  {  out.write('n');  return;  }	          if(input    ==    null)    {    out.write('n');    return;    }    If(input    ==    null)    {    out.write('n');    return;    }    	compilable	  [FE]  ComparisonFailure  	9	3	replace
258	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	                if(input        ==        null        ||        input.length()        ==        0)        {        return;        }        if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }	  	compilable	  [FE]  ComparisonFailure  	70	1	add
259	[BUG]  [BUGGY]          if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	                if(input        ==        null        ||        input.length()        ==        0)        {        return;        }        if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }	  	compilable	  [FE]  ComparisonFailure  	70	1	add
260	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	                if(input        ==        null        ||        input.length()        ==        0)        {        return;        }        if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }	  	compilable	  [FE]  ComparisonFailure  	70	1	add
261	[BUG]  [BUGGY]          if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	                if(input        ==        null        ||        input.length()        ==        0)        {        return;        }        if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }	  	compilable	  [FE]  ComparisonFailure  	70	1	add
262	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input!=  null  ||  input.length()  ==  0)  {  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	                if(input        ==        null        ||        input.length()        ==        0)        {        return;        }        if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input!=  null  ||  input.length()  ==  0)  {  return;  }	  	compilable	  [FE]  AssertionFailedError  	70	19	add
263	[BUG]  [BUGGY]          if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input!=  null  ||  input.length()  ==  0)  {  return;  }  [FE]  AssertionFailedError  [FE]        ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input!=  null  ||  input.length()  ==  0)  {  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	                if(input        ==        null        ||        input.length()        ==        0)        {        return;        }        if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input!=  null  ||  input.length()  ==  0)  {  return;  }	  	compilable	  [FE]  AssertionFailedError  	70	19	add
264	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()!=  0)  {  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	                if(input        ==        null        ||        input.length()        ==        0)        {        return;        }        if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()!=  0)  {  return;  }	  	compilable	  [FE]  AssertionFailedError  	70	19	add
265	[BUG]  [BUGGY]          if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()!=  0)  {  return;  }  [FE]  AssertionFailedError  [FE]          ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()!=  0)  {  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	                if(input        ==        null        ||        input.length()        ==        0)        {        return;        }        if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()!=  0)  {  return;  }	  	compilable	  [FE]  AssertionFailedError  	70	19	add
266	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input!=  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	                if(input        ==        null        ||        input.length()        ==        0)        {        return;        }        if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input!=  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }	  	compilable	  [FE]  AssertionFailedError  	70	19	add
267	[BUG]  [BUGGY]          if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input!=  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  [FE]  AssertionFailedError  [FE]            ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input!=  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	                if(input        ==        null        ||        input.length()        ==        0)        {        return;        }        if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input!=  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }	  	compilable	  [FE]  AssertionFailedError  	70	19	add
268	[BUG]  [BUGGY]  out.write(Integer.toString(input.charAt(0)),  input.length());  [CE]  illegal  start  of  type  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write(Integer.toString(input.charAt(0)),  input.length());  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	out.write(Integer.toString(input.charAt(0)),  input.length());	  out.write(Integer.toString(input.charAt(0)));    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
269	[BUG]  [BUGGY]  out.write(Integer.toString(input.charAt(0)),  pos);  [CE]  illegal  start  of  type  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write(Integer.toString(input.charAt(0)),  pos);  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	out.write(Integer.toString(input.charAt(0)),  pos);	  out.write(Integer.toString(input.charAt(0)));    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
270	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()  >=  0)  {  If(input  ==  null  ||  input.length()  >=  0)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input  ==  null  ||  input.length()  >=  0)  {  If(input  ==  null  ||  input.length()  >=  0)  {  [BUGGY]      return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(input    ==    null    ||    input.length()    >=    0)    {    If(input  ==  null  ||  input.length()  >=  0)  {	  	non-compiled	[CE]  ';'  expected	28	None	add
271	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input!=  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	                if(input        ==        null        ||        input.length()        ==        0)        {        return;        }        if(input!=    null    ||    input.length()    ==    0)    {    return;    }    if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }	  	compilable	  [FE]  AssertionFailedError  	72	19	add
272	[BUG]  [BUGGY]          if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input!=  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input!=  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	                if(input        ==        null        ||        input.length()        ==        0)        {        return;        }        if(input!=    null    ||    input.length()    ==    0)    {    return;    }    if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }	  	compilable	  [FE]  AssertionFailedError  	72	19	add
273	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input!=  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()!=  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	                if(input        ==        null        ||        input.length()        ==        0)        {        return;        }        if(input!=    null    ||    input.length()    ==    0)    {    return;    }    if(input  ==  null  ||  input.length()!=  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }	  	compilable	  [FE]  AssertionFailedError  	72	19	add
274	[BUG]  [BUGGY]          if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input!=  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()!=  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input!=  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()!=  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	                if(input        ==        null        ||        input.length()        ==        0)        {        return;        }        if(input!=    null    ||    input.length()    ==    0)    {    return;    }    if(input  ==  null  ||  input.length()!=  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }	  	compilable	  [FE]  AssertionFailedError  	72	19	add
275	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input!=  null  ||  input.length()  ==  0)  {  return;  }  if(input!=  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	                if(input        ==        null        ||        input.length()        ==        0)        {        return;        }        if(input!=    null    ||    input.length()    ==    0)    {    return;    }    if(input!=  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }	  	compilable	  [FE]  AssertionFailedError  	72	19	add
276	[BUG]  [BUGGY]          if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input!=  null  ||  input.length()  ==  0)  {  return;  }  if(input!=  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input!=  null  ||  input.length()  ==  0)  {  return;  }  if(input!=  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	                if(input        ==        null        ||        input.length()        ==        0)        {        return;        }        if(input!=    null    ||    input.length()    ==    0)    {    return;    }    if(input!=  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }	  	compilable	  [FE]  AssertionFailedError  	72	19	add
277	[BUG]  [BUGGY]          if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input!=  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input!=  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	                if(input        ==        null        ||        input.length()        ==        0)        {        return;        }        if(input!=    null    ||    input.length()    ==    0)    {    return;    }    if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;	  	non-compiled	[CE]  illegal  start  of  expression	72	None	add
278	[BUG]  [BUGGY]  OutputFactory  outputFactory  =  input.getOutputFactory();  [CE]  illegal  start  of  type  [FE]            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  OutputFactory  outputFactory  =  input.getOutputFactory();  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	OutputFactory  outputFactory  =  input.getOutputFactory();	          if(input!=    null)    {    out.write('n');    }    if(input    >=    null)    {    out.write('n');    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
279	[BUG]  [BUGGY]  if(input  ==  null)  {  out.write(input,  0,  input.length());  }  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input  ==  null)  {  out.write(input,  0,  input.length());  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(input  ==  null)  {  out.write(input,  0,  input.length());  }	  if(input    ==    null)    {    out.write(input,    0,    input.length());    return;    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
280	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    }    if(input!=  null)  {  out.write(   "n     ");  }  if(input  ==  null)  {  out.write( "n ");  }  if(input!=  null)  {  out.write( "n   ");  }  if(input!=  null)  {  out.write( "n ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	                if(input        ==        null)        {        out.write(       "n       ");        }        if(input!=    null)    {    out.write(   "n       ");    }    if(input  ==  null)  {  out.write( "n ");  }  if(input!=  null)  {  out.write( "n   ");  }  if(input!=  null)  {  out.write( "n ");  }	  	compilable	  [FE]  ComparisonFailure  	34	19	add
281	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    }    if(input!=  null)  {  out.write(   "n     ");  }  if(input  ==  null)  {  out.write( "n ");  }  if(input!=  null)  {  out.write( "n   ");  }  if(input!=  null)  {  out.write( "n ");  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    }    if(input!=  null)  {  out.write(   "n     ");  }  if(input  ==  null)  {  out.write( "n ");  }  if(input!=  null)  {  out.write( "n   ");  }  if(input!=  null)  {  out.write( "n ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	                if(input        ==        null)        {        out.write(       "n       ");        }        if(input!=    null)    {    out.write(   "n       ");    }    if(input  ==  null)  {  out.write( "n ");  }  if(input!=  null)  {  out.write( "n   ");  }  if(input!=  null)  {  out.write( "n ");  }	  	compilable	  [FE]  ComparisonFailure  	34	19	add
282	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input  ==  null)  {  if(input!=  null)  {  out.write('n');  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	if(input  ==  null)  {  if(input!=  null)  {  out.write('n');  }	          if(input!=    null)    {    out.write('n');    }    if(input    ==    null)    {    out.write('n');    }    	compilable	  [FE]  ComparisonFailure  	42	1	replace
283	[BUG]  [BUGGY]  if(input  ==  null)  {  if(input!=  null)  {  out.write('n');  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input  ==  null)  {  if(input!=  null)  {  out.write('n');  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(input  ==  null)  {  if(input!=  null)  {  out.write('n');  }	          if(input!=    null)    {    out.write('n');    }    if(input    ==    null)    {    out.write('n');    }    	compilable	  [FE]  ComparisonFailure  	42	1	replace
284	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input  ==  null)  {  if(out!=  null)  {  out.write('n');  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	if(input  ==  null)  {  if(out!=  null)  {  out.write('n');  }	          if(input!=    null)    {    out.write('n');    }    if(input    ==    null)    {    out.write('n');    }    	compilable	  [FE]  ComparisonFailure  	42	3	replace
285	[BUG]  [BUGGY]  if(input  ==  null)  {  if(out!=  null)  {  out.write('n');  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input  ==  null)  {  if(out!=  null)  {  out.write('n');  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(input  ==  null)  {  if(out!=  null)  {  out.write('n');  }	          if(input!=    null)    {    out.write('n');    }    if(input    ==    null)    {    out.write('n');    }    	compilable	  [FE]  ComparisonFailure  	42	3	replace
286	[BUG]  [BUGGY]  out.write( ".s.IFJDCS ".toString());  [CE]  illegal  start  of  type  [FE]          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write( ".s.IFJDCS ".toString());  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	out.write( ".s.IFJDCS ".toString());	  if(input    ==    null)    {    out.write(   "null   ");    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
287	[BUG]  [BUGGY]  OutputStream  out  =  input.getOutputStream();  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  OutputStream  out  =  input.getOutputStream();  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	OutputStream  out  =  input.getOutputStream();	  if(input    ==    null)    {    out.write(out);    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
288	[BUG]  [BUGGY]  char  inputLength  =  input.length();  Int  int  inputLength  =  input.length();  [CE]  not  a  statement  [FE]        NullPointerException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  char  inputLength  =  input.length();  Int  int  inputLength  =  input.length();  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	char  inputLength  =  input.length();  Int  int  inputLength  =  input.length();	          int    inputLength    =    input.length();    Int    int    inputLength    =    input.length();    	non-compiled	[CE]  not  a  statement	101	None	replace
289	[BUG]  [BUGGY]  char  inputLength  =  input.length();  Integer  inputLength  =  input.length();  [CE]  illegal  start  of  type  [FE]          NullPointerException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  char  inputLength  =  input.length();  Integer  inputLength  =  input.length();  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	char  inputLength  =  input.length();  Integer  inputLength  =  input.length();	          int    inputLength    =    input.length();    Int    int    inputLength    =    input.length();    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
290	[BUG]  [BUGGY]  if(out!=  null)  {  out.write(input,  out);  return;  }  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(out!=  null)  {  out.write(input,  out);  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(out!=  null)  {  out.write(input,  out);  return;  }	  if(input    ==    null)    {    out.write(input,    out);    return;    }    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
291	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    }    if(input  ==  null)  {  out.write(   "n     ");  }  if(input  ==  null)  {  out.write( "n ");  }  if(input  ==  null)  {  out.write( "n   ");  }  if(input  ==  null)  {  out.write( "n ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	                if(input        ==        null)        {        out.write(       "n       ");        }        if(input    ==    null)    {    out.write(   "n       ");    }    if(input  ==  null)  {  out.write( "n ");  }  if(input  ==  null)  {  out.write( "n   ");  }  if(input  ==  null)  {  out.write( "n ");  }	  	compilable	  [FE]  ComparisonFailure  	32	3	add
292	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    }    if(input  ==  null)  {  out.write(   "n     ");  }  if(input  ==  null)  {  out.write( "n ");  }  if(input  ==  null)  {  out.write( "n   ");  }  if(input  ==  null)  {  out.write( "n ");  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    }    if(input  ==  null)  {  out.write(   "n     ");  }  if(input  ==  null)  {  out.write( "n ");  }  if(input  ==  null)  {  out.write( "n   ");  }  if(input  ==  null)  {  out.write( "n ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	                if(input        ==        null)        {        out.write(       "n       ");        }        if(input    ==    null)    {    out.write(   "n       ");    }    if(input  ==  null)  {  out.write( "n ");  }  if(input  ==  null)  {  out.write( "n   ");  }  if(input  ==  null)  {  out.write( "n ");  }	  	compilable	  [FE]  ComparisonFailure  	32	3	add
293	[BUG]  [BUGGY]  int  inputLength  =  output.length();  [CE]  illegal  start  of  type  [FE]        NullPointerException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  int  inputLength  =  output.length();  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	int  inputLength  =  output.length();	  int    inputLength    =    input.length()    -    1;    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
294	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  return;  }  if(out  ==  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	                if(input        ==        null)        {        out.write('n');        }        if(input    ==    null)    {    out.write('n');    return;    }    if(out  ==  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  ComparisonFailure  	89	3	add
295	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  return;  }  if(out  ==  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  return;  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  return;  }  if(out  ==  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	                if(input        ==        null)        {        out.write('n');        }        if(input    ==    null)    {    out.write('n');    return;    }    if(out  ==  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  ComparisonFailure  	89	3	add
296	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(out!=  null)  {  if(input  ==  null)  {  out.write('n');  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	if(out!=  null)  {  if(input  ==  null)  {  out.write('n');  return;  }	          if(input    ==    null)    {    out.write('n');    return;    }    if(input    >=    null)    {    out.write('n');    return;    }    	compilable	  [FE]  AssertionFailedError  	10	19	replace
297	[BUG]  [BUGGY]  if(out!=  null)  {  if(input  ==  null)  {  out.write('n');  return;  }  [FE]  AssertionFailedError  [FE]              ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(out!=  null)  {  if(input  ==  null)  {  out.write('n');  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(out!=  null)  {  if(input  ==  null)  {  out.write('n');  return;  }	          if(input    ==    null)    {    out.write('n');    return;    }    if(input    >=    null)    {    out.write('n');    return;    }    	compilable	  [FE]  AssertionFailedError  	10	19	replace
298	[BUG]  [BUGGY]  out.write(input.toChars(pos));  [CE]  illegal  start  of  type  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write(input.toChars(pos));  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	out.write(input.toChars(pos));	          out.write(input.charAt(0));    char[]    input    =    input.toChars(pos);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
299	[BUG]  [BUGGY]  Integer  input  =  input.readInt();  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  Integer  input  =  input.readInt();  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	Integer  input  =  input.readInt();	  if(input    ==    null)    {    out.write(Integer.toString(pos));    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
300	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(out!=  null)  {  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	if(out!=  null)  {  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }	          if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input    ==    null    ||    input.length()!=    0)    {    return;    }    	compilable	  [FE]  AssertionFailedError  	75	19	replace
301	[BUG]  [BUGGY]  if(out!=  null)  {  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(out!=  null)  {  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(out!=  null)  {  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }	          if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input    ==    null    ||    input.length()!=    0)    {    return;    }    	compilable	  [FE]  AssertionFailedError  	75	19	replace
302	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(out  ==  null)  {  if(input  ==  null  ||  input.length()!=  0)  {  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	if(out  ==  null)  {  if(input  ==  null  ||  input.length()!=  0)  {  return;  }	          if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input    ==    null    ||    input.length()!=    0)    {    return;    }    	compilable	  [FE]  NullPointerException  	75	5	replace
303	[BUG]  [BUGGY]  if(out  ==  null)  {  if(input  ==  null  ||  input.length()!=  0)  {  return;  }  [FE]  NullPointerException  [FE]      AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(out  ==  null)  {  if(input  ==  null  ||  input.length()!=  0)  {  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(out  ==  null)  {  if(input  ==  null  ||  input.length()!=  0)  {  return;  }	          if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input    ==    null    ||    input.length()!=    0)    {    return;    }    	compilable	  [FE]  NullPointerException  	75	5	replace
304	[BUG]  [BUGGY]  OutputFactory  inputFactory  =  getOutputFactory();  [CE]  illegal  start  of  type  [FE]        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  OutputFactory  inputFactory  =  getOutputFactory();  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	OutputFactory  inputFactory  =  getOutputFactory();	  OutputFactory    outputFactory    =    getOutputFactory();    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
305	[BUG]  [BUGGY]          if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	                if(input        ==        null        ||        input.length()        ==        0)        {        return;        }        if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;	  	non-compiled	[CE]  illegal  start  of  expression	70	None	add
306	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()!=  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	                if(input        ==        null        ||        input.length()        ==        0)        {        return;        }        if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input  ==  null  ||  input.length()!=  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }	  	compilable	  [FE]  AssertionFailedError  	70	19	add
307	[BUG]  [BUGGY]          if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()!=  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  [FE]  AssertionFailedError  [FE]      ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()!=  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	                if(input        ==        null        ||        input.length()        ==        0)        {        return;        }        if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input  ==  null  ||  input.length()!=  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }	  	compilable	  [FE]  AssertionFailedError  	70	19	add
308	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input!=  null  ||  input.length()  ==  0)  {  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	                if(input        ==        null        ||        input.length()        ==        0)        {        return;        }        if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input!=  null  ||  input.length()  ==  0)  {  return;  }	  	compilable	  [FE]  AssertionFailedError  	70	19	add
309	[BUG]  [BUGGY]          if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input!=  null  ||  input.length()  ==  0)  {  return;  }  [FE]  AssertionFailedError  [FE]        ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input!=  null  ||  input.length()  ==  0)  {  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	                if(input        ==        null        ||        input.length()        ==        0)        {        return;        }        if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input!=  null  ||  input.length()  ==  0)  {  return;  }	  	compilable	  [FE]  AssertionFailedError  	70	19	add
310	[BUG]  [BUGGY]  out.write(Integer.toString(input.substring(1)));  [CE]  illegal  start  of  type  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write(Integer.toString(input.substring(1)));  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	out.write(Integer.toString(input.substring(1)));	  out.write(Integer.toString(input.charAt(0)));    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
311	[BUG]  [BUGGY]  out.write('n',  input.length());  [CE]  illegal  start  of  type  [FE]        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write('n',  input.length());  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	out.write('n',  input.length());	  out.write('n');    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
312	[BUG]  [BUGGY]  if(input!=  null  ||  input.length()!=  0)  {  If(input!=  null  ||  input.length()!=  0)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input!=  null  ||  input.length()!=  0)  {  If(input!=  null  ||  input.length()!=  0)  {  [BUGGY]      return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(input!=    null    ||    input.length()!=    0)    {    If(input!=  null  ||  input.length()!=  0)  {	  	non-compiled	[CE]  ';'  expected	121	None	add
313	[BUG]  [BUGGY]  if(input!=  null  ||  input.length()!=  0)  {  if(input!=  null  ||  input.length()  >>  0)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input!=  null  ||  input.length()!=  0)  {  if(input!=  null  ||  input.length()  >>  0)  {  [BUGGY]      return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(input!=    null    ||    input.length()!=    0)    {    if(input!=  null  ||  input.length()  >>  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	121	None	add
314	[BUG]  [BUGGY]  if(input!=  null)  {  int  inputLength  =  input.length();  int  outputLength  =  input.length();  }  [CE]  illegal  start  of  type  [FE]    NullPointerException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input!=  null)  {  int  inputLength  =  input.length();  int  outputLength  =  input.length();  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(input!=  null)  {  int  inputLength  =  input.length();  int  outputLength  =  input.length();  }	          int    inputLength    =    input.length();    int    outputLength    =    input.length();    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
315	[BUG]  [BUGGY]  char  inputLength  =  input.length();  int  outputLength  =  input.length();  [CE]  illegal  start  of  type  [FE]      NullPointerException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  char  inputLength  =  input.length();  int  outputLength  =  input.length();  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	char  inputLength  =  input.length();  int  outputLength  =  input.length();	          int    inputLength    =    input.length();    int    outputLength    =    input.length();    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
316	[BUG]  [BUGGY]  Integer  inputLength  =  input.length();  int  outputLength  =  input.length();  [CE]  illegal  start  of  type  [FE]        NullPointerException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  Integer  inputLength  =  input.length();  int  outputLength  =  input.length();  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	Integer  inputLength  =  input.length();  int  outputLength  =  input.length();	          int    inputLength    =    input.length();    int    outputLength    =    input.length();    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
317	[BUG]  [BUGGY]  out.write(input.getChars());  [CE]  illegal  start  of  type  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write(input.getChars());  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	out.write(input.getChars());	          out.write(input.charAt(0));    char[]    input    =    input.getChars();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
318	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(out  ==  null  ||  input!=  null  ||  input.length()  ==  0)  {  [BUGGY]      return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	if(out  ==  null  ||  input!=  null  ||  input.length()  ==  0)  {	  if(input!=    null    ||    input.length()    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	31	19	replace
319	[BUG]  [BUGGY]  if(out  ==  null  ||  input!=  null  ||  input.length()  ==  0)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(out  ==  null  ||  input!=  null  ||  input.length()  ==  0)  {  [BUGGY]      return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(out  ==  null  ||  input!=  null  ||  input.length()  ==  0)  {	  if(input!=    null    ||    input.length()    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	31	19	replace
320	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  return;  }  if(out  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	                if(input        ==        null)        {        out.write('n');        return;        }        if(input!=    null)    {    out.write('n');    return;    }    if(out  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  AssertionFailedError  	7	19	add
321	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  return;  }  if(out  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  return;  }  if(out  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	                if(input        ==        null)        {        out.write('n');        return;        }        if(input!=    null)    {    out.write('n');    return;    }    if(out  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  AssertionFailedError  	7	19	add
322	[BUG]  [BUGGY]  Integer  inputLength  =  input.length();  char[]  inputLength  =  input.length();  [CE]  illegal  start  of  type  [FE]              NullPointerException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  Integer  inputLength  =  input.length();  char[]  inputLength  =  input.length();  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	Integer  inputLength  =  input.length();  char[]  inputLength  =  input.length();	          int    inputLength    =    input.length();    char[]    inputLength    =    input.length();    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
323	[BUG]  [BUGGY]          if(input!=    null)    {    out.write('n');    }    if(input!=  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  if(input  >=  null)  {  out.write('n');  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input!=    null)    {    out.write('n');    }    if(input!=  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  if(input  >=  null)  {  out.write('n');  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	                if(input!=        null)        {        out.write('n');        }        if(input!=    null)    {    out.write('n');    }    if(input!=  null)  {  out.write('n');  }  if(input  >=  null)  {  out.write('n');  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	39	None	add
324	[BUG]  [BUGGY]  out.write( "no  input  available ");  [CE]  illegal  start  of  type  [FE]          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write( "no  input  available ");  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	out.write( "no  input  available ");	  out.write(   "no    input   ");    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
325	[BUG]  [BUGGY]  if(out!=  null)  {  out.write('n');  return;  }  [CE]  illegal  start  of  type  [FE]          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(out!=  null)  {  out.write('n');  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(out!=  null)  {  out.write('n');  return;  }	  if(input!=    null)    {    out.write('n');    return;    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
326	[BUG]  [BUGGY]  OutputStream  input  =  new  BufferedOutputStream(out);  [CE]  illegal  start  of  type  [FE]        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  OutputStream  input  =  new  BufferedOutputStream(out);  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	OutputStream  input  =  new  BufferedOutputStream(out);	  if(out!=    null)    {    out.write('n');    }    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
327	[BUG]  [BUGGY]  if(input!=  null  ||  input.length()  >=  0)  {  return;  }  [CE]  illegal  start  of  type  [FE]        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input!=  null  ||  input.length()  >=  0)  {  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(input!=  null  ||  input.length()  >=  0)  {  return;  }	  if(input!=    null    ||    input.length()    ==    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
328	[BUG]  [BUGGY]  out.write(input.toChars());  [CE]  illegal  start  of  type  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write(input.toChars());  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	out.write(input.toChars());	          out.write(input.charAt(0));    char[]    input    =    input.toChars();    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
329	[BUG]  [BUGGY]  out.write( ".s.IFJDCS ");  [CE]  illegal  start  of  type  [FE]        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write( ".s.IFJDCS ");  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	out.write( ".s.IFJDCS ");	  out.write(   "n   ");    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
330	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(out  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	                if(input        ==        null)        {        out.write('n');        return;        }        if(input    ==    null)    {    out.write('n');    return;    }    if(out  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  ComparisonFailure  	5	3	add
331	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(out  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(out  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	                if(input        ==        null)        {        out.write('n');        return;        }        if(input    ==    null)    {    out.write('n');    return;    }    if(out  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  ComparisonFailure  	5	3	add
332	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input  ==  null  ||  input.length()!=  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()  >=  0)  {  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	                if(input        ==        null        ||        input.length()        ==        0)        {        return;        }        if(input    ==    null    ||    input.length()!=    0)    {    return;    }    if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()  >=  0)  {  return;  }	  	compilable	  [FE]  AssertionFailedError  	74	19	add
333	[BUG]  [BUGGY]          if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input  ==  null  ||  input.length()!=  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()  >=  0)  {  return;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input  ==  null  ||  input.length()!=  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()  >=  0)  {  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	                if(input        ==        null        ||        input.length()        ==        0)        {        return;        }        if(input    ==    null    ||    input.length()!=    0)    {    return;    }    if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()  >=  0)  {  return;  }	  	compilable	  [FE]  AssertionFailedError  	74	19	add
334	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input  ==  null  ||  input.length()!=  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	                if(input        ==        null        ||        input.length()        ==        0)        {        return;        }        if(input    ==    null    ||    input.length()!=    0)    {    return;    }    if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }	  	compilable	  [FE]  AssertionFailedError  	74	19	add
335	[BUG]  [BUGGY]          if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input  ==  null  ||  input.length()!=  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input  ==  null  ||  input.length()!=  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	                if(input        ==        null        ||        input.length()        ==        0)        {        return;        }        if(input    ==    null    ||    input.length()!=    0)    {    return;    }    if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }	  	compilable	  [FE]  AssertionFailedError  	74	19	add
336	[BUG]  [BUGGY]          if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input  ==  null  ||  input.length()!=  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()!=  0)  {  return;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input  ==  null  ||  input.length()!=  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()!=  0)  {  return;  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	                if(input        ==        null        ||        input.length()        ==        0)        {        return;        }        if(input    ==    null    ||    input.length()!=    0)    {    return;    }    if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()!=  0)  {  return;	  	non-compiled	[CE]  illegal  start  of  expression	74	None	add
337	[BUG]  [BUGGY]  OutputFactory  outputFactory  =  out.getOutputFactory();  [CE]  illegal  start  of  type  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  OutputFactory  outputFactory  =  out.getOutputFactory();  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	OutputFactory  outputFactory  =  out.getOutputFactory();	          if(input    ==    null)    {    out.write('n');    }    if(input    ==    null)    {    out.write('n');    return;    }    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
338	[BUG]  [BUGGY]  OutputStream  input  =  new  BufferedOutputStream(out.readLine(),  input.length);  [CE]  illegal  start  of  type  [FE]        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  OutputStream  input  =  new  BufferedOutputStream(out.readLine(),  input.length);  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	OutputStream  input  =  new  BufferedOutputStream(out.readLine(),  input.length);	  OutputStream    input    =    new    BufferedOutputStream(out.readLine());    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
339	[BUG]  [BUGGY]  OutputStream  input  =  new  BufferedOutputStream(out.readLine(),  input.charAt(0));  [CE]  illegal  start  of  type  [FE]          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  OutputStream  input  =  new  BufferedOutputStream(out.readLine(),  input.charAt(0));  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	OutputStream  input  =  new  BufferedOutputStream(out.readLine(),  input.charAt(0));	  OutputStream    input    =    new    BufferedOutputStream(out.readLine());    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
340	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(0));  out.write(input.charAt(0));  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	                out.write(input.charAt(0));        out.write(input.charAt(0));    out.write(input.charAt(0));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	18	19	add
341	[BUG]  [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(0));  out.write(input.charAt(0));  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(0));  out.write(input.charAt(0));  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	                out.write(input.charAt(0));        out.write(input.charAt(0));    out.write(input.charAt(0));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	18	19	add
342	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    }    if(input  ==  null)  {  out.write(   ",n     ");  }  if(input  ==  null)  {  out.write( "n   ");  }  if(input  ==  null)  {  out.write( "n   ");  }  if(input  ==  null)  {  out.write( ",n ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	                if(input        ==        null)        {        out.write(       "n       ");        }        if(input    ==    null)    {    out.write(   ",n       ");    }    if(input  ==  null)  {  out.write( "n   ");  }  if(input  ==  null)  {  out.write( "n   ");  }  if(input  ==  null)  {  out.write( ",n ");  }	  	compilable	  [FE]  ComparisonFailure  	107	3	add
343	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    }    if(input  ==  null)  {  out.write(   ",n     ");  }  if(input  ==  null)  {  out.write( "n   ");  }  if(input  ==  null)  {  out.write( "n   ");  }  if(input  ==  null)  {  out.write( ",n ");  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    }    if(input  ==  null)  {  out.write(   ",n     ");  }  if(input  ==  null)  {  out.write( "n   ");  }  if(input  ==  null)  {  out.write( "n   ");  }  if(input  ==  null)  {  out.write( ",n ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	                if(input        ==        null)        {        out.write(       "n       ");        }        if(input    ==    null)    {    out.write(   ",n       ");    }    if(input  ==  null)  {  out.write( "n   ");  }  if(input  ==  null)  {  out.write( "n   ");  }  if(input  ==  null)  {  out.write( ",n ");  }	  	compilable	  [FE]  ComparisonFailure  	107	3	add
344	[BUG]  [BUGGY]  if(out  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  output.write('n');  return;  }  [CE]  illegal  start  of  type  [FE]        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(out  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  output.write('n');  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(out  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  output.write('n');  return;  }	          if(input    ==    null)    {    out.write('n');    return;    }    if(input    ==    null)    {    output.write('n');    return;    }    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
345	[BUG]  [BUGGY]  if(out!=  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  output.write('n');  return;  }  [CE]  illegal  start  of  type  [FE]          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(out!=  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  output.write('n');  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(out!=  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  output.write('n');  return;  }	          if(input    ==    null)    {    out.write('n');    return;    }    if(input    ==    null)    {    output.write('n');    return;    }    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
346	[BUG]  [BUGGY]  if(input  ==  null)  {  out.write('n');  return;  }  if(output  ==  null)  {  output.write('n');  return;  }  [CE]  illegal  start  of  type  [FE]            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input  ==  null)  {  out.write('n');  return;  }  if(output  ==  null)  {  output.write('n');  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(input  ==  null)  {  out.write('n');  return;  }  if(output  ==  null)  {  output.write('n');  return;  }	          if(input    ==    null)    {    out.write('n');    return;    }    if(input    ==    null)    {    output.write('n');    return;    }    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
347	[BUG]  [BUGGY]  if(out  ==  null)  {  out.write('n');  return;  }  if(out  ==  null)  {  output.write('n');  return;  }  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(out  ==  null)  {  out.write('n');  return;  }  if(out  ==  null)  {  output.write('n');  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(out  ==  null)  {  out.write('n');  return;  }  if(out  ==  null)  {  output.write('n');  return;  }	          if(input    ==    null)    {    out.write('n');    return;    }    if(input    ==    null)    {    output.write('n');    return;    }    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
348	[BUG]  [BUGGY]  OutputStream  output  =  input.getOutputStream();  [CE]  illegal  start  of  type  [FE]          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  OutputStream  output  =  input.getOutputStream();  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	OutputStream  output  =  input.getOutputStream();	  OutputStream    input    =    output.getOutputStream();    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
349	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    }    if(input  ==  null)  {  out.write(   ".n     ");  }  if(input  ==  null)  {  out.write( "n ");  }  if(input  ==  null)  {  out.write( "n   ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	                if(input        ==        null)        {        out.write(       "n       ");        }        if(input    ==    null)    {    out.write(   ".n       ");    }    if(input  ==  null)  {  out.write( "n ");  }  if(input  ==  null)  {  out.write( "n   ");  }	  	compilable	  [FE]  ComparisonFailure  	105	3	add
350	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    }    if(input  ==  null)  {  out.write(   ".n     ");  }  if(input  ==  null)  {  out.write( "n ");  }  if(input  ==  null)  {  out.write( "n   ");  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    }    if(input  ==  null)  {  out.write(   ".n     ");  }  if(input  ==  null)  {  out.write( "n ");  }  if(input  ==  null)  {  out.write( "n   ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	                if(input        ==        null)        {        out.write(       "n       ");        }        if(input    ==    null)    {    out.write(   ".n       ");    }    if(input  ==  null)  {  out.write( "n ");  }  if(input  ==  null)  {  out.write( "n   ");  }	  	compilable	  [FE]  ComparisonFailure  	105	3	add
351	[BUG]  [BUGGY]  out.write(Integer.toString(input.substring(0,  input.length())));  [CE]  illegal  start  of  type  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write(Integer.toString(input.substring(0,  input.length())));  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	out.write(Integer.toString(input.substring(0,  input.length())));	  out.write(input.substring(0,    input.length()    -    1));    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
352	[BUG]  [BUGGY]  out.write(Integer.toString(input.substring(0,  input.length()  -  1));  [CE]  ')'  expected  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write(Integer.toString(input.substring(0,  input.length()  -  1));  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	out.write(Integer.toString(input.substring(0,  input.length()  -  1));	  out.write(input.substring(0,    input.length()    -    1));    	non-compiled	[CE]  ')'  expected	104	None	replace
353	[BUG]  [BUGGY]  if(input  ==  null)  {  out.write('n');  }  else  {  out.write(input.toString());  }  [CE]  illegal  start  of  type  [FE]            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input  ==  null)  {  out.write('n');  }  else  {  out.write(input.toString());  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(input  ==  null)  {  out.write('n');  }  else  {  out.write(input.toString());  }	          if(input    ==    null)    {    out.write('n');    }    If(input    ==    null)    {    out.write('n');    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
354	[BUG]  [BUGGY]  out.write(input.getBytes(pos));  [CE]  illegal  start  of  type  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write(input.getBytes(pos));  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	out.write(input.getBytes(pos));	  out.write(input.getBytes());    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
355	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(out  ==  null)  {  if(input  ==  null  ||  input.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	if(out  ==  null)  {  if(input  ==  null  ||  input.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	          if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input!=    null    ||    input.length()    ==    0)    {    return;    }    	compilable	  [FE]  NullPointerException  	73	5	replace
356	[BUG]  [BUGGY]  if(out  ==  null)  {  if(input  ==  null  ||  input.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [FE]  NullPointerException  [FE]    AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(out  ==  null)  {  if(input  ==  null  ||  input.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(out  ==  null)  {  if(input  ==  null  ||  input.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	          if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input!=    null    ||    input.length()    ==    0)    {    return;    }    	compilable	  [FE]  NullPointerException  	73	5	replace
357	[BUG]  [BUGGY]  int  inputLength  =  input.length();  Int  outputLength  =  input.length();  [CE]  illegal  start  of  type  [FE]        NullPointerException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  int  inputLength  =  input.length();  Int  outputLength  =  input.length();  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	int  inputLength  =  input.length();  Int  outputLength  =  input.length();	          int    inputLength    =    input.length();    Int    inputLength    =    input.length();    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
358	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(out!=  null)  {  if(input  ==  null)  {  out.write('n');  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	if(out!=  null)  {  if(input  ==  null)  {  out.write('n');  }	          if(input    ==    null)    {    out.write('n');    }    if(input!=    null)    {    out.write('n');    }    	compilable	  [FE]  AssertionFailedError  	53	19	replace
359	[BUG]  [BUGGY]  if(out!=  null)  {  if(input  ==  null)  {  out.write('n');  }  [FE]  AssertionFailedError  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(out!=  null)  {  if(input  ==  null)  {  out.write('n');  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(out!=  null)  {  if(input  ==  null)  {  out.write('n');  }	          if(input    ==    null)    {    out.write('n');    }    if(input!=    null)    {    out.write('n');    }    	compilable	  [FE]  AssertionFailedError  	53	19	replace
360	[BUG]  [BUGGY]  out.write( "native ");  [CE]  illegal  start  of  type  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write( "native ");  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	out.write( "native ");	          if(input    ==    null)    {    out.write(       "n       ");    }    if(input    ==    null)    {    out.write(   ",n       ");    }    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
361	[BUG]  [BUGGY]  out.write( "negative ");  [CE]  illegal  start  of  type  [FE]      ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write( "negative ");  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	out.write( "negative ");	          if(input    ==    null)    {    out.write(       "n       ");    }    if(input    ==    null)    {    out.write(   ",n       ");    }    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
362	[BUG]  [BUGGY]  out.write('[');  [CE]  illegal  start  of  type  [FE]        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write('[');  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	out.write('[');	  out.write('n');    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
363	[BUG]  [BUGGY]  OutputStream  input  =  new  BufferedOutputStream(out.readLine(),  out.readLine());  [CE]  illegal  start  of  type  [FE]        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  OutputStream  input  =  new  BufferedOutputStream(out.readLine(),  out.readLine());  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	OutputStream  input  =  new  BufferedOutputStream(out.readLine(),  out.readLine());	  OutputStream    input    =    new    BufferedOutputStream(out.readLine());    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
364	[BUG]  [BUGGY]  OutputStream  input  =  new  BufferedOutputStream(out.readLine(),  output.readLine());  [CE]  illegal  start  of  type  [FE]          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  OutputStream  input  =  new  BufferedOutputStream(out.readLine(),  output.readLine());  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	OutputStream  input  =  new  BufferedOutputStream(out.readLine(),  output.readLine());	  OutputStream    input    =    new    BufferedOutputStream(out.readLine());    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
365	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input!=  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()!=  0)  {  return;  }  if(input!=  null  ||  input.length()  ==  0)  {  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	                if(input        ==        null        ||        input.length()        ==        0)        {        return;        }        if(input!=    null    ||    input.length()    ==    0)    {    return;    }    if(input  ==  null  ||  input.length()!=  0)  {  return;  }  if(input!=  null  ||  input.length()  ==  0)  {  return;  }	  	compilable	  [FE]  AssertionFailedError  	72	19	add
366	[BUG]  [BUGGY]          if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input!=  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()!=  0)  {  return;  }  if(input!=  null  ||  input.length()  ==  0)  {  return;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input!=  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()!=  0)  {  return;  }  if(input!=  null  ||  input.length()  ==  0)  {  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	                if(input        ==        null        ||        input.length()        ==        0)        {        return;        }        if(input!=    null    ||    input.length()    ==    0)    {    return;    }    if(input  ==  null  ||  input.length()!=  0)  {  return;  }  if(input!=  null  ||  input.length()  ==  0)  {  return;  }	  	compilable	  [FE]  AssertionFailedError  	72	19	add
367	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input!=  null  ||  input.length()  ==  0)  {  return;  }  if(input!=  null  ||  input.length()  ==  0)  {  return;  }  if(input!=  null  ||  input.length()  ==  0)  {  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	                if(input        ==        null        ||        input.length()        ==        0)        {        return;        }        if(input!=    null    ||    input.length()    ==    0)    {    return;    }    if(input!=  null  ||  input.length()  ==  0)  {  return;  }  if(input!=  null  ||  input.length()  ==  0)  {  return;  }	  	compilable	  [FE]  AssertionFailedError  	72	19	add
368	[BUG]  [BUGGY]          if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input!=  null  ||  input.length()  ==  0)  {  return;  }  if(input!=  null  ||  input.length()  ==  0)  {  return;  }  if(input!=  null  ||  input.length()  ==  0)  {  return;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input!=  null  ||  input.length()  ==  0)  {  return;  }  if(input!=  null  ||  input.length()  ==  0)  {  return;  }  if(input!=  null  ||  input.length()  ==  0)  {  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	                if(input        ==        null        ||        input.length()        ==        0)        {        return;        }        if(input!=    null    ||    input.length()    ==    0)    {    return;    }    if(input!=  null  ||  input.length()  ==  0)  {  return;  }  if(input!=  null  ||  input.length()  ==  0)  {  return;  }	  	compilable	  [FE]  AssertionFailedError  	72	19	add
369	[BUG]  [BUGGY]  if(out!=  null)  {  out.write( "null ");  }  [CE]  illegal  start  of  type  [FE]        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(out!=  null)  {  out.write( "null ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(out!=  null)  {  out.write( "null ");  }	  if(out!=    null)    {    out.write('n');    }    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
370	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  if(input!=  null)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  if(input!=  null)  {  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	                if(input        ==        null)        {        out.write('n');        return;        }        if(input!=    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  if(input!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
371	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	                if(input        ==        null)        {        out.write('n');        return;        }        if(input!=    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
372	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()  ==  0)  {  out.write( "None ");  }  [CE]  illegal  start  of  type  [FE]            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input  ==  null  ||  input.length()  ==  0)  {  out.write( "None ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(input  ==  null  ||  input.length()  ==  0)  {  out.write( "None ");  }	  if(input    ==    null)    {    out.write(   "None   ");    }    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
373	[BUG]  [BUGGY]  if(out  ==  null)  {  out.write( "None ");  }  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(out  ==  null)  {  out.write( "None ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(out  ==  null)  {  out.write( "None ");  }	  if(input    ==    null)    {    out.write(   "None   ");    }    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
374	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()  ==  0)  {  out.write(input,  0,  input.length());  return;  }  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input  ==  null  ||  input.length()  ==  0)  {  out.write(input,  0,  input.length());  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(input  ==  null  ||  input.length()  ==  0)  {  out.write(input,  0,  input.length());  return;  }	  if(input    ==    null)    {    out.write(input,    0,    input.length());    return;    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
375	[BUG]  [BUGGY]  out.write( "no   ");  [CE]  illegal  start  of  type  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write( "no   ");  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	out.write( "no   ");	          if(input    ==    null)    {    out.write(       "n       ");    }    if(input    ==    null)    {    out.write(   ".n       ");    }    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
376	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()  ==  0)  {  out.write( "null ");  }  [CE]  illegal  start  of  type  [FE]          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input  ==  null  ||  input.length()  ==  0)  {  out.write( "null ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(input  ==  null  ||  input.length()  ==  0)  {  out.write( "null ");  }	  if(input    ==    null)    {    out.write(   "null   ");    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
377	[BUG]  [BUGGY]  if(out  ==  null)  {  out.write( "null ");  }  [CE]  illegal  start  of  type  [FE]            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(out  ==  null)  {  out.write( "null ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(out  ==  null)  {  out.write( "null ");  }	  if(input    ==    null)    {    out.write(   "null   ");    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
378	[BUG]  [BUGGY]  out.write(input.substring(0,  input.length()  1));  [CE]  ')'  expected  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write(input.substring(0,  input.length()  1));  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	out.write(input.substring(0,  input.length()  1));	  out.write(input.substring(0,    input.length()    -    1));    	non-compiled	[CE]  ')'  expected	104	None	replace
379	[BUG]  [BUGGY]  out.write(input.substring(pos  +  1));  [CE]  illegal  start  of  type  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write(input.substring(pos  +  1));  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	out.write(input.substring(pos  +  1));	  out.write(input.substring(1));    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
380	[BUG]  [BUGGY]  out.write(input.substring(pos,  input.length()));  [CE]  illegal  start  of  type  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write(input.substring(pos,  input.length()));  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	out.write(input.substring(pos,  input.length()));	  out.write(input.substring(1));    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
381	[BUG]  [BUGGY]  if(out  ==  null)  {  out.write('n');  return;  }  [CE]  illegal  start  of  type  [FE]        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(out  ==  null)  {  out.write('n');  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(out  ==  null)  {  out.write('n');  return;  }	          if(input    ==    null)    {    out.write('n');    return;    }    if(input    ==    null)    {    output.write('n');    return;    }    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
382	[BUG]  [BUGGY]  if(input  ==  null)  {  input.write('n');  return;  }  [CE]  illegal  start  of  type  [FE]          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input  ==  null)  {  input.write('n');  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(input  ==  null)  {  input.write('n');  return;  }	          if(input    ==    null)    {    out.write('n');    return;    }    if(input    ==    null)    {    output.write('n');    return;    }    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
383	[BUG]  [BUGGY]  out.write(input.getBytes(),  input.length);  [CE]  illegal  start  of  type  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write(input.getBytes(),  input.length);  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	out.write(input.getBytes(),  input.length);	  out.write(input.getBytes());    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
384	[BUG]  [BUGGY]  out.write(input.getBytes(),  input.getChars());  [CE]  illegal  start  of  type  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write(input.getBytes(),  input.getChars());  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	out.write(input.getBytes(),  input.getChars());	  out.write(input.getBytes());    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
385	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(out!=  null)  {  if(input!=  null)  {  out.write('n');  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	if(out!=  null)  {  if(input!=  null)  {  out.write('n');  }	          if(input!=    null)    {    out.write('n');    }    If(input!=    null)    {    out.write('n');    }    	compilable	  [FE]  AssertionFailedError  	44	19	replace
386	[BUG]  [BUGGY]  if(out!=  null)  {  if(input!=  null)  {  out.write('n');  }  [FE]  AssertionFailedError  [FE]              ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(out!=  null)  {  if(input!=  null)  {  out.write('n');  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(out!=  null)  {  if(input!=  null)  {  out.write('n');  }	          if(input!=    null)    {    out.write('n');    }    If(input!=    null)    {    out.write('n');    }    	compilable	  [FE]  AssertionFailedError  	44	19	replace
387	[BUG]  [BUGGY]  OutputFactory  outputFactory  =  getOutputFactory().getOutputFactory();  [CE]  illegal  start  of  type  [FE]        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  OutputFactory  outputFactory  =  getOutputFactory().getOutputFactory();  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	OutputFactory  outputFactory  =  getOutputFactory().getOutputFactory();	  OutputFactory    outputFactory    =    getOutputFactory();    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
388	[BUG]  [BUGGY]  CharSequence  input  =  input.toChars();  [CE]  illegal  start  of  type  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  CharSequence  input  =  input.toChars();  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	CharSequence  input  =  input.toChars();	          out.write(input.charAt(0));    char[]    input    =    input.toChars();    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
389	[BUG]  [BUGGY]  out.write(input.getBytes());  char[]  input  =  input.getChars();  [CE]  illegal  start  of  type  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write(input.getBytes());  char[]  input  =  input.getChars();  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	out.write(input.getBytes());  char[]  input  =  input.getChars();	          out.write(input.charAt(0));    char[]    input    =    input.getChars();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
390	[BUG]  [BUGGY]          if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	                if(input        ==        null        ||        input.length()        ==        0)        {        return;        }        if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;	  	non-compiled	[CE]  illegal  start  of  expression	70	None	add
391	[BUG]  [BUGGY]  if(out!=  null)  {  out.write(input);  return;  }  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(out!=  null)  {  out.write(input);  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(out!=  null)  {  out.write(input);  return;  }	  if(input!=    null)    {    out.write(input);    return;    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
392	[BUG]  [BUGGY]  out.write(input.charAt(0),  input.charAt(pos  +  1));  [CE]  illegal  start  of  type  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write(input.charAt(0),  input.charAt(pos  +  1));  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	out.write(input.charAt(0),  input.charAt(pos  +  1));	  out.write(input.charAt(0),    input.length());    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
393	[BUG]  [BUGGY]  out.write(input.charAt(0),  input.charAt(pos));  [CE]  illegal  start  of  type  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write(input.charAt(0),  input.charAt(pos));  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	out.write(input.charAt(0),  input.charAt(pos));	  out.write(input.charAt(0),    input.length());    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
394	[BUG]  [BUGGY]  out.write( "no-string ");  [CE]  illegal  start  of  type  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write( "no-string ");  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	out.write( "no-string ");	          if(input    ==    null)    {    out.write(       "n       ");    }    if(input    ==    null)    {    out.write(   "n       ");    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
395	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(out  ==  null)  {  if(input  ==  null)  {  out.write('n');  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	if(out  ==  null)  {  if(input  ==  null)  {  out.write('n');  return;  }	          if(input    ==    null)    {    out.write('n');    return;    }    if(input    ==    null)    {    out.write('n');    return;    }    	compilable	  [FE]  NullPointerException  	6	5	replace
396	[BUG]  [BUGGY]  if(out  ==  null)  {  if(input  ==  null)  {  out.write('n');  return;  }  [FE]  NullPointerException  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(out  ==  null)  {  if(input  ==  null)  {  out.write('n');  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(out  ==  null)  {  if(input  ==  null)  {  out.write('n');  return;  }	          if(input    ==    null)    {    out.write('n');    return;    }    if(input    ==    null)    {    out.write('n');    return;    }    	compilable	  [FE]  NullPointerException  	6	5	replace
397	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()  ==  0)  {  out.write( ", ");  }  [CE]  illegal  start  of  type  [FE]        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input  ==  null  ||  input.length()  ==  0)  {  out.write( ", ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(input  ==  null  ||  input.length()  ==  0)  {  out.write( ", ");  }	  if(input    ==    null)    {    out.write(   ",   ");    }    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
398	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()  ==  0)  {  out.write(Input.toString(input));  }  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input  ==  null  ||  input.length()  ==  0)  {  out.write(Input.toString(input));  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(input  ==  null  ||  input.length()  ==  0)  {  out.write(Input.toString(input));  }	  if(input    ==    null)    {    out.write(Input.toString(input));    }    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
399	[BUG]  [BUGGY]  if(input.length()  ==  0)  {  out.write(input.charAt(0));  out.write(input.charAt(0));  }  else  {  out.write(input.charAt(0));  }  [CE]  illegal  start  of  type  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input.length()  ==  0)  {  out.write(input.charAt(0));  out.write(input.charAt(0));  }  else  {  out.write(input.charAt(0));  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(input.length()  ==  0)  {  out.write(input.charAt(0));  out.write(input.charAt(0));  }  else  {  out.write(input.charAt(0));  }	          out.write(input.charAt(0));    out.write(input.charAt(0));    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
400	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input  ==  null  ||  input.length()!=  0)  {  return;  }  if(input  ==  null  ||  input.length()  >=  0)  {  return;  }  if(input  ==  null  ||  input.length()!=  0)  {  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	                if(input        ==        null        ||        input.length()        ==        0)        {        return;        }        if(input    ==    null    ||    input.length()!=    0)    {    return;    }    if(input  ==  null  ||  input.length()  >=  0)  {  return;  }  if(input  ==  null  ||  input.length()!=  0)  {  return;  }	  	compilable	  [FE]  AssertionFailedError  	74	19	add
401	[BUG]  [BUGGY]          if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input  ==  null  ||  input.length()!=  0)  {  return;  }  if(input  ==  null  ||  input.length()  >=  0)  {  return;  }  if(input  ==  null  ||  input.length()!=  0)  {  return;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input  ==  null  ||  input.length()!=  0)  {  return;  }  if(input  ==  null  ||  input.length()  >=  0)  {  return;  }  if(input  ==  null  ||  input.length()!=  0)  {  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	                if(input        ==        null        ||        input.length()        ==        0)        {        return;        }        if(input    ==    null    ||    input.length()!=    0)    {    return;    }    if(input  ==  null  ||  input.length()  >=  0)  {  return;  }  if(input  ==  null  ||  input.length()!=  0)  {  return;  }	  	compilable	  [FE]  AssertionFailedError  	74	19	add
402	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input  ==  null  ||  input.length()!=  0)  {  return;  }  if(input  ==  null  ||  input.length()!=  0)  {  return;  }  if(input  ==  null  ||  input.length()  >=  0)  {  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	                if(input        ==        null        ||        input.length()        ==        0)        {        return;        }        if(input    ==    null    ||    input.length()!=    0)    {    return;    }    if(input  ==  null  ||  input.length()!=  0)  {  return;  }  if(input  ==  null  ||  input.length()  >=  0)  {  return;  }	  	compilable	  [FE]  AssertionFailedError  	74	19	add
403	[BUG]  [BUGGY]          if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input  ==  null  ||  input.length()!=  0)  {  return;  }  if(input  ==  null  ||  input.length()!=  0)  {  return;  }  if(input  ==  null  ||  input.length()  >=  0)  {  return;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input  ==  null  ||  input.length()!=  0)  {  return;  }  if(input  ==  null  ||  input.length()!=  0)  {  return;  }  if(input  ==  null  ||  input.length()  >=  0)  {  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	                if(input        ==        null        ||        input.length()        ==        0)        {        return;        }        if(input    ==    null    ||    input.length()!=    0)    {    return;    }    if(input  ==  null  ||  input.length()!=  0)  {  return;  }  if(input  ==  null  ||  input.length()  >=  0)  {  return;  }	  	compilable	  [FE]  AssertionFailedError  	74	19	add
404	[BUG]  [BUGGY]  out.write(Integer.toHexString(pos));  [CE]  illegal  start  of  type  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write(Integer.toHexString(pos));  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	out.write(Integer.toHexString(pos));	          out.write(input.charAt(0));    out.write(input.charAt(1));    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
405	[BUG]  [BUGGY]  out.write(Integer.toString(pos),  input.charAt(0));  [CE]  illegal  start  of  type  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write(Integer.toString(pos),  input.charAt(0));  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	out.write(Integer.toString(pos),  input.charAt(0));	          out.write(input.charAt(0));    in.write(input.charAt(0));    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
406	[BUG]  [BUGGY]  out.write(input.charAt(1));  [CE]  illegal  start  of  type  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write(input.charAt(1));  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	out.write(input.charAt(1));	          out.write(input.charAt(0));    in.write(input.charAt(0));    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
407	[BUG]  [BUGGY]  int  input  =  output.length()  -  1;  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  int  input  =  output.length()  -  1;  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	int  input  =  output.length()  -  1;	  int    input    =    output.length();    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
408	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()  ==  0)  {  out.write(input);  }  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input  ==  null  ||  input.length()  ==  0)  {  out.write(input);  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(input  ==  null  ||  input.length()  ==  0)  {  out.write(input);  }	  if(input    ==    null)    {    out.write(input);    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
409	[BUG]  [BUGGY]          int    inputLength    =    input.length();    int  outputLength  =  input.length();  char  inputLength  =  input.length();  int  outputLength  =  input.length();  [CE]  variable  inputLength  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]    NullPointerException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          int    inputLength    =    input.length();    int  outputLength  =  input.length();  char  inputLength  =  input.length();  int  outputLength  =  input.length();  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	                int        inputLength        =        input.length();        int    outputLength    =    input.length();    char  inputLength  =  input.length();  int  outputLength  =  input.length();	  	non-compiled	[CE]  variable  inputLength  is  already  defined  in  method  translate(CharSequence,Writer)	62	None	add
410	[BUG]  [BUGGY]          int    inputLength    =    input.length();    int  outputLength  =  input.length();  int  inputLength  =  output.length();  int  outputLength  =  input.length();  [CE]  variable  inputLength  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]      NullPointerException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          int    inputLength    =    input.length();    int  outputLength  =  input.length();  int  inputLength  =  output.length();  int  outputLength  =  input.length();  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	                int        inputLength        =        input.length();        int    outputLength    =    input.length();    int  inputLength  =  output.length();  int  outputLength  =  input.length();	  	non-compiled	[CE]  variable  inputLength  is  already  defined  in  method  translate(CharSequence,Writer)	62	None	add
411	[BUG]  [BUGGY]  out.write( "no  input  provided ");  [CE]  illegal  start  of  type  [FE]          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write( "no  input  provided ");  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	out.write( "no  input  provided ");	  out.write(   "no    input   ");    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
412	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    }    if(input!=  null)  {  out.write(   "n     ");  }  if(input  ==  null)  {  out.write( ",n ");  }  if(input!=  null)  {  out.write( "n ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	                if(input        ==        null)        {        out.write(       "n       ");        }        if(input!=    null)    {    out.write(   "n       ");    }    if(input  ==  null)  {  out.write( ",n ");  }  if(input!=  null)  {  out.write( "n ");  }	  	compilable	  [FE]  ComparisonFailure  	34	19	add
413	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    }    if(input!=  null)  {  out.write(   "n     ");  }  if(input  ==  null)  {  out.write( ",n ");  }  if(input!=  null)  {  out.write( "n ");  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    }    if(input!=  null)  {  out.write(   "n     ");  }  if(input  ==  null)  {  out.write( ",n ");  }  if(input!=  null)  {  out.write( "n ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	                if(input        ==        null)        {        out.write(       "n       ");        }        if(input!=    null)    {    out.write(   "n       ");    }    if(input  ==  null)  {  out.write( ",n ");  }  if(input!=  null)  {  out.write( "n ");  }	  	compilable	  [FE]  ComparisonFailure  	34	19	add
414	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()  >=  0)  {  if(input  ==  null  ||  input.length()  <  0)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input  ==  null  ||  input.length()  >=  0)  {  if(input  ==  null  ||  input.length()  <  0)  {  [BUGGY]      return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(input    ==    null    ||    input.length()    >=    0)    {    if(input  ==  null  ||  input.length()  <  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	28	None	add
415	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()  >  0)  {  return;  }  [CE]  illegal  start  of  type  [FE]        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input  ==  null  ||  input.length()  >  0)  {  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(input  ==  null  ||  input.length()  >  0)  {  return;  }	  if(input    ==    null    ||    input.length()    >=    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
416	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	                if(input        ==        null)        {        out.write('n');        return;        }        if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
417	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	                if(input        ==        null)        {        out.write('n');        return;        }        if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
418	[BUG]  [BUGGY]  IntInteger  inputLength  =  input.length();  [CE]  illegal  start  of  type  [FE]        NullPointerException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  IntInteger  inputLength  =  input.length();  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	IntInteger  inputLength  =  input.length();	          int    inputLength    =    input.length();    Int    int    inputLength    =    input.length();    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
419	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()  ==  0)  {  out.write(input.length());  }  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input  ==  null  ||  input.length()  ==  0)  {  out.write(input.length());  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(input  ==  null  ||  input.length()  ==  0)  {  out.write(input.length());  }	  if(input    ==    null)    {    out.write(input.length());    }    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
420	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()  ==  0)  {  out.write(out);  }  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input  ==  null  ||  input.length()  ==  0)  {  out.write(out);  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(input  ==  null  ||  input.length()  ==  0)  {  out.write(out);  }	  if(input    ==    null)    {    out.write(out);    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
421	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()  ==  0)  {  out.write(input,  out);  return;  }  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input  ==  null  ||  input.length()  ==  0)  {  out.write(input,  out);  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(input  ==  null  ||  input.length()  ==  0)  {  out.write(input,  out);  return;  }	  if(input    ==    null)    {    out.write(input,    out);    return;    }    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
422	[BUG]  [BUGGY]  int  inputLength  =  input.length();  char[]  inputLength  =  input.toChars();  [CE]  illegal  start  of  type  [FE]              NullPointerException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  int  inputLength  =  input.length();  char[]  inputLength  =  input.toChars();  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	int  inputLength  =  input.length();  char[]  inputLength  =  input.toChars();	          int    inputLength    =    input.length();    char[]    inputLength    =    input.length();    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
423	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    }    if(input  ==  null)  {  out.write(   "n     ");  }  if(input  ==  null)  {  out.write( ",n ");  }  if(input  ==  null)  {  out.write( "n ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	                if(input        ==        null)        {        out.write(       "n       ");        }        if(input    ==    null)    {    out.write(   "n       ");    }    if(input  ==  null)  {  out.write( ",n ");  }  if(input  ==  null)  {  out.write( "n ");  }	  	compilable	  [FE]  ComparisonFailure  	32	3	add
424	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    }    if(input  ==  null)  {  out.write(   "n     ");  }  if(input  ==  null)  {  out.write( ",n ");  }  if(input  ==  null)  {  out.write( "n ");  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    }    if(input  ==  null)  {  out.write(   "n     ");  }  if(input  ==  null)  {  out.write( ",n ");  }  if(input  ==  null)  {  out.write( "n ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	                if(input        ==        null)        {        out.write(       "n       ");        }        if(input    ==    null)    {    out.write(   "n       ");    }    if(input  ==  null)  {  out.write( ",n ");  }  if(input  ==  null)  {  out.write( "n ");  }	  	compilable	  [FE]  ComparisonFailure  	32	3	add
425	[BUG]  [BUGGY]  if(input.length()  ==  0)  {  out.write(input.charAt(0));  out.write(input.charAt(2));  }  else  {  out.write(input.charAt(0));  }  [CE]  illegal  start  of  type  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input.length()  ==  0)  {  out.write(input.charAt(0));  out.write(input.charAt(2));  }  else  {  out.write(input.charAt(0));  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(input.length()  ==  0)  {  out.write(input.charAt(0));  out.write(input.charAt(2));  }  else  {  out.write(input.charAt(0));  }	          out.write(input.charAt(0));    out.write(input.charAt(2));    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
426	[BUG]  [BUGGY]  Char  input  =  input.charAt(0);  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  Char  input  =  input.charAt(0);  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	Char  input  =  input.charAt(0);	  char    input    =    input.length();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
427	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()  ==  0)  {  out.write(Integer.toString(pos));  }  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input  ==  null  ||  input.length()  ==  0)  {  out.write(Integer.toString(pos));  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(input  ==  null  ||  input.length()  ==  0)  {  out.write(Integer.toString(pos));  }	  if(input    ==    null)    {    out.write(Integer.toString(pos));    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
428	[BUG]  [BUGGY]  if(input  ==  null)  {  out.write(Integer.toString(pos  +  1));  }  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input  ==  null)  {  out.write(Integer.toString(pos  +  1));  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(input  ==  null)  {  out.write(Integer.toString(pos  +  1));  }	  if(input    ==    null)    {    out.write(Integer.toString(pos));    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
429	[BUG]  [BUGGY]  OutputStream  input  =  new  FileOutputStream(input.getBytes()  +  1);  [CE]  illegal  start  of  type  [FE]          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  OutputStream  input  =  new  FileOutputStream(input.getBytes()  +  1);  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	OutputStream  input  =  new  FileOutputStream(input.getBytes()  +  1);	  OutputStream    input    =    new    FileOutputStream(input.getBytes());    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
430	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(0));  if(input.length()  ==  0)  {  out.write(input.charAt(0));  out.write(input.charAt(1));  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	                out.write(input.charAt(0));        out.write(input.charAt(0));    if(input.length()  ==  0)  {  out.write(input.charAt(0));  out.write(input.charAt(1));  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	18	19	add
431	[BUG]  [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(0));  if(input.length()  ==  0)  {  out.write(input.charAt(0));  out.write(input.charAt(1));  }  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(0));  if(input.length()  ==  0)  {  out.write(input.charAt(0));  out.write(input.charAt(1));  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	                out.write(input.charAt(0));        out.write(input.charAt(0));    if(input.length()  ==  0)  {  out.write(input.charAt(0));  out.write(input.charAt(1));  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	18	19	add
