bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  input  =  input.length()  -  1;  [CE]  illegal  start  of  type  [FE]          ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  int  input  =  input.length()  -  1;  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	int  input  =  input.length()  -  1;	      int    input    =    input.length();    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
2	[BUG]  [BUGGY]  char  input  =  input.length();  [CE]  illegal  start  of  type  [FE]            ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  char  input  =  input.length();  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	char  input  =  input.length();	      int    input    =    input.length();    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
3	[BUG]  [BUGGY]  out.write('n');  [CE]  illegal  start  of  type  [FE]    ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  out.write('n');  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	out.write('n');	      if(input    ==    null)    {    out.write('n');    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
4	[BUG]  [BUGGY]  OutputStream  input  =  new  FileOutputStream(input.getBytes());  [CE]  illegal  start  of  type  [FE]      ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  OutputStream  input  =  new  FileOutputStream(input.getBytes());  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	OutputStream  input  =  new  FileOutputStream(input.getBytes());	      if(input    ==    null)    {    out.write('n');    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
5	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]      if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	        if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  ComparisonFailure  	7	3	add
6	[BUG]  [BUGGY]      if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]      if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	        if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  ComparisonFailure  	7	3	add
7	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]      if(input  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	        if(input    ==    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  AssertionFailedError  	7	19	add
8	[BUG]  [BUGGY]      if(input  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  [FE]  AssertionFailedError  [FE]      ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]      if(input  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	        if(input    ==    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  AssertionFailedError  	7	19	add
9	[BUG]  [BUGGY]      if(input  ==  null)  {  out.write('n');  return;  }  If(input  ==  null)  {  out.write('n');  return;  }  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]      if(input  ==  null)  {  out.write('n');  return;  }  If(input  ==  null)  {  out.write('n');  return;  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	        if(input    ==    null)    {    out.write('n');    return;    }    If(input  ==  null)  {  out.write('n');  return;  }	  	non-compiled	[CE]  ';'  expected	7	None	add
10	[BUG]  [BUGGY]      if(input  ==  null)  {  out.write('n');  return;  }  if(input  >=  null)  {  out.write('n');  return;  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]          ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]      if(input  ==  null)  {  out.write('n');  return;  }  if(input  >=  null)  {  out.write('n');  return;  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	        if(input    ==    null)    {    out.write('n');    return;    }    if(input  >=  null)  {  out.write('n');  return;  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	7	None	add
11	[BUG]  [BUGGY]  out.write(input.charAt(0),  input.length());  [CE]  illegal  start  of  type  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  out.write(input.charAt(0),  input.length());  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	out.write(input.charAt(0),  input.length());	      out.write(input.charAt(0));    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
12	[BUG]  [BUGGY]  out.write(input.substring(1));  [CE]  illegal  start  of  type  [FE]      StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  out.write(input.substring(1));  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	out.write(input.substring(1));	      out.write(input.charAt(0));    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
13	[BUG]  [BUGGY]  out.write(input.getBytes());  [CE]  illegal  start  of  type  [FE]        StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  out.write(input.getBytes());  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	out.write(input.getBytes());	      out.write(input.charAt(0));    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
14	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()!=  0)  {  if(input  ==  null  ||  input.length()!=  0)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  if(input  ==  null  ||  input.length()!=  0)  {  if(input  ==  null  ||  input.length()!=  0)  {  [BUGGY]    return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(input    ==    null    ||    input.length()!=    0)    {    if(input  ==  null  ||  input.length()!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
15	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()!=  0)  {  if(input  ==  null  ||  input.length()  >=  0)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  if(input  ==  null  ||  input.length()!=  0)  {  if(input  ==  null  ||  input.length()  >=  0)  {  [BUGGY]    return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(input    ==    null    ||    input.length()!=    0)    {    if(input  ==  null  ||  input.length()  >=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
16	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()!=  0)  {  if(input!=  null  ||  input.length()!=  0)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  if(input  ==  null  ||  input.length()!=  0)  {  if(input!=  null  ||  input.length()!=  0)  {  [BUGGY]    return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(input    ==    null    ||    input.length()!=    0)    {    if(input!=  null  ||  input.length()!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
17	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()!=  0)  {  If(input  ==  null  ||  input.length()!=  0)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  if(input  ==  null  ||  input.length()!=  0)  {  If(input  ==  null  ||  input.length()!=  0)  {  [BUGGY]    return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(input    ==    null    ||    input.length()!=    0)    {    If(input  ==  null  ||  input.length()!=  0)  {	  	non-compiled	[CE]  ';'  expected	17	None	add
18	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]      out.write(input.charAt(0));  out.write(input.charAt(0));  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	        out.write(input.charAt(0));    out.write(input.charAt(0));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	15	19	add
19	[BUG]  [BUGGY]      out.write(input.charAt(0));  out.write(input.charAt(0));  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]      out.write(input.charAt(0));  out.write(input.charAt(0));  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	        out.write(input.charAt(0));    out.write(input.charAt(0));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	15	19	add
20	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]      out.write(input.charAt(0));  out.write(input.charAt(1));  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	        out.write(input.charAt(0));    out.write(input.charAt(1));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	15	19	add
21	[BUG]  [BUGGY]      out.write(input.charAt(0));  out.write(input.charAt(1));  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]      out.write(input.charAt(0));  out.write(input.charAt(1));  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	        out.write(input.charAt(0));    out.write(input.charAt(1));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	15	19	add
22	[BUG]  [BUGGY]      out.write(input.charAt(0));  char[]  input  =  input.getChars();  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]        StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]      out.write(input.charAt(0));  char[]  input  =  input.getChars();  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	        out.write(input.charAt(0));    char[]  input  =  input.getChars();	  	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	15	None	add
23	[BUG]  [BUGGY]      out.write(input.charAt(0));  in.write(input.charAt(0));  [CE]  cannot  find  symbol  in  [FE]          StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]      out.write(input.charAt(0));  in.write(input.charAt(0));  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	        out.write(input.charAt(0));    in.write(input.charAt(0));	  	non-compiled	[CE]  cannot  find  symbol  in	15	None	add
24	[BUG]  [BUGGY]      out.write(input.charAt(0));  char[]  input  =  input.toChars(pos);  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]            StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]      out.write(input.charAt(0));  char[]  input  =  input.toChars(pos);  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	        out.write(input.charAt(0));    char[]  input  =  input.toChars(pos);	  	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	15	None	add
25	[BUG]  [BUGGY]  int  inputLength  =  input.length()  -  1;  [CE]  illegal  start  of  type  [FE]    NullPointerException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  int  inputLength  =  input.length()  -  1;  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	int  inputLength  =  input.length()  -  1;	      int    inputLength    =    input.length();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
26	[BUG]  [BUGGY]  int  inputLength  =  input.length()  +  1;  [CE]  illegal  start  of  type  [FE]      NullPointerException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  int  inputLength  =  input.length()  +  1;  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	int  inputLength  =  input.length()  +  1;	      int    inputLength    =    input.length();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
27	[BUG]  [BUGGY]  int  inputLength  =  input.length()  -  2;  [CE]  illegal  start  of  type  [FE]        NullPointerException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  int  inputLength  =  input.length()  -  2;  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	int  inputLength  =  input.length()  -  2;	      int    inputLength    =    input.length();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
28	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  if(input  ==  null  ||  input.length()  >=  0)  {  [BUGGY]    return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	if(input  ==  null  ||  input.length()  >=  0)  {	  if(input    ==    null    ||    input.length()!=    0)    {    	compilable	  [FE]  AssertionFailedError  	18	19	replace
29	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()  >=  0)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  if(input  ==  null  ||  input.length()  >=  0)  {  [BUGGY]    return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(input  ==  null  ||  input.length()  >=  0)  {	  if(input    ==    null    ||    input.length()!=    0)    {    	compilable	  [FE]  AssertionFailedError  	18	19	replace
30	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  if(input!=  null  ||  input.length()  ==  0)  {  [BUGGY]    return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	if(input!=  null  ||  input.length()  ==  0)  {	  if(input    ==    null    ||    input.length()!=    0)    {    	compilable	  [FE]  AssertionFailedError  	18	19	replace
31	[BUG]  [BUGGY]  if(input!=  null  ||  input.length()  ==  0)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  if(input!=  null  ||  input.length()  ==  0)  {  [BUGGY]    return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(input!=  null  ||  input.length()  ==  0)  {	  if(input    ==    null    ||    input.length()!=    0)    {    	compilable	  [FE]  AssertionFailedError  	18	19	replace
32	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]      if(input  ==  null)  {  out.write(   "n   ");  }  if(input  ==  null)  {  out.write( "n   ");  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	        if(input    ==    null)    {    out.write(   "n   ");    }    if(input  ==  null)  {  out.write( "n   ");  }	  	compilable	  [FE]  ComparisonFailure  	12	3	add
33	[BUG]  [BUGGY]      if(input  ==  null)  {  out.write(   "n   ");  }  if(input  ==  null)  {  out.write( "n   ");  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]      if(input  ==  null)  {  out.write(   "n   ");  }  if(input  ==  null)  {  out.write( "n   ");  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	        if(input    ==    null)    {    out.write(   "n   ");    }    if(input  ==  null)  {  out.write( "n   ");  }	  	compilable	  [FE]  ComparisonFailure  	12	3	add
34	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]      if(input  ==  null)  {  out.write(   "n   ");  }  if(input!=  null)  {  out.write( "n   ");  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	        if(input    ==    null)    {    out.write(   "n   ");    }    if(input!=  null)  {  out.write( "n   ");  }	  	compilable	  [FE]  ComparisonFailure  	12	19	add
35	[BUG]  [BUGGY]      if(input  ==  null)  {  out.write(   "n   ");  }  if(input!=  null)  {  out.write( "n   ");  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]      if(input  ==  null)  {  out.write(   "n   ");  }  if(input!=  null)  {  out.write( "n   ");  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	        if(input    ==    null)    {    out.write(   "n   ");    }    if(input!=  null)  {  out.write( "n   ");  }	  	compilable	  [FE]  ComparisonFailure  	12	19	add
36	[BUG]  [BUGGY]  if(input  ==  null)  {  out.write(input);  }  [CE]  illegal  start  of  type  [FE]                ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  if(input  ==  null)  {  out.write(input);  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(input  ==  null)  {  out.write(input);  }	      if(input    ==    null)    {    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
37	[BUG]  [BUGGY]  if(input  ==  null)  {  out.write(Integer.toString(pos));  }  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  if(input  ==  null)  {  out.write(Integer.toString(pos));  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(input  ==  null)  {  out.write(Integer.toString(pos));  }	      if(input    ==    null)    {    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
38	[BUG]  [BUGGY]  if(input  ==  null)  {  out.write(input.length());  }  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  if(input  ==  null)  {  out.write(input.length());  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(input  ==  null)  {  out.write(input.length());  }	      if(input    ==    null)    {    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
39	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]      if(input!=  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	        if(input!=    null)    {    out.write('n');    }    if(input!=  null)  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	5	19	add
40	[BUG]  [BUGGY]      if(input!=  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]      if(input!=  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	        if(input!=    null)    {    out.write('n');    }    if(input!=  null)  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	5	19	add
41	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]      if(input!=  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	        if(input!=    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	5	19	add
42	[BUG]  [BUGGY]      if(input!=  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]      if(input!=  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	        if(input!=    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	5	19	add
43	[BUG]  [BUGGY]      if(input!=  null)  {  out.write('n');  }  if(input  >=  null)  {  out.write('n');  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]        ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]      if(input!=  null)  {  out.write('n');  }  if(input  >=  null)  {  out.write('n');  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	        if(input!=    null)    {    out.write('n');    }    if(input  >=  null)  {  out.write('n');  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	5	None	add
44	[BUG]  [BUGGY]      if(input!=  null)  {  out.write('n');  }  If(input!=  null)  {  out.write('n');  }  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]      if(input!=  null)  {  out.write('n');  }  If(input!=  null)  {  out.write('n');  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	        if(input!=    null)    {    out.write('n');    }    If(input!=  null)  {  out.write('n');  }	  	non-compiled	[CE]  ';'  expected	5	None	add
45	[BUG]  [BUGGY]  out.write('n');  return;  [CE]  illegal  start  of  type  [FE]    ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  out.write('n');  return;  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	out.write('n');  return;	      if(input    ==    null)    {    out.write('n');    return;    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
46	[BUG]  [BUGGY]  if(input!=  null)  {  out.write('n');  return;  }  [CE]  illegal  start  of  type  [FE]      ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  if(input!=  null)  {  out.write('n');  return;  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(input!=  null)  {  out.write('n');  return;  }	      if(input    ==    null)    {    out.write('n');    return;    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
47	[BUG]  [BUGGY]  out.write(input);  return;  [CE]  illegal  start  of  type  [FE]          ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  out.write(input);  return;  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	out.write(input);  return;	      if(input    ==    null)    {    out.write(input);    return;    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
48	[BUG]  [BUGGY]  if(input!=  null)  {  out.write(input);  return;  }  [CE]  illegal  start  of  type  [FE]            ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  if(input!=  null)  {  out.write(input);  return;  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(input!=  null)  {  out.write(input);  return;  }	      if(input    ==    null)    {    out.write(input);    return;    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
49	[BUG]  [BUGGY]  if(input  ==  null)  {  out.write(input,  0,  input.length());  return;  }  [CE]  illegal  start  of  type  [FE]              ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  if(input  ==  null)  {  out.write(input,  0,  input.length());  return;  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(input  ==  null)  {  out.write(input,  0,  input.length());  return;  }	      if(input    ==    null)    {    out.write(input);    return;    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
50	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]      if(input  ==  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	        if(input    ==    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	3	3	add
51	[BUG]  [BUGGY]      if(input  ==  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]      if(input  ==  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	        if(input    ==    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	3	3	add
52	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]      if(input  ==  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	        if(input    ==    null)    {    out.write('n');    }    if(input!=  null)  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	3	19	add
53	[BUG]  [BUGGY]      if(input  ==  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]      if(input  ==  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	        if(input    ==    null)    {    out.write('n');    }    if(input!=  null)  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	3	19	add
54	[BUG]  [BUGGY]      if(input  ==  null)  {  out.write('n');  }  If(input  ==  null)  {  out.write('n');  }  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]      if(input  ==  null)  {  out.write('n');  }  If(input  ==  null)  {  out.write('n');  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	        if(input    ==    null)    {    out.write('n');    }    If(input  ==  null)  {  out.write('n');  }	  	non-compiled	[CE]  ';'  expected	3	None	add
55	[BUG]  [BUGGY]      if(input  ==  null)  {  out.write('n');  }  if(input  >=  null)  {  out.write('n');  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]          ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]      if(input  ==  null)  {  out.write('n');  }  if(input  >=  null)  {  out.write('n');  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	        if(input    ==    null)    {    out.write('n');    }    if(input  >=  null)  {  out.write('n');  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	3	None	add
56	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()  ==  0)  {  if(input  ==  null  ||  input.length()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  if(input  ==  null  ||  input.length()  ==  0)  {  if(input  ==  null  ||  input.length()  ==  0)  {  [BUGGY]    return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(input    ==    null    ||    input.length()    ==    0)    {    if(input  ==  null  ||  input.length()  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
57	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()  ==  0)  {  if(input!=  null  ||  input.length()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  if(input  ==  null  ||  input.length()  ==  0)  {  if(input!=  null  ||  input.length()  ==  0)  {  [BUGGY]    return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(input    ==    null    ||    input.length()    ==    0)    {    if(input!=  null  ||  input.length()  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
58	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()  ==  0)  {  if(input  ==  null  ||  input.length()!=  0)  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  if(input  ==  null  ||  input.length()  ==  0)  {  if(input  ==  null  ||  input.length()!=  0)  {  [BUGGY]    return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(input    ==    null    ||    input.length()    ==    0)    {    if(input  ==  null  ||  input.length()!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
59	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()  ==  0)  {  If(input  ==  null  ||  input.length()  ==  0)  {  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  if(input  ==  null  ||  input.length()  ==  0)  {  If(input  ==  null  ||  input.length()  ==  0)  {  [BUGGY]    return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(input    ==    null    ||    input.length()    ==    0)    {    If(input  ==  null  ||  input.length()  ==  0)  {	  	non-compiled	[CE]  ';'  expected	10	None	add
60	[BUG]  [BUGGY]      int  inputLength  =  input.length();  int  inputLength  =  input.length();  [CE]  variable  inputLength  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]    NullPointerException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]      int  inputLength  =  input.length();  int  inputLength  =  input.length();  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	        int    inputLength    =    input.length();    int  inputLength  =  input.length();	  	non-compiled	[CE]  variable  inputLength  is  already  defined  in  method  translate(CharSequence,Writer)	1	None	add
61	[BUG]  [BUGGY]      int  inputLength  =  input.length();  Integer  inputLength  =  input.length();  [CE]  variable  inputLength  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]      NullPointerException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]      int  inputLength  =  input.length();  Integer  inputLength  =  input.length();  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	        int    inputLength    =    input.length();    Integer  inputLength  =  input.length();	  	non-compiled	[CE]  variable  inputLength  is  already  defined  in  method  translate(CharSequence,Writer)	1	None	add
62	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]      int  inputLength  =  input.length();  int  outputLength  =  input.length();  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	        int    inputLength    =    input.length();    int  outputLength  =  input.length();	  	compilable	  [FE]  NullPointerException  	1	5	add
63	[BUG]  [BUGGY]      int  inputLength  =  input.length();  int  outputLength  =  input.length();  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]      int  inputLength  =  input.length();  int  outputLength  =  input.length();  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	        int    inputLength    =    input.length();    int  outputLength  =  input.length();	  	compilable	  [FE]  NullPointerException  	1	5	add
64	[BUG]  [BUGGY]      int  inputLength  =  input.length();  char[]  inputLength  =  input.length();  [CE]  variable  inputLength  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]          NullPointerException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]      int  inputLength  =  input.length();  char[]  inputLength  =  input.length();  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	        int    inputLength    =    input.length();    char[]  inputLength  =  input.length();	  	non-compiled	[CE]  variable  inputLength  is  already  defined  in  method  translate(CharSequence,Writer)	1	None	add
65	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  if(input  ==  null  ||  input.length()  <  =  0)  {  [BUGGY]    return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(input  ==  null  ||  input.length()  <  =  0)  {	  if(input    ==    null    ||    input.length()    <    0)    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
66	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()  <  0)  {  if(input  ==  null  ||  input.length()  <  0)  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  if(input  ==  null  ||  input.length()  <  0)  {  if(input  ==  null  ||  input.length()  <  0)  {  [BUGGY]    return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(input    ==    null    ||    input.length()    <    0)    {    if(input  ==  null  ||  input.length()  <  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	19	None	add
67	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()  <  0)  {  if(input!=  null  ||  input.length()  <  0)  {  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  if(input  ==  null  ||  input.length()  <  0)  {  if(input!=  null  ||  input.length()  <  0)  {  [BUGGY]    return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(input    ==    null    ||    input.length()    <    0)    {    if(input!=  null  ||  input.length()  <  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	19	None	add
68	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()  <  0)  {  If(input  ==  null  ||  input.length()  <  0)  {  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  if(input  ==  null  ||  input.length()  <  0)  {  If(input  ==  null  ||  input.length()  <  0)  {  [BUGGY]    return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(input    ==    null    ||    input.length()    <    0)    {    If(input  ==  null  ||  input.length()  <  0)  {	  	non-compiled	[CE]  ';'  expected	19	None	add
69	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()  <  0)  {  if(input  >=  null  ||  input.length()  <  0)  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  if(input  ==  null  ||  input.length()  <  0)  {  if(input  >=  null  ||  input.length()  <  0)  {  [BUGGY]    return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(input    ==    null    ||    input.length()    <    0)    {    if(input  >=  null  ||  input.length()  <  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	19	None	add
70	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]      if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	        if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input  ==  null  ||  input.length()  ==  0)  {  return;  }	  	compilable	  [FE]  ComparisonFailure  	21	1	add
71	[BUG]  [BUGGY]      if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]      if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	        if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input  ==  null  ||  input.length()  ==  0)  {  return;  }	  	compilable	  [FE]  ComparisonFailure  	21	1	add
72	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]      if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input!=  null  ||  input.length()  ==  0)  {  return;  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	        if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input!=  null  ||  input.length()  ==  0)  {  return;  }	  	compilable	  [FE]  AssertionFailedError  	21	19	add
73	[BUG]  [BUGGY]      if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input!=  null  ||  input.length()  ==  0)  {  return;  }  [FE]  AssertionFailedError  [FE]      ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]      if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input!=  null  ||  input.length()  ==  0)  {  return;  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	        if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input!=  null  ||  input.length()  ==  0)  {  return;  }	  	compilable	  [FE]  AssertionFailedError  	21	19	add
74	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]      if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()!=  0)  {  return;  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	        if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input  ==  null  ||  input.length()!=  0)  {  return;  }	  	compilable	  [FE]  AssertionFailedError  	21	19	add
75	[BUG]  [BUGGY]      if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()!=  0)  {  return;  }  [FE]  AssertionFailedError  [FE]        ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]      if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  if(input  ==  null  ||  input.length()!=  0)  {  return;  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	        if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    if(input  ==  null  ||  input.length()!=  0)  {  return;  }	  	compilable	  [FE]  AssertionFailedError  	21	19	add
76	[BUG]  [BUGGY]      if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  If(input  ==  null  ||  input.length()  ==  0)  {  return;  }  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]      if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  If(input  ==  null  ||  input.length()  ==  0)  {  return;  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	        if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    If(input  ==  null  ||  input.length()  ==  0)  {  return;  }	  	non-compiled	[CE]  ';'  expected	21	None	add
77	[BUG]  [BUGGY]  out.write( "null ");  [CE]  illegal  start  of  type  [FE]    ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  out.write( "null ");  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	out.write( "null ");	      if(input    ==    null)    {    out.write(   "n   ");    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
78	[BUG]  [BUGGY]  if(input  ==  null)  {  out.write( "null ");  }  [CE]  illegal  start  of  type  [FE]      ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  if(input  ==  null)  {  out.write( "null ");  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(input  ==  null)  {  out.write( "null ");  }	      if(input    ==    null)    {    out.write(   "n   ");    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
79	[BUG]  [BUGGY]  if(input  ==  null)  {  out.write( "None ");  }  [CE]  illegal  start  of  type  [FE]        ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  if(input  ==  null)  {  out.write( "None ");  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(input  ==  null)  {  out.write( "None ");  }	      if(input    ==    null)    {    out.write(   "n   ");    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
80	[BUG]  [BUGGY]  if(input!=  null  ||  input.length()  ==  0)  {  return;  }  [CE]  illegal  start  of  type  [FE]    ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  if(input!=  null  ||  input.length()  ==  0)  {  return;  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(input!=  null  ||  input.length()  ==  0)  {  return;  }	      if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
81	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()!=  0)  {  return;  }  [CE]  illegal  start  of  type  [FE]      ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  if(input  ==  null  ||  input.length()!=  0)  {  return;  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(input  ==  null  ||  input.length()!=  0)  {  return;  }	      if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
82	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()  <  =  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  if(input  ==  null  ||  input.length()  <  =  0)  {  return;  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(input  ==  null  ||  input.length()  <  =  0)  {  return;  }	      if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
83	[BUG]  [BUGGY]  out.write(Integer.toString(input.charAt(0)));  [CE]  illegal  start  of  type  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  out.write(Integer.toString(input.charAt(0)));  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	out.write(Integer.toString(input.charAt(0)));	      out.write(input.charAt(0));    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
84	[BUG]  [BUGGY]  out.write(Integer.toString(input.length()));  [CE]  illegal  start  of  type  [FE]      StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  out.write(Integer.toString(input.length()));  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	out.write(Integer.toString(input.length()));	      out.write(input.charAt(0));    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
85	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]      out.write(input.charAt(0));  out.write(input.charAt(2));  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	        out.write(input.charAt(0));    out.write(input.charAt(2));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	15	19	add
86	[BUG]  [BUGGY]      out.write(input.charAt(0));  out.write(input.charAt(2));  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]      out.write(input.charAt(0));  out.write(input.charAt(2));  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	        out.write(input.charAt(0));    out.write(input.charAt(2));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	15	19	add
87	[BUG]  [BUGGY]  OutputFactory  outputFactory  =  getOutputFactory();  [CE]  illegal  start  of  type  [FE]    ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  OutputFactory  outputFactory  =  getOutputFactory();  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	OutputFactory  outputFactory  =  getOutputFactory();	      if(input    ==    null)    {    out.write('n');    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
88	[BUG]  [BUGGY]  OutputStream  input  =  output.getOutputStream();  [CE]  illegal  start  of  type  [FE]      ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  OutputStream  input  =  output.getOutputStream();  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	OutputStream  input  =  output.getOutputStream();	      if(input    ==    null)    {    out.write('n');    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
89	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]      if(input  ==  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  return;  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	        if(input    ==    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  ComparisonFailure  	3	3	add
90	[BUG]  [BUGGY]      if(input  ==  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  return;  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]      if(input  ==  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  return;  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	        if(input    ==    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  ComparisonFailure  	3	3	add
91	[BUG]  [BUGGY]  char  inputLength  =  input.length();  [CE]  illegal  start  of  type  [FE]    NullPointerException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  char  inputLength  =  input.length();  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	char  inputLength  =  input.length();	      int    inputLength    =    input.length();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
92	[BUG]  [BUGGY]  OutputStream  input  =  new  BufferedOutputStream(out.readLine());  [CE]  illegal  start  of  type  [FE]    ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  OutputStream  input  =  new  BufferedOutputStream(out.readLine());  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	OutputStream  input  =  new  BufferedOutputStream(out.readLine());	      if(input!=    null)    {    out.write('n');    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
93	[BUG]  [BUGGY]  out.write( "n ");  [CE]  illegal  start  of  type  [FE]    ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  out.write( "n ");  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	out.write( "n ");	      if(input    ==    null)    {    out.write(   "n   ");    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
94	[BUG]  [BUGGY]  out.write( "no  input ");  [CE]  illegal  start  of  type  [FE]      ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  out.write( "no  input ");  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	out.write( "no  input ");	      if(input    ==    null)    {    out.write(   "n   ");    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
95	[BUG]  [BUGGY]  if(input  ==  null)  {  out.write(out);  }  [CE]  illegal  start  of  type  [FE]                ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  if(input  ==  null)  {  out.write(out);  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(input  ==  null)  {  out.write(out);  }	      if(input    ==    null)    {    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
96	[BUG]  [BUGGY]  if(out  ==  null)  {  out.write(input);  }  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  if(out  ==  null)  {  out.write(input);  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(out  ==  null)  {  out.write(input);  }	      if(input    ==    null)    {    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
97	[BUG]  [BUGGY]      if(input  ==  null)  {  out.write('n');  return;  }  input  ==  null)  {  out.write('n');  return;  }  [CE]  not  a  statement  [FE]    ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]      if(input  ==  null)  {  out.write('n');  return;  }  input  ==  null)  {  out.write('n');  return;  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	        if(input    ==    null)    {    out.write('n');    return;    }    input  ==  null)  {  out.write('n');  return;  }	  	non-compiled	[CE]  not  a  statement	7	None	add
98	[BUG]  [BUGGY]  if(input  ==  null)  {  out.write(input,  out);  return;  }  [CE]  illegal  start  of  type  [FE]          ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  if(input  ==  null)  {  out.write(input,  out);  return;  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(input  ==  null)  {  out.write(input,  out);  return;  }	      if(input    ==    null)    {    out.write(input);    return;    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
99	[BUG]  [BUGGY]  if(out  ==  null)  {  out.write(input);  return;  }  [CE]  illegal  start  of  type  [FE]            ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  if(out  ==  null)  {  out.write(input);  return;  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(out  ==  null)  {  out.write(input);  return;  }	      if(input    ==    null)    {    out.write(input);    return;    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
100	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()  >=  0)  {  return;  }  [CE]  illegal  start  of  type  [FE]    ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  if(input  ==  null  ||  input.length()  >=  0)  {  return;  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(input  ==  null  ||  input.length()  >=  0)  {  return;  }	      if(input    ==    null    ||    input.length()    ==    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
101	[BUG]  [BUGGY]      int  inputLength  =  input.length();  Int  int  inputLength  =  input.length();  [CE]  not  a  statement  [FE]    NullPointerException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]      int  inputLength  =  input.length();  Int  int  inputLength  =  input.length();  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	        int    inputLength    =    input.length();    Int  int  inputLength  =  input.length();	  	non-compiled	[CE]  not  a  statement	1	None	add
102	[BUG]  [BUGGY]      if(input!=  null)  {  out.write('n');  }  if(input  >>  null)  {  out.write('n');  }  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]    ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]      if(input!=  null)  {  out.write('n');  }  if(input  >>  null)  {  out.write('n');  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	        if(input!=    null)    {    out.write('n');    }    if(input  >>  null)  {  out.write('n');  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	5	None	add
103	[BUG]  [BUGGY]  int  input  =  output.length();  [CE]  illegal  start  of  type  [FE]          ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  int  input  =  output.length();  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	int  input  =  output.length();	      int    input    =    input.length();    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
104	[BUG]  [BUGGY]  out.write(input.substring(0,  input.length()  -  1));  [CE]  illegal  start  of  type  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  out.write(input.substring(0,  input.length()  -  1));  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	out.write(input.substring(0,  input.length()  -  1));	      out.write(input.charAt(0));    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
105	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]      if(input  ==  null)  {  out.write(   "n   ");  }  if(input  ==  null)  {  out.write( ".n   ");  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	        if(input    ==    null)    {    out.write(   "n   ");    }    if(input  ==  null)  {  out.write( ".n   ");  }	  	compilable	  [FE]  ComparisonFailure  	12	3	add
106	[BUG]  [BUGGY]      if(input  ==  null)  {  out.write(   "n   ");  }  if(input  ==  null)  {  out.write( ".n   ");  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]      if(input  ==  null)  {  out.write(   "n   ");  }  if(input  ==  null)  {  out.write( ".n   ");  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	        if(input    ==    null)    {    out.write(   "n   ");    }    if(input  ==  null)  {  out.write( ".n   ");  }	  	compilable	  [FE]  ComparisonFailure  	12	3	add
107	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]      if(input  ==  null)  {  out.write(   "n   ");  }  if(input  ==  null)  {  out.write( ",n   ");  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	        if(input    ==    null)    {    out.write(   "n   ");    }    if(input  ==  null)  {  out.write( ",n   ");  }	  	compilable	  [FE]  ComparisonFailure  	12	3	add
108	[BUG]  [BUGGY]      if(input  ==  null)  {  out.write(   "n   ");  }  if(input  ==  null)  {  out.write( ",n   ");  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]      if(input  ==  null)  {  out.write(   "n   ");  }  if(input  ==  null)  {  out.write( ",n   ");  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	        if(input    ==    null)    {    out.write(   "n   ");    }    if(input  ==  null)  {  out.write( ",n   ");  }	  	compilable	  [FE]  ComparisonFailure  	12	3	add
109	[BUG]  [BUGGY]  if(out!=  null)  {  out.write('n');  }  [CE]  illegal  start  of  type  [FE]    ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  if(out!=  null)  {  out.write('n');  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(out!=  null)  {  out.write('n');  }	      if(input!=    null)    {    out.write('n');    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
110	[BUG]  [BUGGY]      if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  output.write('n');  return;  }  [CE]  cannot  find  symbol  output  [FE]    ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]      if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  output.write('n');  return;  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	        if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  output.write('n');  return;  }	  	non-compiled	[CE]  cannot  find  symbol  output	7	None	add
111	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()  ==  0)  {  out.write(input);  return;  }  [CE]  illegal  start  of  type  [FE]          ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  if(input  ==  null  ||  input.length()  ==  0)  {  out.write(input);  return;  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(input  ==  null  ||  input.length()  ==  0)  {  out.write(input);  return;  }	      if(input    ==    null)    {    out.write(input);    return;    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
112	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()  <  0)  {  if(input  {  null  ||  input.length()  <  0)  {  [CE]  ')'  expected  [FE]    ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  if(input  ==  null  ||  input.length()  <  0)  {  if(input  {  null  ||  input.length()  <  0)  {  [BUGGY]    return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(input    ==    null    ||    input.length()    <    0)    {    if(input  {  null  ||  input.length()  <  0)  {	  	non-compiled	[CE]  ')'  expected	19	None	add
113	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()!=  0)  {  if(input  ==  null  ||  input.length()  >>  0)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  if(input  ==  null  ||  input.length()!=  0)  {  if(input  ==  null  ||  input.length()  >>  0)  {  [BUGGY]    return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(input    ==    null    ||    input.length()!=    0)    {    if(input  ==  null  ||  input.length()  >>  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
114	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()  ==  0)  {  out.write('n');  }  [CE]  illegal  start  of  type  [FE]    ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  if(input  ==  null  ||  input.length()  ==  0)  {  out.write('n');  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(input  ==  null  ||  input.length()  ==  0)  {  out.write('n');  }	      if(input    ==    null)    {    out.write('n');    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
115	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()!=  0)  {  out.write('n');  }  [CE]  illegal  start  of  type  [FE]      ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  if(input  ==  null  ||  input.length()!=  0)  {  out.write('n');  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(input  ==  null  ||  input.length()!=  0)  {  out.write('n');  }	      if(input    ==    null)    {    out.write('n');    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
116	[BUG]  [BUGGY]  if(input  ==  null)  {  out.write( ", ");  }  [CE]  illegal  start  of  type  [FE]    ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  if(input  ==  null)  {  out.write( ", ");  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(input  ==  null)  {  out.write( ", ");  }	      if(input    ==    null)    {    out.write(   "n   ");    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
117	[BUG]  [BUGGY]      out.write(input.charAt(0));  char[]  input  =  input.toChars();  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]      out.write(input.charAt(0));  char[]  input  =  input.toChars();  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	        out.write(input.charAt(0));    char[]  input  =  input.toChars();	  	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	15	None	add
118	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()  ==  0)  {  out.write('n');  return;  }  [CE]  illegal  start  of  type  [FE]    ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  if(input  ==  null  ||  input.length()  ==  0)  {  out.write('n');  return;  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(input  ==  null  ||  input.length()  ==  0)  {  out.write('n');  return;  }	      if(input    ==    null)    {    out.write('n');    return;    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
119	[BUG]  [BUGGY]  if(input  ==  null)  {  out.write(Input.toString(input));  }  [CE]  illegal  start  of  type  [FE]                ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  if(input  ==  null)  {  out.write(Input.toString(input));  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(input  ==  null)  {  out.write(Input.toString(input));  }	      if(input    ==    null)    {    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
120	[BUG]  [BUGGY]      int  inputLength  =  input.length();  Int  inputLength  =  input.length();  [CE]  cannot  find  symbol  [FE]    NullPointerException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]      int  inputLength  =  input.length();  Int  inputLength  =  input.length();  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	        int    inputLength    =    input.length();    Int  inputLength  =  input.length();	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
121	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  if(input!=  null  ||  input.length()!=  0)  {  [BUGGY]    return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	if(input!=  null  ||  input.length()!=  0)  {	  if(input    ==    null    ||    input.length()!=    0)    {    	compilable	  [FE]  AssertionFailedError  	18	19	replace
122	[BUG]  [BUGGY]  if(input!=  null  ||  input.length()!=  0)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  if(input!=  null  ||  input.length()!=  0)  {  [BUGGY]    return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(input!=  null  ||  input.length()!=  0)  {	  if(input    ==    null    ||    input.length()!=    0)    {    	compilable	  [FE]  AssertionFailedError  	18	19	replace
