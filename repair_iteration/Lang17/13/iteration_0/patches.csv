bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    ComparisonFailure  [CONTEXT]  public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  [BUGGY]    pos  +=  input.length();  [BUGGY]  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	85	85	1	add	    pos  +=  input.length();		compilable	  [FE]  StringIndexOutOfBoundsException  	26	19	add
2	[BUG]  [BUGGY]    pos  +=  input.length();  [FE]  StringIndexOutOfBoundsException  [FE]    ComparisonFailure  [CONTEXT]  public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  [BUGGY]    pos  +=  input.length();  [BUGGY]  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	85	85	1	replace	    pos  +=  input.length();		compilable	  [FE]  StringIndexOutOfBoundsException  	26	19	add
3	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]      ComparisonFailure  [CONTEXT]  public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  [BUGGY]    pos  =  input.length();  [BUGGY]  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	85	85	1	add	    pos  =  input.length();		compilable	  [FE]  StringIndexOutOfBoundsException  	26	19	add
4	[BUG]  [BUGGY]    pos  =  input.length();  [FE]  StringIndexOutOfBoundsException  [FE]      ComparisonFailure  [CONTEXT]  public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  [BUGGY]    pos  =  input.length();  [BUGGY]  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	85	85	1	replace	    pos  =  input.length();		compilable	  [FE]  StringIndexOutOfBoundsException  	26	19	add
5	[BUG]  [BUGGY]    int  pos  =  input.length();  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]        ComparisonFailure  [CONTEXT]  public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  [BUGGY]    int  pos  =  input.length();  [BUGGY]  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	85	85	1	replace	    int  pos  =  input.length();		non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	26	None	add
6	[BUG]  [BUGGY]    pos  +=  input.length();  out.write(c);  [CE]  cannot  find  symbol  c  [FE]          ComparisonFailure  [CONTEXT]  public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  [BUGGY]    pos  +=  input.length();  out.write(c);  [BUGGY]  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	85	85	1	replace	    pos  +=  input.length();  out.write(c);		non-compiled	[CE]  cannot  find  symbol  c	26	None	add
7	[BUG]  [BUGGY]    if(pos  <  len)  {  out.write(c);  }  [CE]  cannot  find  symbol  c  [FE]            ComparisonFailure  [CONTEXT]  public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  [BUGGY]    if(pos  <  len)  {  out.write(c);  }  [BUGGY]  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	85	85	1	replace	    if(pos  <  len)  {  out.write(c);  }		non-compiled	[CE]  cannot  find  symbol  c	26	None	add
8	[BUG]  [BUGGY]  int  consumed  =  translate(input,  pos,  len);  [CE]  no  suitable  method  found  for  translate(CharSequence,int,int)  [FE]    ComparisonFailure  [CONTEXT]  public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  [BUGGY]  int  consumed  =  translate(input,  pos,  len);  [BUGGY]  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	85	85	1	replace	int  consumed  =  translate(input,  pos,  len);	int  consumed  =  translate(input,  pos,  out);  	non-compiled	[CE]  no  suitable  method  found  for  translate(CharSequence,int,int)	25	None	replace
9	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]      ComparisonFailure  [CONTEXT]  public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  [BUGGY]  int  consumed  =  translate(input,  len,  out);  [BUGGY]  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	85	85	1	add	int  consumed  =  translate(input,  len,  out);	int  consumed  =  translate(input,  pos,  out);  	compilable	  [FE]  StringIndexOutOfBoundsException  	25	18	replace
10	[BUG]  [BUGGY]  int  consumed  =  translate(input,  len,  out);  [FE]  StringIndexOutOfBoundsException  [FE]      ComparisonFailure  [CONTEXT]  public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  [BUGGY]  int  consumed  =  translate(input,  len,  out);  [BUGGY]  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	85	85	1	replace	int  consumed  =  translate(input,  len,  out);	int  consumed  =  translate(input,  pos,  out);  	compilable	  [FE]  StringIndexOutOfBoundsException  	25	18	replace
11	[BUG]  [BUGGY]  int  consumed  =  translate(input,  pos,  out,  len);  [CE]  no  suitable  method  found  for  translate(CharSequence,int,Writer,int)  [FE]        ComparisonFailure  [CONTEXT]  public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  [BUGGY]  int  consumed  =  translate(input,  pos,  out,  len);  [BUGGY]  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	85	85	1	replace	int  consumed  =  translate(input,  pos,  out,  len);	int  consumed  =  translate(input,  pos,  out);  	non-compiled	[CE]  no  suitable  method  found  for  translate(CharSequence,int,Writer,int)	25	None	replace
12	[BUG]  [BUGGY]  int  consumed  =  translate(input,  out,  pos);  [CE]  no  suitable  method  found  for  translate(CharSequence,Writer,int)  [FE]          ComparisonFailure  [CONTEXT]  public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  [BUGGY]  int  consumed  =  translate(input,  out,  pos);  [BUGGY]  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	85	85	1	replace	int  consumed  =  translate(input,  out,  pos);	int  consumed  =  translate(input,  pos,  out);  	non-compiled	[CE]  no  suitable  method  found  for  translate(CharSequence,Writer,int)	25	None	replace
13	[BUG]  [BUGGY]  int  consumed  =  translate(input,  out);  [CE]  incompatible  types  [FE]    ComparisonFailure  [CONTEXT]  public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  [BUGGY]  int  consumed  =  translate(input,  out);  [BUGGY]  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	85	85	1	replace	int  consumed  =  translate(input,  out);	int  consumed  =  translate(input,  pos,  out);  	non-compiled	[CE]  incompatible  types	25	None	replace
14	[BUG]  [BUGGY]  int  consumed  =  translate(out,  pos);  [CE]  no  suitable  method  found  for  translate(Writer,int)  [FE]      ComparisonFailure  [CONTEXT]  public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  [BUGGY]  int  consumed  =  translate(out,  pos);  [BUGGY]  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	85	85	1	replace	int  consumed  =  translate(out,  pos);	int  consumed  =  translate(input,  pos,  out);  	non-compiled	[CE]  no  suitable  method  found  for  translate(Writer,int)	25	None	replace
15	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure  [CONTEXT]  public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  [BUGGY]    out.write('n');  [BUGGY]  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	85	85	1	add	    out.write('n');		compilable	  [FE]  ComparisonFailure  	26	19	add
16	[BUG]  [BUGGY]    out.write('n');  [FE]  ComparisonFailure  [FE]    ComparisonFailure  [CONTEXT]  public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  [BUGGY]    out.write('n');  [BUGGY]  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	85	85	1	replace	    out.write('n');		compilable	  [FE]  ComparisonFailure  	26	19	add
17	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure  [CONTEXT]  public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  [BUGGY]    out.write(len);  [BUGGY]  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	85	85	1	add	    out.write(len);		compilable	  [FE]  ComparisonFailure  	26	19	add
18	[BUG]  [BUGGY]    out.write(len);  [FE]  ComparisonFailure  [FE]      ComparisonFailure  [CONTEXT]  public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  [BUGGY]    out.write(len);  [BUGGY]  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	85	85	1	replace	    out.write(len);		compilable	  [FE]  ComparisonFailure  	26	19	add
19	[BUG]  [BUGGY]    out.write(c);  [CE]  cannot  find  symbol  c  [FE]        ComparisonFailure  [CONTEXT]  public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  [BUGGY]    out.write(c);  [BUGGY]  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	85	85	1	replace	    out.write(c);		non-compiled	[CE]  cannot  find  symbol  c	26	None	add
20	[BUG]  [BUGGY]    int  input  =  input.length();  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]    ComparisonFailure  [CONTEXT]  public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  [BUGGY]    int  input  =  input.length();  [BUGGY]  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	85	85	1	replace	    int  input  =  input.length();		non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	26	None	add
21	[BUG]  [BUGGY]  int  consumed  =  translate(out,  pos,  input);  [CE]  no  suitable  method  found  for  translate(Writer,int,CharSequence)  [FE]    ComparisonFailure  [CONTEXT]  public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  [BUGGY]  int  consumed  =  translate(out,  pos,  input);  [BUGGY]  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	85	85	1	replace	int  consumed  =  translate(out,  pos,  input);	int  consumed  =  translate(input,  pos,  out);  	non-compiled	[CE]  no  suitable  method  found  for  translate(Writer,int,CharSequence)	25	None	replace
