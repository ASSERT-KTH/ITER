bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]      if(c!=  null)  {  out.write(c);  }  else  {  out.write('n');  }  if(c!=  null)  {  out.write(c);  }  else  {  out.write('n');  }  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	        if(c!=    null)    {    out.write(c);    }    else    {    out.write('n');    }    if(c!=  null)  {  out.write(c);  }  else  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	16	13	add
2	[BUG]  [BUGGY]      if(c!=  null)  {  out.write(c);  }  else  {  out.write('n');  }  if(c!=  null)  {  out.write(c);  }  else  {  out.write('n');  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]      if(c!=  null)  {  out.write(c);  }  else  {  out.write('n');  }  if(c!=  null)  {  out.write(c);  }  else  {  out.write('n');  }  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	        if(c!=    null)    {    out.write(c);    }    else    {    out.write('n');    }    if(c!=  null)  {  out.write(c);  }  else  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	16	13	add
3	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]      if(c!=  null)  {  out.write(c);  }  else  {  out.write('n');  }  if(c!=  null)  {  out.write('n');  }  else  {  out.write('n');  }  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	        if(c!=    null)    {    out.write(c);    }    else    {    out.write('n');    }    if(c!=  null)  {  out.write('n');  }  else  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	16	13	add
4	[BUG]  [BUGGY]      if(c!=  null)  {  out.write(c);  }  else  {  out.write('n');  }  if(c!=  null)  {  out.write('n');  }  else  {  out.write('n');  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]      if(c!=  null)  {  out.write(c);  }  else  {  out.write('n');  }  if(c!=  null)  {  out.write('n');  }  else  {  out.write('n');  }  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	        if(c!=    null)    {    out.write(c);    }    else    {    out.write('n');    }    if(c!=  null)  {  out.write('n');  }  else  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	16	13	add
5	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]      if(c!=  null)  {  out.write(c);  }  else  {  out.write('n');  }  if(c  ==  null)  {  out.write(c);  }  else  {  out.write('n');  }  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	        if(c!=    null)    {    out.write(c);    }    else    {    out.write('n');    }    if(c  ==  null)  {  out.write(c);  }  else  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	16	13	add
6	[BUG]  [BUGGY]      if(c!=  null)  {  out.write(c);  }  else  {  out.write('n');  }  if(c  ==  null)  {  out.write(c);  }  else  {  out.write('n');  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]      if(c!=  null)  {  out.write(c);  }  else  {  out.write('n');  }  if(c  ==  null)  {  out.write(c);  }  else  {  out.write('n');  }  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	        if(c!=    null)    {    out.write(c);    }    else    {    out.write('n');    }    if(c  ==  null)  {  out.write(c);  }  else  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	16	13	add
7	[BUG]  [BUGGY]      if(c!=  null)  {  out.write(c);  }  else  {  out.write('n');  }  if(c  >=  null)  {  out.write(c);  }  else  {  out.write('n');  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]          ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]      if(c!=  null)  {  out.write(c);  }  else  {  out.write('n');  }  if(c  >=  null)  {  out.write(c);  }  else  {  out.write('n');  }  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	        if(c!=    null)    {    out.write(c);    }    else    {    out.write('n');    }    if(c  >=  null)  {  out.write(c);  }  else  {  out.write('n');  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	16	None	add
8	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]      if(c!=  null)  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	        if(c!=    null)    {    out.write(c);    }    if(c!=  null)  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	14	13	add
9	[BUG]  [BUGGY]      if(c!=  null)  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]      if(c!=  null)  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	        if(c!=    null)    {    out.write(c);    }    if(c!=  null)  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	14	13	add
10	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]      if(c!=  null)  {  out.write(c);  }  if(c  ==  null)  {  out.write(c);  }  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	        if(c!=    null)    {    out.write(c);    }    if(c  ==  null)  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	14	13	add
11	[BUG]  [BUGGY]      if(c!=  null)  {  out.write(c);  }  if(c  ==  null)  {  out.write(c);  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]      if(c!=  null)  {  out.write(c);  }  if(c  ==  null)  {  out.write(c);  }  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	        if(c!=    null)    {    out.write(c);    }    if(c  ==  null)  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	14	13	add
12	[BUG]  [BUGGY]      if(c!=  null)  {  out.write(c);  }  if(c  >=  null)  {  out.write(c);  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]        ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]      if(c!=  null)  {  out.write(c);  }  if(c  >=  null)  {  out.write(c);  }  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	        if(c!=    null)    {    out.write(c);    }    if(c  >=  null)  {  out.write(c);  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	14	None	add
13	[BUG]  [BUGGY]      if(c!=  null)  {  out.write(c);  }  if(c  >>  null)  {  out.write(c);  }  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]          ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]      if(c!=  null)  {  out.write(c);  }  if(c  >>  null)  {  out.write(c);  }  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	        if(c!=    null)    {    out.write(c);    }    if(c  >>  null)  {  out.write(c);  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	14	None	add
14	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    IndexOutOfBoundsException    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  out.write(c,  0,  consumed);  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	out.write(c,  0,  consumed);	  out.write(c,    0,    pos);    	compilable	  [FE]  ComparisonFailure  	2	13	replace
15	[BUG]  [BUGGY]  out.write(c,  0,  consumed);  [FE]  ComparisonFailure  [FE]    IndexOutOfBoundsException    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  out.write(c,  0,  consumed);  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,  0,  consumed);	  out.write(c,    0,    pos);    	compilable	  [FE]  ComparisonFailure  	2	13	replace
16	[BUG]  [BUGGY]  [FE]  IndexOutOfBoundsException  [FE]      IndexOutOfBoundsException    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  out.write(c,  0,  pos  +  1);  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	out.write(c,  0,  pos  +  1);	  out.write(c,    0,    pos);    	compilable	  [FE]  IndexOutOfBoundsException  	2	13	replace
17	[BUG]  [BUGGY]  out.write(c,  0,  pos  +  1);  [FE]  IndexOutOfBoundsException  [FE]      IndexOutOfBoundsException    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  out.write(c,  0,  pos  +  1);  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,  0,  pos  +  1);	  out.write(c,    0,    pos);    	compilable	  [FE]  IndexOutOfBoundsException  	2	13	replace
18	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  if(c  ==  null)  {  out.write(c);  }  else  {  out.write('n');  }  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	if(c  ==  null)  {  out.write(c);  }  else  {  out.write('n');  }	      if(c!=    null)    {    out.write(c);    }    else    {    out.write('n');    }    	compilable	  [FE]  ComparisonFailure  	17	13	replace
19	[BUG]  [BUGGY]  if(c  ==  null)  {  out.write(c);  }  else  {  out.write('n');  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  if(c  ==  null)  {  out.write(c);  }  else  {  out.write('n');  }  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c  ==  null)  {  out.write(c);  }  else  {  out.write('n');  }	      if(c!=    null)    {    out.write(c);    }    else    {    out.write('n');    }    	compilable	  [FE]  ComparisonFailure  	17	13	replace
20	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]      if(c!=  null)  {  out.write(c);  }  else  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }  else  {  out.write(c);  }  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	        if(c!=    null)    {    out.write(c);    }    else    {    out.write(c);    }    if(c!=  null)  {  out.write(c);  }  else  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	18	13	add
21	[BUG]  [BUGGY]      if(c!=  null)  {  out.write(c);  }  else  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }  else  {  out.write(c);  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]      if(c!=  null)  {  out.write(c);  }  else  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }  else  {  out.write(c);  }  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	        if(c!=    null)    {    out.write(c);    }    else    {    out.write(c);    }    if(c!=  null)  {  out.write(c);  }  else  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	18	13	add
22	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]      if(c!=  null)  {  out.write(c);  }  else  {  out.write(c);  }  if(c  ==  null)  {  out.write(c);  }  else  {  out.write(c);  }  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	        if(c!=    null)    {    out.write(c);    }    else    {    out.write(c);    }    if(c  ==  null)  {  out.write(c);  }  else  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	18	13	add
23	[BUG]  [BUGGY]      if(c!=  null)  {  out.write(c);  }  else  {  out.write(c);  }  if(c  ==  null)  {  out.write(c);  }  else  {  out.write(c);  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]      if(c!=  null)  {  out.write(c);  }  else  {  out.write(c);  }  if(c  ==  null)  {  out.write(c);  }  else  {  out.write(c);  }  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	        if(c!=    null)    {    out.write(c);    }    else    {    out.write(c);    }    if(c  ==  null)  {  out.write(c);  }  else  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	18	13	add
24	[BUG]  [BUGGY]      if(c!=  null)  {  out.write(c);  }  else  {  out.write(c);  }  if(c  >=  null)  {  out.write(c);  }  else  {  out.write(c);  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]        ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]      if(c!=  null)  {  out.write(c);  }  else  {  out.write(c);  }  if(c  >=  null)  {  out.write(c);  }  else  {  out.write(c);  }  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	        if(c!=    null)    {    out.write(c);    }    else    {    out.write(c);    }    if(c  >=  null)  {  out.write(c);  }  else  {  out.write(c);  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	18	None	add
25	[BUG]  [BUGGY]      if(c!=  null)  {  out.write(c);  }  else  {  out.write(c);  }  If(c!=  null)  {  out.write(c);  }  else  {  out.write(c);  }  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]      if(c!=  null)  {  out.write(c);  }  else  {  out.write(c);  }  If(c!=  null)  {  out.write(c);  }  else  {  out.write(c);  }  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	        if(c!=    null)    {    out.write(c);    }    else    {    out.write(c);    }    If(c!=  null)  {  out.write(c);  }  else  {  out.write(c);  }	  	non-compiled	[CE]  ';'  expected	18	None	add
26	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  out.write(c,  0,  c.length);  out.write(c,  0,  c.length);  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	out.write(c,    0,    c.length);    out.write(c,  0,  c.length);	  	compilable	  [FE]  ComparisonFailure  	20	13	add
27	[BUG]  [BUGGY]  out.write(c,  0,  c.length);  out.write(c,  0,  c.length);  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  out.write(c,  0,  c.length);  out.write(c,  0,  c.length);  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,    0,    c.length);    out.write(c,  0,  c.length);	  	compilable	  [FE]  ComparisonFailure  	20	13	add
28	[BUG]  [BUGGY]  out.write(c,  0,  c.length);  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c,  0,  c.length);  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]      ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  out.write(c,  0,  c.length);  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c,  0,  c.length);  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,    0,    c.length);    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c,  0,  c.length);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	20	None	add
29	[BUG]  [BUGGY]  out.write(c,  0,  c.length);  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]        ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  out.write(c,  0,  c.length);  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,    0,    c.length);    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	20	None	add
30	[BUG]  [BUGGY]  out.write(c,  0,  c.length);  char[]  c  =  Character.toChars(Character.toChars(c,  pos));  out.write(c,  0,  c.length);  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]          ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  out.write(c,  0,  c.length);  char[]  c  =  Character.toChars(Character.toChars(c,  pos));  out.write(c,  0,  c.length);  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,    0,    c.length);    char[]  c  =  Character.toChars(Character.toChars(c,  pos));  out.write(c,  0,  c.length);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	20	None	add
31	[BUG]  [BUGGY]  out.write(c,  0,  c.length);  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c,  0,  c.length);  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]            ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  out.write(c,  0,  c.length);  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c,  0,  c.length);  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,    0,    c.length);    char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c,  0,  c.length);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	20	None	add
32	[BUG]  [BUGGY]  if(consumed  >  0)  {  if(c!=  null)  {  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  if(consumed  >  0)  {  if(c!=  null)  {  out.write(c);  }  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >  0)  {  if(c!=  null)  {  out.write(c);  }	      if(c!=    null)    {    out.write(c);    }    else    {    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
33	[BUG]  [BUGGY]  [FE]  IndexOutOfBoundsException  [FE]            ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  out.write(c,  pos,  consumed);  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	out.write(c,  pos,  consumed);	  out.write(c,    pos);    	compilable	  [FE]  IndexOutOfBoundsException  	5	13	replace
34	[BUG]  [BUGGY]  out.write(c,  pos,  consumed);  [FE]  IndexOutOfBoundsException  [FE]            ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  out.write(c,  pos,  consumed);  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,  pos,  consumed);	  out.write(c,    pos);    	compilable	  [FE]  IndexOutOfBoundsException  	5	13	replace
35	[BUG]  [BUGGY]  out.write(c,  pos,  consume);  [CE]  cannot  find  symbol  consume  [FE]              ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  out.write(c,  pos,  consume);  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,  pos,  consume);	  out.write(c,    pos);    	non-compiled	[CE]  cannot  find  symbol  consume	5	None	replace
36	[BUG]  [BUGGY]  [FE]  IndexOutOfBoundsException  [FE]                ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  out.write(c,  pos,  len);  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	out.write(c,  pos,  len);	  out.write(c,    pos);    	compilable	  [FE]  IndexOutOfBoundsException  	5	13	replace
37	[BUG]  [BUGGY]  out.write(c,  pos,  len);  [FE]  IndexOutOfBoundsException  [FE]                ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  out.write(c,  pos,  len);  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,  pos,  len);	  out.write(c,    pos);    	compilable	  [FE]  IndexOutOfBoundsException  	5	13	replace
38	[BUG]  [BUGGY]  if(c!=  null)  {  for(int  pos  =  0;  pos  <  consumed;  pos++)  {  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  if(c!=  null)  {  for(int  pos  =  0;  pos  <  consumed;  pos++)  {  out.write(c);  }  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c!=  null)  {  for(int  pos  =  0;  pos  <  consumed;  pos++)  {  out.write(c);  }	      if(c!=    null)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
39	[BUG]  [BUGGY]  if(consumed  ==  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  if(consumed  ==  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  ==  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }	      if(c!=    null)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
40	[BUG]  [BUGGY]  if(consumed  <  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  if(consumed  <  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  <  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }	      if(c!=    null)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
41	[BUG]  [BUGGY]  if(c!=  null)  {  out.write(c);  }  else  {  for(int  pos  =  0;  pos  <  len  -  2;  pos++)  {  pos  +=  Character.charCount(Character.codePointAt(pos,  pos));  }  [CE]  'else'  without  'if'  [FE]    ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  if(c!=  null)  {  out.write(c);  }  else  {  for(int  pos  =  0;  pos  <  len  -  2;  pos++)  {  pos  +=  Character.charCount(Character.codePointAt(pos,  pos));  }  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c!=  null)  {  out.write(c);  }  else  {  for(int  pos  =  0;  pos  <  len  -  2;  pos++)  {  pos  +=  Character.charCount(Character.codePointAt(pos,  pos));  }	      if(c!=    null)    {    out.write(c);    }    	non-compiled	[CE]  'else'  without  'if'	15	None	replace
42	[BUG]  [BUGGY]  if(c!=  null)  {  out.write(c);  }  else  {  for(int  pt  =  0;  pt  <  len  -  2;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pos,  pos));  }  [CE]  'else'  without  'if'  [FE]      ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  if(c!=  null)  {  out.write(c);  }  else  {  for(int  pt  =  0;  pt  <  len  -  2;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pos,  pos));  }  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c!=  null)  {  out.write(c);  }  else  {  for(int  pt  =  0;  pt  <  len  -  2;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pos,  pos));  }	      if(c!=    null)    {    out.write(c);    }    	non-compiled	[CE]  'else'  without  'if'	15	None	replace
43	[BUG]  [BUGGY]  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(c.charCount());  }  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(c.charCount());  }  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(c.charCount());  }	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
44	[BUG]  [BUGGY]  if(c  ==  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(c.charCount());  }  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  if(c  ==  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(c.charCount());  }  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c  ==  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(c.charCount());  }	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
45	[BUG]  [BUGGY]  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pt,  pos));  }  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pt,  pos));  }  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pt,  pos));  }	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
46	[BUG]  [BUGGY]  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pos,  pos));  }  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pos,  pos));  }  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pos,  pos));  }	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
47	[BUG]  [BUGGY]  if(c!=  null)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  out.write(c[pos]);  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  if(c!=  null)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  out.write(c[pos]);  }  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c!=  null)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  out.write(c[pos]);  }	      if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    out.write(c[pos]);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
48	[BUG]  [BUGGY]  if(consumed  >  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c[pos]);  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  if(consumed  >  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c[pos]);  }  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c[pos]);  }	      if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    out.write(c[pos]);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
49	[BUG]  [BUGGY]  if(c  ==  null)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  out.write(c[pos]);  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  if(c  ==  null)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  out.write(c[pos]);  }  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c  ==  null)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  out.write(c[pos]);  }	      if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    out.write(c[pos]);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
50	[BUG]  [BUGGY]  if(consumed  >  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length();  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  if(consumed  >  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length();  }  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length();  }	      if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    pos    +=    c.length();    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
51	[BUG]  [BUGGY]  if(consumed  <  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length();  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  if(consumed  <  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length();  }  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  <  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length();  }	      if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    pos    +=    c.length();    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
52	[BUG]  [BUGGY]  if(consumed  ==  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length();  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  if(consumed  ==  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length();  }  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  ==  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length();  }	      if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    pos    +=    c.length();    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
53	[BUG]  [BUGGY]  if(consumed  ==  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length();  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  if(consumed  ==  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length();  }  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  ==  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length();  }	      if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    pos    +=    c.length();    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
54	[BUG]  [BUGGY]  if(c!=  null)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  if(c!=  null)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  out.write(c);  }  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c!=  null)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  out.write(c);  }	      if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
55	[BUG]  [BUGGY]  if(consumed  >  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  if(consumed  >  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c);  }  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c);  }	      if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
56	[BUG]  [BUGGY]  if(consumed  ==  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  if(consumed  ==  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c);  }  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  ==  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c);  }	      if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
57	[BUG]  [BUGGY]  [FE]  IndexOutOfBoundsException  [FE]    IndexOutOfBoundsException    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  out.write(c,  0,  pos);  out.write(c,  0,  pos);  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	out.write(c,    0,    pos);    out.write(c,  0,  pos);	  	compilable	  [FE]  IndexOutOfBoundsException  	1	12	add
58	[BUG]  [BUGGY]  out.write(c,  0,  pos);  out.write(c,  0,  pos);  [FE]  IndexOutOfBoundsException  [FE]    IndexOutOfBoundsException    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  out.write(c,  0,  pos);  out.write(c,  0,  pos);  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,    0,    pos);    out.write(c,  0,  pos);	  	compilable	  [FE]  IndexOutOfBoundsException  	1	12	add
59	[BUG]  [BUGGY]  out.write(c,  0,  pos);  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]      IndexOutOfBoundsException    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  out.write(c,  0,  pos);  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,    0,    pos);    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	1	None	add
60	[BUG]  [BUGGY]  out.write(c,  0,  pos);  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c,  0,  pos);  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]        IndexOutOfBoundsException    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  out.write(c,  0,  pos);  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c,  0,  pos);  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,    0,    pos);    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c,  0,  pos);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	1	None	add
61	[BUG]  [BUGGY]  out.write(c,  0,  pos);  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c,  0,  pos);  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]          IndexOutOfBoundsException    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  out.write(c,  0,  pos);  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c,  0,  pos);  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,    0,    pos);    char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c,  0,  pos);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	1	None	add
62	[BUG]  [BUGGY]  out.write(c,  0,  pos);  char[]  c  =  Character.toChars(Character.codePointAt(consumed,  pos));  out.write(c,  0,  pos);  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]            IndexOutOfBoundsException    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  out.write(c,  0,  pos);  char[]  c  =  Character.toChars(Character.codePointAt(consumed,  pos));  out.write(c,  0,  pos);  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,    0,    pos);    char[]  c  =  Character.toChars(Character.codePointAt(consumed,  pos));  out.write(c,  0,  pos);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	1	None	add
63	[BUG]  [BUGGY]  if(consumed  >  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length;  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  if(consumed  >  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length;  }  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length;  }	      if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    pos    +=    c.length;    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
64	[BUG]  [BUGGY]  if(consumed  <  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length;  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  if(consumed  <  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length;  }  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  <  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length;  }	      if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    pos    +=    c.length;    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
65	[BUG]  [BUGGY]  if(consumed  ==  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length;  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  if(consumed  ==  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length;  }  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  ==  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length;  }	      if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    pos    +=    c.length;    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
66	[BUG]  [BUGGY]  if(consumed  >  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  if(consumed  >  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }	      if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
67	[BUG]  [BUGGY]  if(consumed  <  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  if(consumed  <  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  <  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }	      if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
68	[BUG]  [BUGGY]  if(consumed  >=  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  if(consumed  >=  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >=  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }	      if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
69	[BUG]  [BUGGY]  if(consumed  ==  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  if(consumed  ==  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  ==  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }	      if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
70	[BUG]  [BUGGY]  if(c  ==  null)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c[pos]  =  c.charValue();  }  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  if(c  ==  null)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c[pos]  =  c.charValue();  }  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c  ==  null)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c[pos]  =  c.charValue();  }	      if(c!=    null)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    c[pos]    =    c.charValue();    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
71	[BUG]  [BUGGY]  if(consumed  >  0)  {  if(c!=  null)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c[pos]  =  c.charValue();  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  if(consumed  >  0)  {  if(c!=  null)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c[pos]  =  c.charValue();  }  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >  0)  {  if(c!=  null)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c[pos]  =  c.charValue();  }	      if(c!=    null)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    c[pos]    =    c.charValue();    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
72	[BUG]  [BUGGY]  if(c!=  null)  {  for(pos  =  0;  pos  <  len;  pos++)  {  c[pos]  =  c.charValue();  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  if(c!=  null)  {  for(pos  =  0;  pos  <  len;  pos++)  {  c[pos]  =  c.charValue();  }  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c!=  null)  {  for(pos  =  0;  pos  <  len;  pos++)  {  c[pos]  =  c.charValue();  }	      if(c!=    null)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    c[pos]    =    c.charValue();    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
73	[BUG]  [BUGGY]  if(consumed  >  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  if(consumed  >  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }	      if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toChars();    pos    +=    c.length();    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
74	[BUG]  [BUGGY]  if(consumed  <  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  if(consumed  <  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  <  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }	      if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toChars();    pos    +=    c.length();    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
75	[BUG]  [BUGGY]  if(consumed  ==  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  if(consumed  ==  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  ==  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }	      if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toChars();    pos    +=    c.length();    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
76	[BUG]  [BUGGY]  if(consumed  ==  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  if(consumed  ==  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  ==  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }	      if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toChars();    pos    +=    c.length();    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
77	[BUG]  [BUGGY]  [FE]  IndexOutOfBoundsException  [FE]    ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  out.write(c,  0,  c.length  +  1);  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	out.write(c,  0,  c.length  +  1);	  out.write(c,    0,    c.length);    	compilable	  [FE]  IndexOutOfBoundsException  	21	13	replace
78	[BUG]  [BUGGY]  out.write(c,  0,  c.length  +  1);  [FE]  IndexOutOfBoundsException  [FE]    ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  out.write(c,  0,  c.length  +  1);  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,  0,  c.length  +  1);	  out.write(c,    0,    c.length);    	compilable	  [FE]  IndexOutOfBoundsException  	21	13	replace
79	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  out.write(c,  0,  c.length  -  1);  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	out.write(c,  0,  c.length  -  1);	  out.write(c,    0,    c.length);    	compilable	  [FE]  ComparisonFailure  	21	13	replace
80	[BUG]  [BUGGY]  out.write(c,  0,  c.length  -  1);  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  out.write(c,  0,  c.length  -  1);  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,  0,  c.length  -  1);	  out.write(c,    0,    c.length);    	compilable	  [FE]  ComparisonFailure  	21	13	replace
81	[BUG]  [BUGGY]  [FE]  IndexOutOfBoundsException  [FE]        ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  out.write(c,  0,  c.length  +  2);  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	out.write(c,  0,  c.length  +  2);	  out.write(c,    0,    c.length);    	compilable	  [FE]  IndexOutOfBoundsException  	21	13	replace
82	[BUG]  [BUGGY]  out.write(c,  0,  c.length  +  2);  [FE]  IndexOutOfBoundsException  [FE]        ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  out.write(c,  0,  c.length  +  2);  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,  0,  c.length  +  2);	  out.write(c,    0,    c.length);    	compilable	  [FE]  IndexOutOfBoundsException  	21	13	replace
83	[BUG]  [BUGGY]  if(consumed  ==  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  }  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  if(consumed  ==  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  }  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  ==  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  }	      if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
84	[BUG]  [BUGGY]  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  }  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  }	      if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
85	[BUG]  [BUGGY]  if(c!=  null)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  c.toCharArray();  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  if(c!=  null)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  c.toCharArray();  }  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c!=  null)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  c.toCharArray();  }	      if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
86	[BUG]  [BUGGY]  [FE]  IndexOutOfBoundsException  [FE]    IndexOutOfBoundsException    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  out.write(c,  0,  len);  out.write(c,  0,  len);  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	out.write(c,    0,    len);    out.write(c,  0,  len);	  	compilable	  [FE]  IndexOutOfBoundsException  	3	13	add
87	[BUG]  [BUGGY]  out.write(c,  0,  len);  out.write(c,  0,  len);  [FE]  IndexOutOfBoundsException  [FE]    IndexOutOfBoundsException    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  out.write(c,  0,  len);  out.write(c,  0,  len);  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,    0,    len);    out.write(c,  0,  len);	  	compilable	  [FE]  IndexOutOfBoundsException  	3	13	add
88	[BUG]  [BUGGY]  out.write(c,  0,  len);  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c,  0,  len);  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]      IndexOutOfBoundsException    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  out.write(c,  0,  len);  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c,  0,  len);  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,    0,    len);    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c,  0,  len);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	3	None	add
89	[BUG]  [BUGGY]  out.write(c,  0,  len);  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]        IndexOutOfBoundsException    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  out.write(c,  0,  len);  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,    0,    len);    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	3	None	add
90	[BUG]  [BUGGY]  out.write(c,  0,  len);  char[]  c  =  Character.toChars(Character.codePointAt(consumed,  pos));  out.write(c,  0,  len);  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]          IndexOutOfBoundsException    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  out.write(c,  0,  len);  char[]  c  =  Character.toChars(Character.codePointAt(consumed,  pos));  out.write(c,  0,  len);  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,    0,    len);    char[]  c  =  Character.toChars(Character.codePointAt(consumed,  pos));  out.write(c,  0,  len);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	3	None	add
91	[BUG]  [BUGGY]  out.write(c,  0,  len);  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c,  0,  len);  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]            IndexOutOfBoundsException    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  out.write(c,  0,  len);  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c,  0,  len);  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,    0,    len);    char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c,  0,  len);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	3	None	add
92	[BUG]  [BUGGY]  pos  +=  Character.charCount(c,  consumed);  [CE]  method  charCount  in  class  Character  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  pos  +=  Character.charCount(c,  consumed);  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	pos  +=  Character.charCount(c,  consumed);	      pos    +=    Character.charCount(c);    	non-compiled	[CE]  method  charCount  in  class  Character  cannot  be  applied  to  given  types;	12	None	replace
93	[BUG]  [BUGGY]  pos  +=  Character.charCount(c,  consume);  [CE]  cannot  find  symbol  consume  [FE]                  ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  pos  +=  Character.charCount(c,  consume);  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	pos  +=  Character.charCount(c,  consume);	      pos    +=    Character.charCount(c);    	non-compiled	[CE]  cannot  find  symbol  consume	12	None	replace
94	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                    ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	pos  +=  Character.charCount(Character.codePointAt(input,  pos));	      pos    +=    Character.charCount(c);    	compilable	  [FE]  ComparisonFailure  	12	13	replace
95	[BUG]  [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  [FE]  ComparisonFailure  [FE]                    ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	pos  +=  Character.charCount(Character.codePointAt(input,  pos));	      pos    +=    Character.charCount(c);    	compilable	  [FE]  ComparisonFailure  	12	13	replace
96	[BUG]  [BUGGY]  pos  +=  Character.charCount(Character.charCount(c,  pos));  [CE]  method  charCount  in  class  Character  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  pos  +=  Character.charCount(Character.charCount(c,  pos));  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	pos  +=  Character.charCount(Character.charCount(c,  pos));	      pos    +=    Character.charCount(c);    	non-compiled	[CE]  method  charCount  in  class  Character  cannot  be  applied  to  given  types;	12	None	replace
97	[BUG]  [BUGGY]      if(c!=  null)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]      if(c!=  null)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	        if(c!=  null)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
98	[BUG]  [BUGGY]  pos  +=  Character.charCount(c,  out);  [CE]  method  charCount  in  class  Character  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  pos  +=  Character.charCount(c,  out);  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	pos  +=  Character.charCount(c,  out);	      pos    +=    Character.charCount(c);    	non-compiled	[CE]  method  charCount  in  class  Character  cannot  be  applied  to  given  types;	12	None	replace
99	[BUG]  [BUGGY]  pos  +=  Character.charCount(c,  len);  [CE]  method  charCount  in  class  Character  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  pos  +=  Character.charCount(c,  len);  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	pos  +=  Character.charCount(c,  len);	      pos    +=    Character.charCount(c);    	non-compiled	[CE]  method  charCount  in  class  Character  cannot  be  applied  to  given  types;	12	None	replace
100	[BUG]  [BUGGY]  out.write(c,  0,  pos);  char[]  c  =  input.toChars(c);  out.write(c,  0,  pos);  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]    IndexOutOfBoundsException    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  out.write(c,  0,  pos);  char[]  c  =  input.toChars(c);  out.write(c,  0,  pos);  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,    0,    pos);    char[]  c  =  input.toChars(c);  out.write(c,  0,  pos);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	1	None	add
101	[BUG]  [BUGGY]  out.write(c,  0,  pos);  char[]  c  =  input.toChars(input);  out.write(c,  0,  pos);  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]      IndexOutOfBoundsException    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  out.write(c,  0,  pos);  char[]  c  =  input.toChars(input);  out.write(c,  0,  pos);  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,    0,    pos);    char[]  c  =  input.toChars(input);  out.write(c,  0,  pos);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	1	None	add
102	[BUG]  [BUGGY]  out.write(c,  0,  pos);  char[]  c  =  input.toChars(input,  pos);  out.write(c,  0,  pos);  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]        IndexOutOfBoundsException    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  out.write(c,  0,  pos);  char[]  c  =  input.toChars(input,  pos);  out.write(c,  0,  pos);  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,    0,    pos);    char[]  c  =  input.toChars(input,  pos);  out.write(c,  0,  pos);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	1	None	add
103	[BUG]  [BUGGY]  out.write(c,  0,  pos);  char[]  c  =  input.toChars(c,  0,  pos);  out.write(c,  0,  pos);  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]          IndexOutOfBoundsException    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  out.write(c,  0,  pos);  char[]  c  =  input.toChars(c,  0,  pos);  out.write(c,  0,  pos);  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,    0,    pos);    char[]  c  =  input.toChars(c,  0,  pos);  out.write(c,  0,  pos);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	1	None	add
104	[BUG]  [BUGGY]  out.write(c,  0,  c.length);  char[]  c  =  Character.toChars(Character.toChars(input,  pos));  out.write(c,  0,  c.length);  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]    ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  out.write(c,  0,  c.length);  char[]  c  =  Character.toChars(Character.toChars(input,  pos));  out.write(c,  0,  c.length);  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,    0,    c.length);    char[]  c  =  Character.toChars(Character.toChars(input,  pos));  out.write(c,  0,  c.length);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	20	None	add
105	[BUG]  [BUGGY]  out.write(c,  0,  c.length);  char[]  c  =  Character.toChars(Character.toChars(c));  out.write(c,  0,  c.length);  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]      ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  out.write(c,  0,  c.length);  char[]  c  =  Character.toChars(Character.toChars(c));  out.write(c,  0,  c.length);  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,    0,    c.length);    char[]  c  =  Character.toChars(Character.toChars(c));  out.write(c,  0,  c.length);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	20	None	add
106	[BUG]  [BUGGY]  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length();  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length();  }  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length();  }	      if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    pos    +=    c.length();    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
107	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length();  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length();  }  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length();  }	      if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    pos    +=    c.length();    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
108	[BUG]  [BUGGY]  if(consumed!=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length();  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  if(consumed!=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length();  }  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed!=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length();  }	      if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    pos    +=    c.length();    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
109	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  if(c!=  null)  {  out.write('n');  }  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	if(c!=  null)  {  out.write('n');  }	      if(c!=    null)    {    out.write(c);    }    else    {    out.write('n');    }    	compilable	  [FE]  ComparisonFailure  	17	13	replace
110	[BUG]  [BUGGY]  if(c!=  null)  {  out.write('n');  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  if(c!=  null)  {  out.write('n');  }  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c!=  null)  {  out.write('n');  }	      if(c!=    null)    {    out.write(c);    }    else    {    out.write('n');    }    	compilable	  [FE]  ComparisonFailure  	17	13	replace
111	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }	      if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
112	[BUG]  [BUGGY]  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }	      if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
113	[BUG]  [BUGGY]  if(consumed  ==  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  if(consumed  ==  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  ==  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }	      if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
114	[BUG]  [BUGGY]  if(consumed!=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  if(consumed!=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed!=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }	      if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
115	[BUG]  [BUGGY]  out.write(c,  0,  len);  char[]  c  =  input.getChars(pos,  pos);  out.write(c,  0,  len);  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]    IndexOutOfBoundsException    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  out.write(c,  0,  len);  char[]  c  =  input.getChars(pos,  pos);  out.write(c,  0,  len);  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,    0,    len);    char[]  c  =  input.getChars(pos,  pos);  out.write(c,  0,  len);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	3	None	add
116	[BUG]  [BUGGY]  out.write(c,  0,  len);  char[]  c  =  input.toChars(c);  out.write(c,  0,  len);  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]      IndexOutOfBoundsException    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  out.write(c,  0,  len);  char[]  c  =  input.toChars(c);  out.write(c,  0,  len);  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,    0,    len);    char[]  c  =  input.toChars(c);  out.write(c,  0,  len);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	3	None	add
117	[BUG]  [BUGGY]  out.write(c,  0,  len);  char[]  c  =  input.toChars(input,  pos);  out.write(c,  0,  len);  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]        IndexOutOfBoundsException    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  out.write(c,  0,  len);  char[]  c  =  input.toChars(input,  pos);  out.write(c,  0,  len);  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,    0,    len);    char[]  c  =  input.toChars(input,  pos);  out.write(c,  0,  len);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	3	None	add
118	[BUG]  [BUGGY]  out.write(c,  0,  len);  char[]  c  =  input.getChars(pos,  pos  +  1);  out.write(c,  0,  len);  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]          IndexOutOfBoundsException    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  out.write(c,  0,  len);  char[]  c  =  input.getChars(pos,  pos  +  1);  out.write(c,  0,  len);  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,    0,    len);    char[]  c  =  input.getChars(pos,  pos  +  1);  out.write(c,  0,  len);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	3	None	add
119	[BUG]  [BUGGY]  if(consumed!=  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  if(consumed!=  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed!=  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }	      if(c!=    null)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
120	[BUG]  [BUGGY]  if(consumed  >=  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  if(consumed  >=  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >=  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }	      if(c!=    null)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
121	[BUG]  [BUGGY]  if(consumed  ==  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c[pos]  =  c.charValue();  }  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  if(consumed  ==  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c[pos]  =  c.charValue();  }  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  ==  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c[pos]  =  c.charValue();  }	      if(c!=    null)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    c[pos]    =    c.charValue();    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
122	[BUG]  [BUGGY]  if(consumed!=  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c[pos]  =  c.charValue();  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  if(consumed!=  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c[pos]  =  c.charValue();  }  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed!=  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c[pos]  =  c.charValue();  }	      if(c!=    null)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    c[pos]    =    c.charValue();    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
123	[BUG]  [BUGGY]      if(c!=  null)  {  out.write(c);  }  else  {  out.write('n');  }  If(c!=  null)  {  out.write(c);  }  else  {  out.write('n');  }  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]      if(c!=  null)  {  out.write(c);  }  else  {  out.write('n');  }  If(c!=  null)  {  out.write(c);  }  else  {  out.write('n');  }  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	        if(c!=    null)    {    out.write(c);    }    else    {    out.write('n');    }    If(c!=  null)  {  out.write(c);  }  else  {  out.write('n');  }	  	non-compiled	[CE]  ';'  expected	16	None	add
124	[BUG]  [BUGGY]  if(consumed  ==  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length;  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  if(consumed  ==  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length;  }  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  ==  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length;  }	      if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    pos    +=    c.length;    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
125	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length;  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length;  }  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length;  }	      if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    pos    +=    c.length;    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
126	[BUG]  [BUGGY]  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length;  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length;  }  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length;  }	      if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    pos    +=    c.length;    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
127	[BUG]  [BUGGY]  if(consumed!=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length;  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  if(consumed!=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length;  }  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed!=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length;  }	      if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    pos    +=    c.length;    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
128	[BUG]  [BUGGY]  if(consumed!=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  if(consumed!=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c);  }  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed!=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c);  }	      if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
129	[BUG]  [BUGGY]  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c);  }  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c);  }	      if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
130	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c);  }  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c);  }	      if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
131	[BUG]  [BUGGY]      if(c!=  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  pos  +=  Character.charCount(c);  }  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]      if(c!=  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  pos  +=  Character.charCount(c);  }  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	        if(c!=  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  pos  +=  Character.charCount(c);  }	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
132	[BUG]  [BUGGY]      if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(c);  }  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]      if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(c);  }  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	        if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(c);  }	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
133	[BUG]  [BUGGY]      if(c!=  null)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  c.toCharArray();  pos  +=  Character.charCount(c);  }  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]      if(c!=  null)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  c.toCharArray();  pos  +=  Character.charCount(c);  }  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	        if(c!=  null)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  c.toCharArray();  pos  +=  Character.charCount(c);  }	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
134	[BUG]  [BUGGY]      if(c!=  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  char[]  c  =  c.toCharArray();  pos  +=  Character.charCount(c);  }  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]      if(c!=  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  char[]  c  =  c.toCharArray();  pos  +=  Character.charCount(c);  }  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	        if(c!=  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  char[]  c  =  c.toCharArray();  pos  +=  Character.charCount(c);  }	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
135	[BUG]  [BUGGY]  OutputStream  out  =  input.readLine();  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  OutputStream  out  =  input.readLine();  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	OutputStream  out  =  input.readLine();	      if(c!=    null)    {    out.write(c);    }    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
136	[BUG]  [BUGGY]  OutputStream  out  =  outputStream.readLine();  [CE]  cannot  find  symbol  [FE]      ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  OutputStream  out  =  outputStream.readLine();  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	OutputStream  out  =  outputStream.readLine();	      if(c!=    null)    {    out.write(c);    }    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
137	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  if(consumed  ==  0)  {  out.write(c);  }  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	if(consumed  ==  0)  {  out.write(c);  }	      if(c!=    null)    {    out.write(c);    }    else    {    out.write(c);    }    	compilable	  [FE]  ComparisonFailure  	19	1	replace
138	[BUG]  [BUGGY]  if(consumed  ==  0)  {  out.write(c);  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  if(consumed  ==  0)  {  out.write(c);  }  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  ==  0)  {  out.write(c);  }	      if(c!=    null)    {    out.write(c);    }    else    {    out.write(c);    }    	compilable	  [FE]  ComparisonFailure  	19	1	replace
139	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  if(consumed  >=  0)  {  out.write(c);  }  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	if(consumed  >=  0)  {  out.write(c);  }	      if(c!=    null)    {    out.write(c);    }    else    {    out.write(c);    }    	compilable	  [FE]  ComparisonFailure  	19	1	replace
140	[BUG]  [BUGGY]  if(consumed  >=  0)  {  out.write(c);  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  if(consumed  >=  0)  {  out.write(c);  }  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >=  0)  {  out.write(c);  }	      if(c!=    null)    {    out.write(c);    }    else    {    out.write(c);    }    	compilable	  [FE]  ComparisonFailure  	19	1	replace
141	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  if(consumed  >  0)  {  out.write(c);  }  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	if(consumed  >  0)  {  out.write(c);  }	      if(c!=    null)    {    out.write(c);    }    else    {    out.write(c);    }    	compilable	  [FE]  ComparisonFailure  	19	13	replace
142	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write(c);  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  if(consumed  >  0)  {  out.write(c);  }  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >  0)  {  out.write(c);  }	      if(c!=    null)    {    out.write(c);    }    else    {    out.write(c);    }    	compilable	  [FE]  ComparisonFailure  	19	13	replace
143	[BUG]  [BUGGY]  if(consumed!=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c[pos]);  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  if(consumed!=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c[pos]);  }  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed!=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c[pos]);  }	      if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    out.write(c[pos]);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
144	[BUG]  [BUGGY]  if(consumed  ==  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c[pos]);  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  if(consumed  ==  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c[pos]);  }  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  ==  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c[pos]);  }	      if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    out.write(c[pos]);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
145	[BUG]  [BUGGY]  if(consumed!=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  }  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  if(consumed!=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  }  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed!=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  }	      if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
146	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  }  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  }	      if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
147	[BUG]  [BUGGY]  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }	      if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toChars();    pos    +=    c.length();    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
148	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }	      if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toChars();    pos    +=    c.length();    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
149	[BUG]  [BUGGY]  if(consumed!=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  if(consumed!=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed!=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }	      if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toChars();    pos    +=    c.length();    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
150	[BUG]  [BUGGY]  out.write(c,  0,  pos);  if(c!=  null)  {  out.write(c,  0,  pos);  }  else  {  for(int  pos  =  0;  pos  <  len  -  2;  pos++)  {  pos  +=  Character.charCount(Character.codePointAt(pos,  pos));  }  [CE]  'else'  without  'if'  [FE]    IndexOutOfBoundsException    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  out.write(c,  0,  pos);  if(c!=  null)  {  out.write(c,  0,  pos);  }  else  {  for(int  pos  =  0;  pos  <  len  -  2;  pos++)  {  pos  +=  Character.charCount(Character.codePointAt(pos,  pos));  }  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,    0,    pos);    if(c!=  null)  {  out.write(c,  0,  pos);  }  else  {  for(int  pos  =  0;  pos  <  len  -  2;  pos++)  {  pos  +=  Character.charCount(Character.codePointAt(pos,  pos));  }	  	non-compiled	[CE]  'else'  without  'if'	1	None	add
151	[BUG]  [BUGGY]  out.write(c,  0,  pos);  if(c!=  null)  {  out.write(c,  0,  pos);  }  else  {  for(int  pos  =  0;  pos  <  len  -  2;  pos++)  {  pos  +=  Character.charCount(Character.codePointAt(position,  pos));  }  [CE]  'else'  without  'if'  [FE]      IndexOutOfBoundsException    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  out.write(c,  0,  pos);  if(c!=  null)  {  out.write(c,  0,  pos);  }  else  {  for(int  pos  =  0;  pos  <  len  -  2;  pos++)  {  pos  +=  Character.charCount(Character.codePointAt(position,  pos));  }  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,    0,    pos);    if(c!=  null)  {  out.write(c,  0,  pos);  }  else  {  for(int  pos  =  0;  pos  <  len  -  2;  pos++)  {  pos  +=  Character.charCount(Character.codePointAt(position,  pos));  }	  	non-compiled	[CE]  'else'  without  'if'	1	None	add
152	[BUG]  [BUGGY]  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }	      if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
153	[BUG]  [BUGGY]  if(c!=  null)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  if(c!=  null)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c!=  null)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }	      if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
154	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  if(c!=  null  &&  c.length  >  0)  {  out.write(c);  }  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	if(c!=  null  &&  c.length  >  0)  {  out.write(c);  }	      if(c!=    null)    {    out.write(c);    }    	compilable	  [FE]  ComparisonFailure  	15	1	replace
155	[BUG]  [BUGGY]  if(c!=  null  &&  c.length  >  0)  {  out.write(c);  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  if(c!=  null  &&  c.length  >  0)  {  out.write(c);  }  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c!=  null  &&  c.length  >  0)  {  out.write(c);  }	      if(c!=    null)    {    out.write(c);    }    	compilable	  [FE]  ComparisonFailure  	15	1	replace
156	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  if(c!=  null  ||  c.length  <  2)  {  out.write(c);  }  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	if(c!=  null  ||  c.length  <  2)  {  out.write(c);  }	      if(c!=    null)    {    out.write(c);    }    	compilable	  [FE]  ComparisonFailure  	15	1	replace
157	[BUG]  [BUGGY]  if(c!=  null  ||  c.length  <  2)  {  out.write(c);  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  if(c!=  null  ||  c.length  <  2)  {  out.write(c);  }  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c!=  null  ||  c.length  <  2)  {  out.write(c);  }	      if(c!=    null)    {    out.write(c);    }    	compilable	  [FE]  ComparisonFailure  	15	1	replace
158	[BUG]  [BUGGY]      if(c  ==  null)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  c.toCharArray();  if(c!=  null)  {  return;  }  [CE]  'else'  without  'if'  [FE]    ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]      if(c  ==  null)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  c.toCharArray();  if(c!=  null)  {  return;  }  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	        if(c  ==  null)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  c.toCharArray();  if(c!=  null)  {  return;  }	  	non-compiled	[CE]  'else'  without  'if'	6	None	add
159	[BUG]  [BUGGY]  if(c  ==  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length();  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  if(c  ==  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length();  }  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c  ==  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length();  }	      if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    pos    +=    c.length();    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
160	[BUG]  [BUGGY]  if(c!=  null)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length();  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  if(c!=  null)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length();  }  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c!=  null)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length();  }	      if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    pos    +=    c.length();    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
161	[BUG]  [BUGGY]  if(c  ==  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  if(c  ==  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c  ==  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }	      if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toChars();    pos    +=    c.length();    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
162	[BUG]  [BUGGY]  if(c!=  null)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  if(c!=  null)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c!=  null)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }	      if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toChars();    pos    +=    c.length();    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
163	[BUG]  [BUGGY]  if(c!=  null)  {  for(int  pos  =  0;  pos  <  c.length;  pos++)  {  c[pos]  =  c.charValue();  }  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  if(c!=  null)  {  for(int  pos  =  0;  pos  <  c.length;  pos++)  {  c[pos]  =  c.charValue();  }  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c!=  null)  {  for(int  pos  =  0;  pos  <  c.length;  pos++)  {  c[pos]  =  c.charValue();  }	      if(c!=    null)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    c[pos]    =    c.charValue();    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
164	[BUG]  [BUGGY]  if(c!=  null)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c[pos]  =  Character.charValue(c);  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  if(c!=  null)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c[pos]  =  Character.charValue(c);  }  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c!=  null)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c[pos]  =  Character.charValue(c);  }	      if(c!=    null)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    c[pos]    =    c.charValue();    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
165	[BUG]  [BUGGY]  if(c  ==  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  if(c  ==  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c);  }  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c  ==  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c);  }	      if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
166	[BUG]  [BUGGY]  if(c!=  null)  {  for(int  pt  =  0;  pt  <  consume;  pt++)  {  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  if(c!=  null)  {  for(int  pt  =  0;  pt  <  consume;  pt++)  {  out.write(c);  }  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c!=  null)  {  for(int  pt  =  0;  pt  <  consume;  pt++)  {  out.write(c);  }	      if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
167	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  if(c  ==  null)  {  out.write(c);  }  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	if(c  ==  null)  {  out.write(c);  }	      if(c!=    null)    {    out.write(c);    }    else    {    out.write(c);    }    	compilable	  [FE]  ComparisonFailure  	19	13	replace
168	[BUG]  [BUGGY]  if(c  ==  null)  {  out.write(c);  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  if(c  ==  null)  {  out.write(c);  }  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c  ==  null)  {  out.write(c);  }	      if(c!=    null)    {    out.write(c);    }    else    {    out.write(c);    }    	compilable	  [FE]  ComparisonFailure  	19	13	replace
169	[BUG]  [BUGGY]  if(c  ==  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c[pos]);  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  if(c  ==  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c[pos]);  }  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c  ==  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c[pos]);  }	      if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    out.write(c[pos]);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
170	[BUG]  [BUGGY]  while(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c[pos]);  }  [CE]  'else'  without  'if'  [FE]                ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  while(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c[pos]);  }  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	while(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c[pos]);  }	      if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    out.write(c[pos]);    }    	non-compiled	[CE]  'else'  without  'if'	11	None	replace
171	[BUG]  [BUGGY]  if(c  ==  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length;  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  if(c  ==  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length;  }  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c  ==  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length;  }	      if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    pos    +=    c.length;    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
172	[BUG]  [BUGGY]  if(c!=  null)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length;  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  if(c!=  null)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length;  }  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c!=  null)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length;  }	      if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    pos    +=    c.length;    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
173	[BUG]  [BUGGY]  if(c  ==  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  }  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  if(c  ==  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  }  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c  ==  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  }	      if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
174	[BUG]  [BUGGY]  if(c!=  null)  {  for(int  pt  =  0;  pt  <  consumeLen;  pt++)  {  char[]  c  =  c.toCharArray();  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  if(c!=  null)  {  for(int  pt  =  0;  pt  <  consumeLen;  pt++)  {  char[]  c  =  c.toCharArray();  }  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c!=  null)  {  for(int  pt  =  0;  pt  <  consumeLen;  pt++)  {  char[]  c  =  c.toCharArray();  }	      if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
175	[BUG]  [BUGGY]  if(c  ==  null)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  if(c  ==  null)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c  ==  null)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }	      if(c!=    null)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
176	[BUG]  [BUGGY]  while(c!=  null)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  [CE]  'else'  without  'if'  [FE]          ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  while(c!=  null)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	while(c!=  null)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }	      if(c!=    null)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    out.write(c);    }    	non-compiled	[CE]  'else'  without  'if'	8	None	replace
177	[BUG]  [BUGGY]  out.write(c,  0,  len);  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]    IndexOutOfBoundsException    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  out.write(c,  0,  len);  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,    0,    len);    char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	3	None	add
178	[BUG]  [BUGGY]  pos  +=  Character.charCount(c,  pos);  [CE]  method  charCount  in  class  Character  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]  pos  +=  Character.charCount(c,  pos);  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	pos  +=  Character.charCount(c,  pos);	      pos    +=    Character.charCount(c);    	non-compiled	[CE]  method  charCount  in  class  Character  cannot  be  applied  to  given  types;	12	None	replace
179	[BUG]  [BUGGY]      if(c!=  null)  {  out.write(c);  }  else  {  out.write(c);  }  if(c  >>  null)  {  out.write(c);  }  else  {  out.write(c);  }  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]    ComparisonFailure    [CONTEXT]    }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));    [BUGGY]      if(c!=  null)  {  out.write(c);  }  else  {  out.write(c);  }  if(c  >>  null)  {  out.write(c);  }  else  {  out.write(c);  }  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	        if(c!=    null)    {    out.write(c);    }    else    {    out.write(c);    }    if(c  >>  null)  {  out.write(c);  }  else  {  out.write(c);  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	18	None	add
