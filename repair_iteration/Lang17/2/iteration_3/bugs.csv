bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  pos  +=  Character.charCount(c,  pos,  out);  [CE]  method  charCount  in  class  Character  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  pos  +=  Character.charCount(c,  pos,  out);  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	pos  +=  Character.charCount(c,  pos,  out);	  pos    +=    Character.charCount(c,    out);    	non-compiled	[CE]  method  charCount  in  class  Character  cannot  be  applied  to  given  types;	98	None	replace
2	[BUG]  [BUGGY]  pos  +=  Character.charCount(c,  out,  consumed);  [CE]  method  charCount  in  class  Character  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  pos  +=  Character.charCount(c,  out,  consumed);  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	pos  +=  Character.charCount(c,  out,  consumed);	  pos    +=    Character.charCount(c,    out);    	non-compiled	[CE]  method  charCount  in  class  Character  cannot  be  applied  to  given  types;	98	None	replace
3	[BUG]  [BUGGY]  if(consumed  <  0)  {  if(c!=  null)  {  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  <  0)  {  if(c!=  null)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  <  0)  {  if(c!=  null)  {  out.write(c);  }	          if(c!=    null)    {    out.write(c);    }    else    {    out.write(c);    }    if(c    >>    null)    {    out.write(c);    }    else    {    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	179	None	replace
4	[BUG]  [BUGGY]  if(consumed  >=  0)  {  if(c!=  null)  {  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >=  0)  {  if(c!=  null)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >=  0)  {  if(c!=  null)  {  out.write(c);  }	          if(c!=    null)    {    out.write(c);    }    else    {    out.write(c);    }    if(c    >>    null)    {    out.write(c);    }    else    {    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	179	None	replace
5	[BUG]  [BUGGY]  if(consumed  <  =  0)  {  if(c!=  null)  {  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  <  =  0)  {  if(c!=  null)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  <  =  0)  {  if(c!=  null)  {  out.write(c);  }	          if(c!=    null)    {    out.write(c);    }    else    {    out.write('n');    }    if(c!=    null)    {    out.write('n');    }    else    {    out.write('n');    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
6	[BUG]  [BUGGY]  if(consumed  >  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }	  if(c!=    null)    {    for(int    pt    =    0;    pt    <    consumed;    pt++)    {    char[]    c    =    c.toCharArray();    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	153	None	replace
7	[BUG]  [BUGGY]  if(consumed  <  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  <  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  <  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }	  if(c!=    null)    {    for(int    pt    =    0;    pt    <    consumed;    pt++)    {    char[]    c    =    c.toCharArray();    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	153	None	replace
8	[BUG]  [BUGGY]  if(consumed  ==  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  ==  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  ==  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }	  if(c!=    null)    {    for(int    pt    =    0;    pt    <    consumed;    pt++)    {    char[]    c    =    c.toCharArray();    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	153	None	replace
9	[BUG]  [BUGGY]  if(consumed  >=  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >=  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >=  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }	  if(c!=    null)    {    for(int    pt    =    0;    pt    <    consumed;    pt++)    {    char[]    c    =    c.toCharArray();    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	153	None	replace
10	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    IndexOutOfBoundsException    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,  0,  consumed  +  1);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	out.write(c,  0,  consumed  +  1);	  out.write(c,    0,    pos    +    1);    	compilable	  [FE]  ComparisonFailure  	17	2	replace
11	[BUG]  [BUGGY]  out.write(c,  0,  consumed  +  1);  [FE]  ComparisonFailure  [FE]    IndexOutOfBoundsException    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,  0,  consumed  +  1);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,  0,  consumed  +  1);	  out.write(c,    0,    pos    +    1);    	compilable	  [FE]  ComparisonFailure  	17	2	replace
12	[BUG]  [BUGGY]  [FE]  IndexOutOfBoundsException  [FE]      IndexOutOfBoundsException    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,  0,  len  +  1);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	out.write(c,  0,  len  +  1);	  out.write(c,    0,    pos    +    1);    	compilable	  [FE]  IndexOutOfBoundsException  	17	12	replace
13	[BUG]  [BUGGY]  out.write(c,  0,  len  +  1);  [FE]  IndexOutOfBoundsException  [FE]      IndexOutOfBoundsException    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,  0,  len  +  1);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,  0,  len  +  1);	  out.write(c,    0,    pos    +    1);    	compilable	  [FE]  IndexOutOfBoundsException  	17	12	replace
14	[BUG]  [BUGGY]  [FE]  IndexOutOfBoundsException  [FE]        IndexOutOfBoundsException    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,  0,  pos  +  2);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	out.write(c,  0,  pos  +  2);	  out.write(c,    0,    pos    +    1);    	compilable	  [FE]  IndexOutOfBoundsException  	17	12	replace
15	[BUG]  [BUGGY]  out.write(c,  0,  pos  +  2);  [FE]  IndexOutOfBoundsException  [FE]        IndexOutOfBoundsException    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,  0,  pos  +  2);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,  0,  pos  +  2);	  out.write(c,    0,    pos    +    1);    	compilable	  [FE]  IndexOutOfBoundsException  	17	12	replace
16	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(pos,  len));  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]        IndexOutOfBoundsException      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(pos,  len));  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	char[]  c  =  Character.toChars(Character.codePointAt(pos,  len));	  out.write(c,    0,    len);    char[]    c    =    Character.toChars(Character.codePointAt(pos,    pos));    	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	177	None	replace
17	[BUG]  [BUGGY]  out.write(c,  0,  consumed);  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]          IndexOutOfBoundsException      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,  0,  consumed);  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,  0,  consumed);  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));	  out.write(c,    0,    len);    char[]    c    =    Character.toChars(Character.codePointAt(pos,    pos));    	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	177	None	replace
18	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]            IndexOutOfBoundsException      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));	  out.write(c,    0,    len);    char[]    c    =    Character.toChars(Character.codePointAt(pos,    pos));    	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	177	None	replace
19	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write(c,  0,  len);  char[]  c  =  input.toChars(c);  out.write(c,  0,  len);  }  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]          IndexOutOfBoundsException      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >  0)  {  out.write(c,  0,  len);  char[]  c  =  input.toChars(c);  out.write(c,  0,  len);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >  0)  {  out.write(c,  0,  len);  char[]  c  =  input.toChars(c);  out.write(c,  0,  len);  }	  out.write(c,    0,    len);    char[]    c    =    input.toChars(c);    out.write(c,    0,    len);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	116	None	replace
20	[BUG]  [BUGGY]  if(consumed  <  0)  {  out.write(c,  0,  len);  char[]  c  =  input.toChars(c);  out.write(c,  0,  len);  }  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]            IndexOutOfBoundsException      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  <  0)  {  out.write(c,  0,  len);  char[]  c  =  input.toChars(c);  out.write(c,  0,  len);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  <  0)  {  out.write(c,  0,  len);  char[]  c  =  input.toChars(c);  out.write(c,  0,  len);  }	  out.write(c,    0,    len);    char[]    c    =    input.toChars(c);    out.write(c,    0,    len);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	116	None	replace
21	[BUG]  [BUGGY]  char[]  c  =  input.toChars(c);  out.write(c,  0,  len);  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]              IndexOutOfBoundsException      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  char[]  c  =  input.toChars(c);  out.write(c,  0,  len);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	char[]  c  =  input.toChars(c);  out.write(c,  0,  len);	  out.write(c,    0,    len);    char[]    c    =    input.toChars(c);    out.write(c,    0,    len);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	116	None	replace
22	[BUG]  [BUGGY]  if(consumed  ==  0)  {  if(c!=  null)  {  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  ==  0)  {  if(c!=  null)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  ==  0)  {  if(c!=  null)  {  out.write(c);  }	          if(c!=    null)    {    out.write(c);    }    else    {    out.write(c);    }    If(c!=    null)    {    out.write(c);    }    else    {    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
23	[BUG]  [BUGGY]  if(consumed  <  0)  {  if(c  ==  null)  {  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  <  0)  {  if(c  ==  null)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  <  0)  {  if(c  ==  null)  {  out.write(c);  }	          if(c!=    null)    {    out.write(c);    }    else    {    out.write('n');    }    if(c    ==    null)    {    out.write(c);    }    else    {    out.write('n');    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
24	[BUG]  [BUGGY]  [FE]  IndexOutOfBoundsException  [FE]    IndexOutOfBoundsException    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,  pos,  len);  out.write(c,  pos,  len);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	out.write(c,    pos,    len);    out.write(c,  pos,  len);	  	compilable	  [FE]  IndexOutOfBoundsException  	36	13	add
25	[BUG]  [BUGGY]  out.write(c,  pos,  len);  out.write(c,  pos,  len);  [FE]  IndexOutOfBoundsException  [FE]    IndexOutOfBoundsException    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,  pos,  len);  out.write(c,  pos,  len);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,    pos,    len);    out.write(c,  pos,  len);	  	compilable	  [FE]  IndexOutOfBoundsException  	36	13	add
26	[BUG]  [BUGGY]  out.write(c,  pos,  len);  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c,  pos,  len);  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]      IndexOutOfBoundsException    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,  pos,  len);  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c,  pos,  len);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,    pos,    len);    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c,  pos,  len);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	36	None	add
27	[BUG]  [BUGGY]  out.write(c,  pos,  len);  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]        IndexOutOfBoundsException    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,  pos,  len);  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,    pos,    len);    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	36	None	add
28	[BUG]  [BUGGY]  out.write(c,  pos,  len);  char[]  c  =  Character.toChars(Character.codePointAt(consumed,  pos));  out.write(c,  pos,  len);  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]          IndexOutOfBoundsException    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,  pos,  len);  char[]  c  =  Character.toChars(Character.codePointAt(consumed,  pos));  out.write(c,  pos,  len);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,    pos,    len);    char[]  c  =  Character.toChars(Character.codePointAt(consumed,  pos));  out.write(c,  pos,  len);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	36	None	add
29	[BUG]  [BUGGY]  out.write(c,  pos,  len);  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c,  pos,  len);  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]            IndexOutOfBoundsException    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,  pos,  len);  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c,  pos,  len);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,    pos,    len);    char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c,  pos,  len);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	36	None	add
30	[BUG]  [BUGGY]  pos  +=  Character.charCount(Character.charCount(c,  pos),  consumed);  [CE]  method  charCount  in  class  Character  cannot  be  applied  to  given  types;  [FE]                          ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  pos  +=  Character.charCount(Character.charCount(c,  pos),  consumed);  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	pos  +=  Character.charCount(Character.charCount(c,  pos),  consumed);	  pos    +=    Character.charCount(Character.charCount(c,    pos));    	non-compiled	[CE]  method  charCount  in  class  Character  cannot  be  applied  to  given  types;	96	None	replace
31	[BUG]  [BUGGY]  pos  +=  Character.charCount(Character.charCount(c,  pos,  consumed));  [CE]  method  charCount  in  class  Character  cannot  be  applied  to  given  types;  [FE]                            ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  pos  +=  Character.charCount(Character.charCount(c,  pos,  consumed));  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	pos  +=  Character.charCount(Character.charCount(c,  pos,  consumed));	  pos    +=    Character.charCount(Character.charCount(c,    pos));    	non-compiled	[CE]  method  charCount  in  class  Character  cannot  be  applied  to  given  types;	96	None	replace
32	[BUG]  [BUGGY]  pos  +=  Character.charCount(Character.charCount(input,  pos));  [CE]  method  charCount  in  class  Character  cannot  be  applied  to  given  types;  [FE]                              ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  pos  +=  Character.charCount(Character.charCount(input,  pos));  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	pos  +=  Character.charCount(Character.charCount(input,  pos));	  pos    +=    Character.charCount(Character.charCount(c,    pos));    	non-compiled	[CE]  method  charCount  in  class  Character  cannot  be  applied  to  given  types;	96	None	replace
33	[BUG]  [BUGGY]  pos  +=  Character.charCount(Character.charCount(c,  input));  [CE]  method  charCount  in  class  Character  cannot  be  applied  to  given  types;  [FE]                                ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  pos  +=  Character.charCount(Character.charCount(c,  input));  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	pos  +=  Character.charCount(Character.charCount(c,  input));	  pos    +=    Character.charCount(Character.charCount(c,    pos));    	non-compiled	[CE]  method  charCount  in  class  Character  cannot  be  applied  to  given  types;	96	None	replace
34	[BUG]  [BUGGY]  if(pos  <  len)  {  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length();  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(pos  <  len)  {  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length();  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(pos  <  len)  {  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length();  }	  if(consumed    <    0)    {    if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    pos    +=    c.length();    }    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
35	[BUG]  [BUGGY]  if(pos  <  len)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length();  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(pos  <  len)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length();  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(pos  <  len)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length();  }	  if(consumed    <    0)    {    if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    pos    +=    c.length();    }    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
36	[BUG]  [BUGGY]  while(c!=  null)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  out.write(c[pos]);  }  [CE]  'else'  without  'if'  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  while(c!=  null)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  out.write(c[pos]);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	while(c!=  null)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  out.write(c[pos]);  }	  while(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    out.write(c[pos]);    }    	non-compiled	[CE]  'else'  without  'if'	170	None	replace
37	[BUG]  [BUGGY]  if(c!=  null)  {  while(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c[pos]);  }  [CE]  'else'  without  'if'  [FE]                      ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c!=  null)  {  while(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c[pos]);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c!=  null)  {  while(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c[pos]);  }	  while(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    out.write(c[pos]);    }    	non-compiled	[CE]  'else'  without  'if'	170	None	replace
38	[BUG]  [BUGGY]  while(c!=  null  &&  c.length  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c[pos]);  }  [CE]  'else'  without  'if'  [FE]                        ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  while(c!=  null  &&  c.length  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c[pos]);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	while(c!=  null  &&  c.length  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c[pos]);  }	  while(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    out.write(c[pos]);    }    	non-compiled	[CE]  'else'  without  'if'	170	None	replace
39	[BUG]  [BUGGY]  if(pos  >  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(pos  >  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(pos  >  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c);  }	  if(consumed    >    0)    {    if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
40	[BUG]  [BUGGY]  if(consumed  <  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  <  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  <  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c);  }	  if(consumed    >    0)    {    if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
41	[BUG]  [BUGGY]  if(pos  <  len)  {  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(pos  <  len)  {  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(pos  <  len)  {  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c);  }	  if(consumed    >    0)    {    if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
42	[BUG]  [BUGGY]  char[]  c  =  input.toChars(c,  0,  len);  out.write(c,  0,  pos);  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]              IndexOutOfBoundsException      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  char[]  c  =  input.toChars(c,  0,  len);  out.write(c,  0,  pos);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	char[]  c  =  input.toChars(c,  0,  len);  out.write(c,  0,  pos);	  out.write(c,    0,    pos);    char[]    c    =    input.toChars(c,    0,    pos);    out.write(c,    0,    pos);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	103	None	replace
43	[BUG]  [BUGGY]  if(pos  >  0)  {  out.write(c,  0,  pos);  char[]  c  =  input.toChars(c,  0,  pos);  out.write(c,  0,  len);  }  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                IndexOutOfBoundsException      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(pos  >  0)  {  out.write(c,  0,  pos);  char[]  c  =  input.toChars(c,  0,  pos);  out.write(c,  0,  len);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(pos  >  0)  {  out.write(c,  0,  pos);  char[]  c  =  input.toChars(c,  0,  pos);  out.write(c,  0,  len);  }	  out.write(c,    0,    pos);    char[]    c    =    input.toChars(c,    0,    pos);    out.write(c,    0,    pos);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	103	None	replace
44	[BUG]  [BUGGY]  if(pos  >  0)  {  out.write(c,  0,  pos);  char[]  c  =  input.toChars(c,  0,  pos);  out.write(c,  0,  pos);  }  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                  IndexOutOfBoundsException      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(pos  >  0)  {  out.write(c,  0,  pos);  char[]  c  =  input.toChars(c,  0,  pos);  out.write(c,  0,  pos);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(pos  >  0)  {  out.write(c,  0,  pos);  char[]  c  =  input.toChars(c,  0,  pos);  out.write(c,  0,  pos);  }	  out.write(c,    0,    pos);    char[]    c    =    input.toChars(c,    0,    pos);    out.write(c,    0,    pos);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	103	None	replace
45	[BUG]  [BUGGY]  [FE]  IndexOutOfBoundsException  [FE]    IndexOutOfBoundsException    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,  0,  pos  +  1);  out.write(c,  0,  pos  +  1);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	out.write(c,    0,    pos    +    1);    out.write(c,  0,  pos  +  1);	  	compilable	  [FE]  IndexOutOfBoundsException  	16	13	add
46	[BUG]  [BUGGY]  out.write(c,  0,  pos  +  1);  out.write(c,  0,  pos  +  1);  [FE]  IndexOutOfBoundsException  [FE]    IndexOutOfBoundsException    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,  0,  pos  +  1);  out.write(c,  0,  pos  +  1);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,    0,    pos    +    1);    out.write(c,  0,  pos  +  1);	  	compilable	  [FE]  IndexOutOfBoundsException  	16	13	add
47	[BUG]  [BUGGY]  out.write(c,  0,  pos  +  1);  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c,  0,  pos  +  1);  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]      IndexOutOfBoundsException    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,  0,  pos  +  1);  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c,  0,  pos  +  1);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,    0,    pos    +    1);    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c,  0,  pos  +  1);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	16	None	add
48	[BUG]  [BUGGY]  out.write(c,  0,  pos  +  1);  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos  +  1));  out.write(c,  0,  pos  +  1);  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]        IndexOutOfBoundsException    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,  0,  pos  +  1);  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos  +  1));  out.write(c,  0,  pos  +  1);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,    0,    pos    +    1);    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos  +  1));  out.write(c,  0,  pos  +  1);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	16	None	add
49	[BUG]  [BUGGY]  out.write(c,  0,  pos  +  1);  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]          IndexOutOfBoundsException    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,  0,  pos  +  1);  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,    0,    pos    +    1);    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	16	None	add
50	[BUG]  [BUGGY]  out.write(c,  0,  pos  +  1);  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos  +  1));  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]            IndexOutOfBoundsException    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,  0,  pos  +  1);  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos  +  1));  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,    0,    pos    +    1);    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos  +  1));	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	16	None	add
51	[BUG]  [BUGGY]  if(pos  >  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(pos  >  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(pos  >  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }	  if(consumed    >    0)    {    if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
52	[BUG]  [BUGGY]  if(consumed  <  =  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  <  =  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  <  =  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }	  if(consumed    >    0)    {    if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
53	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  <  0)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	if(consumed  <  0)  {  out.write(c);  }	  if(consumed    >    0)    {    out.write(c);    }    	compilable	  [FE]  ComparisonFailure  	142	13	replace
54	[BUG]  [BUGGY]  if(consumed  <  0)  {  out.write(c);  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  <  0)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  <  0)  {  out.write(c);  }	  if(consumed    >    0)    {    out.write(c);    }    	compilable	  [FE]  ComparisonFailure  	142	13	replace
55	[BUG]  [BUGGY]  OutputStream  out  =  c.outputStream();  [CE]  cannot  find  symbol  [FE]      ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  OutputStream  out  =  c.outputStream();  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	OutputStream  out  =  c.outputStream();	  if(consumed    >    0)    {    out.write(c);    }    	non-compiled	[CE]  cannot  find  symbol	142	None	replace
56	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c[pos]  =  c.charValue();  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c[pos]  =  c.charValue();  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c[pos]  =  c.charValue();  }	  if(consumed!=    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    c[pos]    =    c.charValue();    }    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
57	[BUG]  [BUGGY]  if(pos  >=  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c[pos]  =  c.charValue();  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(pos  >=  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c[pos]  =  c.charValue();  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(pos  >=  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c[pos]  =  c.charValue();  }	  if(consumed!=    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    c[pos]    =    c.charValue();    }    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
58	[BUG]  [BUGGY]  if(consumed  >=  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c[pos]  =  c.charValue();  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >=  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c[pos]  =  c.charValue();  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >=  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c[pos]  =  c.charValue();  }	  if(consumed!=    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    c[pos]    =    c.charValue();    }    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
59	[BUG]  [BUGGY]  if(consumed  <  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c[pos]  =  c.charValue();  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  <  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c[pos]  =  c.charValue();  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  <  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c[pos]  =  c.charValue();  }	  if(consumed!=    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    c[pos]    =    c.charValue();    }    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
60	[BUG]  [BUGGY]  if(pos  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(pos  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(pos  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  }	  if(consumed    >=    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
61	[BUG]  [BUGGY]  if(pos  >  0)  {  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(pos  >  0)  {  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(pos  >  0)  {  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  }	  if(consumed    >=    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
62	[BUG]  [BUGGY]  if(pos  >=  len)  {  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(pos  >=  len)  {  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(pos  >=  len)  {  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  }	  if(consumed    >=    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
63	[BUG]  [BUGGY]  if(pos  >  0)  {  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  c  =  c.toCharArray();  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(pos  >  0)  {  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  c  =  c.toCharArray();  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(pos  >  0)  {  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  c  =  c.toCharArray();  }	  if(consumed    >=    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
64	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c  ==  null)  {  out.write('n');  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	if(c  ==  null)  {  out.write('n');  }	  if(c!=    null)    {    out.write('n');    }    	compilable	  [FE]  ComparisonFailure  	110	13	replace
65	[BUG]  [BUGGY]  if(c  ==  null)  {  out.write('n');  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c  ==  null)  {  out.write('n');  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c  ==  null)  {  out.write('n');  }	  if(c!=    null)    {    out.write('n');    }    	compilable	  [FE]  ComparisonFailure  	110	13	replace
66	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write('n');  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	out.write('n');	  if(c!=    null)    {    out.write('n');    }    	compilable	  [FE]  ComparisonFailure  	110	13	replace
67	[BUG]  [BUGGY]  out.write('n');  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write('n');  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write('n');	  if(c!=    null)    {    out.write('n');    }    	compilable	  [FE]  ComparisonFailure  	110	13	replace
68	[BUG]  [BUGGY]  if(pos  >=  len)  {  if(consumed  ==  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length;  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(pos  >=  len)  {  if(consumed  ==  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length;  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(pos  >=  len)  {  if(consumed  ==  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length;  }	  if(consumed    ==    0)    {    if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    pos    +=    c.length;    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
69	[BUG]  [BUGGY]  if(pos  ==  len)  {  if(consumed  ==  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length;  }  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(pos  ==  len)  {  if(consumed  ==  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length;  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(pos  ==  len)  {  if(consumed  ==  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length;  }	  if(consumed    ==    0)    {    if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    pos    +=    c.length;    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
70	[BUG]  [BUGGY]  if(c  ==  null)  {  out.write(c);  }  else  {  for(int  pt  =  0;  pt  <  len  -  2;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pos,  pos));  }  [CE]  'else'  without  'if'  [FE]          ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c  ==  null)  {  out.write(c);  }  else  {  for(int  pt  =  0;  pt  <  len  -  2;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pos,  pos));  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c  ==  null)  {  out.write(c);  }  else  {  for(int  pt  =  0;  pt  <  len  -  2;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pos,  pos));  }	  if(c!=    null)    {    out.write(c);    }    else    {    for(int    pt    =    0;    pt    <    len    -    2;    pt++)    {    pos    +=    Character.charCount(Character.codePointAt(pos,    pos));    }    	non-compiled	[CE]  'else'  without  'if'	42	None	replace
71	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]          if(c!=    null)    {    out.write(c);    }    else    {    out.write('n');    }    if(c!=  null)  {  out.write(c);  }  else  {  out.write('n');  }  if(c!=  null)  {  out.write(c);  }  else  {  out.write('n');  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	                if(c!=        null)        {        out.write(c);        }        else        {        out.write('n');        }        if(c!=    null)    {    out.write(c);    }    else    {    out.write('n');    }    if(c!=  null)  {  out.write(c);  }  else  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	1	13	add
72	[BUG]  [BUGGY]          if(c!=    null)    {    out.write(c);    }    else    {    out.write('n');    }    if(c!=  null)  {  out.write(c);  }  else  {  out.write('n');  }  if(c!=  null)  {  out.write(c);  }  else  {  out.write('n');  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]          if(c!=    null)    {    out.write(c);    }    else    {    out.write('n');    }    if(c!=  null)  {  out.write(c);  }  else  {  out.write('n');  }  if(c!=  null)  {  out.write(c);  }  else  {  out.write('n');  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	                if(c!=        null)        {        out.write(c);        }        else        {        out.write('n');        }        if(c!=    null)    {    out.write(c);    }    else    {    out.write('n');    }    if(c!=  null)  {  out.write(c);  }  else  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	1	13	add
73	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]          if(c!=    null)    {    out.write(c);    }    else    {    out.write('n');    }    if(c!=  null)  {  out.write(c);  }  else  {  out.write('n');  }  if(c  ==  null)  {  out.write(c);  }  else  {  out.write('n');  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	                if(c!=        null)        {        out.write(c);        }        else        {        out.write('n');        }        if(c!=    null)    {    out.write(c);    }    else    {    out.write('n');    }    if(c  ==  null)  {  out.write(c);  }  else  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	1	13	add
74	[BUG]  [BUGGY]          if(c!=    null)    {    out.write(c);    }    else    {    out.write('n');    }    if(c!=  null)  {  out.write(c);  }  else  {  out.write('n');  }  if(c  ==  null)  {  out.write(c);  }  else  {  out.write('n');  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]          if(c!=    null)    {    out.write(c);    }    else    {    out.write('n');    }    if(c!=  null)  {  out.write(c);  }  else  {  out.write('n');  }  if(c  ==  null)  {  out.write(c);  }  else  {  out.write('n');  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	                if(c!=        null)        {        out.write(c);        }        else        {        out.write('n');        }        if(c!=    null)    {    out.write(c);    }    else    {    out.write('n');    }    if(c  ==  null)  {  out.write(c);  }  else  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	1	13	add
75	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]          if(c!=    null)    {    out.write(c);    }    else    {    out.write('n');    }    if(c!=  null)  {  out.write(c);  }  else  {  out.write('n');  }  if(c!=  null)  {  out.write('n');  }  else  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	                if(c!=        null)        {        out.write(c);        }        else        {        out.write('n');        }        if(c!=    null)    {    out.write(c);    }    else    {    out.write('n');    }    if(c!=  null)  {  out.write('n');  }  else  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	1	13	add
76	[BUG]  [BUGGY]          if(c!=    null)    {    out.write(c);    }    else    {    out.write('n');    }    if(c!=  null)  {  out.write(c);  }  else  {  out.write('n');  }  if(c!=  null)  {  out.write('n');  }  else  {  out.write(c);  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]          if(c!=    null)    {    out.write(c);    }    else    {    out.write('n');    }    if(c!=  null)  {  out.write(c);  }  else  {  out.write('n');  }  if(c!=  null)  {  out.write('n');  }  else  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	                if(c!=        null)        {        out.write(c);        }        else        {        out.write('n');        }        if(c!=    null)    {    out.write(c);    }    else    {    out.write('n');    }    if(c!=  null)  {  out.write('n');  }  else  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	1	13	add
77	[BUG]  [BUGGY]          if(c!=    null)    {    out.write(c);    }    else    {    out.write('n');    }    if(c!=  null)  {  out.write(c);  }  else  {  out.write('n');  }  if(c!=  null)  {  out.write(c);  }  else  {  [CE]  'else'  without  'if'  [FE]          ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]          if(c!=    null)    {    out.write(c);    }    else    {    out.write('n');    }    if(c!=  null)  {  out.write(c);  }  else  {  out.write('n');  }  if(c!=  null)  {  out.write(c);  }  else  {  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	                if(c!=        null)        {        out.write(c);        }        else        {        out.write('n');        }        if(c!=    null)    {    out.write(c);    }    else    {    out.write('n');    }    if(c!=  null)  {  out.write(c);  }  else  {	  	non-compiled	[CE]  'else'  without  'if'	1	None	add
78	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write(c,  0,  len);  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c,  0,  len);  }  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]          IndexOutOfBoundsException      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >  0)  {  out.write(c,  0,  len);  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c,  0,  len);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >  0)  {  out.write(c,  0,  len);  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c,  0,  len);  }	  out.write(c,    0,    len);    char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    out.write(c,    0,    len);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	88	None	replace
79	[BUG]  [BUGGY]  if(consumed  <  0)  {  out.write(c,  0,  len);  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c,  0,  len);  }  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]            IndexOutOfBoundsException      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  <  0)  {  out.write(c,  0,  len);  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c,  0,  len);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  <  0)  {  out.write(c,  0,  len);  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c,  0,  len);  }	  out.write(c,    0,    len);    char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    out.write(c,    0,    len);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	88	None	replace
80	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c,  0,  len);  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]              IndexOutOfBoundsException      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c,  0,  len);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c,  0,  len);	  out.write(c,    0,    len);    char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    out.write(c,    0,    len);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	88	None	replace
81	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c!=  null  ||  c.length  >  0)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	if(c!=  null  ||  c.length  >  0)  {  out.write(c);  }	  if(c!=    null    &&    c.length    >    0)    {    out.write(c);    }    	compilable	  [FE]  ComparisonFailure  	155	1	replace
82	[BUG]  [BUGGY]  if(c!=  null  ||  c.length  >  0)  {  out.write(c);  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c!=  null  ||  c.length  >  0)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c!=  null  ||  c.length  >  0)  {  out.write(c);  }	  if(c!=    null    &&    c.length    >    0)    {    out.write(c);    }    	compilable	  [FE]  ComparisonFailure  	155	1	replace
83	[BUG]  [BUGGY]  if(pos  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length();  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(pos  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length();  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(pos  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length();  }	  if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    pos    +=    c.length();    }    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
84	[BUG]  [BUGGY]  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length();  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length();  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length();  }	  if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    pos    +=    c.length();    }    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
85	[BUG]  [BUGGY]  if(consumed  <  =  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length();  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  <  =  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length();  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  <  =  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length();  }	  if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    pos    +=    c.length();    }    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
86	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c!=  null)  {  out.write('n');  }  if(c!=  null)  {  out.write('n');  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	if(c!=    null)    {    out.write('n');    }    if(c!=  null)  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	109	13	add
87	[BUG]  [BUGGY]  if(c!=  null)  {  out.write('n');  }  if(c!=  null)  {  out.write('n');  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c!=  null)  {  out.write('n');  }  if(c!=  null)  {  out.write('n');  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c!=    null)    {    out.write('n');    }    if(c!=  null)  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	109	13	add
88	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c!=  null)  {  out.write('n');  }  if(c  ==  null)  {  out.write('n');  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	if(c!=    null)    {    out.write('n');    }    if(c  ==  null)  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	109	13	add
89	[BUG]  [BUGGY]  if(c!=  null)  {  out.write('n');  }  if(c  ==  null)  {  out.write('n');  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c!=  null)  {  out.write('n');  }  if(c  ==  null)  {  out.write('n');  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c!=    null)    {    out.write('n');    }    if(c  ==  null)  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	109	13	add
90	[BUG]  [BUGGY]  if(c!=  null)  {  out.write('n');  }  if(c  >=  null)  {  out.write('n');  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]        ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c!=  null)  {  out.write('n');  }  if(c  >=  null)  {  out.write('n');  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c!=    null)    {    out.write('n');    }    if(c  >=  null)  {  out.write('n');  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	109	None	add
91	[BUG]  [BUGGY]  if(c!=  null)  {  out.write('n');  }  if(c  >>  null)  {  out.write('n');  }  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]          ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c!=  null)  {  out.write('n');  }  if(c  >>  null)  {  out.write('n');  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c!=    null)    {    out.write('n');    }    if(c  >>  null)  {  out.write('n');  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	109	None	add
92	[BUG]  [BUGGY]  if(c  ==  null)  {  for(int  pos  =  0;  pos  <  consumed;  pos++)  {  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c  ==  null)  {  for(int  pos  =  0;  pos  <  consumed;  pos++)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c  ==  null)  {  for(int  pos  =  0;  pos  <  consumed;  pos++)  {  out.write(c);  }	  if(c!=    null)    {    for(int    pos    =    0;    pos    <    consumed;    pos++)    {    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
93	[BUG]  [BUGGY]  while(c!=  null)  {  for(int  pos  =  0;  pos  <  consumed;  pos++)  {  out.write(c);  }  [CE]  'else'  without  'if'  [FE]              ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  while(c!=  null)  {  for(int  pos  =  0;  pos  <  consumed;  pos++)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	while(c!=  null)  {  for(int  pos  =  0;  pos  <  consumed;  pos++)  {  out.write(c);  }	  if(c!=    null)    {    for(int    pos    =    0;    pos    <    consumed;    pos++)    {    out.write(c);    }    	non-compiled	[CE]  'else'  without  'if'	38	None	replace
94	[BUG]  [BUGGY]  if(pos  >  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(pos  >  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(pos  >  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }	  if(consumed    >    0)    {    if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toChars();    pos    +=    c.length();    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
95	[BUG]  [BUGGY]  if(pos  >  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(pos  >  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(pos  >  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }  }	  if(consumed    >    0)    {    if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toChars();    pos    +=    c.length();    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
96	[BUG]  [BUGGY]  if(pos  <  len)  {  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(pos  <  len)  {  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(pos  <  len)  {  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }	  if(consumed    >    0)    {    if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toChars();    pos    +=    c.length();    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
97	[BUG]  [BUGGY]  pos  +=  Character.charCount(c,  pos,  len);  [CE]  method  charCount  in  class  Character  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  pos  +=  Character.charCount(c,  pos,  len);  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	pos  +=  Character.charCount(c,  pos,  len);	  pos    +=    Character.charCount(c,    len);    	non-compiled	[CE]  method  charCount  in  class  Character  cannot  be  applied  to  given  types;	99	None	replace
98	[BUG]  [BUGGY]  pos  +=  Character.charCount(c,  input,  len);  [CE]  method  charCount  in  class  Character  cannot  be  applied  to  given  types;  [FE]                        ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  pos  +=  Character.charCount(c,  input,  len);  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	pos  +=  Character.charCount(c,  input,  len);	  pos    +=    Character.charCount(c,    len);    	non-compiled	[CE]  method  charCount  in  class  Character  cannot  be  applied  to  given  types;	99	None	replace
99	[BUG]  [BUGGY]  if(pos  >  0)  {  out.write(c,  0,  pos);  char[]  c  =  input.toChars(input,  pos);  out.write(c,  0,  pos);  }  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]            IndexOutOfBoundsException      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(pos  >  0)  {  out.write(c,  0,  pos);  char[]  c  =  input.toChars(input,  pos);  out.write(c,  0,  pos);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(pos  >  0)  {  out.write(c,  0,  pos);  char[]  c  =  input.toChars(input,  pos);  out.write(c,  0,  pos);  }	  out.write(c,    0,    pos);    char[]    c    =    input.toChars(input,    pos);    out.write(c,    0,    pos);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	102	None	replace
100	[BUG]  [BUGGY]  if(pos  >  0)  {  out.write(c,  0,  pos);  char[]  c  =  input.toChars(input,  pos);  out.write(c,  0,  len);  }  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]              IndexOutOfBoundsException      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(pos  >  0)  {  out.write(c,  0,  pos);  char[]  c  =  input.toChars(input,  pos);  out.write(c,  0,  len);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(pos  >  0)  {  out.write(c,  0,  pos);  char[]  c  =  input.toChars(input,  pos);  out.write(c,  0,  len);  }	  out.write(c,    0,    pos);    char[]    c    =    input.toChars(input,    pos);    out.write(c,    0,    pos);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	102	None	replace
101	[BUG]  [BUGGY]  if(pos  <  len)  {  out.write(c,  0,  pos);  char[]  c  =  input.toChars(input,  pos);  out.write(c,  0,  pos);  }  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                IndexOutOfBoundsException      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(pos  <  len)  {  out.write(c,  0,  pos);  char[]  c  =  input.toChars(input,  pos);  out.write(c,  0,  pos);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(pos  <  len)  {  out.write(c,  0,  pos);  char[]  c  =  input.toChars(input,  pos);  out.write(c,  0,  pos);  }	  out.write(c,    0,    pos);    char[]    c    =    input.toChars(input,    pos);    out.write(c,    0,    pos);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	102	None	replace
102	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]          if(c!=    null)    {    out.write(c);    }    if(c!=  null)  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	                if(c!=        null)        {        out.write(c);        }        if(c!=    null)    {    out.write(c);    }    if(c!=  null)  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	8	13	add
103	[BUG]  [BUGGY]          if(c!=    null)    {    out.write(c);    }    if(c!=  null)  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]          if(c!=    null)    {    out.write(c);    }    if(c!=  null)  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	                if(c!=        null)        {        out.write(c);        }        if(c!=    null)    {    out.write(c);    }    if(c!=  null)  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	8	13	add
104	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]          if(c!=    null)    {    out.write(c);    }    if(c!=  null)  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	                if(c!=        null)        {        out.write(c);        }        if(c!=    null)    {    out.write(c);    }    if(c!=  null)  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	8	13	add
105	[BUG]  [BUGGY]          if(c!=    null)    {    out.write(c);    }    if(c!=  null)  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]          if(c!=    null)    {    out.write(c);    }    if(c!=  null)  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	                if(c!=        null)        {        out.write(c);        }        if(c!=    null)    {    out.write(c);    }    if(c!=  null)  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	8	13	add
106	[BUG]  [BUGGY]          if(c!=    null)    {    out.write(c);    }    if(c!=  null)  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }  if(c!=  null)  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]          if(c!=    null)    {    out.write(c);    }    if(c!=  null)  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }  if(c!=  null)  {  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	                if(c!=        null)        {        out.write(c);        }        if(c!=    null)    {    out.write(c);    }    if(c!=  null)  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }  if(c!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
107	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]          if(c!=    null)    {    out.write(c);    }    if(c!=  null)  {  out.write(c);  }  if(c  ==  null)  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	                if(c!=        null)        {        out.write(c);        }        if(c!=    null)    {    out.write(c);    }    if(c  ==  null)  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	8	13	add
108	[BUG]  [BUGGY]          if(c!=    null)    {    out.write(c);    }    if(c!=  null)  {  out.write(c);  }  if(c  ==  null)  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]          if(c!=    null)    {    out.write(c);    }    if(c!=  null)  {  out.write(c);  }  if(c  ==  null)  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	                if(c!=        null)        {        out.write(c);        }        if(c!=    null)    {    out.write(c);    }    if(c  ==  null)  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	8	13	add
109	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]          if(c!=    null)    {    out.write(c);    }    if(c!=  null)  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }  if(c  ==  null)  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	                if(c!=        null)        {        out.write(c);        }        if(c!=    null)    {    out.write(c);    }    if(c!=  null)  {  out.write(c);  }  if(c  ==  null)  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	8	13	add
110	[BUG]  [BUGGY]          if(c!=    null)    {    out.write(c);    }    if(c!=  null)  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }  if(c  ==  null)  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]          if(c!=    null)    {    out.write(c);    }    if(c!=  null)  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }  if(c  ==  null)  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	                if(c!=        null)        {        out.write(c);        }        if(c!=    null)    {    out.write(c);    }    if(c!=  null)  {  out.write(c);  }  if(c  ==  null)  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	8	13	add
111	[BUG]  [BUGGY]  if(c!=  null)  {  while(c!=  null)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  [CE]  'else'  without  'if'  [FE]              ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c!=  null)  {  while(c!=  null)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c!=  null)  {  while(c!=  null)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }	  while(c!=    null)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    out.write(c);    }    	non-compiled	[CE]  'else'  without  'if'	176	None	replace
112	[BUG]  [BUGGY]  while(c!=  null)  {  for(int  pos  =  0;  pos  <  consume;  pos++)  {  out.write(c);  }  [CE]  'else'  without  'if'  [FE]                ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  while(c!=  null)  {  for(int  pos  =  0;  pos  <  consume;  pos++)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	while(c!=  null)  {  for(int  pos  =  0;  pos  <  consume;  pos++)  {  out.write(c);  }	  while(c!=    null)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    out.write(c);    }    	non-compiled	[CE]  'else'  without  'if'	176	None	replace
113	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write(c,  0,  c.length);  char[]  c  =  Character.toChars(Character.toChars(c));  out.write(c,  0,  c.length);  }  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]          ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >  0)  {  out.write(c,  0,  c.length);  char[]  c  =  Character.toChars(Character.toChars(c));  out.write(c,  0,  c.length);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >  0)  {  out.write(c,  0,  c.length);  char[]  c  =  Character.toChars(Character.toChars(c));  out.write(c,  0,  c.length);  }	  out.write(c,    0,    c.length);    char[]    c    =    Character.toChars(Character.toChars(c));    out.write(c,    0,    c.length);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	105	None	replace
114	[BUG]  [BUGGY]  if(consumed  <  0)  {  out.write(c,  0,  c.length);  char[]  c  =  Character.toChars(Character.toChars(c));  out.write(c,  0,  c.length);  }  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]            ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  <  0)  {  out.write(c,  0,  c.length);  char[]  c  =  Character.toChars(Character.toChars(c));  out.write(c,  0,  c.length);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  <  0)  {  out.write(c,  0,  c.length);  char[]  c  =  Character.toChars(Character.toChars(c));  out.write(c,  0,  c.length);  }	  out.write(c,    0,    c.length);    char[]    c    =    Character.toChars(Character.toChars(c));    out.write(c,    0,    c.length);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	105	None	replace
115	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write(c,  0,  c.length);  char[]  c  =  Character.toChars(Character.toChars(c));  out.write(c,  0,  c.length);  }  else  {  out.write(  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >  0)  {  out.write(c,  0,  c.length);  char[]  c  =  Character.toChars(Character.toChars(c));  out.write(c,  0,  c.length);  }  else  {  out.write(  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >  0)  {  out.write(c,  0,  c.length);  char[]  c  =  Character.toChars(Character.toChars(c));  out.write(c,  0,  c.length);  }  else  {  out.write(	  out.write(c,    0,    c.length);    char[]    c    =    Character.toChars(Character.toChars(c));    out.write(c,    0,    c.length);    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
116	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]            ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));	  out.write(c,    0,    c.length);    char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	29	None	replace
117	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(pos,  c));  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]              ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(pos,  c));  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	char[]  c  =  Character.toChars(Character.codePointAt(pos,  c));	  out.write(c,    0,    c.length);    char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	29	None	replace
118	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(pos,  input));  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(pos,  input));  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	char[]  c  =  Character.toChars(Character.codePointAt(pos,  input));	  out.write(c,    0,    c.length);    char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	29	None	replace
119	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(consumed,  pos));  out.write(c,  0,  len);  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]              IndexOutOfBoundsException      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(consumed,  pos));  out.write(c,  0,  len);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	char[]  c  =  Character.toChars(Character.codePointAt(consumed,  pos));  out.write(c,  0,  len);	  out.write(c,    0,    len);    char[]    c    =    Character.toChars(Character.codePointAt(consumed,    pos));    out.write(c,    0,    len);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	90	None	replace
120	[BUG]  [BUGGY]  if(pos  <  len)  {  out.write(c,  0,  len);  char[]  c  =  Character.toChars(Character.codePointAt(consumed,  pos));  out.write(c,  0,  len);  }  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                IndexOutOfBoundsException      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(pos  <  len)  {  out.write(c,  0,  len);  char[]  c  =  Character.toChars(Character.codePointAt(consumed,  pos));  out.write(c,  0,  len);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(pos  <  len)  {  out.write(c,  0,  len);  char[]  c  =  Character.toChars(Character.codePointAt(consumed,  pos));  out.write(c,  0,  len);  }	  out.write(c,    0,    len);    char[]    c    =    Character.toChars(Character.codePointAt(consumed,    pos));    out.write(c,    0,    len);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	90	None	replace
121	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write(c,  0,  len);  char[]  c  =  Character.toChars(Character.codePointAt(consumed,  pos));  out.write(c,  0,  len);  }  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                  IndexOutOfBoundsException      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >  0)  {  out.write(c,  0,  len);  char[]  c  =  Character.toChars(Character.codePointAt(consumed,  pos));  out.write(c,  0,  len);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >  0)  {  out.write(c,  0,  len);  char[]  c  =  Character.toChars(Character.codePointAt(consumed,  pos));  out.write(c,  0,  len);  }	  out.write(c,    0,    len);    char[]    c    =    Character.toChars(Character.codePointAt(consumed,    pos));    out.write(c,    0,    len);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	90	None	replace
122	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }	  if(consumed    >=    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
123	[BUG]  [BUGGY]  if(pos  >=  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(pos  >=  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(pos  >=  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }	  if(consumed    >=    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
124	[BUG]  [BUGGY]  if(pos  >=  0)  {  for(int  pos  =  0;  pos  <  consumed;  pos++)  {  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(pos  >=  0)  {  for(int  pos  =  0;  pos  <  consumed;  pos++)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(pos  >=  0)  {  for(int  pos  =  0;  pos  <  consumed;  pos++)  {  out.write(c);  }	  if(consumed    >=    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
125	[BUG]  [BUGGY]  if(pos  <  len)  {  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(pos  <  len)  {  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(pos  <  len)  {  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }	  if(consumed    <    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	152	None	replace
126	[BUG]  [BUGGY]  pos  <  len)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }  [CE]  >  expected  [FE]              ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  pos  <  len)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	pos  <  len)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }	  if(consumed    <    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    out.write(c);    }    	non-compiled	[CE]  >  expected	152	None	replace
127	[BUG]  [BUGGY]  if(pos  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length;  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(pos  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length;  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(pos  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length;  }	  if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    pos    +=    c.length;    }    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
128	[BUG]  [BUGGY]  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length;  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length;  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length;  }	  if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    pos    +=    c.length;    }    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
129	[BUG]  [BUGGY]  if(consumed  <  =  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length;  }  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  <  =  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length;  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  <  =  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length;  }	  if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    pos    +=    c.length;    }    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
130	[BUG]  [BUGGY]  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }	  if(consumed    ==    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toChars();    pos    +=    c.length();    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
131	[BUG]  [BUGGY]  if(consumed  <  =  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  <  =  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  <  =  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }	  if(consumed    ==    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toChars();    pos    +=    c.length();    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
132	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(c.toChars());  pos  +=  c.length();  }  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(c.toChars());  pos  +=  c.length();  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(c.toChars());  pos  +=  c.length();  }	  if(consumed    ==    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toChars();    pos    +=    c.length();    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
133	[BUG]  [BUGGY]  while(c!=  null)  {  for(int  pt  =  0;  pt  <  consume;  pt++)  {  out.write(c);  }  [CE]  'else'  without  'if'  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  while(c!=  null)  {  for(int  pt  =  0;  pt  <  consume;  pt++)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	while(c!=  null)  {  for(int  pt  =  0;  pt  <  consume;  pt++)  {  out.write(c);  }	  if(c!=    null)    {    for(int    pt    =    0;    pt    <    consume;    pt++)    {    out.write(c);    }    	non-compiled	[CE]  'else'  without  'if'	166	None	replace
134	[BUG]  [BUGGY]  while(c!=  null)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  out.write(c);  }  [CE]  'else'  without  'if'  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  while(c!=  null)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	while(c!=  null)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  out.write(c);  }	  if(c!=    null)    {    for(int    pt    =    0;    pt    <    consume;    pt++)    {    out.write(c);    }    	non-compiled	[CE]  'else'  without  'if'	166	None	replace
135	[BUG]  [BUGGY]  [FE]  IndexOutOfBoundsException  [FE]    IndexOutOfBoundsException    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,  0,  c.length  -  2);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	out.write(c,  0,  c.length  -  2);	  out.write(c,    0,    c.length    +    2);    	compilable	  [FE]  IndexOutOfBoundsException  	82	13	replace
136	[BUG]  [BUGGY]  out.write(c,  0,  c.length  -  2);  [FE]  IndexOutOfBoundsException  [FE]    IndexOutOfBoundsException    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,  0,  c.length  -  2);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,  0,  c.length  -  2);	  out.write(c,    0,    c.length    +    2);    	compilable	  [FE]  IndexOutOfBoundsException  	82	13	replace
137	[BUG]  [BUGGY]  if(consumed  >  0)  {  if(c!=  null)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c[pos]  =  Character.charValue(c);  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >  0)  {  if(c!=  null)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c[pos]  =  Character.charValue(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >  0)  {  if(c!=  null)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c[pos]  =  Character.charValue(c);  }	  if(c!=    null)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    c[pos]    =    Character.charValue(c);    }    	non-compiled	[CE]  illegal  start  of  expression	164	None	replace
138	[BUG]  [BUGGY]  if(consumed  ==  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c[pos]  =  Character.charValue(c);  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  ==  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c[pos]  =  Character.charValue(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  ==  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c[pos]  =  Character.charValue(c);  }	  if(c!=    null)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    c[pos]    =    Character.charValue(c);    }    	non-compiled	[CE]  illegal  start  of  expression	164	None	replace
139	[BUG]  [BUGGY]  if(consumed  <  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c[pos]  =  Character.charValue(c);  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  <  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c[pos]  =  Character.charValue(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  <  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c[pos]  =  Character.charValue(c);  }	  if(c!=    null)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    c[pos]    =    Character.charValue(c);    }    	non-compiled	[CE]  illegal  start  of  expression	164	None	replace
140	[BUG]  [BUGGY]  OutputStream  out  =  c.readLine();  [CE]  cannot  find  symbol  [FE]        ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  OutputStream  out  =  c.readLine();  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	OutputStream  out  =  c.readLine();	  OutputStream    out    =    input.readLine();    	non-compiled	[CE]  cannot  find  symbol	135	None	replace
141	[BUG]  [BUGGY]  OutputStream  out  =  this.input.readLine();  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  OutputStream  out  =  this.input.readLine();  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	OutputStream  out  =  this.input.readLine();	  OutputStream    out    =    input.readLine();    	non-compiled	[CE]  cannot  find  symbol	135	None	replace
142	[BUG]  [BUGGY]  OutputStream  out  =  output.readLine();  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  OutputStream  out  =  output.readLine();  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	OutputStream  out  =  output.readLine();	  OutputStream    out    =    input.readLine();    	non-compiled	[CE]  cannot  find  symbol	135	None	replace
143	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write(c,  0,  c.length);  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c,  0,  c.length);  }  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >  0)  {  out.write(c,  0,  c.length);  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c,  0,  c.length);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >  0)  {  out.write(c,  0,  c.length);  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c,  0,  c.length);  }	  out.write(c,    0,    c.length);    char[]    c    =    Character.toChars(Character.codePointAt(pos,    pos));    out.write(c,    0,    c.length);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	31	None	replace
144	[BUG]  [BUGGY]  if(consumed  <  0)  {  out.write(c,  0,  c.length);  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c,  0,  c.length);  }  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  <  0)  {  out.write(c,  0,  c.length);  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c,  0,  c.length);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  <  0)  {  out.write(c,  0,  c.length);  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c,  0,  c.length);  }	  out.write(c,    0,    c.length);    char[]    c    =    Character.toChars(Character.codePointAt(pos,    pos));    out.write(c,    0,    c.length);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	31	None	replace
145	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    IndexOutOfBoundsException    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >  0)  {  out.write(c,  0,  len);  out.write(c,  0,  len);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	if(consumed  >  0)  {  out.write(c,  0,  len);  out.write(c,  0,  len);  }	  out.write(c,    0,    len);    out.write(c,    0,    len);    	compilable	  [FE]  ComparisonFailure  	87	13	replace
146	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write(c,  0,  len);  out.write(c,  0,  len);  }  [FE]  ComparisonFailure  [FE]    IndexOutOfBoundsException    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >  0)  {  out.write(c,  0,  len);  out.write(c,  0,  len);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >  0)  {  out.write(c,  0,  len);  out.write(c,  0,  len);  }	  out.write(c,    0,    len);    out.write(c,    0,    len);    	compilable	  [FE]  ComparisonFailure  	87	13	replace
147	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      IndexOutOfBoundsException    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >  0)  {  out.write(c,  0,  len);  out.write(c,  0,  len);  }  else  {  out.write(c,  0,  consumed);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	if(consumed  >  0)  {  out.write(c,  0,  len);  out.write(c,  0,  len);  }  else  {  out.write(c,  0,  consumed);  }	  out.write(c,    0,    len);    out.write(c,    0,    len);    	compilable	  [FE]  ComparisonFailure  	87	13	replace
148	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write(c,  0,  len);  out.write(c,  0,  len);  }  else  {  out.write(c,  0,  consumed);  }  [FE]  ComparisonFailure  [FE]      IndexOutOfBoundsException    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >  0)  {  out.write(c,  0,  len);  out.write(c,  0,  len);  }  else  {  out.write(c,  0,  consumed);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >  0)  {  out.write(c,  0,  len);  out.write(c,  0,  len);  }  else  {  out.write(c,  0,  consumed);  }	  out.write(c,    0,    len);    out.write(c,    0,    len);    	compilable	  [FE]  ComparisonFailure  	87	13	replace
149	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write(c,  0,  len);  out.write(c,  0,  len);  }  else  {  out.write('ufffd');  }  [CE]  unclosed  character  literal  [FE]        IndexOutOfBoundsException    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >  0)  {  out.write(c,  0,  len);  out.write(c,  0,  len);  }  else  {  out.write('ufffd');  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >  0)  {  out.write(c,  0,  len);  out.write(c,  0,  len);  }  else  {  out.write('ufffd');  }	  out.write(c,    0,    len);    out.write(c,    0,    len);    	non-compiled	[CE]  unclosed  character  literal	87	None	replace
150	[BUG]  [BUGGY]  [FE]  IndexOutOfBoundsException  [FE]    IndexOutOfBoundsException    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,  0,  len);  out.write(c,  0,  pos);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	out.write(c,  0,  len);  out.write(c,  0,  pos);	  out.write(c,    0,    pos);    out.write(c,    0,    pos);    	compilable	  [FE]  IndexOutOfBoundsException  	58	13	replace
151	[BUG]  [BUGGY]  out.write(c,  0,  len);  out.write(c,  0,  pos);  [FE]  IndexOutOfBoundsException  [FE]    IndexOutOfBoundsException    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,  0,  len);  out.write(c,  0,  pos);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,  0,  len);  out.write(c,  0,  pos);	  out.write(c,    0,    pos);    out.write(c,    0,    pos);    	compilable	  [FE]  IndexOutOfBoundsException  	58	13	replace
152	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c!=  null  &&  c.length  <  2)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	if(c!=  null  &&  c.length  <  2)  {  out.write(c);  }	  if(c!=    null    ||    c.length    <    2)    {    out.write(c);    }    	compilable	  [FE]  ComparisonFailure  	157	2	replace
153	[BUG]  [BUGGY]  if(c!=  null  &&  c.length  <  2)  {  out.write(c);  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c!=  null  &&  c.length  <  2)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c!=  null  &&  c.length  <  2)  {  out.write(c);  }	  if(c!=    null    ||    c.length    <    2)    {    out.write(c);    }    	compilable	  [FE]  ComparisonFailure  	157	2	replace
154	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c  ==  null  ||  c.length  <  2)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	if(c  ==  null  ||  c.length  <  2)  {  out.write(c);  }	  if(c!=    null    ||    c.length    <    2)    {    out.write(c);    }    	compilable	  [FE]  ComparisonFailure  	157	2	replace
155	[BUG]  [BUGGY]  if(c  ==  null  ||  c.length  <  2)  {  out.write(c);  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c  ==  null  ||  c.length  <  2)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c  ==  null  ||  c.length  <  2)  {  out.write(c);  }	  if(c!=    null    ||    c.length    <    2)    {    out.write(c);    }    	compilable	  [FE]  ComparisonFailure  	157	2	replace
156	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c!=  null  ||  c.length  <  2)  {  out.write(c);  }  if(c!=  null  ||  c.length  <  2)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	if(c!=    null    ||    c.length    <    2)    {    out.write(c);    }    if(c!=  null  ||  c.length  <  2)  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	156	13	add
157	[BUG]  [BUGGY]  if(c!=  null  ||  c.length  <  2)  {  out.write(c);  }  if(c!=  null  ||  c.length  <  2)  {  out.write(c);  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c!=  null  ||  c.length  <  2)  {  out.write(c);  }  if(c!=  null  ||  c.length  <  2)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c!=    null    ||    c.length    <    2)    {    out.write(c);    }    if(c!=  null  ||  c.length  <  2)  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	156	13	add
158	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c!=  null  ||  c.length  <  2)  {  out.write(c);  }  if(c  ==  null  ||  c.length  <  2)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	if(c!=    null    ||    c.length    <    2)    {    out.write(c);    }    if(c  ==  null  ||  c.length  <  2)  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	156	13	add
159	[BUG]  [BUGGY]  if(c!=  null  ||  c.length  <  2)  {  out.write(c);  }  if(c  ==  null  ||  c.length  <  2)  {  out.write(c);  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c!=  null  ||  c.length  <  2)  {  out.write(c);  }  if(c  ==  null  ||  c.length  <  2)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c!=    null    ||    c.length    <    2)    {    out.write(c);    }    if(c  ==  null  ||  c.length  <  2)  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	156	13	add
160	[BUG]  [BUGGY]  if(c!=  null  ||  c.length  <  2)  {  out.write(c);  }  if(c  >=  null  ||  c.length  <  2)  {  out.write(c);  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]        ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c!=  null  ||  c.length  <  2)  {  out.write(c);  }  if(c  >=  null  ||  c.length  <  2)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c!=    null    ||    c.length    <    2)    {    out.write(c);    }    if(c  >=  null  ||  c.length  <  2)  {  out.write(c);  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	156	None	add
161	[BUG]  [BUGGY]  if(c!=  null  ||  c.length  <  2)  {  out.write(c);  }  if(c  >>  null  ||  c.length  <  2)  {  out.write(c);  }  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]          ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c!=  null  ||  c.length  <  2)  {  out.write(c);  }  if(c  >>  null  ||  c.length  <  2)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c!=    null    ||    c.length    <    2)    {    out.write(c);    }    if(c  >>  null  ||  c.length  <  2)  {  out.write(c);  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	156	None	add
162	[BUG]  [BUGGY]  if(pos  >=  len)  {  if(consumed!=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(pos  >=  len)  {  if(consumed!=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(pos  >=  len)  {  if(consumed!=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  }	  if(consumed!=    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    }    	non-compiled	[CE]  illegal  start  of  expression	145	None	replace
163	[BUG]  [BUGGY]  if(pos  >=  len)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(pos  >=  len)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(pos  >=  len)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  }	  if(consumed!=    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    }    	non-compiled	[CE]  illegal  start  of  expression	145	None	replace
164	[BUG]  [BUGGY]  if(pos  >=  len)  {  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  c  =  c.toCharArray();  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(pos  >=  len)  {  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  c  =  c.toCharArray();  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(pos  >=  len)  {  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  c  =  c.toCharArray();  }	  if(consumed!=    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    }    	non-compiled	[CE]  illegal  start  of  expression	145	None	replace
165	[BUG]  [BUGGY]  if(consumed  ==  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  ==  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  ==  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  out.write(c);  }	  if(c!=    null)    {    for(int    pt    =    0;    pt    <    consumed;    pt++)    {    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
166	[BUG]  [BUGGY]  if(consumed  >  0)  {  if(c  ==  null)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  c.toCharArray();  if(c!=  null)  {  return;  }  [CE]  'else'  without  'if'  [FE]        ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >  0)  {  if(c  ==  null)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  c.toCharArray();  if(c!=  null)  {  return;  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >  0)  {  if(c  ==  null)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  c.toCharArray();  if(c!=  null)  {  return;  }	          if(c    ==    null)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    c.toCharArray();    if(c!=    null)    {    return;    }    	non-compiled	[CE]  'else'  without  'if'	158	None	replace
167	[BUG]  [BUGGY]  if(consumed  <  0)  {  if(c  ==  null)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  c.toCharArray();  if(c!=  null)  {  return;  }  [CE]  'else'  without  'if'  [FE]          ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  <  0)  {  if(c  ==  null)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  c.toCharArray();  if(c!=  null)  {  return;  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  <  0)  {  if(c  ==  null)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  c.toCharArray();  if(c!=  null)  {  return;  }	          if(c    ==    null)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    c.toCharArray();    if(c!=    null)    {    return;    }    	non-compiled	[CE]  'else'  without  'if'	158	None	replace
168	[BUG]  [BUGGY]  if(consumed  <  =  0)  {  if(c  ==  null)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  c.toCharArray();  if(c!=  null)  {  return;  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  <  =  0)  {  if(c  ==  null)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  c.toCharArray();  if(c!=  null)  {  return;  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  <  =  0)  {  if(c  ==  null)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  c.toCharArray();  if(c!=  null)  {  return;  }	          if(c    ==    null)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    c.toCharArray();    if(c!=    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	158	None	replace
169	[BUG]  [BUGGY]  if(consumed  >  0)  {  if(c  ==  null)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c  =  c.toCharArray();  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >  0)  {  if(c  ==  null)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c  =  c.toCharArray();  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >  0)  {  if(c  ==  null)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c  =  c.toCharArray();  }	          if(c    ==    null)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    c.toCharArray();    if(c!=    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	158	None	replace
170	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]          if(c!=    null)    {    out.write(c);    }    if(c  ==  null)  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }  if(c  ==  null)  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	                if(c!=        null)        {        out.write(c);        }        if(c    ==    null)    {    out.write(c);    }    if(c!=  null)  {  out.write(c);  }  if(c  ==  null)  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	10	13	add
171	[BUG]  [BUGGY]          if(c!=    null)    {    out.write(c);    }    if(c  ==  null)  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }  if(c  ==  null)  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]          if(c!=    null)    {    out.write(c);    }    if(c  ==  null)  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }  if(c  ==  null)  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	                if(c!=        null)        {        out.write(c);        }        if(c    ==    null)    {    out.write(c);    }    if(c!=  null)  {  out.write(c);  }  if(c  ==  null)  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	10	13	add
172	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]          if(c!=    null)    {    out.write(c);    }    if(c  ==  null)  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }  if(c  ==  null)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	                if(c!=        null)        {        out.write(c);        }        if(c    ==    null)    {    out.write(c);    }    if(c!=  null)  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }  if(c  ==  null)  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	10	13	add
173	[BUG]  [BUGGY]          if(c!=    null)    {    out.write(c);    }    if(c  ==  null)  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }  if(c  ==  null)  {  out.write(c);  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]          if(c!=    null)    {    out.write(c);    }    if(c  ==  null)  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }  if(c  ==  null)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	                if(c!=        null)        {        out.write(c);        }        if(c    ==    null)    {    out.write(c);    }    if(c!=  null)  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }  if(c  ==  null)  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	10	13	add
174	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]          if(c!=    null)    {    out.write(c);    }    if(c  ==  null)  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	                if(c!=        null)        {        out.write(c);        }        if(c    ==    null)    {    out.write(c);    }    if(c!=  null)  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	10	13	add
175	[BUG]  [BUGGY]          if(c!=    null)    {    out.write(c);    }    if(c  ==  null)  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]          if(c!=    null)    {    out.write(c);    }    if(c  ==  null)  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	                if(c!=        null)        {        out.write(c);        }        if(c    ==    null)    {    out.write(c);    }    if(c!=  null)  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	10	13	add
176	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]          if(c!=    null)    {    out.write(c);    }    if(c  ==  null)  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }  if(c  ==  null)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	                if(c!=        null)        {        out.write(c);        }        if(c    ==    null)    {    out.write(c);    }    if(c!=  null)  {  out.write(c);  }  if(c  ==  null)  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	10	13	add
177	[BUG]  [BUGGY]          if(c!=    null)    {    out.write(c);    }    if(c  ==  null)  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }  if(c  ==  null)  {  out.write(c);  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]          if(c!=    null)    {    out.write(c);    }    if(c  ==  null)  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }  if(c  ==  null)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	                if(c!=        null)        {        out.write(c);        }        if(c    ==    null)    {    out.write(c);    }    if(c!=  null)  {  out.write(c);  }  if(c  ==  null)  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	10	13	add
178	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]          if(c!=    null)    {    out.write(c);    }    if(c  ==  null)  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }  if(c  ==  null)  {  out.write(c);  }  if(c  ==  null)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	                if(c!=        null)        {        out.write(c);        }        if(c    ==    null)    {    out.write(c);    }    if(c!=  null)  {  out.write(c);  }  if(c  ==  null)  {  out.write(c);  }  if(c  ==  null)  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	10	13	add
179	[BUG]  [BUGGY]          if(c!=    null)    {    out.write(c);    }    if(c  ==  null)  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }  if(c  ==  null)  {  out.write(c);  }  if(c  ==  null)  {  out.write(c);  }  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]          if(c!=    null)    {    out.write(c);    }    if(c  ==  null)  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }  if(c  ==  null)  {  out.write(c);  }  if(c  ==  null)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	                if(c!=        null)        {        out.write(c);        }        if(c    ==    null)    {    out.write(c);    }    if(c!=  null)  {  out.write(c);  }  if(c  ==  null)  {  out.write(c);  }  if(c  ==  null)  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	10	13	add
180	[BUG]  [BUGGY]  if(pos  >=  len)  {  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(pos  >=  len)  {  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(pos  >=  len)  {  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }	  if(consumed!=    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
181	[BUG]  [BUGGY]  if(pos  >=  len)  {  if(consumed!=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(pos  >=  len)  {  if(consumed!=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(pos  >=  len)  {  if(consumed!=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }	  if(consumed!=    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
182	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,  0,  consumed);  out.write(c,  0,  consumed);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	out.write(c,    0,    consumed);    out.write(c,  0,  consumed);	  	compilable	  [FE]  ComparisonFailure  	14	1	add
183	[BUG]  [BUGGY]  out.write(c,  0,  consumed);  out.write(c,  0,  consumed);  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,  0,  consumed);  out.write(c,  0,  consumed);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,    0,    consumed);    out.write(c,  0,  consumed);	  	compilable	  [FE]  ComparisonFailure  	14	1	add
184	[BUG]  [BUGGY]  out.write(c,  0,  consumed);  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c,  0,  consumed);  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]      ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,  0,  consumed);  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c,  0,  consumed);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,    0,    consumed);    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c,  0,  consumed);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	14	None	add
185	[BUG]  [BUGGY]  out.write(c,  0,  consumed);  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]        ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,  0,  consumed);  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,    0,    consumed);    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	14	None	add
186	[BUG]  [BUGGY]  out.write(c,  0,  consumed);  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c,  0,  consumed);  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]          ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,  0,  consumed);  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c,  0,  consumed);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,    0,    consumed);    char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c,  0,  consumed);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	14	None	add
187	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  }	  if(consumed    ==    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
188	[BUG]  [BUGGY]  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  }	  if(consumed    ==    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
189	[BUG]  [BUGGY]  if(consumed  ==  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  ==  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  ==  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }	          if(c!=    null)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    c.toChars();    pos    +=    c.length();    }    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
190	[BUG]  [BUGGY]  if(consumed  >=  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >=  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >=  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }	          if(c!=    null)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    c.toChars();    pos    +=    c.length();    }    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
191	[BUG]  [BUGGY]  if(consumed  <  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  <  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  <  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }	          if(c!=    null)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    c.toChars();    pos    +=    c.length();    }    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
192	[BUG]  [BUGGY]  if(pos  >  0)  {  if(c!=  null)  {  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(pos  >  0)  {  if(c!=  null)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(pos  >  0)  {  if(c!=  null)  {  out.write(c);  }	  if(consumed    >    0)    {    if(c!=    null)    {    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
193	[BUG]  [BUGGY]  if(pos  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(pos  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(pos  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }	  if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
194	[BUG]  [BUGGY]  if(pos  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(pos  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(pos  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  }	  if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
195	[BUG]  [BUGGY]  if(c!=  null)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  pos  +=  Character.charCount(c.charCount());  }  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c!=  null)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  pos  +=  Character.charCount(c.charCount());  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c!=  null)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  pos  +=  Character.charCount(c.charCount());  }	  if(c    ==    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    pos    +=    Character.charCount(c.charCount());    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
196	[BUG]  [BUGGY]  if(c  ==  null)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  pos  +=  Character.charCount(c.charCount());  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c  ==  null)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  pos  +=  Character.charCount(c.charCount());  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c  ==  null)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  pos  +=  Character.charCount(c.charCount());  }	  if(c    ==    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    pos    +=    Character.charCount(c.charCount());    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
197	[BUG]  [BUGGY]  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(c.charCount());  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(c.charCount());  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(c.charCount());  }	  if(c    ==    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    pos    +=    Character.charCount(c.charCount());    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
198	[BUG]  [BUGGY]  while(pos  <  len)  {  if(consumed  ==  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  while(pos  <  len)  {  if(consumed  ==  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	while(pos  <  len)  {  if(consumed  ==  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }	  if(consumed    ==    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
199	[BUG]  [BUGGY]  while(pos  >=  len)  {  if(consumed  ==  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  while(pos  >=  len)  {  if(consumed  ==  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	while(pos  >=  len)  {  if(consumed  ==  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }	  if(consumed    ==    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
200	[BUG]  [BUGGY]  pos  +=  Character.charCount(c,  consumed,  pos);  [CE]  method  charCount  in  class  Character  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  pos  +=  Character.charCount(c,  consumed,  pos);  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	pos  +=  Character.charCount(c,  consumed,  pos);	  pos    +=    Character.charCount(c,    consumed);    	non-compiled	[CE]  method  charCount  in  class  Character  cannot  be  applied  to  given  types;	92	None	replace
201	[BUG]  [BUGGY]  pos  +=  Character.charCount(c,  consumed,  pt);  [CE]  cannot  find  symbol  pt  [FE]                      ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  pos  +=  Character.charCount(c,  consumed,  pt);  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	pos  +=  Character.charCount(c,  consumed,  pt);	  pos    +=    Character.charCount(c,    consumed);    	non-compiled	[CE]  cannot  find  symbol  pt	92	None	replace
202	[BUG]  [BUGGY]  pos  +=  Character.charCount(c,  input);  [CE]  method  charCount  in  class  Character  cannot  be  applied  to  given  types;  [FE]                        ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  pos  +=  Character.charCount(c,  input);  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	pos  +=  Character.charCount(c,  input);	  pos    +=    Character.charCount(c,    consumed);    	non-compiled	[CE]  method  charCount  in  class  Character  cannot  be  applied  to  given  types;	92	None	replace
203	[BUG]  [BUGGY]  if(pos  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(pos  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(pos  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c);  }	  if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
204	[BUG]  [BUGGY]  while(pos  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c);  }  [CE]  'else'  without  'if'  [FE]                      ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  while(pos  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	while(pos  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c);  }	  if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    out.write(c);    }    	non-compiled	[CE]  'else'  without  'if'	130	None	replace
205	[BUG]  [BUGGY]  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c);  }	  if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
206	[BUG]  [BUGGY]  if(pos  >  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length;  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(pos  >  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length;  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(pos  >  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length;  }	  if(consumed    >    0)    {    if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    pos    +=    c.length;    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
207	[BUG]  [BUGGY]  if(pos  >  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length;  }  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(pos  >  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length;  }  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(pos  >  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length;  }  }	  if(consumed    >    0)    {    if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    pos    +=    c.length;    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
208	[BUG]  [BUGGY]  if(pos  <  len)  {  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length;  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(pos  <  len)  {  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length;  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(pos  <  len)  {  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length;  }	  if(consumed    >    0)    {    if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    pos    +=    c.length;    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
209	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	pos    +=    Character.charCount(Character.codePointAt(input,    pos));    pos  +=  Character.charCount(Character.codePointAt(input,  pos));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	94	13	add
210	[BUG]  [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  [FE]  StringIndexOutOfBoundsException  [FE]    ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	pos    +=    Character.charCount(Character.codePointAt(input,    pos));    pos  +=  Character.charCount(Character.codePointAt(input,  pos));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	94	13	add
211	[BUG]  [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  pos  +=  Character.charCount(Character.codePointAt(input,  p));  [CE]  cannot  find  symbol  p  [FE]      ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  pos  +=  Character.charCount(Character.codePointAt(input,  p));  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	pos    +=    Character.charCount(Character.codePointAt(input,    pos));    pos  +=  Character.charCount(Character.codePointAt(input,  p));	  	non-compiled	[CE]  cannot  find  symbol  p	94	None	add
212	[BUG]  [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  int  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  int  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	pos    +=    Character.charCount(Character.codePointAt(input,    pos));    int  pos  +=  Character.charCount(Character.codePointAt(input,  pos));	  	non-compiled	[CE]  ';'  expected	94	None	add
213	[BUG]  [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  pos  +=  Character.CharCount(Character.codePointAt(input,  pos));  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  pos  +=  Character.CharCount(Character.codePointAt(input,  pos));  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	pos    +=    Character.charCount(Character.codePointAt(input,    pos));    pos  +=  Character.CharCount(Character.codePointAt(input,  pos));	  	non-compiled	[CE]  cannot  find  symbol	94	None	add
214	[BUG]  [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  pos  +=  Character.CHARCount(Character.codePointAt(input,  pos));  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  pos  +=  Character.CHARCount(Character.codePointAt(input,  pos));  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	pos    +=    Character.charCount(Character.codePointAt(input,    pos));    pos  +=  Character.CHARCount(Character.codePointAt(input,  pos));	  	non-compiled	[CE]  cannot  find  symbol	94	None	add
215	[BUG]  [BUGGY]  if(consumed  >  0)  {  if(c  ==  null)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c[pos]  =  c.charValue();  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >  0)  {  if(c  ==  null)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c[pos]  =  c.charValue();  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >  0)  {  if(c  ==  null)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c[pos]  =  c.charValue();  }	  if(c    ==    null)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    c[pos]    =    c.charValue();    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
216	[BUG]  [BUGGY]  if(c!=  null)  {  for(int  pos  =  0;  pos  <  consumed;  pos++)  {  c[pos]  =  c.charValue();  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c!=  null)  {  for(int  pos  =  0;  pos  <  consumed;  pos++)  {  c[pos]  =  c.charValue();  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c!=  null)  {  for(int  pos  =  0;  pos  <  consumed;  pos++)  {  c[pos]  =  c.charValue();  }	  if(c    ==    null)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    c[pos]    =    c.charValue();    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
217	[BUG]  [BUGGY]  if(consumed  <  0)  {  out.write(c,  0,  pos);  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c,  0,  len);  }  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]              IndexOutOfBoundsException      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  <  0)  {  out.write(c,  0,  pos);  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c,  0,  len);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  <  0)  {  out.write(c,  0,  pos);  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c,  0,  len);  }	  out.write(c,    0,    pos);    char[]    c    =    Character.toChars(Character.codePointAt(pos,    pos));    out.write(c,    0,    pos);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	61	None	replace
218	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write(c,  0,  pos);  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c,  0,  len);  }  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                IndexOutOfBoundsException      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >  0)  {  out.write(c,  0,  pos);  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c,  0,  len);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >  0)  {  out.write(c,  0,  pos);  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c,  0,  len);  }	  out.write(c,    0,    pos);    char[]    c    =    Character.toChars(Character.codePointAt(pos,    pos));    out.write(c,    0,    pos);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	61	None	replace
219	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write(c,  0,  pos);  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c,  0,  pos);  }  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                  IndexOutOfBoundsException      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >  0)  {  out.write(c,  0,  pos);  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c,  0,  pos);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >  0)  {  out.write(c,  0,  pos);  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c,  0,  pos);  }	  out.write(c,    0,    pos);    char[]    c    =    Character.toChars(Character.codePointAt(pos,    pos));    out.write(c,    0,    pos);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	61	None	replace
220	[BUG]  [BUGGY]  if(pos  >=  len)  {  if(consumed  ==  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(pos  >=  len)  {  if(consumed  ==  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(pos  >=  len)  {  if(consumed  ==  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }	  if(consumed    ==    0)    {    if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
221	[BUG]  [BUGGY]  if(pos  ==  len)  {  if(consumed!=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(pos  ==  len)  {  if(consumed!=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(pos  ==  len)  {  if(consumed!=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }	  if(consumed    ==    0)    {    if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
222	[BUG]  [BUGGY]  if(consumed  ==  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(c.charCount());  }  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  ==  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(c.charCount());  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  ==  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(c.charCount());  }	  if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    pos    +=    Character.charCount(c.charCount());    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
223	[BUG]  [BUGGY]  while(pos  >=  len)  {  if(consumed!=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  while(pos  >=  len)  {  if(consumed!=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	while(pos  >=  len)  {  if(consumed!=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c);  }	  if(consumed!=    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
224	[BUG]  [BUGGY]  if(pos  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(pos  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(pos  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c);  }	  if(consumed!=    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
225	[BUG]  [BUGGY]  OutputStream  out  =  inputStream.readLine();  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  OutputStream  out  =  inputStream.readLine();  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	OutputStream  out  =  inputStream.readLine();	  OutputStream    out    =    outputStream.readLine();    	non-compiled	[CE]  cannot  find  symbol	136	None	replace
226	[BUG]  [BUGGY]  OutputStream  out  =  this.outputStream.readLine();  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  OutputStream  out  =  this.outputStream.readLine();  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	OutputStream  out  =  this.outputStream.readLine();	  OutputStream    out    =    outputStream.readLine();    	non-compiled	[CE]  cannot  find  symbol	136	None	replace
227	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(consumed,  pos));  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]            IndexOutOfBoundsException      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(consumed,  pos));  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	char[]  c  =  Character.toChars(Character.codePointAt(consumed,  pos));	  out.write(c,    0,    len);    char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	89	None	replace
228	[BUG]  [BUGGY]  while(pos  <  len)  {  if(consumed  ==  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c[pos]);  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  while(pos  <  len)  {  if(consumed  ==  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c[pos]);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	while(pos  <  len)  {  if(consumed  ==  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c[pos]);  }	  if(consumed    ==    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    out.write(c[pos]);    }    	non-compiled	[CE]  illegal  start  of  expression	144	None	replace
229	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c[pos]);  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c[pos]);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c[pos]);  }	  if(consumed    ==    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    out.write(c[pos]);    }    	non-compiled	[CE]  illegal  start  of  expression	144	None	replace
230	[BUG]  [BUGGY]  if(pos  ==  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c[pos]);  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(pos  ==  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c[pos]);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(pos  ==  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c[pos]);  }	  if(consumed    ==    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    out.write(c[pos]);    }    	non-compiled	[CE]  illegal  start  of  expression	144	None	replace
231	[BUG]  [BUGGY]  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c[pos]);  }  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c[pos]);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c[pos]);  }	  if(consumed    ==    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    out.write(c[pos]);    }    	non-compiled	[CE]  illegal  start  of  expression	144	None	replace
232	[BUG]  [BUGGY]  while(pos  <  len)  {  if(consumed  ==  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  while(pos  <  len)  {  if(consumed  ==  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	while(pos  <  len)  {  if(consumed  ==  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c);  }	  if(consumed    ==    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
233	[BUG]  [BUGGY]  if(pos  ==  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(pos  ==  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(pos  ==  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c);  }	  if(consumed    ==    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
234	[BUG]  [BUGGY]  if(pos  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length;  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(pos  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length;  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(pos  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length;  }	  if(consumed    >=    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    pos    +=    c.length;    }    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
235	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  pos  +=  c.length;  }  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  pos  +=  c.length;  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  pos  +=  c.length;  }	  if(consumed    >=    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    pos    +=    c.length;    }    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
236	[BUG]  [BUGGY]  if(c  ==  null)  {  for(int  pos  =  0;  pos  <  c.length;  pos++)  {  c[pos]  =  c.charValue();  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c  ==  null)  {  for(int  pos  =  0;  pos  <  c.length;  pos++)  {  c[pos]  =  c.charValue();  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c  ==  null)  {  for(int  pos  =  0;  pos  <  c.length;  pos++)  {  c[pos]  =  c.charValue();  }	  if(c!=    null)    {    for(int    pos    =    0;    pos    <    c.length;    pos++)    {    c[pos]    =    c.charValue();    }    	non-compiled	[CE]  illegal  start  of  expression	163	None	replace
237	[BUG]  [BUGGY]  if(c!=  null)  {  for(pos  =  0;  pos  <  c.length;  pos++)  {  c[pos]  =  c.charValue();  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c!=  null)  {  for(pos  =  0;  pos  <  c.length;  pos++)  {  c[pos]  =  c.charValue();  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c!=  null)  {  for(pos  =  0;  pos  <  c.length;  pos++)  {  c[pos]  =  c.charValue();  }	  if(c!=    null)    {    for(int    pos    =    0;    pos    <    c.length;    pos++)    {    c[pos]    =    c.charValue();    }    	non-compiled	[CE]  illegal  start  of  expression	163	None	replace
238	[BUG]  [BUGGY]  if(consumed  ==  0)  {  for(int  pos  =  0;  pos  <  c.length;  pos++)  {  c[pos]  =  c.charValue();  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  ==  0)  {  for(int  pos  =  0;  pos  <  c.length;  pos++)  {  c[pos]  =  c.charValue();  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  ==  0)  {  for(int  pos  =  0;  pos  <  c.length;  pos++)  {  c[pos]  =  c.charValue();  }	  if(c!=    null)    {    for(int    pos    =    0;    pos    <    c.length;    pos++)    {    c[pos]    =    c.charValue();    }    	non-compiled	[CE]  illegal  start  of  expression	163	None	replace
239	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  ==  0)  {  out.write(c);  }  if(consumed  ==  0)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	if(consumed    ==    0)    {    out.write(c);    }    if(consumed  ==  0)  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	137	13	add
240	[BUG]  [BUGGY]  if(consumed  ==  0)  {  out.write(c);  }  if(consumed  ==  0)  {  out.write(c);  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  ==  0)  {  out.write(c);  }  if(consumed  ==  0)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed    ==    0)    {    out.write(c);    }    if(consumed  ==  0)  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	137	13	add
241	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  ==  0)  {  out.write(c);  }  if(consumed  >=  0)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	if(consumed    ==    0)    {    out.write(c);    }    if(consumed  >=  0)  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	137	13	add
242	[BUG]  [BUGGY]  if(consumed  ==  0)  {  out.write(c);  }  if(consumed  >=  0)  {  out.write(c);  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  ==  0)  {  out.write(c);  }  if(consumed  >=  0)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed    ==    0)    {    out.write(c);    }    if(consumed  >=  0)  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	137	13	add
243	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  ==  0)  {  out.write(c);  }  if(consumed!=  0)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	if(consumed    ==    0)    {    out.write(c);    }    if(consumed!=  0)  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	137	13	add
244	[BUG]  [BUGGY]  if(consumed  ==  0)  {  out.write(c);  }  if(consumed!=  0)  {  out.write(c);  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  ==  0)  {  out.write(c);  }  if(consumed!=  0)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed    ==    0)    {    out.write(c);    }    if(consumed!=  0)  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	137	13	add
245	[BUG]  [BUGGY]  if(consumed  ==  0)  {  out.write(c);  }  If(consumed  ==  0)  {  out.write(c);  }  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  ==  0)  {  out.write(c);  }  If(consumed  ==  0)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed    ==    0)    {    out.write(c);    }    If(consumed  ==  0)  {  out.write(c);  }	  	non-compiled	[CE]  ';'  expected	137	None	add
246	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write(c,  0,  pos);  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c,  0,  len);  }  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]            IndexOutOfBoundsException      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >  0)  {  out.write(c,  0,  pos);  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c,  0,  len);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >  0)  {  out.write(c,  0,  pos);  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c,  0,  len);  }	  out.write(c,    0,    pos);    char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    out.write(c,    0,    pos);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	60	None	replace
247	[BUG]  [BUGGY]  if(consumed  <  0)  {  out.write(c,  0,  pos);  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c,  0,  len);  }  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]              IndexOutOfBoundsException      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  <  0)  {  out.write(c,  0,  pos);  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c,  0,  len);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  <  0)  {  out.write(c,  0,  pos);  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c,  0,  len);  }	  out.write(c,    0,    pos);    char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    out.write(c,    0,    pos);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	60	None	replace
248	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write(c,  0,  pos);  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c,  0,  pos);  }  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                IndexOutOfBoundsException      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >  0)  {  out.write(c,  0,  pos);  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c,  0,  pos);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >  0)  {  out.write(c,  0,  pos);  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c,  0,  pos);  }	  out.write(c,    0,    pos);    char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    out.write(c,    0,    pos);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	60	None	replace
249	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write(c,  0,  len);  char[]  c  =  input.getChars(pos,  pos  +  1);  out.write(c,  0,  len);  }  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]              IndexOutOfBoundsException      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >  0)  {  out.write(c,  0,  len);  char[]  c  =  input.getChars(pos,  pos  +  1);  out.write(c,  0,  len);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >  0)  {  out.write(c,  0,  len);  char[]  c  =  input.getChars(pos,  pos  +  1);  out.write(c,  0,  len);  }	  out.write(c,    0,    len);    char[]    c    =    input.getChars(pos,    pos    +    1);    out.write(c,    0,    len);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	118	None	replace
250	[BUG]  [BUGGY]  if(consumed  <  0)  {  out.write(c,  0,  len);  char[]  c  =  input.getChars(pos,  pos  +  1);  out.write(c,  0,  len);  }  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                IndexOutOfBoundsException      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  <  0)  {  out.write(c,  0,  len);  char[]  c  =  input.getChars(pos,  pos  +  1);  out.write(c,  0,  len);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  <  0)  {  out.write(c,  0,  len);  char[]  c  =  input.getChars(pos,  pos  +  1);  out.write(c,  0,  len);  }	  out.write(c,    0,    len);    char[]    c    =    input.getChars(pos,    pos    +    1);    out.write(c,    0,    len);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	118	None	replace
251	[BUG]  [BUGGY]  if(consumed  <  =  0)  {  out.write(c,  0,  len);  char[]  c  =  input.getChars(pos,  pos  +  1);  out.write(c,  0,  len);  }  [CE]  illegal  start  of  expression  [FE]                  IndexOutOfBoundsException      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  <  =  0)  {  out.write(c,  0,  len);  char[]  c  =  input.getChars(pos,  pos  +  1);  out.write(c,  0,  len);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  <  =  0)  {  out.write(c,  0,  len);  char[]  c  =  input.getChars(pos,  pos  +  1);  out.write(c,  0,  len);  }	  out.write(c,    0,    len);    char[]    c    =    input.getChars(pos,    pos    +    1);    out.write(c,    0,    len);    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
252	[BUG]  [BUGGY]  [FE]  IndexOutOfBoundsException  [FE]    IndexOutOfBoundsException    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,    0,    len);    out.write(c,  0,  len);  out.write(c,  0,  len);  out.write(c,  0,  len);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	out.write(c,        0,        len);        out.write(c,    0,    len);    out.write(c,  0,  len);  out.write(c,  0,  len);	  	compilable	  [FE]  IndexOutOfBoundsException  	86	13	add
253	[BUG]  [BUGGY]  out.write(c,    0,    len);    out.write(c,  0,  len);  out.write(c,  0,  len);  out.write(c,  0,  len);  [FE]  IndexOutOfBoundsException  [FE]    IndexOutOfBoundsException    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,    0,    len);    out.write(c,  0,  len);  out.write(c,  0,  len);  out.write(c,  0,  len);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,        0,        len);        out.write(c,    0,    len);    out.write(c,  0,  len);  out.write(c,  0,  len);	  	compilable	  [FE]  IndexOutOfBoundsException  	86	13	add
254	[BUG]  [BUGGY]  [FE]  IndexOutOfBoundsException  [FE]      IndexOutOfBoundsException    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,    0,    len);    out.write(c,  0,  len);  out.write(c,  0,  len);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	out.write(c,        0,        len);        out.write(c,    0,    len);    out.write(c,  0,  len);	  	compilable	  [FE]  IndexOutOfBoundsException  	86	13	add
255	[BUG]  [BUGGY]  out.write(c,    0,    len);    out.write(c,  0,  len);  out.write(c,  0,  len);  [FE]  IndexOutOfBoundsException  [FE]      IndexOutOfBoundsException    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,    0,    len);    out.write(c,  0,  len);  out.write(c,  0,  len);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,        0,        len);        out.write(c,    0,    len);    out.write(c,  0,  len);	  	compilable	  [FE]  IndexOutOfBoundsException  	86	13	add
256	[BUG]  [BUGGY]  [FE]  IndexOutOfBoundsException  [FE]        IndexOutOfBoundsException    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,    0,    len);    out.write(c,  0,  len);  if(consumed  >  0)  {  out.write(c,  0,  len);  out.write(c,  0,  len);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	out.write(c,        0,        len);        out.write(c,    0,    len);    if(consumed  >  0)  {  out.write(c,  0,  len);  out.write(c,  0,  len);  }	  	compilable	  [FE]  IndexOutOfBoundsException  	86	13	add
257	[BUG]  [BUGGY]  out.write(c,    0,    len);    out.write(c,  0,  len);  if(consumed  >  0)  {  out.write(c,  0,  len);  out.write(c,  0,  len);  }  [FE]  IndexOutOfBoundsException  [FE]        IndexOutOfBoundsException    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,    0,    len);    out.write(c,  0,  len);  if(consumed  >  0)  {  out.write(c,  0,  len);  out.write(c,  0,  len);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,        0,        len);        out.write(c,    0,    len);    if(consumed  >  0)  {  out.write(c,  0,  len);  out.write(c,  0,  len);  }	  	compilable	  [FE]  IndexOutOfBoundsException  	86	13	add
258	[BUG]  [BUGGY]  [FE]  IndexOutOfBoundsException  [FE]          IndexOutOfBoundsException    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,    0,    len);    out.write(c,  0,  len);  if(consumed  <  0)  {  out.write(c,  0,  len);  out.write(c,  0,  len);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	out.write(c,        0,        len);        out.write(c,    0,    len);    if(consumed  <  0)  {  out.write(c,  0,  len);  out.write(c,  0,  len);  }	  	compilable	  [FE]  IndexOutOfBoundsException  	86	13	add
259	[BUG]  [BUGGY]  out.write(c,    0,    len);    out.write(c,  0,  len);  if(consumed  <  0)  {  out.write(c,  0,  len);  out.write(c,  0,  len);  }  [FE]  IndexOutOfBoundsException  [FE]          IndexOutOfBoundsException    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,    0,    len);    out.write(c,  0,  len);  if(consumed  <  0)  {  out.write(c,  0,  len);  out.write(c,  0,  len);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,        0,        len);        out.write(c,    0,    len);    if(consumed  <  0)  {  out.write(c,  0,  len);  out.write(c,  0,  len);  }	  	compilable	  [FE]  IndexOutOfBoundsException  	86	13	add
260	[BUG]  [BUGGY]  out.write(c,    0,    len);    out.write(c,  0,  len);  char[]  c  =  Character.toChars(Character.toChars(input,  pos));  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]            IndexOutOfBoundsException    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,    0,    len);    out.write(c,  0,  len);  char[]  c  =  Character.toChars(Character.toChars(input,  pos));  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,        0,        len);        out.write(c,    0,    len);    char[]  c  =  Character.toChars(Character.toChars(input,  pos));	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	86	None	add
261	[BUG]  [BUGGY]  if(pos  >  0)  {  out.write(c,  0,  pos);  char[]  c  =  input.toChars(c);  out.write(c,  0,  pos);  }  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]        IndexOutOfBoundsException      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(pos  >  0)  {  out.write(c,  0,  pos);  char[]  c  =  input.toChars(c);  out.write(c,  0,  pos);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(pos  >  0)  {  out.write(c,  0,  pos);  char[]  c  =  input.toChars(c);  out.write(c,  0,  pos);  }	  out.write(c,    0,    pos);    char[]    c    =    input.toChars(c);    out.write(c,    0,    pos);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	100	None	replace
262	[BUG]  [BUGGY]  if(pos  >  0)  {  out.write(c,  0,  pos);  char[]  c  =  input.toChars(c);  out.write(c,  0,  len);  }  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]          IndexOutOfBoundsException      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(pos  >  0)  {  out.write(c,  0,  pos);  char[]  c  =  input.toChars(c);  out.write(c,  0,  len);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(pos  >  0)  {  out.write(c,  0,  pos);  char[]  c  =  input.toChars(c);  out.write(c,  0,  len);  }	  out.write(c,    0,    pos);    char[]    c    =    input.toChars(c);    out.write(c,    0,    pos);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	100	None	replace
263	[BUG]  [BUGGY]  char[]  c  =  input.toChars(c);  out.write(c,  0,  pos);  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]            IndexOutOfBoundsException      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  char[]  c  =  input.toChars(c);  out.write(c,  0,  pos);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	char[]  c  =  input.toChars(c);  out.write(c,  0,  pos);	  out.write(c,    0,    pos);    char[]    c    =    input.toChars(c);    out.write(c,    0,    pos);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	100	None	replace
264	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write(c,  0,  c.length);  char[]  c  =  Character.toChars(Character.toChars(c,  pos));  out.write(c,  0,  c.length);  }  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]              ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >  0)  {  out.write(c,  0,  c.length);  char[]  c  =  Character.toChars(Character.toChars(c,  pos));  out.write(c,  0,  c.length);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >  0)  {  out.write(c,  0,  c.length);  char[]  c  =  Character.toChars(Character.toChars(c,  pos));  out.write(c,  0,  c.length);  }	  out.write(c,    0,    c.length);    char[]    c    =    Character.toChars(Character.toChars(c,    pos));    out.write(c,    0,    c.length);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	30	None	replace
265	[BUG]  [BUGGY]  if(consumed  <  0)  {  out.write(c,  0,  c.length);  char[]  c  =  Character.toChars(Character.toChars(c,  pos));  out.write(c,  0,  c.length);  }  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  <  0)  {  out.write(c,  0,  c.length);  char[]  c  =  Character.toChars(Character.toChars(c,  pos));  out.write(c,  0,  c.length);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  <  0)  {  out.write(c,  0,  c.length);  char[]  c  =  Character.toChars(Character.toChars(c,  pos));  out.write(c,  0,  c.length);  }	  out.write(c,    0,    c.length);    char[]    c    =    Character.toChars(Character.toChars(c,    pos));    out.write(c,    0,    c.length);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	30	None	replace
266	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,    0,    c.length);    out.write(c,  0,  c.length);  out.write(c,  0,  c.length);  out.write(c,  0,  c.length);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	out.write(c,        0,        c.length);        out.write(c,    0,    c.length);    out.write(c,  0,  c.length);  out.write(c,  0,  c.length);	  	compilable	  [FE]  ComparisonFailure  	26	13	add
267	[BUG]  [BUGGY]  out.write(c,    0,    c.length);    out.write(c,  0,  c.length);  out.write(c,  0,  c.length);  out.write(c,  0,  c.length);  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,    0,    c.length);    out.write(c,  0,  c.length);  out.write(c,  0,  c.length);  out.write(c,  0,  c.length);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,        0,        c.length);        out.write(c,    0,    c.length);    out.write(c,  0,  c.length);  out.write(c,  0,  c.length);	  	compilable	  [FE]  ComparisonFailure  	26	13	add
268	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,    0,    c.length);    out.write(c,  0,  c.length);  if(c!=  null)  {  out.write(c,  0,  c.length);  out.write(c,  0,  c.length);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	out.write(c,        0,        c.length);        out.write(c,    0,    c.length);    if(c!=  null)  {  out.write(c,  0,  c.length);  out.write(c,  0,  c.length);  }	  	compilable	  [FE]  ComparisonFailure  	26	13	add
269	[BUG]  [BUGGY]  out.write(c,    0,    c.length);    out.write(c,  0,  c.length);  if(c!=  null)  {  out.write(c,  0,  c.length);  out.write(c,  0,  c.length);  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,    0,    c.length);    out.write(c,  0,  c.length);  if(c!=  null)  {  out.write(c,  0,  c.length);  out.write(c,  0,  c.length);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,        0,        c.length);        out.write(c,    0,    c.length);    if(c!=  null)  {  out.write(c,  0,  c.length);  out.write(c,  0,  c.length);  }	  	compilable	  [FE]  ComparisonFailure  	26	13	add
270	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,    0,    c.length);    out.write(c,  0,  c.length);  out.write(c,  0,  c.length);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	out.write(c,        0,        c.length);        out.write(c,    0,    c.length);    out.write(c,  0,  c.length);	  	compilable	  [FE]  ComparisonFailure  	26	13	add
271	[BUG]  [BUGGY]  out.write(c,    0,    c.length);    out.write(c,  0,  c.length);  out.write(c,  0,  c.length);  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,    0,    c.length);    out.write(c,  0,  c.length);  out.write(c,  0,  c.length);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,        0,        c.length);        out.write(c,    0,    c.length);    out.write(c,  0,  c.length);	  	compilable	  [FE]  ComparisonFailure  	26	13	add
272	[BUG]  [BUGGY]  out.write(c,    0,    c.length);    out.write(c,  0,  c.length);  char[]  c  =  Character.toChars(Character.toChars(c,  pos));  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]          ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,    0,    c.length);    out.write(c,  0,  c.length);  char[]  c  =  Character.toChars(Character.toChars(c,  pos));  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,        0,        c.length);        out.write(c,    0,    c.length);    char[]  c  =  Character.toChars(Character.toChars(c,  pos));	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	26	None	add
273	[BUG]  [BUGGY]  if(pos  >=  len)  {  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length;  }  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(pos  >=  len)  {  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length;  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(pos  >=  len)  {  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length;  }	  if(consumed!=    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    pos    +=    c.length;    }    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
274	[BUG]  [BUGGY]  if(pos  >=  len)  {  if(consumed!=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length;  }  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(pos  >=  len)  {  if(consumed!=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length;  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(pos  >=  len)  {  if(consumed!=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length;  }	  if(consumed!=    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    pos    +=    c.length;    }    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
275	[BUG]  [BUGGY]  if(pos  <  len)  {  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(pos  <  len)  {  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(pos  <  len)  {  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }	  if(consumed    <    0)    {    if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toChars();    pos    +=    c.length();    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
276	[BUG]  [BUGGY]  if(pos  <  len)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(pos  <  len)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(pos  <  len)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }	  if(consumed    <    0)    {    if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toChars();    pos    +=    c.length();    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
277	[BUG]  [BUGGY]  if(pos  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(pos  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(pos  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }	  if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toChars();    pos    +=    c.length();    }    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
278	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(c,  pos));  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	pos  +=  Character.charCount(Character.codePointAt(c,  pos));	  pos    +=    Character.charCount(Character.codePointAt(input,    pos));    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	95	13	replace
279	[BUG]  [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(c,  pos));  [FE]  ArrayIndexOutOfBoundsException  [FE]    ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(c,  pos));  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	pos  +=  Character.charCount(Character.codePointAt(c,  pos));	  pos    +=    Character.charCount(Character.codePointAt(input,    pos));    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	95	13	replace
280	[BUG]  [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(consumed,  pos));  [CE]  no  suitable  method  found  for  codePointAt(int,int)  [FE]      ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(consumed,  pos));  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	pos  +=  Character.charCount(Character.codePointAt(consumed,  pos));	  pos    +=    Character.charCount(Character.codePointAt(input,    pos));    	non-compiled	[CE]  no  suitable  method  found  for  codePointAt(int,int)	95	None	replace
281	[BUG]  [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(consumed,  c));  [CE]  no  suitable  method  found  for  codePointAt(int,char[])  [FE]        ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(consumed,  c));  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	pos  +=  Character.charCount(Character.codePointAt(consumed,  c));	  pos    +=    Character.charCount(Character.codePointAt(input,    pos));    	non-compiled	[CE]  no  suitable  method  found  for  codePointAt(int,char[])	95	None	replace
282	[BUG]  [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(pt,  pos));  [CE]  cannot  find  symbol  pt  [FE]          ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(pt,  pos));  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	pos  +=  Character.charCount(Character.codePointAt(pt,  pos));	  pos    +=    Character.charCount(Character.codePointAt(input,    pos));    	non-compiled	[CE]  cannot  find  symbol  pt	95	None	replace
283	[BUG]  [BUGGY]  if(pos  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length();  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(pos  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length();  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(pos  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length();  }	  if(consumed    >=    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    pos    +=    c.length();    }    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
284	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toCharArray();  pos  +=  c.length();  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toCharArray();  pos  +=  c.length();  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toCharArray();  pos  +=  c.length();  }	  if(consumed    >=    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    pos    +=    c.length();    }    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
285	[BUG]  [BUGGY]  if(c!=  null)  {  for(int  i  =  0;  i  <  consumed;  i++)  {  pos  +=  Character.charCount(c);  }  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c!=  null)  {  for(int  i  =  0;  i  <  consumed;  i++)  {  pos  +=  Character.charCount(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c!=  null)  {  for(int  i  =  0;  i  <  consumed;  i++)  {  pos  +=  Character.charCount(c);  }	          if(c!=    null)    {    for(int    i    =    0;    i    <    len;    i++)    {    pos    +=    Character.charCount(c);    }    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
286	[BUG]  [BUGGY]  if(c  ==  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  pos  +=  Character.charCount(c);  }  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c  ==  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  pos  +=  Character.charCount(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c  ==  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  pos  +=  Character.charCount(c);  }	          if(c!=    null)    {    for(int    i    =    0;    i    <    len;    i++)    {    pos    +=    Character.charCount(c);    }    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
287	[BUG]  [BUGGY]  if(consumed  ==  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  pos  +=  Character.charCount(c);  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  ==  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  pos  +=  Character.charCount(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  ==  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  pos  +=  Character.charCount(c);  }	          if(c!=    null)    {    for(int    i    =    0;    i    <    len;    i++)    {    pos    +=    Character.charCount(c);    }    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
288	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write(c,  0,  c.length);  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c,  0,  c.length);  }  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]          ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >  0)  {  out.write(c,  0,  c.length);  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c,  0,  c.length);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >  0)  {  out.write(c,  0,  c.length);  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c,  0,  c.length);  }	  out.write(c,    0,    c.length);    char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    out.write(c,    0,    c.length);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	28	None	replace
289	[BUG]  [BUGGY]  if(consumed  <  0)  {  out.write(c,  0,  c.length);  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c,  0,  c.length);  }  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]            ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  <  0)  {  out.write(c,  0,  c.length);  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c,  0,  c.length);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  <  0)  {  out.write(c,  0,  c.length);  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c,  0,  c.length);  }	  out.write(c,    0,    c.length);    char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    out.write(c,    0,    c.length);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	28	None	replace
290	[BUG]  [BUGGY]  if(consumed  >  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length();  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length();  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length();  }	  if(c!=    null)    {    for(int    pt    =    0;    pt    <    consumed;    pt++)    {    char[]    c    =    c.toCharArray();    pos    +=    c.length();    }    	non-compiled	[CE]  illegal  start  of  expression	160	None	replace
291	[BUG]  [BUGGY]  if(consumed  ==  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length();  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  ==  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length();  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  ==  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length();  }	  if(c!=    null)    {    for(int    pt    =    0;    pt    <    consumed;    pt++)    {    char[]    c    =    c.toCharArray();    pos    +=    c.length();    }    	non-compiled	[CE]  illegal  start  of  expression	160	None	replace
292	[BUG]  [BUGGY]  if(consumed  <  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length();  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  <  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length();  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  <  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length();  }	  if(c!=    null)    {    for(int    pt    =    0;    pt    <    consumed;    pt++)    {    char[]    c    =    c.toCharArray();    pos    +=    c.length();    }    	non-compiled	[CE]  illegal  start  of  expression	160	None	replace
293	[BUG]  [BUGGY]  [FE]  IndexOutOfBoundsException  [FE]    IndexOutOfBoundsException    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,  0,  c.length  +  1);  out.write(c,  0,  c.length  +  1);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	out.write(c,    0,    c.length    +    1);    out.write(c,  0,  c.length  +  1);	  	compilable	  [FE]  IndexOutOfBoundsException  	77	13	add
294	[BUG]  [BUGGY]  out.write(c,  0,  c.length  +  1);  out.write(c,  0,  c.length  +  1);  [FE]  IndexOutOfBoundsException  [FE]    IndexOutOfBoundsException    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,  0,  c.length  +  1);  out.write(c,  0,  c.length  +  1);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,    0,    c.length    +    1);    out.write(c,  0,  c.length  +  1);	  	compilable	  [FE]  IndexOutOfBoundsException  	77	13	add
295	[BUG]  [BUGGY]  out.write(c,  0,  c.length  +  1);  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c,  0,  c.length  +  1);  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]      IndexOutOfBoundsException    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,  0,  c.length  +  1);  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c,  0,  c.length  +  1);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,    0,    c.length    +    1);    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c,  0,  c.length  +  1);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	77	None	add
296	[BUG]  [BUGGY]  out.write(c,  0,  c.length  +  1);  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]        IndexOutOfBoundsException    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,  0,  c.length  +  1);  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,    0,    c.length    +    1);    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	77	None	add
297	[BUG]  [BUGGY]  out.write(c,  0,  c.length  +  1);  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos  +  1));  out.write(c,  0,  c.length  +  1);  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]          IndexOutOfBoundsException    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,  0,  c.length  +  1);  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos  +  1));  out.write(c,  0,  c.length  +  1);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,    0,    c.length    +    1);    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos  +  1));  out.write(c,  0,  c.length  +  1);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	77	None	add
298	[BUG]  [BUGGY]  out.write(c,  0,  c.length  +  1);  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c,  0,  c.length  +  1);  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]            IndexOutOfBoundsException    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,  0,  c.length  +  1);  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c,  0,  c.length  +  1);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,    0,    c.length    +    1);    char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c,  0,  c.length  +  1);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	77	None	add
299	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,  0,  c.length  -  1);  out.write(c,  0,  c.length  -  1);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	out.write(c,    0,    c.length    -    1);    out.write(c,  0,  c.length  -  1);	  	compilable	  [FE]  ComparisonFailure  	79	2	add
300	[BUG]  [BUGGY]  out.write(c,  0,  c.length  -  1);  out.write(c,  0,  c.length  -  1);  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,  0,  c.length  -  1);  out.write(c,  0,  c.length  -  1);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,    0,    c.length    -    1);    out.write(c,  0,  c.length  -  1);	  	compilable	  [FE]  ComparisonFailure  	79	2	add
301	[BUG]  [BUGGY]  out.write(c,  0,  c.length  -  1);  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c,  0,  c.length  -  1);  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]      ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,  0,  c.length  -  1);  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c,  0,  c.length  -  1);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,    0,    c.length    -    1);    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c,  0,  c.length  -  1);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	79	None	add
302	[BUG]  [BUGGY]  out.write(c,  0,  c.length  -  1);  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]        ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,  0,  c.length  -  1);  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,    0,    c.length    -    1);    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	79	None	add
303	[BUG]  [BUGGY]  out.write(c,  0,  c.length  -  1);  char[]  c  =  Character.toChars(Character.toChars(c,  pos));  out.write(c,  0,  c.length  -  1);  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]          ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,  0,  c.length  -  1);  char[]  c  =  Character.toChars(Character.toChars(c,  pos));  out.write(c,  0,  c.length  -  1);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,    0,    c.length    -    1);    char[]  c  =  Character.toChars(Character.toChars(c,  pos));  out.write(c,  0,  c.length  -  1);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	79	None	add
304	[BUG]  [BUGGY]  out.write(c,  0,  c.length  -  1);  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c,  0,  c.length  -  1);  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]            ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,  0,  c.length  -  1);  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c,  0,  c.length  -  1);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,    0,    c.length    -    1);    char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c,  0,  c.length  -  1);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	79	None	add
305	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >  0)  {  out.write(c);  }  if(consumed  >  0)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	if(consumed    >    0)    {    out.write(c);    }    if(consumed  >  0)  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	141	1	add
306	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write(c);  }  if(consumed  >  0)  {  out.write(c);  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >  0)  {  out.write(c);  }  if(consumed  >  0)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed    >    0)    {    out.write(c);    }    if(consumed  >  0)  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	141	1	add
307	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write(c);  }  If(consumed  >  0)  {  out.write(c);  }  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >  0)  {  out.write(c);  }  If(consumed  >  0)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed    >    0)    {    out.write(c);    }    If(consumed  >  0)  {  out.write(c);  }	  	non-compiled	[CE]  ';'  expected	141	None	add
308	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write(c);  }  int  c  =  Character.toChars(Character.toChars(c));  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]        ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >  0)  {  out.write(c);  }  int  c  =  Character.toChars(Character.toChars(c));  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed    >    0)    {    out.write(c);    }    int  c  =  Character.toChars(Character.toChars(c));	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	141	None	add
309	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write(c,  0,  len);  char[]  c  =  input.getChars(pos,  pos);  out.write(c,  0,  len);  }  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]        IndexOutOfBoundsException      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >  0)  {  out.write(c,  0,  len);  char[]  c  =  input.getChars(pos,  pos);  out.write(c,  0,  len);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >  0)  {  out.write(c,  0,  len);  char[]  c  =  input.getChars(pos,  pos);  out.write(c,  0,  len);  }	  out.write(c,    0,    len);    char[]    c    =    input.getChars(pos,    pos);    out.write(c,    0,    len);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	115	None	replace
310	[BUG]  [BUGGY]  if(consumed  <  0)  {  out.write(c,  0,  len);  char[]  c  =  input.getChars(pos,  pos);  out.write(c,  0,  len);  }  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]          IndexOutOfBoundsException      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  <  0)  {  out.write(c,  0,  len);  char[]  c  =  input.getChars(pos,  pos);  out.write(c,  0,  len);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  <  0)  {  out.write(c,  0,  len);  char[]  c  =  input.getChars(pos,  pos);  out.write(c,  0,  len);  }	  out.write(c,    0,    len);    char[]    c    =    input.getChars(pos,    pos);    out.write(c,    0,    len);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	115	None	replace
311	[BUG]  [BUGGY]  if(consumed  <  =  0)  {  out.write(c,  0,  len);  char[]  c  =  input.getChars(pos,  pos);  out.write(c,  0,  len);  }  [CE]  illegal  start  of  expression  [FE]            IndexOutOfBoundsException      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  <  =  0)  {  out.write(c,  0,  len);  char[]  c  =  input.getChars(pos,  pos);  out.write(c,  0,  len);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  <  =  0)  {  out.write(c,  0,  len);  char[]  c  =  input.getChars(pos,  pos);  out.write(c,  0,  len);  }	  out.write(c,    0,    len);    char[]    c    =    input.getChars(pos,    pos);    out.write(c,    0,    len);    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
312	[BUG]  [BUGGY]  if(pos  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(pos  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(pos  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  }	  if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    }    	non-compiled	[CE]  illegal  start  of  expression	146	None	replace
313	[BUG]  [BUGGY]  pos  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  }  [CE]  not  a  statement  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  pos  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	pos  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  }	  if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    }    	non-compiled	[CE]  not  a  statement	146	None	replace
314	[BUG]  [BUGGY]  pos  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  c  =  c.toCharArray();  }  [CE]  not  a  statement  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  pos  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  c  =  c.toCharArray();  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	pos  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  c  =  c.toCharArray();  }	  if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    }    	non-compiled	[CE]  not  a  statement	146	None	replace
315	[BUG]  [BUGGY]  if(pos  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  c  =  c.toCharArray();  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(pos  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  c  =  c.toCharArray();  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(pos  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  c  =  c.toCharArray();  }	  if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    }    	non-compiled	[CE]  illegal  start  of  expression	146	None	replace
316	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]          if(c!=    null)    {    out.write(c);    }    else    {    out.write('n');    }    if(c  ==  null)  {  out.write(c);  }  else  {  out.write('n');  }  if(c!=  null)  {  out.write(c);  }  else  {  out.write('n');  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	                if(c!=        null)        {        out.write(c);        }        else        {        out.write('n');        }        if(c    ==    null)    {    out.write(c);    }    else    {    out.write('n');    }    if(c!=  null)  {  out.write(c);  }  else  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	5	13	add
317	[BUG]  [BUGGY]          if(c!=    null)    {    out.write(c);    }    else    {    out.write('n');    }    if(c  ==  null)  {  out.write(c);  }  else  {  out.write('n');  }  if(c!=  null)  {  out.write(c);  }  else  {  out.write('n');  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]          if(c!=    null)    {    out.write(c);    }    else    {    out.write('n');    }    if(c  ==  null)  {  out.write(c);  }  else  {  out.write('n');  }  if(c!=  null)  {  out.write(c);  }  else  {  out.write('n');  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	                if(c!=        null)        {        out.write(c);        }        else        {        out.write('n');        }        if(c    ==    null)    {    out.write(c);    }    else    {    out.write('n');    }    if(c!=  null)  {  out.write(c);  }  else  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	5	13	add
318	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]          if(c!=    null)    {    out.write(c);    }    else    {    out.write('n');    }    if(c  ==  null)  {  out.write(c);  }  else  {  out.write('n');  }  if(c  ==  null)  {  out.write(c);  }  else  {  out.write('n');  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	                if(c!=        null)        {        out.write(c);        }        else        {        out.write('n');        }        if(c    ==    null)    {    out.write(c);    }    else    {    out.write('n');    }    if(c  ==  null)  {  out.write(c);  }  else  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	5	13	add
319	[BUG]  [BUGGY]          if(c!=    null)    {    out.write(c);    }    else    {    out.write('n');    }    if(c  ==  null)  {  out.write(c);  }  else  {  out.write('n');  }  if(c  ==  null)  {  out.write(c);  }  else  {  out.write('n');  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]          if(c!=    null)    {    out.write(c);    }    else    {    out.write('n');    }    if(c  ==  null)  {  out.write(c);  }  else  {  out.write('n');  }  if(c  ==  null)  {  out.write(c);  }  else  {  out.write('n');  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	                if(c!=        null)        {        out.write(c);        }        else        {        out.write('n');        }        if(c    ==    null)    {    out.write(c);    }    else    {    out.write('n');    }    if(c  ==  null)  {  out.write(c);  }  else  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	5	13	add
320	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]          if(c!=    null)    {    out.write(c);    }    else    {    out.write('n');    }    if(c  ==  null)  {  out.write(c);  }  else  {  out.write('n');  }  if(c!=  null)  {  out.write('n');  }  else  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	                if(c!=        null)        {        out.write(c);        }        else        {        out.write('n');        }        if(c    ==    null)    {    out.write(c);    }    else    {    out.write('n');    }    if(c!=  null)  {  out.write('n');  }  else  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	5	13	add
321	[BUG]  [BUGGY]          if(c!=    null)    {    out.write(c);    }    else    {    out.write('n');    }    if(c  ==  null)  {  out.write(c);  }  else  {  out.write('n');  }  if(c!=  null)  {  out.write('n');  }  else  {  out.write(c);  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]          if(c!=    null)    {    out.write(c);    }    else    {    out.write('n');    }    if(c  ==  null)  {  out.write(c);  }  else  {  out.write('n');  }  if(c!=  null)  {  out.write('n');  }  else  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	                if(c!=        null)        {        out.write(c);        }        else        {        out.write('n');        }        if(c    ==    null)    {    out.write(c);    }    else    {    out.write('n');    }    if(c!=  null)  {  out.write('n');  }  else  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	5	13	add
322	[BUG]  [BUGGY]          if(c!=    null)    {    out.write(c);    }    else    {    out.write('n');    }    if(c  ==  null)  {  out.write(c);  }  else  {  out.write('n');  }  if(c!=  null)  {  out.write(c);  }  else  {  [CE]  'else'  without  'if'  [FE]          ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]          if(c!=    null)    {    out.write(c);    }    else    {    out.write('n');    }    if(c  ==  null)  {  out.write(c);  }  else  {  out.write('n');  }  if(c!=  null)  {  out.write(c);  }  else  {  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	                if(c!=        null)        {        out.write(c);        }        else        {        out.write('n');        }        if(c    ==    null)    {    out.write(c);    }    else    {    out.write('n');    }    if(c!=  null)  {  out.write(c);  }  else  {	  	non-compiled	[CE]  'else'  without  'if'	5	None	add
323	[BUG]  [BUGGY]  if(consumed  ==  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  c.toCharArray();  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  ==  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  c.toCharArray();  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  ==  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  c.toCharArray();  }	  if(c!=    null)    {    for(int    pt    =    0;    pt    <    consumed;    pt++)    {    char[]    c    =    c.toCharArray();    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
324	[BUG]  [BUGGY]  if(c  ==  null)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  c.toCharArray();  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c  ==  null)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  c.toCharArray();  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c  ==  null)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  c.toCharArray();  }	  if(c!=    null)    {    for(int    pt    =    0;    pt    <    consumed;    pt++)    {    char[]    c    =    c.toCharArray();    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
325	[BUG]  [BUGGY]  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  c.toCharArray();  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  c.toCharArray();  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  c.toCharArray();  }	  if(c!=    null)    {    for(int    pt    =    0;    pt    <    consumed;    pt++)    {    char[]    c    =    c.toCharArray();    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
326	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write(c,  0,  len);  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c,  0,  len);  }  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                IndexOutOfBoundsException      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >  0)  {  out.write(c,  0,  len);  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c,  0,  len);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >  0)  {  out.write(c,  0,  len);  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c,  0,  len);  }	  out.write(c,    0,    len);    char[]    c    =    Character.toChars(Character.codePointAt(pos,    pos));    out.write(c,    0,    len);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	91	None	replace
327	[BUG]  [BUGGY]  if(consumed  <  0)  {  out.write(c,  0,  len);  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c,  0,  len);  }  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                  IndexOutOfBoundsException      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  <  0)  {  out.write(c,  0,  len);  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c,  0,  len);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  <  0)  {  out.write(c,  0,  len);  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c,  0,  len);  }	  out.write(c,    0,    len);    char[]    c    =    Character.toChars(Character.codePointAt(pos,    pos));    out.write(c,    0,    len);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	91	None	replace
328	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c,  0,  len);  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                    IndexOutOfBoundsException      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c,  0,  len);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c,  0,  len);	  out.write(c,    0,    len);    char[]    c    =    Character.toChars(Character.codePointAt(pos,    pos));    out.write(c,    0,    len);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	91	None	replace
329	[BUG]  [BUGGY]  if(c!=  null)  {  out.write(c,  0,  pos);  }  else  {  for(int  pos  =  0;  pos  <  len  -  2;  pos++)  {  pos  +=  Character.charCount(Character.codePointAt(pos,  pos));  }  [CE]  'else'  without  'if'  [FE]          IndexOutOfBoundsException      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c!=  null)  {  out.write(c,  0,  pos);  }  else  {  for(int  pos  =  0;  pos  <  len  -  2;  pos++)  {  pos  +=  Character.charCount(Character.codePointAt(pos,  pos));  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c!=  null)  {  out.write(c,  0,  pos);  }  else  {  for(int  pos  =  0;  pos  <  len  -  2;  pos++)  {  pos  +=  Character.charCount(Character.codePointAt(pos,  pos));  }	  out.write(c,    0,    pos);    if(c!=    null)    {    out.write(c,    0,    pos);    }    else    {    for(int    pos    =    0;    pos    <    len    -    2;    pos++)    {    pos    +=    Character.charCount(Character.codePointAt(position,    pos));    }    	non-compiled	[CE]  'else'  without  'if'	151	None	replace
330	[BUG]  [BUGGY]  if(c!=  null)  {  out.write(c,  0,  pos);  }  else  {  for(int  pos  =  0;  pos  <  len  -  2;  pos++)  {  pos  +=  Character.charCount(Character.codePointAt(position,  pos));  }  [CE]  'else'  without  'if'  [FE]            IndexOutOfBoundsException      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c!=  null)  {  out.write(c,  0,  pos);  }  else  {  for(int  pos  =  0;  pos  <  len  -  2;  pos++)  {  pos  +=  Character.charCount(Character.codePointAt(position,  pos));  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c!=  null)  {  out.write(c,  0,  pos);  }  else  {  for(int  pos  =  0;  pos  <  len  -  2;  pos++)  {  pos  +=  Character.charCount(Character.codePointAt(position,  pos));  }	  out.write(c,    0,    pos);    if(c!=    null)    {    out.write(c,    0,    pos);    }    else    {    for(int    pos    =    0;    pos    <    len    -    2;    pos++)    {    pos    +=    Character.charCount(Character.codePointAt(position,    pos));    }    	non-compiled	[CE]  'else'  without  'if'	151	None	replace
331	[BUG]  [BUGGY]  if(c  ==  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pt,  pos));  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c  ==  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pt,  pos));  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c  ==  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pt,  pos));  }	  if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    pos    +=    Character.charCount(Character.codePointAt(pt,    pos));    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
332	[BUG]  [BUGGY]  if(c!=  null)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pt,  pos));  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c!=  null)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pt,  pos));  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c!=  null)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pt,  pos));  }	  if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    pos    +=    Character.charCount(Character.codePointAt(pt,    pos));    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
333	[BUG]  [BUGGY]  if(c  ==  null)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pt,  pos));  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c  ==  null)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pt,  pos));  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c  ==  null)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pt,  pos));  }	  if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    pos    +=    Character.charCount(Character.codePointAt(pt,    pos));    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
334	[BUG]  [BUGGY]  if(pos  >=  len)  {  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length();  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(pos  >=  len)  {  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length();  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(pos  >=  len)  {  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length();  }	  if(consumed!=    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    pos    +=    c.length();    }    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
335	[BUG]  [BUGGY]  if(consumed  <  =  0)  {  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  <  =  0)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  <  =  0)  {  out.write(c);  }	  if(consumed    ==    0)    {    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	138	None	replace
336	[BUG]  [BUGGY]  if(pos  >  0)  {  out.write(c,  0,  pos);  char[]  c  =  input.toChars(input);  out.write(c,  0,  pos);  }  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]          IndexOutOfBoundsException      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(pos  >  0)  {  out.write(c,  0,  pos);  char[]  c  =  input.toChars(input);  out.write(c,  0,  pos);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(pos  >  0)  {  out.write(c,  0,  pos);  char[]  c  =  input.toChars(input);  out.write(c,  0,  pos);  }	  out.write(c,    0,    pos);    char[]    c    =    input.toChars(input);    out.write(c,    0,    pos);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	101	None	replace
337	[BUG]  [BUGGY]  if(pos  <  len)  {  out.write(c,  0,  pos);  char[]  c  =  input.toChars(input);  out.write(c,  0,  pos);  }  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]            IndexOutOfBoundsException      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(pos  <  len)  {  out.write(c,  0,  pos);  char[]  c  =  input.toChars(input);  out.write(c,  0,  pos);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(pos  <  len)  {  out.write(c,  0,  pos);  char[]  c  =  input.toChars(input);  out.write(c,  0,  pos);  }	  out.write(c,    0,    pos);    char[]    c    =    input.toChars(input);    out.write(c,    0,    pos);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	101	None	replace
338	[BUG]  [BUGGY]  char[]  c  =  input.toChars(pos);  out.write(c,  0,  pos);  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]              IndexOutOfBoundsException      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  char[]  c  =  input.toChars(pos);  out.write(c,  0,  pos);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	char[]  c  =  input.toChars(pos);  out.write(c,  0,  pos);	  out.write(c,    0,    pos);    char[]    c    =    input.toChars(input);    out.write(c,    0,    pos);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	101	None	replace
339	[BUG]  [BUGGY]  [FE]  IndexOutOfBoundsException  [FE]    IndexOutOfBoundsException    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,  0,  c.length  +  2);  out.write(c,  0,  c.length  +  2);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	out.write(c,    0,    c.length    +    2);    out.write(c,  0,  c.length  +  2);	  	compilable	  [FE]  IndexOutOfBoundsException  	81	13	add
340	[BUG]  [BUGGY]  out.write(c,  0,  c.length  +  2);  out.write(c,  0,  c.length  +  2);  [FE]  IndexOutOfBoundsException  [FE]    IndexOutOfBoundsException    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,  0,  c.length  +  2);  out.write(c,  0,  c.length  +  2);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,    0,    c.length    +    2);    out.write(c,  0,  c.length  +  2);	  	compilable	  [FE]  IndexOutOfBoundsException  	81	13	add
341	[BUG]  [BUGGY]  out.write(c,  0,  c.length  +  2);  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c,  0,  c.length  +  2);  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]      IndexOutOfBoundsException    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,  0,  c.length  +  2);  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c,  0,  c.length  +  2);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,    0,    c.length    +    2);    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c,  0,  c.length  +  2);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	81	None	add
342	[BUG]  [BUGGY]  out.write(c,  0,  c.length  +  2);  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]        IndexOutOfBoundsException    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,  0,  c.length  +  2);  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,    0,    c.length    +    2);    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	81	None	add
343	[BUG]  [BUGGY]  out.write(c,  0,  c.length  +  2);  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c,  0,  c.length  +  2);  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]          IndexOutOfBoundsException    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,  0,  c.length  +  2);  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c,  0,  c.length  +  2);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,    0,    c.length    +    2);    char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c,  0,  c.length  +  2);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	81	None	add
344	[BUG]  [BUGGY]  out.write(c,  0,  c.length  +  2);  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos  +  1));  out.write(c,  0,  c.length  +  2);  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]            IndexOutOfBoundsException    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,  0,  c.length  +  2);  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos  +  1));  out.write(c,  0,  c.length  +  2);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,    0,    c.length    +    2);    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos  +  1));  out.write(c,  0,  c.length  +  2);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	81	None	add
345	[BUG]  [BUGGY]  if(consumed  >  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length;  }  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length;  }  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length;  }  }	  if(c!=    null)    {    for(int    pt    =    0;    pt    <    consumed;    pt++)    {    char[]    c    =    c.toCharArray();    pos    +=    c.length;    }    	non-compiled	[CE]  illegal  start  of  expression	172	None	replace
346	[BUG]  [BUGGY]  if(consumed  ==  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length;  }  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  ==  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length;  }  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  ==  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length;  }  }	  if(c!=    null)    {    for(int    pt    =    0;    pt    <    consumed;    pt++)    {    char[]    c    =    c.toCharArray();    pos    +=    c.length;    }    	non-compiled	[CE]  illegal  start  of  expression	172	None	replace
347	[BUG]  [BUGGY]  if(consumed  >  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length;  }  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length;  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length;  }	  if(c!=    null)    {    for(int    pt    =    0;    pt    <    consumed;    pt++)    {    char[]    c    =    c.toCharArray();    pos    +=    c.length;    }    	non-compiled	[CE]  illegal  start  of  expression	172	None	replace
348	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write(c,  0,  c.length);  char[]  c  =  Character.toChars(Character.toChars(input,  pos));  out.write(c,  0,  c.length);  }  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]        ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >  0)  {  out.write(c,  0,  c.length);  char[]  c  =  Character.toChars(Character.toChars(input,  pos));  out.write(c,  0,  c.length);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >  0)  {  out.write(c,  0,  c.length);  char[]  c  =  Character.toChars(Character.toChars(input,  pos));  out.write(c,  0,  c.length);  }	  out.write(c,    0,    c.length);    char[]    c    =    Character.toChars(Character.toChars(input,    pos));    out.write(c,    0,    c.length);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	104	None	replace
349	[BUG]  [BUGGY]  if(consumed  <  0)  {  out.write(c,  0,  c.length);  char[]  c  =  Character.toChars(Character.toChars(input,  pos));  out.write(c,  0,  c.length);  }  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]          ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  <  0)  {  out.write(c,  0,  c.length);  char[]  c  =  Character.toChars(Character.toChars(input,  pos));  out.write(c,  0,  c.length);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  <  0)  {  out.write(c,  0,  c.length);  char[]  c  =  Character.toChars(Character.toChars(input,  pos));  out.write(c,  0,  c.length);  }	  out.write(c,    0,    c.length);    char[]    c    =    Character.toChars(Character.toChars(input,    pos));    out.write(c,    0,    c.length);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	104	None	replace
350	[BUG]  [BUGGY]  if(consumed  >  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }	  if(c!=    null)    {    for(int    pt    =    0;    pt    <    consumed;    pt++)    {    char[]    c    =    c.toChars();    pos    +=    c.length();    }    	non-compiled	[CE]  illegal  start  of  expression	162	None	replace
351	[BUG]  [BUGGY]  if(consumed  <  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  <  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  <  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }	  if(c!=    null)    {    for(int    pt    =    0;    pt    <    consumed;    pt++)    {    char[]    c    =    c.toChars();    pos    +=    c.length();    }    	non-compiled	[CE]  illegal  start  of  expression	162	None	replace
352	[BUG]  [BUGGY]  if(consumed  ==  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  ==  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  ==  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }	  if(c!=    null)    {    for(int    pt    =    0;    pt    <    consumed;    pt++)    {    char[]    c    =    c.toChars();    pos    +=    c.length();    }    	non-compiled	[CE]  illegal  start  of  expression	162	None	replace
353	[BUG]  [BUGGY]  if(pos  ==  len)  {  if(consumed  ==  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(pos  ==  len)  {  if(consumed  ==  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(pos  ==  len)  {  if(consumed  ==  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  }	  if(consumed    ==    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    }    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
354	[BUG]  [BUGGY]  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  }	  if(consumed    ==    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    }    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
355	[BUG]  [BUGGY]  if(pos  ==  len)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(pos  ==  len)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(pos  ==  len)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  }	  if(consumed    ==    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    }    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
356	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]          if(c!=    null)    {    out.write(c);    }    else    {    out.write('n');    }    if(c!=  null)  {  out.write('n');  }  else  {  out.write('n');  }  if(c!=  null)  {  out.write(c);  }  else  {  out.write('n');  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	                if(c!=        null)        {        out.write(c);        }        else        {        out.write('n');        }        if(c!=    null)    {    out.write('n');    }    else    {    out.write('n');    }    if(c!=  null)  {  out.write(c);  }  else  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	3	13	add
357	[BUG]  [BUGGY]          if(c!=    null)    {    out.write(c);    }    else    {    out.write('n');    }    if(c!=  null)  {  out.write('n');  }  else  {  out.write('n');  }  if(c!=  null)  {  out.write(c);  }  else  {  out.write('n');  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]          if(c!=    null)    {    out.write(c);    }    else    {    out.write('n');    }    if(c!=  null)  {  out.write('n');  }  else  {  out.write('n');  }  if(c!=  null)  {  out.write(c);  }  else  {  out.write('n');  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	                if(c!=        null)        {        out.write(c);        }        else        {        out.write('n');        }        if(c!=    null)    {    out.write('n');    }    else    {    out.write('n');    }    if(c!=  null)  {  out.write(c);  }  else  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	3	13	add
358	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]          if(c!=    null)    {    out.write(c);    }    else    {    out.write('n');    }    if(c!=  null)  {  out.write('n');  }  else  {  out.write('n');  }  if(c  ==  null)  {  out.write(c);  }  else  {  out.write('n');  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	                if(c!=        null)        {        out.write(c);        }        else        {        out.write('n');        }        if(c!=    null)    {    out.write('n');    }    else    {    out.write('n');    }    if(c  ==  null)  {  out.write(c);  }  else  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	3	13	add
359	[BUG]  [BUGGY]          if(c!=    null)    {    out.write(c);    }    else    {    out.write('n');    }    if(c!=  null)  {  out.write('n');  }  else  {  out.write('n');  }  if(c  ==  null)  {  out.write(c);  }  else  {  out.write('n');  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]          if(c!=    null)    {    out.write(c);    }    else    {    out.write('n');    }    if(c!=  null)  {  out.write('n');  }  else  {  out.write('n');  }  if(c  ==  null)  {  out.write(c);  }  else  {  out.write('n');  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	                if(c!=        null)        {        out.write(c);        }        else        {        out.write('n');        }        if(c!=    null)    {    out.write('n');    }    else    {    out.write('n');    }    if(c  ==  null)  {  out.write(c);  }  else  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	3	13	add
360	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]          if(c!=    null)    {    out.write(c);    }    else    {    out.write('n');    }    if(c!=  null)  {  out.write('n');  }  else  {  out.write('n');  }  if(c!=  null)  {  out.write('n');  }  else  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	                if(c!=        null)        {        out.write(c);        }        else        {        out.write('n');        }        if(c!=    null)    {    out.write('n');    }    else    {    out.write('n');    }    if(c!=  null)  {  out.write('n');  }  else  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	3	13	add
361	[BUG]  [BUGGY]          if(c!=    null)    {    out.write(c);    }    else    {    out.write('n');    }    if(c!=  null)  {  out.write('n');  }  else  {  out.write('n');  }  if(c!=  null)  {  out.write('n');  }  else  {  out.write(c);  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]          if(c!=    null)    {    out.write(c);    }    else    {    out.write('n');    }    if(c!=  null)  {  out.write('n');  }  else  {  out.write('n');  }  if(c!=  null)  {  out.write('n');  }  else  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	                if(c!=        null)        {        out.write(c);        }        else        {        out.write('n');        }        if(c!=    null)    {    out.write('n');    }    else    {    out.write('n');    }    if(c!=  null)  {  out.write('n');  }  else  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	3	13	add
362	[BUG]  [BUGGY]          if(c!=    null)    {    out.write(c);    }    else    {    out.write('n');    }    if(c!=  null)  {  out.write('n');  }  else  {  out.write('n');  }  if(c!=  null)  {  out.write(c);  }  else  {  [CE]  'else'  without  'if'  [FE]          ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]          if(c!=    null)    {    out.write(c);    }    else    {    out.write('n');    }    if(c!=  null)  {  out.write('n');  }  else  {  out.write('n');  }  if(c!=  null)  {  out.write(c);  }  else  {  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	                if(c!=        null)        {        out.write(c);        }        else        {        out.write('n');        }        if(c!=    null)    {    out.write('n');    }    else    {    out.write('n');    }    if(c!=  null)  {  out.write(c);  }  else  {	  	non-compiled	[CE]  'else'  without  'if'	3	None	add
363	[BUG]  [BUGGY]  if(pos  ==  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c[pos]  =  c.charValue();  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(pos  ==  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c[pos]  =  c.charValue();  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(pos  ==  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c[pos]  =  c.charValue();  }	  if(consumed    ==    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    c[pos]    =    c.charValue();    }    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
364	[BUG]  [BUGGY]  if(consumed  <  =  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c[pos]  =  c.charValue();  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  <  =  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c[pos]  =  c.charValue();  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  <  =  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c[pos]  =  c.charValue();  }	  if(consumed    ==    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    c[pos]    =    c.charValue();    }    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
365	[BUG]  [BUGGY]  if(consumed  <  0)  {  if(c!=  null)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c[pos]  =  c.charValue();  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  <  0)  {  if(c!=  null)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c[pos]  =  c.charValue();  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  <  0)  {  if(c!=  null)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c[pos]  =  c.charValue();  }	  if(consumed    >    0)    {    if(c!=    null)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    c[pos]    =    c.charValue();    }    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
366	[BUG]  [BUGGY]  if(pos  >  0)  {  if(c!=  null)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c[pos]  =  c.charValue();  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(pos  >  0)  {  if(c!=  null)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c[pos]  =  c.charValue();  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(pos  >  0)  {  if(c!=  null)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c[pos]  =  c.charValue();  }	  if(consumed    >    0)    {    if(c!=    null)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    c[pos]    =    c.charValue();    }    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
367	[BUG]  [BUGGY]  if(c!=  null)  {  if(consumed  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c[pos]  =  c.charValue();  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c!=  null)  {  if(consumed  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c[pos]  =  c.charValue();  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c!=  null)  {  if(consumed  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c[pos]  =  c.charValue();  }	  if(consumed    >    0)    {    if(c!=    null)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    c[pos]    =    c.charValue();    }    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
368	[BUG]  [BUGGY]  if(consumed  >  0)  {  if(c  ==  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c[pos]);  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >  0)  {  if(c  ==  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c[pos]);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >  0)  {  if(c  ==  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c[pos]);  }	  if(c    ==    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    out.write(c[pos]);    }    	non-compiled	[CE]  illegal  start  of  expression	169	None	replace
369	[BUG]  [BUGGY]  if(c!=  null)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  pos  +=  Character.charCount(c);  }  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c!=  null)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  pos  +=  Character.charCount(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c!=  null)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  pos  +=  Character.charCount(c);  }	          if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    pos    +=    Character.charCount(c);    }    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
370	[BUG]  [BUGGY]  if(c  ==  null)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  pos  +=  Character.charCount(c);  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c  ==  null)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  pos  +=  Character.charCount(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c  ==  null)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  pos  +=  Character.charCount(c);  }	          if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    pos    +=    Character.charCount(c);    }    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
371	[BUG]  [BUGGY]  if(c  ==  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(c);  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c  ==  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c  ==  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(c);  }	          if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    pos    +=    Character.charCount(c);    }    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
372	[BUG]  [BUGGY]  if(consumed  >  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  consumeLen;  pt++)  {  char[]  c  =  c.toCharArray();  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  consumeLen;  pt++)  {  char[]  c  =  c.toCharArray();  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  consumeLen;  pt++)  {  char[]  c  =  c.toCharArray();  }	  if(c!=    null)    {    for(int    pt    =    0;    pt    <    consumeLen;    pt++)    {    char[]    c    =    c.toCharArray();    }    	non-compiled	[CE]  illegal  start  of  expression	174	None	replace
373	[BUG]  [BUGGY]  if(consumed  ==  0)  {  for(int  pt  =  0;  pt  <  consumeLen;  pt++)  {  char[]  c  =  c.toCharArray();  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  ==  0)  {  for(int  pt  =  0;  pt  <  consumeLen;  pt++)  {  char[]  c  =  c.toCharArray();  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  ==  0)  {  for(int  pt  =  0;  pt  <  consumeLen;  pt++)  {  char[]  c  =  c.toCharArray();  }	  if(c!=    null)    {    for(int    pt    =    0;    pt    <    consumeLen;    pt++)    {    char[]    c    =    c.toCharArray();    }    	non-compiled	[CE]  illegal  start  of  expression	174	None	replace
374	[BUG]  [BUGGY]  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  consumeLen;  pt++)  {  char[]  c  =  c.toCharArray();  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  consumeLen;  pt++)  {  char[]  c  =  c.toCharArray();  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  consumeLen;  pt++)  {  char[]  c  =  c.toCharArray();  }	  if(c!=    null)    {    for(int    pt    =    0;    pt    <    consumeLen;    pt++)    {    char[]    c    =    c.toCharArray();    }    	non-compiled	[CE]  illegal  start  of  expression	174	None	replace
375	[BUG]  [BUGGY]  if(pos  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c[pos]);  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(pos  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c[pos]);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(pos  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c[pos]);  }	  if(consumed!=    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    out.write(c[pos]);    }    	non-compiled	[CE]  illegal  start  of  expression	143	None	replace
376	[BUG]  [BUGGY]  while(pos  >=  len)  {  if(consumed!=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c[pos]);  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  while(pos  >=  len)  {  if(consumed!=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c[pos]);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	while(pos  >=  len)  {  if(consumed!=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c[pos]);  }	  if(consumed!=    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    out.write(c[pos]);    }    	non-compiled	[CE]  illegal  start  of  expression	143	None	replace
377	[BUG]  [BUGGY]  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c[pos]);  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c[pos]);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c[pos]);  }	  if(consumed!=    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    out.write(c[pos]);    }    	non-compiled	[CE]  illegal  start  of  expression	143	None	replace
378	[BUG]  [BUGGY]  if(pos  >=  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(pos  >=  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(pos  >=  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }	  if(consumed    >=    0)    {    if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
379	[BUG]  [BUGGY]  if(pos  <  len)  {  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(pos  <  len)  {  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(pos  <  len)  {  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }	  if(consumed    <    0)    {    if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
380	[BUG]  [BUGGY]  if(pos  <  len)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(pos  <  len)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(pos  <  len)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }	  if(consumed    <    0)    {    if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
381	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c  ==  null)  {  out.write(c);  }  if(c  ==  null)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	if(c    ==    null)    {    out.write(c);    }    if(c  ==  null)  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	167	1	add
382	[BUG]  [BUGGY]  if(c  ==  null)  {  out.write(c);  }  if(c  ==  null)  {  out.write(c);  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c  ==  null)  {  out.write(c);  }  if(c  ==  null)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c    ==    null)    {    out.write(c);    }    if(c  ==  null)  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	167	1	add
383	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c  ==  null)  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	if(c    ==    null)    {    out.write(c);    }    if(c!=  null)  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	167	13	add
384	[BUG]  [BUGGY]  if(c  ==  null)  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c  ==  null)  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c    ==    null)    {    out.write(c);    }    if(c!=  null)  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	167	13	add
385	[BUG]  [BUGGY]  if(c  ==  null)  {  out.write(c);  }  if(c  >=  null)  {  out.write(c);  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]        ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c  ==  null)  {  out.write(c);  }  if(c  >=  null)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c    ==    null)    {    out.write(c);    }    if(c  >=  null)  {  out.write(c);  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	167	None	add
386	[BUG]  [BUGGY]  if(c  ==  null)  {  out.write(c);  }  If(c  ==  null)  {  out.write(c);  }  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c  ==  null)  {  out.write(c);  }  If(c  ==  null)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c    ==    null)    {    out.write(c);    }    If(c  ==  null)  {  out.write(c);  }	  	non-compiled	[CE]  ';'  expected	167	None	add
387	[BUG]  [BUGGY]  if(pos  >=  len)  {  if(consumed  ==  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(pos  >=  len)  {  if(consumed  ==  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(pos  >=  len)  {  if(consumed  ==  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }	  if(consumed    ==    0)    {    if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toChars();    pos    +=    c.length();    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
388	[BUG]  [BUGGY]  if(pos  ==  len)  {  if(consumed  ==  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(pos  ==  len)  {  if(consumed  ==  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(pos  ==  len)  {  if(consumed  ==  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }	  if(consumed    ==    0)    {    if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toChars();    pos    +=    c.length();    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
389	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]          if(c!=    null)    {    out.write(c);    }    else    {    out.write(c);    }    if(c!=  null)  {  out.write(c);  }  else  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }  else  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	                if(c!=        null)        {        out.write(c);        }        else        {        out.write(c);        }        if(c!=    null)    {    out.write(c);    }    else    {    out.write(c);    }    if(c!=  null)  {  out.write(c);  }  else  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	20	13	add
390	[BUG]  [BUGGY]          if(c!=    null)    {    out.write(c);    }    else    {    out.write(c);    }    if(c!=  null)  {  out.write(c);  }  else  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }  else  {  out.write(c);  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]          if(c!=    null)    {    out.write(c);    }    else    {    out.write(c);    }    if(c!=  null)  {  out.write(c);  }  else  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }  else  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	                if(c!=        null)        {        out.write(c);        }        else        {        out.write(c);        }        if(c!=    null)    {    out.write(c);    }    else    {    out.write(c);    }    if(c!=  null)  {  out.write(c);  }  else  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	20	13	add
391	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]          if(c!=    null)    {    out.write(c);    }    else    {    out.write(c);    }    if(c!=  null)  {  out.write(c);  }  else  {  out.write(c);  }  if(c  ==  null)  {  out.write(c);  }  else  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	                if(c!=        null)        {        out.write(c);        }        else        {        out.write(c);        }        if(c!=    null)    {    out.write(c);    }    else    {    out.write(c);    }    if(c  ==  null)  {  out.write(c);  }  else  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	20	13	add
392	[BUG]  [BUGGY]          if(c!=    null)    {    out.write(c);    }    else    {    out.write(c);    }    if(c!=  null)  {  out.write(c);  }  else  {  out.write(c);  }  if(c  ==  null)  {  out.write(c);  }  else  {  out.write(c);  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]          if(c!=    null)    {    out.write(c);    }    else    {    out.write(c);    }    if(c!=  null)  {  out.write(c);  }  else  {  out.write(c);  }  if(c  ==  null)  {  out.write(c);  }  else  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	                if(c!=        null)        {        out.write(c);        }        else        {        out.write(c);        }        if(c!=    null)    {    out.write(c);    }    else    {    out.write(c);    }    if(c  ==  null)  {  out.write(c);  }  else  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	20	13	add
393	[BUG]  [BUGGY]          if(c!=    null)    {    out.write(c);    }    else    {    out.write(c);    }    if(c!=  null)  {  out.write(c);  }  else  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }  else  {  [CE]  'else'  without  'if'  [FE]        ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]          if(c!=    null)    {    out.write(c);    }    else    {    out.write(c);    }    if(c!=  null)  {  out.write(c);  }  else  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }  else  {  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	                if(c!=        null)        {        out.write(c);        }        else        {        out.write(c);        }        if(c!=    null)    {    out.write(c);    }    else    {    out.write(c);    }    if(c!=  null)  {  out.write(c);  }  else  {	  	non-compiled	[CE]  'else'  without  'if'	20	None	add
394	[BUG]  [BUGGY]          if(c!=    null)    {    out.write(c);    }    else    {    out.write(c);    }    if(c!=  null)  {  out.write(c);  }  else  {  out.write(c);  }  if(c  >=  null)  {  out.write(c);  }  else  {  out.write(c);  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]          ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]          if(c!=    null)    {    out.write(c);    }    else    {    out.write(c);    }    if(c!=  null)  {  out.write(c);  }  else  {  out.write(c);  }  if(c  >=  null)  {  out.write(c);  }  else  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	                if(c!=        null)        {        out.write(c);        }        else        {        out.write(c);        }        if(c!=    null)    {    out.write(c);    }    else    {    out.write(c);    }    if(c  >=  null)  {  out.write(c);  }  else  {  out.write(c);  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	20	None	add
395	[BUG]  [BUGGY]  if(pos  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(pos  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(pos  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }	  if(consumed    >=    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toChars();    pos    +=    c.length();    }    	non-compiled	[CE]  illegal  start  of  expression	147	None	replace
396	[BUG]  [BUGGY]  while(pos  <  len)  {  if(consumed  <  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  while(pos  <  len)  {  if(consumed  <  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	while(pos  <  len)  {  if(consumed  <  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }	  if(consumed    <    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
397	[BUG]  [BUGGY]  if(consumed  <  0)  {  for(int  pos  =  0;  pos  <  c.length;  pos++)  {  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  <  0)  {  for(int  pos  =  0;  pos  <  c.length;  pos++)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  <  0)  {  for(int  pos  =  0;  pos  <  c.length;  pos++)  {  out.write(c);  }	  if(consumed    <    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
398	[BUG]  [BUGGY]  if(consumed  ==  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  char[]  c  =  c.toCharArray();  pos  +=  Character.charCount(c);  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  ==  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  char[]  c  =  c.toCharArray();  pos  +=  Character.charCount(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  ==  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  char[]  c  =  c.toCharArray();  pos  +=  Character.charCount(c);  }	          if(c!=    null)    {    for(int    i    =    0;    i    <    len;    i++)    {    char[]    c    =    c.toCharArray();    pos    +=    Character.charCount(c);    }    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
399	[BUG]  [BUGGY]  if(consumed  >=  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  char[]  c  =  c.toCharArray();  pos  +=  Character.charCount(c);  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >=  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  char[]  c  =  c.toCharArray();  pos  +=  Character.charCount(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >=  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  char[]  c  =  c.toCharArray();  pos  +=  Character.charCount(c);  }	          if(c!=    null)    {    for(int    i    =    0;    i    <    len;    i++)    {    char[]    c    =    c.toCharArray();    pos    +=    Character.charCount(c);    }    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
400	[BUG]  [BUGGY]  if(consumed  >  0)  {  if(c!=  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  char[]  c  =  c.toCharArray();  pos  +=  Character.charCount(c);  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >  0)  {  if(c!=  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  char[]  c  =  c.toCharArray();  pos  +=  Character.charCount(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >  0)  {  if(c!=  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  char[]  c  =  c.toCharArray();  pos  +=  Character.charCount(c);  }	          if(c!=    null)    {    for(int    i    =    0;    i    <    len;    i++)    {    char[]    c    =    c.toCharArray();    pos    +=    Character.charCount(c);    }    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
401	[BUG]  [BUGGY]  if(consumed  <  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  char[]  c  =  c.toCharArray();  pos  +=  Character.charCount(c);  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  <  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  char[]  c  =  c.toCharArray();  pos  +=  Character.charCount(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  <  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  char[]  c  =  c.toCharArray();  pos  +=  Character.charCount(c);  }	          if(c!=    null)    {    for(int    i    =    0;    i    <    len;    i++)    {    char[]    c    =    c.toCharArray();    pos    +=    Character.charCount(c);    }    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
402	[BUG]  [BUGGY]  if(consumed  >  0)  {  if(c  ==  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >  0)  {  if(c  ==  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >  0)  {  if(c  ==  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }	  if(c    ==    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toChars();    pos    +=    c.length();    }    	non-compiled	[CE]  illegal  start  of  expression	161	None	replace
403	[BUG]  [BUGGY]  if(consumed  <  0)  {  if(c  ==  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  <  0)  {  if(c  ==  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  <  0)  {  if(c  ==  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }	  if(c    ==    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toChars();    pos    +=    c.length();    }    	non-compiled	[CE]  illegal  start  of  expression	161	None	replace
404	[BUG]  [BUGGY]  while(pos  >=  len)  {  if(consumed!=  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  while(pos  >=  len)  {  if(consumed!=  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	while(pos  >=  len)  {  if(consumed!=  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }	  if(consumed!=    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
405	[BUG]  [BUGGY]  if(consumed  >=  0)  {  for(int  pos  =  0;  pos  <  c.length;  pos++)  {  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >=  0)  {  for(int  pos  =  0;  pos  <  c.length;  pos++)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >=  0)  {  for(int  pos  =  0;  pos  <  c.length;  pos++)  {  out.write(c);  }	  if(consumed!=    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
406	[BUG]  [BUGGY]  if(c  ==  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pos,  pos));  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c  ==  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pos,  pos));  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c  ==  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pos,  pos));  }	  if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    pos    +=    Character.charCount(Character.codePointAt(pos,    pos));    }    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
407	[BUG]  [BUGGY]  if(c!=  null)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pos,  pos));  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c!=  null)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pos,  pos));  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c!=  null)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pos,  pos));  }	  if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    pos    +=    Character.charCount(Character.codePointAt(pos,    pos));    }    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
408	[BUG]  [BUGGY]  if(c  ==  null)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pos,  pos));  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c  ==  null)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pos,  pos));  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c  ==  null)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pos,  pos));  }	  if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    pos    +=    Character.charCount(Character.codePointAt(pos,    pos));    }    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
409	[BUG]  [BUGGY]  if(pos  >  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c[pos]);  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(pos  >  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c[pos]);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(pos  >  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c[pos]);  }	  if(consumed    >    0)    {    if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    out.write(c[pos]);    }    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
410	[BUG]  [BUGGY]  if(consumed  <  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c[pos]);  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  <  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c[pos]);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  <  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c[pos]);  }	  if(consumed    >    0)    {    if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    out.write(c[pos]);    }    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
411	[BUG]  [BUGGY]  if(pos  <  len)  {  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c[pos]);  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(pos  <  len)  {  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c[pos]);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(pos  <  len)  {  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c[pos]);  }	  if(consumed    >    0)    {    if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    out.write(c[pos]);    }    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
412	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]          if(c!=    null)    {    out.write(c);    }    else    {    out.write(c);    }    if(c  ==  null)  {  out.write(c);  }  else  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }  else  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	                if(c!=        null)        {        out.write(c);        }        else        {        out.write(c);        }        if(c    ==    null)    {    out.write(c);    }    else    {    out.write(c);    }    if(c!=  null)  {  out.write(c);  }  else  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	22	13	add
413	[BUG]  [BUGGY]          if(c!=    null)    {    out.write(c);    }    else    {    out.write(c);    }    if(c  ==  null)  {  out.write(c);  }  else  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }  else  {  out.write(c);  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]          if(c!=    null)    {    out.write(c);    }    else    {    out.write(c);    }    if(c  ==  null)  {  out.write(c);  }  else  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }  else  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	                if(c!=        null)        {        out.write(c);        }        else        {        out.write(c);        }        if(c    ==    null)    {    out.write(c);    }    else    {    out.write(c);    }    if(c!=  null)  {  out.write(c);  }  else  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	22	13	add
414	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]          if(c!=    null)    {    out.write(c);    }    else    {    out.write(c);    }    if(c  ==  null)  {  out.write(c);  }  else  {  out.write(c);  }  if(c  ==  null)  {  out.write(c);  }  else  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	                if(c!=        null)        {        out.write(c);        }        else        {        out.write(c);        }        if(c    ==    null)    {    out.write(c);    }    else    {    out.write(c);    }    if(c  ==  null)  {  out.write(c);  }  else  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	22	13	add
415	[BUG]  [BUGGY]          if(c!=    null)    {    out.write(c);    }    else    {    out.write(c);    }    if(c  ==  null)  {  out.write(c);  }  else  {  out.write(c);  }  if(c  ==  null)  {  out.write(c);  }  else  {  out.write(c);  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]          if(c!=    null)    {    out.write(c);    }    else    {    out.write(c);    }    if(c  ==  null)  {  out.write(c);  }  else  {  out.write(c);  }  if(c  ==  null)  {  out.write(c);  }  else  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	                if(c!=        null)        {        out.write(c);        }        else        {        out.write(c);        }        if(c    ==    null)    {    out.write(c);    }    else    {    out.write(c);    }    if(c  ==  null)  {  out.write(c);  }  else  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	22	13	add
416	[BUG]  [BUGGY]          if(c!=    null)    {    out.write(c);    }    else    {    out.write(c);    }    if(c  ==  null)  {  out.write(c);  }  else  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }  else  {  [CE]  'else'  without  'if'  [FE]        ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]          if(c!=    null)    {    out.write(c);    }    else    {    out.write(c);    }    if(c  ==  null)  {  out.write(c);  }  else  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }  else  {  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	                if(c!=        null)        {        out.write(c);        }        else        {        out.write(c);        }        if(c    ==    null)    {    out.write(c);    }    else    {    out.write(c);    }    if(c!=  null)  {  out.write(c);  }  else  {	  	non-compiled	[CE]  'else'  without  'if'	22	None	add
417	[BUG]  [BUGGY]          if(c!=    null)    {    out.write(c);    }    else    {    out.write(c);    }    if(c  ==  null)  {  out.write(c);  }  else  {  out.write(c);  }  if(c  >=  null)  {  out.write(c);  }  else  {  out.write(c);  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]          ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]          if(c!=    null)    {    out.write(c);    }    else    {    out.write(c);    }    if(c  ==  null)  {  out.write(c);  }  else  {  out.write(c);  }  if(c  >=  null)  {  out.write(c);  }  else  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	                if(c!=        null)        {        out.write(c);        }        else        {        out.write(c);        }        if(c    ==    null)    {    out.write(c);    }    else    {    out.write(c);    }    if(c  >=  null)  {  out.write(c);  }  else  {  out.write(c);  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	22	None	add
418	[BUG]  [BUGGY]  pos  +=  Character.charCount(c,  consumption);  [CE]  cannot  find  symbol  consumption  [FE]                      ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  pos  +=  Character.charCount(c,  consumption);  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	pos  +=  Character.charCount(c,  consumption);	  pos    +=    Character.charCount(c,    consume);    	non-compiled	[CE]  cannot  find  symbol  consumption	93	None	replace
419	[BUG]  [BUGGY]  if(consumed  >  0)  {  if(c  ==  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length();  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >  0)  {  if(c  ==  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length();  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >  0)  {  if(c  ==  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length();  }	  if(c    ==    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    pos    +=    c.length();    }    	non-compiled	[CE]  illegal  start  of  expression	159	None	replace
420	[BUG]  [BUGGY]  if(consumed  <  0)  {  if(c  ==  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length();  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  <  0)  {  if(c  ==  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length();  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  <  0)  {  if(c  ==  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length();  }	  if(c    ==    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    pos    +=    c.length();    }    	non-compiled	[CE]  illegal  start  of  expression	159	None	replace
421	[BUG]  [BUGGY]  if(c!=  null)  {  out.write(c,  0,  pos);  }  else  {  for(int  pos  =  0;  pos  <  len  -  2;  pos++)  {  pos  +=  Character.charCount(Character.codePointAt(pos,  pos  [CE]  ')'  expected  [FE]        IndexOutOfBoundsException      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c!=  null)  {  out.write(c,  0,  pos);  }  else  {  for(int  pos  =  0;  pos  <  len  -  2;  pos++)  {  pos  +=  Character.charCount(Character.codePointAt(pos,  pos  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c!=  null)  {  out.write(c,  0,  pos);  }  else  {  for(int  pos  =  0;  pos  <  len  -  2;  pos++)  {  pos  +=  Character.charCount(Character.codePointAt(pos,  pos	  out.write(c,    0,    pos);    if(c!=    null)    {    out.write(c,    0,    pos);    }    else    {    for(int    pos    =    0;    pos    <    len    -    2;    pos++)    {    pos    +=    Character.charCount(Character.codePointAt(pos,    pos));    }    	non-compiled	[CE]  ')'  expected	150	None	replace
422	[BUG]  [BUGGY]  if(consumed  >  0)  {  if(c  ==  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >  0)  {  if(c  ==  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >  0)  {  if(c  ==  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c);  }	  if(c    ==    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	165	None	replace
423	[BUG]  [BUGGY]  if(c  ==  null)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c  ==  null)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c  ==  null)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  out.write(c);  }	  if(c    ==    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	165	None	replace
424	[BUG]  [BUGGY]  if(pos  >  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length();  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(pos  >  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length();  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(pos  >  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length();  }	  if(consumed    >    0)    {    if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    pos    +=    c.length();    }    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
425	[BUG]  [BUGGY]  if(pos  >  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length();  }  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(pos  >  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length();  }  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(pos  >  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length();  }  }	  if(consumed    >    0)    {    if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    pos    +=    c.length();    }    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
426	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c  ==  null)  {  out.write(c);  }  else  {  out.write('n');  }  if(c  ==  null)  {  out.write(c);  }  else  {  out.write('n');  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	if(c    ==    null)    {    out.write(c);    }    else    {    out.write('n');    }    if(c  ==  null)  {  out.write(c);  }  else  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	18	13	add
427	[BUG]  [BUGGY]  if(c  ==  null)  {  out.write(c);  }  else  {  out.write('n');  }  if(c  ==  null)  {  out.write(c);  }  else  {  out.write('n');  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c  ==  null)  {  out.write(c);  }  else  {  out.write('n');  }  if(c  ==  null)  {  out.write(c);  }  else  {  out.write('n');  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c    ==    null)    {    out.write(c);    }    else    {    out.write('n');    }    if(c  ==  null)  {  out.write(c);  }  else  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	18	13	add
428	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c  ==  null)  {  out.write(c);  }  else  {  out.write('n');  }  if(c!=  null)  {  out.write(c);  }  else  {  out.write('n');  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	if(c    ==    null)    {    out.write(c);    }    else    {    out.write('n');    }    if(c!=  null)  {  out.write(c);  }  else  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	18	13	add
429	[BUG]  [BUGGY]  if(c  ==  null)  {  out.write(c);  }  else  {  out.write('n');  }  if(c!=  null)  {  out.write(c);  }  else  {  out.write('n');  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c  ==  null)  {  out.write(c);  }  else  {  out.write('n');  }  if(c!=  null)  {  out.write(c);  }  else  {  out.write('n');  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c    ==    null)    {    out.write(c);    }    else    {    out.write('n');    }    if(c!=  null)  {  out.write(c);  }  else  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	18	13	add
430	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c  ==  null)  {  out.write(c);  }  else  {  out.write('n');  }  if(c  ==  null)  {  out.write('n');  }  else  {  out.write('n');  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	if(c    ==    null)    {    out.write(c);    }    else    {    out.write('n');    }    if(c  ==  null)  {  out.write('n');  }  else  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	18	13	add
431	[BUG]  [BUGGY]  if(c  ==  null)  {  out.write(c);  }  else  {  out.write('n');  }  if(c  ==  null)  {  out.write('n');  }  else  {  out.write('n');  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c  ==  null)  {  out.write(c);  }  else  {  out.write('n');  }  if(c  ==  null)  {  out.write('n');  }  else  {  out.write('n');  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c    ==    null)    {    out.write(c);    }    else    {    out.write('n');    }    if(c  ==  null)  {  out.write('n');  }  else  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	18	13	add
432	[BUG]  [BUGGY]  if(c  ==  null)  {  out.write(c);  }  else  {  out.write('n');  }  If(c  ==  null)  {  out.write(c);  }  else  {  out.write('n');  }  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c  ==  null)  {  out.write(c);  }  else  {  out.write('n');  }  If(c  ==  null)  {  out.write(c);  }  else  {  out.write('n');  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c    ==    null)    {    out.write(c);    }    else    {    out.write('n');    }    If(c  ==  null)  {  out.write(c);  }  else  {  out.write('n');  }	  	non-compiled	[CE]  ';'  expected	18	None	add
433	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >=  0)  {  out.write(c);  }  if(consumed  >=  0)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	if(consumed    >=    0)    {    out.write(c);    }    if(consumed  >=  0)  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	139	13	add
434	[BUG]  [BUGGY]  if(consumed  >=  0)  {  out.write(c);  }  if(consumed  >=  0)  {  out.write(c);  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >=  0)  {  out.write(c);  }  if(consumed  >=  0)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed    >=    0)    {    out.write(c);    }    if(consumed  >=  0)  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	139	13	add
435	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >=  0)  {  out.write(c);  }  if(consumed!=  0)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	if(consumed    >=    0)    {    out.write(c);    }    if(consumed!=  0)  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	139	13	add
436	[BUG]  [BUGGY]  if(consumed  >=  0)  {  out.write(c);  }  if(consumed!=  0)  {  out.write(c);  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >=  0)  {  out.write(c);  }  if(consumed!=  0)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed    >=    0)    {    out.write(c);    }    if(consumed!=  0)  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	139	13	add
437	[BUG]  [BUGGY]  if(consumed  >=  0)  {  out.write(c);  }  if(consumed  >>  0)  {  out.write(c);  }  [CE]  incompatible  types  [FE]        ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >=  0)  {  out.write(c);  }  if(consumed  >>  0)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed    >=    0)    {    out.write(c);    }    if(consumed  >>  0)  {  out.write(c);  }	  	non-compiled	[CE]  incompatible  types	139	None	add
438	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >=  0)  {  out.write(c);  }  if(consumed  ==  0)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	if(consumed    >=    0)    {    out.write(c);    }    if(consumed  ==  0)  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	139	13	add
439	[BUG]  [BUGGY]  if(consumed  >=  0)  {  out.write(c);  }  if(consumed  ==  0)  {  out.write(c);  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >=  0)  {  out.write(c);  }  if(consumed  ==  0)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed    >=    0)    {    out.write(c);    }    if(consumed  ==  0)  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	139	13	add
440	[BUG]  [BUGGY]  if(c  ==  null)  {  for(pos  =  0;  pos  <  len;  pos++)  {  c[pos]  =  c.charValue();  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c  ==  null)  {  for(pos  =  0;  pos  <  len;  pos++)  {  c[pos]  =  c.charValue();  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c  ==  null)  {  for(pos  =  0;  pos  <  len;  pos++)  {  c[pos]  =  c.charValue();  }	  if(c!=    null)    {    for(pos    =    0;    pos    <    len;    pos++)    {    c[pos]    =    c.charValue();    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
441	[BUG]  [BUGGY]  if(c!=  null)  {  for(pos  =  0;  pos  <  len;  pos++)  {  c[pos]  =  Character.toChars(c.charValue());  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c!=  null)  {  for(pos  =  0;  pos  <  len;  pos++)  {  c[pos]  =  Character.toChars(c.charValue());  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c!=  null)  {  for(pos  =  0;  pos  <  len;  pos++)  {  c[pos]  =  Character.toChars(c.charValue());  }	  if(c!=    null)    {    for(pos    =    0;    pos    <    len;    pos++)    {    c[pos]    =    c.charValue();    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
442	[BUG]  [BUGGY]  if(c!=  null)  {  for(pos  =  0;  pos  <  consumed;  pos++)  {  c[pos]  =  c.charValue();  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c!=  null)  {  for(pos  =  0;  pos  <  consumed;  pos++)  {  c[pos]  =  c.charValue();  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c!=  null)  {  for(pos  =  0;  pos  <  consumed;  pos++)  {  c[pos]  =  c.charValue();  }	  if(c!=    null)    {    for(pos    =    0;    pos    <    len;    pos++)    {    c[pos]    =    c.charValue();    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
443	[BUG]  [BUGGY]  if(pos  >  0)  {  out.write(c,  0,  pos);  char[]  c  =  Character.toChars(Character.codePointAt(consumed,  pos));  out.write(c,  0,  pos);  }  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                IndexOutOfBoundsException      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(pos  >  0)  {  out.write(c,  0,  pos);  char[]  c  =  Character.toChars(Character.codePointAt(consumed,  pos));  out.write(c,  0,  pos);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(pos  >  0)  {  out.write(c,  0,  pos);  char[]  c  =  Character.toChars(Character.codePointAt(consumed,  pos));  out.write(c,  0,  pos);  }	  out.write(c,    0,    pos);    char[]    c    =    Character.toChars(Character.codePointAt(consumed,    pos));    out.write(c,    0,    pos);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	62	None	replace
444	[BUG]  [BUGGY]  if(pos  >  0)  {  out.write(c,  0,  pos);  char[]  c  =  Character.toChars(Character.codePointAt(consumed,  pos));  out.write(c,  0,  len);  }  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                  IndexOutOfBoundsException      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(pos  >  0)  {  out.write(c,  0,  pos);  char[]  c  =  Character.toChars(Character.codePointAt(consumed,  pos));  out.write(c,  0,  len);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(pos  >  0)  {  out.write(c,  0,  pos);  char[]  c  =  Character.toChars(Character.codePointAt(consumed,  pos));  out.write(c,  0,  len);  }	  out.write(c,    0,    pos);    char[]    c    =    Character.toChars(Character.codePointAt(consumed,    pos));    out.write(c,    0,    pos);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	62	None	replace
445	[BUG]  [BUGGY]  pos  +=  Character.charCount(c,  pos,  consumed);  [CE]  method  charCount  in  class  Character  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  pos  +=  Character.charCount(c,  pos,  consumed);  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	pos  +=  Character.charCount(c,  pos,  consumed);	  pos    +=    Character.charCount(c,    pos);    	non-compiled	[CE]  method  charCount  in  class  Character  cannot  be  applied  to  given  types;	178	None	replace
446	[BUG]  [BUGGY]  pos  +=  Character.charCount(c,  offset,  pos);  [CE]  cannot  find  symbol  offset  [FE]                      ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  pos  +=  Character.charCount(c,  offset,  pos);  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	pos  +=  Character.charCount(c,  offset,  pos);	  pos    +=    Character.charCount(c,    pos);    	non-compiled	[CE]  cannot  find  symbol  offset	178	None	replace
447	[BUG]  [BUGGY]  if(consumed  >  0)  {  if(c  ==  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length;  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >  0)  {  if(c  ==  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length;  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >  0)  {  if(c  ==  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length;  }	  if(c    ==    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    pos    +=    c.length;    }    	non-compiled	[CE]  illegal  start  of  expression	171	None	replace
448	[BUG]  [BUGGY]  if(consumed  <  0)  {  if(c  ==  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length;  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  <  0)  {  if(c  ==  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length;  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  <  0)  {  if(c  ==  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length;  }	  if(c    ==    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    pos    +=    c.length;    }    	non-compiled	[CE]  illegal  start  of  expression	171	None	replace
449	[BUG]  [BUGGY]  [FE]  IndexOutOfBoundsException  [FE]    IndexOutOfBoundsException    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,    0,    pos);    out.write(c,  0,  pos);  out.write(c,  0,  pos);  out.write(c,  0,  pos);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	out.write(c,        0,        pos);        out.write(c,    0,    pos);    out.write(c,  0,  pos);  out.write(c,  0,  pos);	  	compilable	  [FE]  IndexOutOfBoundsException  	57	12	add
450	[BUG]  [BUGGY]  out.write(c,    0,    pos);    out.write(c,  0,  pos);  out.write(c,  0,  pos);  out.write(c,  0,  pos);  [FE]  IndexOutOfBoundsException  [FE]    IndexOutOfBoundsException    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,    0,    pos);    out.write(c,  0,  pos);  out.write(c,  0,  pos);  out.write(c,  0,  pos);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,        0,        pos);        out.write(c,    0,    pos);    out.write(c,  0,  pos);  out.write(c,  0,  pos);	  	compilable	  [FE]  IndexOutOfBoundsException  	57	12	add
451	[BUG]  [BUGGY]  out.write(c,    0,    pos);    out.write(c,  0,  pos);  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]      IndexOutOfBoundsException    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,    0,    pos);    out.write(c,  0,  pos);  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,        0,        pos);        out.write(c,    0,    pos);    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	57	None	add
452	[BUG]  [BUGGY]  out.write(c,    0,    pos);    out.write(c,  0,  pos);  char[]  c  =  Character.toChars(Character.toChars(input,  pos));  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]        IndexOutOfBoundsException    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,    0,    pos);    out.write(c,  0,  pos);  char[]  c  =  Character.toChars(Character.toChars(input,  pos));  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,        0,        pos);        out.write(c,    0,    pos);    char[]  c  =  Character.toChars(Character.toChars(input,  pos));	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	57	None	add
453	[BUG]  [BUGGY]  [FE]  IndexOutOfBoundsException  [FE]          IndexOutOfBoundsException    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,    0,    pos);    out.write(c,  0,  pos);  out.write(c,  0,  pos);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	out.write(c,        0,        pos);        out.write(c,    0,    pos);    out.write(c,  0,  pos);	  	compilable	  [FE]  IndexOutOfBoundsException  	57	12	add
454	[BUG]  [BUGGY]  out.write(c,    0,    pos);    out.write(c,  0,  pos);  out.write(c,  0,  pos);  [FE]  IndexOutOfBoundsException  [FE]          IndexOutOfBoundsException    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,    0,    pos);    out.write(c,  0,  pos);  out.write(c,  0,  pos);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,        0,        pos);        out.write(c,    0,    pos);    out.write(c,  0,  pos);	  	compilable	  [FE]  IndexOutOfBoundsException  	57	12	add
455	[BUG]  [BUGGY]  out.write(c,    0,    pos);    out.write(c,  0,  pos);  char[]  c  =  Character.toChars(Character.toChars(c));  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]            IndexOutOfBoundsException    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,    0,    pos);    out.write(c,  0,  pos);  char[]  c  =  Character.toChars(Character.toChars(c));  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,        0,        pos);        out.write(c,    0,    pos);    char[]  c  =  Character.toChars(Character.toChars(c));	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	57	None	add
456	[BUG]  [BUGGY]  if(c  ==  null)  {  out.write(c);  }  else  {  for(int  pos  =  0;  pos  <  len  -  2;  pos++)  {  pos  +=  Character.charCount(Character.codePointAt(pos,  pos));  }  [CE]  'else'  without  'if'  [FE]        ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c  ==  null)  {  out.write(c);  }  else  {  for(int  pos  =  0;  pos  <  len  -  2;  pos++)  {  pos  +=  Character.charCount(Character.codePointAt(pos,  pos));  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c  ==  null)  {  out.write(c);  }  else  {  for(int  pos  =  0;  pos  <  len  -  2;  pos++)  {  pos  +=  Character.charCount(Character.codePointAt(pos,  pos));  }	  if(c!=    null)    {    out.write(c);    }    else    {    for(int    pos    =    0;    pos    <    len    -    2;    pos++)    {    pos    +=    Character.charCount(Character.codePointAt(pos,    pos));    }    	non-compiled	[CE]  'else'  without  'if'	41	None	replace
457	[BUG]  [BUGGY]  if(c!=  null)  {  for(int  pos  =  0;  pos  <  len  -  2;  pos++)  {  pos  +=  Character.charCount(Character.codePointAt(pos,  pos));  }  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c!=  null)  {  for(int  pos  =  0;  pos  <  len  -  2;  pos++)  {  pos  +=  Character.charCount(Character.codePointAt(pos,  pos));  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c!=  null)  {  for(int  pos  =  0;  pos  <  len  -  2;  pos++)  {  pos  +=  Character.charCount(Character.codePointAt(pos,  pos));  }	  if(c!=    null)    {    out.write(c);    }    else    {    for(int    pos    =    0;    pos    <    len    -    2;    pos++)    {    pos    +=    Character.charCount(Character.codePointAt(pos,    pos));    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
458	[BUG]  [BUGGY]  out.write(c,  pos,  offset);  [CE]  cannot  find  symbol  offset  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,  pos,  offset);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,  pos,  offset);	  out.write(c,    pos,    consume);    	non-compiled	[CE]  cannot  find  symbol  offset	35	None	replace
459	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c!=  null  &&  c.length  >  0)  {  out.write(c);  }  if(c!=  null  &&  c.length  >  0)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	if(c!=    null    &&    c.length    >    0)    {    out.write(c);    }    if(c!=  null  &&  c.length  >  0)  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	154	13	add
460	[BUG]  [BUGGY]  if(c!=  null  &&  c.length  >  0)  {  out.write(c);  }  if(c!=  null  &&  c.length  >  0)  {  out.write(c);  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c!=  null  &&  c.length  >  0)  {  out.write(c);  }  if(c!=  null  &&  c.length  >  0)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c!=    null    &&    c.length    >    0)    {    out.write(c);    }    if(c!=  null  &&  c.length  >  0)  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	154	13	add
461	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c!=  null  &&  c.length  >  0)  {  out.write(c);  }  if(c  ==  null  &&  c.length  >  0)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	if(c!=    null    &&    c.length    >    0)    {    out.write(c);    }    if(c  ==  null  &&  c.length  >  0)  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	154	13	add
462	[BUG]  [BUGGY]  if(c!=  null  &&  c.length  >  0)  {  out.write(c);  }  if(c  ==  null  &&  c.length  >  0)  {  out.write(c);  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c!=  null  &&  c.length  >  0)  {  out.write(c);  }  if(c  ==  null  &&  c.length  >  0)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c!=    null    &&    c.length    >    0)    {    out.write(c);    }    if(c  ==  null  &&  c.length  >  0)  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	154	13	add
463	[BUG]  [BUGGY]  if(c!=  null  &&  c.length  >  0)  {  out.write(c);  }  if(c  >=  null  &&  c.length  >  0)  {  out.write(c);  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]        ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c!=  null  &&  c.length  >  0)  {  out.write(c);  }  if(c  >=  null  &&  c.length  >  0)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c!=    null    &&    c.length    >    0)    {    out.write(c);    }    if(c  >=  null  &&  c.length  >  0)  {  out.write(c);  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	154	None	add
464	[BUG]  [BUGGY]  if(c!=  null  &&  c.length  >  0)  {  out.write(c);  }  if(c  >>  null  &&  c.length  >  0)  {  out.write(c);  }  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]          ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c!=  null  &&  c.length  >  0)  {  out.write(c);  }  if(c  >>  null  &&  c.length  >  0)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c!=    null    &&    c.length    >    0)    {    out.write(c);    }    if(c  >>  null  &&  c.length  >  0)  {  out.write(c);  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	154	None	add
465	[BUG]  [BUGGY]  if(pos  <  len)  {  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length;  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(pos  <  len)  {  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length;  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(pos  <  len)  {  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length;  }	  if(consumed    <    0)    {    if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    pos    +=    c.length;    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
466	[BUG]  [BUGGY]  if(pos  <  len)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length;  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(pos  <  len)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length;  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(pos  <  len)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length;  }	  if(consumed    <    0)    {    if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    pos    +=    c.length;    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
467	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >  0)  {  out.write(c,  0,  c.length);  out.write(c,  0,  c.length);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	if(consumed  >  0)  {  out.write(c,  0,  c.length);  out.write(c,  0,  c.length);  }	  out.write(c,    0,    c.length);    out.write(c,    0,    c.length);    	compilable	  [FE]  ComparisonFailure  	27	13	replace
468	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write(c,  0,  c.length);  out.write(c,  0,  c.length);  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >  0)  {  out.write(c,  0,  c.length);  out.write(c,  0,  c.length);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >  0)  {  out.write(c,  0,  c.length);  out.write(c,  0,  c.length);  }	  out.write(c,    0,    c.length);    out.write(c,    0,    c.length);    	compilable	  [FE]  ComparisonFailure  	27	13	replace
469	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >  0)  {  out.write(c,  0,  c.length);  out.write(c,  0,  c.length);  }  else  {  out.write('n');  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	if(consumed  >  0)  {  out.write(c,  0,  c.length);  out.write(c,  0,  c.length);  }  else  {  out.write('n');  }	  out.write(c,    0,    c.length);    out.write(c,    0,    c.length);    	compilable	  [FE]  ComparisonFailure  	27	13	replace
470	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write(c,  0,  c.length);  out.write(c,  0,  c.length);  }  else  {  out.write('n');  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >  0)  {  out.write(c,  0,  c.length);  out.write(c,  0,  c.length);  }  else  {  out.write('n');  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >  0)  {  out.write(c,  0,  c.length);  out.write(c,  0,  c.length);  }  else  {  out.write('n');  }	  out.write(c,    0,    c.length);    out.write(c,    0,    c.length);    	compilable	  [FE]  ComparisonFailure  	27	13	replace
471	[BUG]  [BUGGY]  if(consumed  <  =  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length();  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  <  =  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length();  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  <  =  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length();  }	  if(consumed    ==    0)    {    if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    pos    +=    c.length();    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
472	[BUG]  [BUGGY]  if(pos  ==  len)  {  if(consumed  ==  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length();  }  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(pos  ==  len)  {  if(consumed  ==  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length();  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(pos  ==  len)  {  if(consumed  ==  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length();  }	  if(consumed    ==    0)    {    if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    pos    +=    c.length();    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
473	[BUG]  [BUGGY]  if(pos  >=  len)  {  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(pos  >=  len)  {  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(pos  >=  len)  {  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }	  if(consumed!=    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toChars();    pos    +=    c.length();    }    	non-compiled	[CE]  illegal  start  of  expression	149	None	replace
474	[BUG]  [BUGGY]  while(pos  >=  len)  {  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  while(pos  >=  len)  {  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	while(pos  >=  len)  {  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c);  }	  if(consumed    >=    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
475	[BUG]  [BUGGY]  if(consumed  ==  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  c.toCharArray();  pos  +=  Character.charCount(c);  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  ==  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  c.toCharArray();  pos  +=  Character.charCount(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  ==  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  c.toCharArray();  pos  +=  Character.charCount(c);  }	          if(c!=    null)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    c.toCharArray();    pos    +=    Character.charCount(c);    }    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
476	[BUG]  [BUGGY]  if(consumed  >=  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  c.toCharArray();  pos  +=  Character.charCount(c);  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >=  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  c.toCharArray();  pos  +=  Character.charCount(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >=  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  c.toCharArray();  pos  +=  Character.charCount(c);  }	          if(c!=    null)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    c.toCharArray();    pos    +=    Character.charCount(c);    }    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
477	[BUG]  [BUGGY]  if(consumed  <  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  c.toCharArray();  pos  +=  Character.charCount(c);  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  <  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  c.toCharArray();  pos  +=  Character.charCount(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  <  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  c.toCharArray();  pos  +=  Character.charCount(c);  }	          if(c!=    null)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    c.toCharArray();    pos    +=    Character.charCount(c);    }    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
478	[BUG]  [BUGGY]  pos  >=  len)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  c.toCharArray();  pos  +=  Character.charCount(c);  }  [CE]  not  a  statement  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  pos  >=  len)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  c.toCharArray();  pos  +=  Character.charCount(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	pos  >=  len)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  c.toCharArray();  pos  +=  Character.charCount(c);  }	          if(c!=    null)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    c.toCharArray();    pos    +=    Character.charCount(c);    }    	non-compiled	[CE]  not  a  statement	133	None	replace
479	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write(c,  0,  len);  char[]  c  =  input.toChars(input,  pos);  out.write(c,  0,  len);  }  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]            IndexOutOfBoundsException      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >  0)  {  out.write(c,  0,  len);  char[]  c  =  input.toChars(input,  pos);  out.write(c,  0,  len);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >  0)  {  out.write(c,  0,  len);  char[]  c  =  input.toChars(input,  pos);  out.write(c,  0,  len);  }	  out.write(c,    0,    len);    char[]    c    =    input.toChars(input,    pos);    out.write(c,    0,    len);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	117	None	replace
480	[BUG]  [BUGGY]  if(consumed  <  0)  {  out.write(c,  0,  len);  char[]  c  =  input.toChars(input,  pos);  out.write(c,  0,  len);  }  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]              IndexOutOfBoundsException      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  <  0)  {  out.write(c,  0,  len);  char[]  c  =  input.toChars(input,  pos);  out.write(c,  0,  len);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  <  0)  {  out.write(c,  0,  len);  char[]  c  =  input.toChars(input,  pos);  out.write(c,  0,  len);  }	  out.write(c,    0,    len);    char[]    c    =    input.toChars(input,    pos);    out.write(c,    0,    len);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	117	None	replace
481	[BUG]  [BUGGY]  if(consumed  <  =  0)  {  out.write(c,  0,  len);  char[]  c  =  input.toChars(input,  pos);  out.write(c,  0,  len);  }  [CE]  illegal  start  of  expression  [FE]                IndexOutOfBoundsException      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  <  =  0)  {  out.write(c,  0,  len);  char[]  c  =  input.toChars(input,  pos);  out.write(c,  0,  len);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  <  =  0)  {  out.write(c,  0,  len);  char[]  c  =  input.toChars(input,  pos);  out.write(c,  0,  len);  }	  out.write(c,    0,    len);    char[]    c    =    input.toChars(input,    pos);    out.write(c,    0,    len);    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
482	[BUG]  [BUGGY]  [FE]  IndexOutOfBoundsException  [FE]    IndexOutOfBoundsException    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,  pos,  consumed);  out.write(c,  pos,  consumed);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	out.write(c,    pos,    consumed);    out.write(c,  pos,  consumed);	  	compilable	  [FE]  IndexOutOfBoundsException  	33	11	add
483	[BUG]  [BUGGY]  out.write(c,  pos,  consumed);  out.write(c,  pos,  consumed);  [FE]  IndexOutOfBoundsException  [FE]    IndexOutOfBoundsException    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,  pos,  consumed);  out.write(c,  pos,  consumed);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,    pos,    consumed);    out.write(c,  pos,  consumed);	  	compilable	  [FE]  IndexOutOfBoundsException  	33	11	add
484	[BUG]  [BUGGY]  out.write(c,  pos,  consumed);  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]      IndexOutOfBoundsException    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,  pos,  consumed);  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,    pos,    consumed);    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	33	None	add
485	[BUG]  [BUGGY]  out.write(c,  pos,  consumed);  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c,  pos,  consumed);  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]        IndexOutOfBoundsException    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,  pos,  consumed);  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c,  pos,  consumed);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,    pos,    consumed);    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c,  pos,  consumed);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	33	None	add
486	[BUG]  [BUGGY]  out.write(c,  pos,  consumed);  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c,  pos,  consumed);  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]          IndexOutOfBoundsException    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,  pos,  consumed);  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c,  pos,  consumed);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,    pos,    consumed);    char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c,  pos,  consumed);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	33	None	add
487	[BUG]  [BUGGY]  out.write(c,  pos,  consumed);  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]            IndexOutOfBoundsException    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,  pos,  consumed);  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,    pos,    consumed);    char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	33	None	add
488	[BUG]  [BUGGY]  if(c  ==  null)  {  for(int  pt  =  0;  pt  <  consume;  pt++)  {  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c  ==  null)  {  for(int  pt  =  0;  pt  <  consume;  pt++)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c  ==  null)  {  for(int  pt  =  0;  pt  <  consume;  pt++)  {  out.write(c);  }	  if(c!=    null)    {    for(int    pt    =    0;    pt    <    consume;    pt++)    {    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	166	None	replace
489	[BUG]  [BUGGY]  if(consumed!=  0)  {  for(int  pt  =  0;  pt  <  consume;  pt++)  {  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed!=  0)  {  for(int  pt  =  0;  pt  <  consume;  pt++)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed!=  0)  {  for(int  pt  =  0;  pt  <  consume;  pt++)  {  out.write(c);  }	  if(c!=    null)    {    for(int    pt    =    0;    pt    <    consume;    pt++)    {    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	166	None	replace
490	[BUG]  [BUGGY]  if(consumed  ==  0)  {  for(int  pt  =  0;  pt  <  consume;  pt++)  {  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  ==  0)  {  for(int  pt  =  0;  pt  <  consume;  pt++)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  ==  0)  {  for(int  pt  =  0;  pt  <  consume;  pt++)  {  out.write(c);  }	  if(c!=    null)    {    for(int    pt    =    0;    pt    <    consume;    pt++)    {    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	166	None	replace
491	[BUG]  [BUGGY]  if(consumed  <  0)  {  for(int  pos  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  <  0)  {  for(int  pos  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  <  0)  {  for(int  pos  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  }	  if(consumed    >=    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
492	[BUG]  [BUGGY]  out.write(c,  0,  len);  pos  =  Character.toChars(Character.codePointAt(input,  pos));  [CE]  incompatible  types  [FE]            IndexOutOfBoundsException      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,  0,  len);  pos  =  Character.toChars(Character.codePointAt(input,  pos));  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,  0,  len);  pos  =  Character.toChars(Character.codePointAt(input,  pos));	  out.write(c,    0,    len);    char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    	non-compiled	[CE]  incompatible  types	89	None	replace
493	[BUG]  [BUGGY]          if(c!=    null)    {    out.write(c);    }    else    {    out.write(c);    }    if(c!=  null)  {  out.write(c);  }  else  {  out.write(c);  }  If(c!=  null)  {  out.write(c);  }  else  {  out.write(c);  }  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]          if(c!=    null)    {    out.write(c);    }    else    {    out.write(c);    }    if(c!=  null)  {  out.write(c);  }  else  {  out.write(c);  }  If(c!=  null)  {  out.write(c);  }  else  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	                if(c!=        null)        {        out.write(c);        }        else        {        out.write(c);        }        if(c!=    null)    {    out.write(c);    }    else    {    out.write(c);    }    If(c!=  null)  {  out.write(c);  }  else  {  out.write(c);  }	  	non-compiled	[CE]  ';'  expected	20	None	add
494	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(pos  =  0;  pos  <  len;  pos++)  {  c[pos]  =  c.charValue();  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >  0)  {  for(pos  =  0;  pos  <  len;  pos++)  {  c[pos]  =  c.charValue();  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >  0)  {  for(pos  =  0;  pos  <  len;  pos++)  {  c[pos]  =  c.charValue();  }	  if(consumed    ==    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    c[pos]    =    c.charValue();    }    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
495	[BUG]  [BUGGY]  if(consumed  <  0)  {  out.write(c,  0,  len);  char[]  c  =  Character.toChars(Character.codePointAt(consumed,  pos));  out.write(c,  0,  len);  }  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]              IndexOutOfBoundsException      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  <  0)  {  out.write(c,  0,  len);  char[]  c  =  Character.toChars(Character.codePointAt(consumed,  pos));  out.write(c,  0,  len);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  <  0)  {  out.write(c,  0,  len);  char[]  c  =  Character.toChars(Character.codePointAt(consumed,  pos));  out.write(c,  0,  len);  }	  out.write(c,    0,    len);    char[]    c    =    Character.toChars(Character.codePointAt(consumed,    pos));    out.write(c,    0,    len);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	90	None	replace
496	[BUG]  [BUGGY]  if(consumed  <  0)  {  out.write(c,  0,  len);  char[]  c  =  Character.toChars(Character.codePointAt(pos,  suffix));  out.write(c,  0,  len);  }  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                IndexOutOfBoundsException      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  <  0)  {  out.write(c,  0,  len);  char[]  c  =  Character.toChars(Character.codePointAt(pos,  suffix));  out.write(c,  0,  len);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  <  0)  {  out.write(c,  0,  len);  char[]  c  =  Character.toChars(Character.codePointAt(pos,  suffix));  out.write(c,  0,  len);  }	  out.write(c,    0,    len);    char[]    c    =    Character.toChars(Character.codePointAt(consumed,    pos));    out.write(c,    0,    len);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	90	None	replace
497	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]          if(c!=    null)    {    out.write(c);    }    else    {    out.write('n');    }    if(c!=  null)  {  out.write('n');  }  else  {  out.write('n');  }  if(c!=  null)  {  out.write('n');  }  else  {  out.write('n');  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	                if(c!=        null)        {        out.write(c);        }        else        {        out.write('n');        }        if(c!=    null)    {    out.write('n');    }    else    {    out.write('n');    }    if(c!=  null)  {  out.write('n');  }  else  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	3	13	add
498	[BUG]  [BUGGY]          if(c!=    null)    {    out.write(c);    }    else    {    out.write('n');    }    if(c!=  null)  {  out.write('n');  }  else  {  out.write('n');  }  if(c!=  null)  {  out.write('n');  }  else  {  out.write('n');  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]          if(c!=    null)    {    out.write(c);    }    else    {    out.write('n');    }    if(c!=  null)  {  out.write('n');  }  else  {  out.write('n');  }  if(c!=  null)  {  out.write('n');  }  else  {  out.write('n');  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	                if(c!=        null)        {        out.write(c);        }        else        {        out.write('n');        }        if(c!=    null)    {    out.write('n');    }    else    {    out.write('n');    }    if(c!=  null)  {  out.write('n');  }  else  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	3	13	add
499	[BUG]  [BUGGY]          if(c!=    null)    {    out.write(c);    }    else    {    out.write('n');    }    if(c!=  null)  {  out.write('n');  }  else  {  out.write('n');  }  If(c!=  null)  {  out.write(c);  }  else  {  out.write('n');  }  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]          if(c!=    null)    {    out.write(c);    }    else    {    out.write('n');    }    if(c!=  null)  {  out.write('n');  }  else  {  out.write('n');  }  If(c!=  null)  {  out.write(c);  }  else  {  out.write('n');  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	                if(c!=        null)        {        out.write(c);        }        else        {        out.write('n');        }        if(c!=    null)    {    out.write('n');    }    else    {    out.write('n');    }    If(c!=  null)  {  out.write(c);  }  else  {  out.write('n');  }	  	non-compiled	[CE]  ';'  expected	3	None	add
500	[BUG]  [BUGGY]  if(consumed!=  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed!=  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed!=  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }	          if(c!=    null)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    c.toChars();    pos    +=    c.length();    }    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
501	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }	          if(c!=    null)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    c.toChars();    pos    +=    c.length();    }    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
502	[BUG]  [BUGGY]  out.write(c,    0,    c.length);    out.write(c,  0,  c.length);  out.write(c,  0,  c.length);  Out.write(c,  0,  c.length);  [CE]  cannot  find  symbol  Out  [FE]    ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,    0,    c.length);    out.write(c,  0,  c.length);  out.write(c,  0,  c.length);  Out.write(c,  0,  c.length);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,        0,        c.length);        out.write(c,    0,    c.length);    out.write(c,  0,  c.length);  Out.write(c,  0,  c.length);	  	non-compiled	[CE]  cannot  find  symbol  Out	26	None	add
503	[BUG]  [BUGGY]  out.write(c,    0,    c.length);    out.write(c,  0,  c.length);  out.write(c,  0,  c.length);  out.write(C,  0,  c.length);  [CE]  cannot  find  symbol  C  [FE]      ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,    0,    c.length);    out.write(c,  0,  c.length);  out.write(c,  0,  c.length);  out.write(C,  0,  c.length);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,        0,        c.length);        out.write(c,    0,    c.length);    out.write(c,  0,  c.length);  out.write(C,  0,  c.length);	  	non-compiled	[CE]  cannot  find  symbol  C	26	None	add
504	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c,  0,  c.length);  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c,  0,  c.length);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c,  0,  c.length);	  out.write(c,    0,    c.length);    char[]    c    =    Character.toChars(Character.codePointAt(pos,    pos));    out.write(c,    0,    c.length);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	31	None	replace
505	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write(c,  0,  c.length);  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c,  0,  c.length);  }  else  {  out.write(  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >  0)  {  out.write(c,  0,  c.length);  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c,  0,  c.length);  }  else  {  out.write(  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >  0)  {  out.write(c,  0,  c.length);  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c,  0,  c.length);  }  else  {  out.write(	  out.write(c,    0,    c.length);    char[]    c    =    Character.toChars(Character.codePointAt(pos,    pos));    out.write(c,    0,    c.length);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
506	[BUG]  [BUGGY]  if(consumed  >=  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >=  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >=  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }	  if(consumed    >    0)    {    if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toChars();    pos    +=    c.length();    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
507	[BUG]  [BUGGY]  if(consumed  <  =  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  <  =  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  <  =  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }	  if(consumed    >    0)    {    if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toChars();    pos    +=    c.length();    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
508	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  pos  +=  c.length  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  pos  +=  c.length  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  pos  +=  c.length	  if(consumed!=    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    pos    +=    c.length();    }    	non-compiled	[CE]  ';'  expected	108	None	replace
509	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    IndexOutOfBoundsException    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  <  0)  {  out.write(c,  0,  pos);  out.write(c,  0,  pos);  }  else  {  out.write('n');  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	if(consumed  <  0)  {  out.write(c,  0,  pos);  out.write(c,  0,  pos);  }  else  {  out.write('n');  }	  out.write(c,    0,    pos);    out.write(c,    0,    pos);    	compilable	  [FE]  ComparisonFailure  	58	13	replace
510	[BUG]  [BUGGY]  if(consumed  <  0)  {  out.write(c,  0,  pos);  out.write(c,  0,  pos);  }  else  {  out.write('n');  }  [FE]  ComparisonFailure  [FE]    IndexOutOfBoundsException    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  <  0)  {  out.write(c,  0,  pos);  out.write(c,  0,  pos);  }  else  {  out.write('n');  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  <  0)  {  out.write(c,  0,  pos);  out.write(c,  0,  pos);  }  else  {  out.write('n');  }	  out.write(c,    0,    pos);    out.write(c,    0,    pos);    	compilable	  [FE]  ComparisonFailure  	58	13	replace
511	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      IndexOutOfBoundsException    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >  0)  {  out.write(c,  0,  pos);  out.write(c,  0,  pos);  }  else  {  out.write('n');  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	if(consumed  >  0)  {  out.write(c,  0,  pos);  out.write(c,  0,  pos);  }  else  {  out.write('n');  }	  out.write(c,    0,    pos);    out.write(c,    0,    pos);    	compilable	  [FE]  ComparisonFailure  	58	13	replace
512	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write(c,  0,  pos);  out.write(c,  0,  pos);  }  else  {  out.write('n');  }  [FE]  ComparisonFailure  [FE]      IndexOutOfBoundsException    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >  0)  {  out.write(c,  0,  pos);  out.write(c,  0,  pos);  }  else  {  out.write('n');  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >  0)  {  out.write(c,  0,  pos);  out.write(c,  0,  pos);  }  else  {  out.write('n');  }	  out.write(c,    0,    pos);    out.write(c,    0,    pos);    	compilable	  [FE]  ComparisonFailure  	58	13	replace
513	[BUG]  [BUGGY]  if(consumed!=  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  pos  +=  Character.charCount(c);  }  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed!=  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  pos  +=  Character.charCount(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed!=  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  pos  +=  Character.charCount(c);  }	          if(c!=    null)    {    for(int    i    =    0;    i    <    len;    i++)    {    pos    +=    Character.charCount(c);    }    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
514	[BUG]  [BUGGY]  pos  +=  Character.charCount(Character.charCount(c,  out));  [CE]  method  charCount  in  class  Character  cannot  be  applied  to  given  types;  [FE]                          ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  pos  +=  Character.charCount(Character.charCount(c,  out));  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	pos  +=  Character.charCount(Character.charCount(c,  out));	  pos    +=    Character.charCount(Character.charCount(c,    pos));    	non-compiled	[CE]  method  charCount  in  class  Character  cannot  be  applied  to  given  types;	96	None	replace
515	[BUG]  [BUGGY]  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pt,  out));  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pt,  out));  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pt,  out));  }	  if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    pos    +=    Character.charCount(Character.codePointAt(pt,    pos));    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
516	[BUG]  [BUGGY]  if(consumed!=  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  c.toCharArray();  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed!=  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  c.toCharArray();  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed!=  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  c.toCharArray();  }	  if(c!=    null)    {    for(int    pt    =    0;    pt    <    consumed;    pt++)    {    char[]    c    =    c.toCharArray();    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
517	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write(c,  0,  pos);  char[]  c  =  input.toChars(input,  pos);  out.write(c,  0,  pos);  }  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]            IndexOutOfBoundsException      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >  0)  {  out.write(c,  0,  pos);  char[]  c  =  input.toChars(input,  pos);  out.write(c,  0,  pos);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >  0)  {  out.write(c,  0,  pos);  char[]  c  =  input.toChars(input,  pos);  out.write(c,  0,  pos);  }	  out.write(c,    0,    pos);    char[]    c    =    input.toChars(input,    pos);    out.write(c,    0,    pos);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	102	None	replace
518	[BUG]  [BUGGY]  if(consumed  <  0)  {  out.write(c,  0,  pos);  char[]  c  =  input.toChars(input,  pos);  out.write(c,  0,  pos);  }  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]              IndexOutOfBoundsException      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  <  0)  {  out.write(c,  0,  pos);  char[]  c  =  input.toChars(input,  pos);  out.write(c,  0,  pos);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  <  0)  {  out.write(c,  0,  pos);  char[]  c  =  input.toChars(input,  pos);  out.write(c,  0,  pos);  }	  out.write(c,    0,    pos);    char[]    c    =    input.toChars(input,    pos);    out.write(c,    0,    pos);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	102	None	replace
519	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write(c,  0,  pos);  char[]  c  =  input.toChars(input,  pos);  out.write(c,  0,  len);  }  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                IndexOutOfBoundsException      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >  0)  {  out.write(c,  0,  pos);  char[]  c  =  input.toChars(input,  pos);  out.write(c,  0,  len);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >  0)  {  out.write(c,  0,  pos);  char[]  c  =  input.toChars(input,  pos);  out.write(c,  0,  len);  }	  out.write(c,    0,    pos);    char[]    c    =    input.toChars(input,    pos);    out.write(c,    0,    pos);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	102	None	replace
520	[BUG]  [BUGGY]  if(consume  >  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consume  >  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consume  >  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }	  if(consumed    ==    0)    {    if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toChars();    pos    +=    c.length();    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
521	[BUG]  [BUGGY]  OutputStream  out  =  input.outputStream();  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  OutputStream  out  =  input.outputStream();  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	OutputStream  out  =  input.outputStream();	  if(consumed    >    0)    {    out.write(c);    }    	non-compiled	[CE]  cannot  find  symbol	142	None	replace
522	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >  0)  {  for(pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >  0)  {  for(pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }	  if(consumed    >=    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
523	[BUG]  [BUGGY]  if(consumed  >=  0)  {  if(c!=  null)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c[pos]  =  c.charValue();  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >=  0)  {  if(c!=  null)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c[pos]  =  c.charValue();  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >=  0)  {  if(c!=  null)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c[pos]  =  c.charValue();  }	  if(consumed    >    0)    {    if(c!=    null)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    c[pos]    =    c.charValue();    }    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
524	[BUG]  [BUGGY]  if(consumed  <  =  0)  {  if(c!=  null)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c[pos]  =  c.charValue();  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  <  =  0)  {  if(c!=  null)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c[pos]  =  c.charValue();  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  <  =  0)  {  if(c!=  null)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c[pos]  =  c.charValue();  }	  if(consumed    >    0)    {    if(c!=    null)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    c[pos]    =    c.charValue();    }    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
525	[BUG]  [BUGGY]  if(consume  >  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consume  >  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consume  >  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }	  if(consumed    >=    0)    {    if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
526	[BUG]  [BUGGY]  timeout  [FE]    ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  pos  =  Character.charCount(Character.codePointAt(input,  pos));  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	pos    +=    Character.charCount(Character.codePointAt(input,    pos));    pos  =  Character.charCount(Character.codePointAt(input,  pos));	  	compilable	timeout	94	1	add
527	[BUG]  [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  pos  =  Character.charCount(Character.codePointAt(input,  pos));  timeout  [FE]    ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  pos  =  Character.charCount(Character.codePointAt(input,  pos));  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	pos    +=    Character.charCount(Character.codePointAt(input,    pos));    pos  =  Character.charCount(Character.codePointAt(input,  pos));	  	compilable	timeout	94	1	add
528	[BUG]  [BUGGY]          if(c!=    null)    {    out.write(c);    }    else    {    out.write('n');    }    if(c!=  null)  {  out.write(c);  }  else  {  out.write('n');  }  if(c!=  null)  {  out.write('n');  }  else  {  out.write(c);  }  else  {  out.write('n');  }  [CE]  'else'  without  'if'  [FE]    ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]          if(c!=    null)    {    out.write(c);    }    else    {    out.write('n');    }    if(c!=  null)  {  out.write(c);  }  else  {  out.write('n');  }  if(c!=  null)  {  out.write('n');  }  else  {  out.write(c);  }  else  {  out.write('n');  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	                if(c!=        null)        {        out.write(c);        }        else        {        out.write('n');        }        if(c!=    null)    {    out.write(c);    }    else    {    out.write('n');    }    if(c!=  null)  {  out.write('n');  }  else  {  out.write(c);  }  else  {  out.write('n');  }	  	non-compiled	[CE]  'else'  without  'if'	1	None	add
529	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]          if(c!=    null)    {    out.write(c);    }    else    {    out.write('n');    }    if(c!=  null)  {  out.write(c);  }  else  {  out.write('n');  }  if(c!=  null)  {  out.write('n');  }  else  {  out.write('n');  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	                if(c!=        null)        {        out.write(c);        }        else        {        out.write('n');        }        if(c!=    null)    {    out.write(c);    }    else    {    out.write('n');    }    if(c!=  null)  {  out.write('n');  }  else  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	1	13	add
530	[BUG]  [BUGGY]          if(c!=    null)    {    out.write(c);    }    else    {    out.write('n');    }    if(c!=  null)  {  out.write(c);  }  else  {  out.write('n');  }  if(c!=  null)  {  out.write('n');  }  else  {  out.write('n');  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]          if(c!=    null)    {    out.write(c);    }    else    {    out.write('n');    }    if(c!=  null)  {  out.write(c);  }  else  {  out.write('n');  }  if(c!=  null)  {  out.write('n');  }  else  {  out.write('n');  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	                if(c!=        null)        {        out.write(c);        }        else        {        out.write('n');        }        if(c!=    null)    {    out.write(c);    }    else    {    out.write('n');    }    if(c!=  null)  {  out.write('n');  }  else  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	1	13	add
531	[BUG]  [BUGGY]          if(c!=    null)    {    out.write(c);    }    else    {    out.write('n');    }    if(c!=  null)  {  out.write(c);  }  else  {  out.write('n');  }  If(c!=  null)  {  out.write(c);  }  else  {  out.write('n');  }  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]          if(c!=    null)    {    out.write(c);    }    else    {    out.write('n');    }    if(c!=  null)  {  out.write(c);  }  else  {  out.write('n');  }  If(c!=  null)  {  out.write(c);  }  else  {  out.write('n');  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	                if(c!=        null)        {        out.write(c);        }        else        {        out.write('n');        }        if(c!=    null)    {    out.write(c);    }    else    {    out.write('n');    }    If(c!=  null)  {  out.write(c);  }  else  {  out.write('n');  }	  	non-compiled	[CE]  ';'  expected	1	None	add
532	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pos  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >  0)  {  for(int  pos  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >  0)  {  for(int  pos  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }	  if(consumed    >=    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
533	[BUG]  [BUGGY]  pos  +=  Character.charCount(Character.charCountAt(c,  pos));  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  pos  +=  Character.charCount(Character.charCountAt(c,  pos));  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	pos  +=  Character.charCount(Character.charCountAt(c,  pos));	  pos    +=    Character.charCount(Character.codePointAt(input,    pos));    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
534	[BUG]  [BUGGY]  pos  +=  Character.charCount(Character.toChars(c));  [CE]  no  suitable  method  found  for  toChars(char[])  [FE]      ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  pos  +=  Character.charCount(Character.toChars(c));  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	pos  +=  Character.charCount(Character.toChars(c));	  pos    +=    Character.charCount(Character.codePointAt(input,    pos));    	non-compiled	[CE]  no  suitable  method  found  for  toChars(char[])	95	None	replace
535	[BUG]  [BUGGY]  pos  +=  Character.toChars(Character.codePointAt(c,  pos));  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]        ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  pos  +=  Character.toChars(Character.codePointAt(c,  pos));  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	pos  +=  Character.toChars(Character.codePointAt(c,  pos));	  pos    +=    Character.charCount(Character.codePointAt(input,    pos));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	95	None	replace
536	[BUG]  [BUGGY]  if(consumed  >=  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >=  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >=  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c);  }	  if(consumed    >    0)    {    if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
537	[BUG]  [BUGGY]  if(consumed  <  =  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  <  =  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  <  =  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c);  }	  if(consumed    >    0)    {    if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
538	[BUG]  [BUGGY]  if(consumed  ==  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  c.toCharArray();  if(c!=  null)  {  return;  }  [CE]  'else'  without  'if'  [FE]        ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  ==  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  c.toCharArray();  if(c!=  null)  {  return;  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  ==  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  c.toCharArray();  if(c!=  null)  {  return;  }	          if(c    ==    null)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    c.toCharArray();    if(c!=    null)    {    return;    }    	non-compiled	[CE]  'else'  without  'if'	158	None	replace
539	[BUG]  [BUGGY]  if(consumed  <  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  c.toCharArray();  if(c!=  null)  {  return;  }  [CE]  'else'  without  'if'  [FE]          ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  <  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  c.toCharArray();  if(c!=  null)  {  return;  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  <  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  c.toCharArray();  if(c!=  null)  {  return;  }	          if(c    ==    null)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    c.toCharArray();    if(c!=    null)    {    return;    }    	non-compiled	[CE]  'else'  without  'if'	158	None	replace
540	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  c.toCharArray();  if(c!=  null)  {  return;  }  [CE]  'else'  without  'if'  [FE]            ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  c.toCharArray();  if(c!=  null)  {  return;  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  c.toCharArray();  if(c!=  null)  {  return;  }	          if(c    ==    null)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    c.toCharArray();    if(c!=    null)    {    return;    }    	non-compiled	[CE]  'else'  without  'if'	158	None	replace
541	[BUG]  [BUGGY]  if(consumed  >=  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c[pos]);  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >=  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c[pos]);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >=  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c[pos]);  }	  if(consumed    >    0)    {    if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    out.write(c[pos]);    }    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
542	[BUG]  [BUGGY]  if(consumed  <  =  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c[pos]);  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  <  =  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c[pos]);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  <  =  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c[pos]);  }	  if(consumed    >    0)    {    if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    out.write(c[pos]);    }    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
543	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write(c,  0,  c.length);  char[]  c  =  Character.toChars(Character.toChars(input,  pos));  out.write(c,  0,  c.length);  }  else  {  out.write(  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >  0)  {  out.write(c,  0,  c.length);  char[]  c  =  Character.toChars(Character.toChars(input,  pos));  out.write(c,  0,  c.length);  }  else  {  out.write(  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >  0)  {  out.write(c,  0,  c.length);  char[]  c  =  Character.toChars(Character.toChars(input,  pos));  out.write(c,  0,  c.length);  }  else  {  out.write(	  out.write(c,    0,    c.length);    char[]    c    =    Character.toChars(Character.toChars(input,    pos));    out.write(c,    0,    c.length);    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
544	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pos  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >  0)  {  for(int  pos  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >  0)  {  for(int  pos  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }	  if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toChars();    pos    +=    c.length();    }    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
545	[BUG]  [BUGGY]  pos  +=  Character.charCount(c,  0,  len);  [CE]  method  charCount  in  class  Character  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  pos  +=  Character.charCount(c,  0,  len);  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	pos  +=  Character.charCount(c,  0,  len);	  pos    +=    Character.charCount(c,    len);    	non-compiled	[CE]  method  charCount  in  class  Character  cannot  be  applied  to  given  types;	99	None	replace
546	[BUG]  [BUGGY]  if(consumed  >=  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length();  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >=  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length();  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >=  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length();  }	  if(consumed    >    0)    {    if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    pos    +=    c.length();    }    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
547	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write(c,  0,  len);  char[]  c  =  input.toChars(c);  out.write(c,  0,  len);  }  else  {  out.write( " ");  }  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]          IndexOutOfBoundsException      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >  0)  {  out.write(c,  0,  len);  char[]  c  =  input.toChars(c);  out.write(c,  0,  len);  }  else  {  out.write( " ");  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >  0)  {  out.write(c,  0,  len);  char[]  c  =  input.toChars(c);  out.write(c,  0,  len);  }  else  {  out.write( " ");  }	  out.write(c,    0,    len);    char[]    c    =    input.toChars(c);    out.write(c,    0,    len);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	116	None	replace
548	[BUG]  [BUGGY]  if(consumed  ==  0)  {  out.write(c);  }  else  {  for(int  pt  =  0;  pt  <  len  -  2;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pos,  pos));  }  [CE]  'else'  without  'if'  [FE]          ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  ==  0)  {  out.write(c);  }  else  {  for(int  pt  =  0;  pt  <  len  -  2;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pos,  pos));  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  ==  0)  {  out.write(c);  }  else  {  for(int  pt  =  0;  pt  <  len  -  2;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pos,  pos));  }	  if(c!=    null)    {    out.write(c);    }    else    {    for(int    pt    =    0;    pt    <    len    -    2;    pt++)    {    pos    +=    Character.charCount(Character.codePointAt(pos,    pos));    }    	non-compiled	[CE]  'else'  without  'if'	42	None	replace
549	[BUG]  [BUGGY]  if(consumed!=  0)  {  out.write(c);  }  else  {  for(int  pt  =  0;  pt  <  len  -  2;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pos,  pos));  }  [CE]  'else'  without  'if'  [FE]            ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed!=  0)  {  out.write(c);  }  else  {  for(int  pt  =  0;  pt  <  len  -  2;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pos,  pos));  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed!=  0)  {  out.write(c);  }  else  {  for(int  pt  =  0;  pt  <  len  -  2;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pos,  pos));  }	  if(c!=    null)    {    out.write(c);    }    else    {    for(int    pt    =    0;    pt    <    len    -    2;    pt++)    {    pos    +=    Character.charCount(Character.codePointAt(pos,    pos));    }    	non-compiled	[CE]  'else'  without  'if'	42	None	replace
550	[BUG]  [BUGGY]  if(consumed  >  0)  {  if(c!=  null)  {  out.write('n');  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >  0)  {  if(c!=  null)  {  out.write('n');  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >  0)  {  if(c!=  null)  {  out.write('n');  }	          if(c!=    null)    {    out.write(c);    }    else    {    out.write('n');    }    if(c    >=    null)    {    out.write(c);    }    else    {    out.write('n');    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
551	[BUG]  [BUGGY]  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  c.length;  pt++)  {  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  c.length;  pt++)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  c.length;  pt++)  {  out.write(c);  }	  if(consumed    >=    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
552	[BUG]  [BUGGY]  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  pos;  pt++)  {  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  pos;  pt++)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  pos;  pt++)  {  out.write(c);  }	  if(consumed    >=    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
553	[BUG]  [BUGGY]  if(consumed!=  0)  {  for(int  pos  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed!=  0)  {  for(int  pos  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed!=  0)  {  for(int  pos  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  }	  if(consumed!=    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    }    	non-compiled	[CE]  illegal  start  of  expression	145	None	replace
554	[BUG]  [BUGGY]          if(c!=    null)    {    out.write(c);    }    else    {    out.write(c);    }    if(c  ==  null)  {  out.write(c);  }  else  {  out.write(c);  }  If(c!=  null)  {  out.write(c);  }  else  {  out.write(c);  }  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]          if(c!=    null)    {    out.write(c);    }    else    {    out.write(c);    }    if(c  ==  null)  {  out.write(c);  }  else  {  out.write(c);  }  If(c!=  null)  {  out.write(c);  }  else  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	                if(c!=        null)        {        out.write(c);        }        else        {        out.write(c);        }        if(c    ==    null)    {    out.write(c);    }    else    {    out.write(c);    }    If(c!=  null)  {  out.write(c);  }  else  {  out.write(c);  }	  	non-compiled	[CE]  ';'  expected	22	None	add
555	[BUG]  [BUGGY]          if(c!=    null)    {    out.write(c);    }    else    {    out.write(c);    }    if(c  ==  null)  {  out.write(c);  }  else  {  out.write(c);  }  if(c!=  null)  {  out.write(c;  }  else  {  out.write(c);  }  [CE]  ')'  expected  [FE]      ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]          if(c!=    null)    {    out.write(c);    }    else    {    out.write(c);    }    if(c  ==  null)  {  out.write(c);  }  else  {  out.write(c);  }  if(c!=  null)  {  out.write(c;  }  else  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	                if(c!=        null)        {        out.write(c);        }        else        {        out.write(c);        }        if(c    ==    null)    {    out.write(c);    }    else    {    out.write(c);    }    if(c!=  null)  {  out.write(c;  }  else  {  out.write(c);  }	  	non-compiled	[CE]  ')'  expected	22	None	add
556	[BUG]  [BUGGY]  out.write(c,  0,  c.length  +  1);  char[]  c  =  input.toChars(c);  out.write(c,  0,  c.length  +  1);  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]    IndexOutOfBoundsException    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,  0,  c.length  +  1);  char[]  c  =  input.toChars(c);  out.write(c,  0,  c.length  +  1);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,    0,    c.length    +    1);    char[]  c  =  input.toChars(c);  out.write(c,  0,  c.length  +  1);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	77	None	add
557	[BUG]  [BUGGY]  out.write(c,  0,  c.length  +  1);  Out.write(c,  0,  c.length  +  1);  [CE]  cannot  find  symbol  Out  [FE]      IndexOutOfBoundsException    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,  0,  c.length  +  1);  Out.write(c,  0,  c.length  +  1);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,    0,    c.length    +    1);    Out.write(c,  0,  c.length  +  1);	  	non-compiled	[CE]  cannot  find  symbol  Out	77	None	add
558	[BUG]  [BUGGY]  out.write(c,  0,  c.length  +  1);  char[]  c  =  input.getChars(pos,  pos);  out.write(c,  0,  c.length  +  1);  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]        IndexOutOfBoundsException    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,  0,  c.length  +  1);  char[]  c  =  input.getChars(pos,  pos);  out.write(c,  0,  c.length  +  1);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,    0,    c.length    +    1);    char[]  c  =  input.getChars(pos,  pos);  out.write(c,  0,  c.length  +  1);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	77	None	add
559	[BUG]  [BUGGY]  out.write(c,  0,  c.length  +  1);  char[]  c  =  input.getChars(pos,  pos  +  1);  out.write(c,  0,  c.length  +  1);  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]          IndexOutOfBoundsException    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,  0,  c.length  +  1);  char[]  c  =  input.getChars(pos,  pos  +  1);  out.write(c,  0,  c.length  +  1);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,    0,    c.length    +    1);    char[]  c  =  input.getChars(pos,  pos  +  1);  out.write(c,  0,  c.length  +  1);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	77	None	add
560	[BUG]  [BUGGY]  out.write(c,  0,  pos  +  1);  char[]  c  =  input.toChars(input,  pos  +  1);  out.write(c,  0,  pos  +  1);  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]    IndexOutOfBoundsException    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,  0,  pos  +  1);  char[]  c  =  input.toChars(input,  pos  +  1);  out.write(c,  0,  pos  +  1);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,    0,    pos    +    1);    char[]  c  =  input.toChars(input,  pos  +  1);  out.write(c,  0,  pos  +  1);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	16	None	add
561	[BUG]  [BUGGY]  out.write(c,  0,  pos  +  1);  char[]  c  =  input.toChars(input,  pos);  out.write(c,  0,  pos  +  1);  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]      IndexOutOfBoundsException    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,  0,  pos  +  1);  char[]  c  =  input.toChars(input,  pos);  out.write(c,  0,  pos  +  1);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,    0,    pos    +    1);    char[]  c  =  input.toChars(input,  pos);  out.write(c,  0,  pos  +  1);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	16	None	add
562	[BUG]  [BUGGY]  out.write(c,  0,  pos  +  1);  char[]  c  =  input.toChars(input);  out.write(c,  0,  pos  +  1);  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]        IndexOutOfBoundsException    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,  0,  pos  +  1);  char[]  c  =  input.toChars(input);  out.write(c,  0,  pos  +  1);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,    0,    pos    +    1);    char[]  c  =  input.toChars(input);  out.write(c,  0,  pos  +  1);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	16	None	add
563	[BUG]  [BUGGY]  out.write(c,  0,  pos  +  1);  char[]  c  =  input.toChars(c);  out.write(c,  0,  pos  +  1);  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]          IndexOutOfBoundsException    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,  0,  pos  +  1);  char[]  c  =  input.toChars(c);  out.write(c,  0,  pos  +  1);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,    0,    pos    +    1);    char[]  c  =  input.toChars(c);  out.write(c,  0,  pos  +  1);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	16	None	add
564	[BUG]  [BUGGY]  if(consumed  ==  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(c);  }  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  ==  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  ==  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(c);  }	          if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    pos    +=    Character.charCount(c);    }    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
565	[BUG]  [BUGGY]  out.write(c,  0,  c.length  +  2);  Out.write(c,  0,  c.length  +  2);  [CE]  cannot  find  symbol  Out  [FE]    IndexOutOfBoundsException    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,  0,  c.length  +  2);  Out.write(c,  0,  c.length  +  2);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,    0,    c.length    +    2);    Out.write(c,  0,  c.length  +  2);	  	non-compiled	[CE]  cannot  find  symbol  Out	81	None	add
566	[BUG]  [BUGGY]  [FE]  IndexOutOfBoundsException  [FE]      IndexOutOfBoundsException    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,  0,  c.length  +  2);  out.write(c,  0,  c.length  +  3);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	out.write(c,    0,    c.length    +    2);    out.write(c,  0,  c.length  +  3);	  	compilable	  [FE]  IndexOutOfBoundsException  	81	13	add
567	[BUG]  [BUGGY]  out.write(c,  0,  c.length  +  2);  out.write(c,  0,  c.length  +  3);  [FE]  IndexOutOfBoundsException  [FE]      IndexOutOfBoundsException    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,  0,  c.length  +  2);  out.write(c,  0,  c.length  +  3);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,    0,    c.length    +    2);    out.write(c,  0,  c.length  +  3);	  	compilable	  [FE]  IndexOutOfBoundsException  	81	13	add
568	[BUG]  [BUGGY]  out.write(c,  0,  c.length  +  2);  char[]  c  =  input.toChars(c);  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]        IndexOutOfBoundsException    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,  0,  c.length  +  2);  char[]  c  =  input.toChars(c);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,    0,    c.length    +    2);    char[]  c  =  input.toChars(c);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	81	None	add
569	[BUG]  [BUGGY]  out.write('ufffd');  [CE]  unclosed  character  literal  [FE]            IndexOutOfBoundsException      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write('ufffd');  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write('ufffd');	  out.write(c,    0,    pos);    char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    out.write(c,    0,    pos);    	non-compiled	[CE]  unclosed  character  literal	60	None	replace
570	[BUG]  [BUGGY]  if(consumed  <  =  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length;  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  <  =  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length;  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  <  =  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length;  }	  if(consumed    ==    0)    {    if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    pos    +=    c.length;    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
571	[BUG]  [BUGGY]  if(consume  >  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length;  }  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consume  >  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length;  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consume  >  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length;  }	  if(consumed    ==    0)    {    if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    pos    +=    c.length;    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
572	[BUG]  [BUGGY]  if(consumed  >=  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length;  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >=  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length;  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >=  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length;  }	  if(consumed    <    0)    {    if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    pos    +=    c.length;    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
573	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write(c,  0,  c.length);  char[]  c  =  Character.toChars(Character.toChars(c,  pos));  out.write(c,  0,  c.length);  }  else  {  out.write(  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >  0)  {  out.write(c,  0,  c.length);  char[]  c  =  Character.toChars(Character.toChars(c,  pos));  out.write(c,  0,  c.length);  }  else  {  out.write(  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >  0)  {  out.write(c,  0,  c.length);  char[]  c  =  Character.toChars(Character.toChars(c,  pos));  out.write(c,  0,  c.length);  }  else  {  out.write(	  out.write(c,    0,    c.length);    char[]    c    =    Character.toChars(Character.toChars(c,    pos));    out.write(c,    0,    c.length);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
574	[BUG]  [BUGGY]  [FE]  IndexOutOfBoundsException  [FE]    IndexOutOfBoundsException    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,    0,    pos);    out.write(c,  0,  pos);  if(consumed  >  0)  {  out.write(c,  0,  pos);  out.write(c,  0,  pos);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	out.write(c,        0,        pos);        out.write(c,    0,    pos);    if(consumed  >  0)  {  out.write(c,  0,  pos);  out.write(c,  0,  pos);  }	  	compilable	  [FE]  IndexOutOfBoundsException  	57	12	add
575	[BUG]  [BUGGY]  out.write(c,    0,    pos);    out.write(c,  0,  pos);  if(consumed  >  0)  {  out.write(c,  0,  pos);  out.write(c,  0,  pos);  }  [FE]  IndexOutOfBoundsException  [FE]    IndexOutOfBoundsException    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,    0,    pos);    out.write(c,  0,  pos);  if(consumed  >  0)  {  out.write(c,  0,  pos);  out.write(c,  0,  pos);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,        0,        pos);        out.write(c,    0,    pos);    if(consumed  >  0)  {  out.write(c,  0,  pos);  out.write(c,  0,  pos);  }	  	compilable	  [FE]  IndexOutOfBoundsException  	57	12	add
576	[BUG]  [BUGGY]  [FE]  IndexOutOfBoundsException  [FE]      IndexOutOfBoundsException    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,    0,    pos);    out.write(c,  0,  pos);  if(consumed  <  0)  {  out.write(c,  0,  pos);  out.write(c,  0,  pos);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	out.write(c,        0,        pos);        out.write(c,    0,    pos);    if(consumed  <  0)  {  out.write(c,  0,  pos);  out.write(c,  0,  pos);  }	  	compilable	  [FE]  IndexOutOfBoundsException  	57	12	add
577	[BUG]  [BUGGY]  out.write(c,    0,    pos);    out.write(c,  0,  pos);  if(consumed  <  0)  {  out.write(c,  0,  pos);  out.write(c,  0,  pos);  }  [FE]  IndexOutOfBoundsException  [FE]      IndexOutOfBoundsException    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,    0,    pos);    out.write(c,  0,  pos);  if(consumed  <  0)  {  out.write(c,  0,  pos);  out.write(c,  0,  pos);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,        0,        pos);        out.write(c,    0,    pos);    if(consumed  <  0)  {  out.write(c,  0,  pos);  out.write(c,  0,  pos);  }	  	compilable	  [FE]  IndexOutOfBoundsException  	57	12	add
578	[BUG]  [BUGGY]  out.copyCurrentSegment(c,  0,  len);  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.copyCurrentSegment(c,  0,  len);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.copyCurrentSegment(c,  0,  len);	  out.write(c,    0,    consumed);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
579	[BUG]  [BUGGY]  if(consumed  <  0)  {  if(c!=  null)  {  out.write('n');  }  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  <  0)  {  if(c!=  null)  {  out.write('n');  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  <  0)  {  if(c!=  null)  {  out.write('n');  }	          if(c!=    null)    {    out.write(c);    }    else    {    out.write('n');    }    if(c!=    null)    {    out.write('n');    }    else    {    out.write('n');    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
580	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c!=  null)  {  out.write(c,  0,  c.length);  out.write(c,  0,  c.length);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	if(c!=  null)  {  out.write(c,  0,  c.length);  out.write(c,  0,  c.length);  }	  out.write(c,    0,    c.length);    out.write(c,    0,    c.length);    	compilable	  [FE]  ComparisonFailure  	27	13	replace
581	[BUG]  [BUGGY]  if(c!=  null)  {  out.write(c,  0,  c.length);  out.write(c,  0,  c.length);  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c!=  null)  {  out.write(c,  0,  c.length);  out.write(c,  0,  c.length);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c!=  null)  {  out.write(c,  0,  c.length);  out.write(c,  0,  c.length);  }	  out.write(c,    0,    c.length);    out.write(c,    0,    c.length);    	compilable	  [FE]  ComparisonFailure  	27	13	replace
582	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c!=  null)  {  out.write(c,  0,  c.length);  out.write(c,  0,  c.length);  }  else  {  out.write('n');  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	if(c!=  null)  {  out.write(c,  0,  c.length);  out.write(c,  0,  c.length);  }  else  {  out.write('n');  }	  out.write(c,    0,    c.length);    out.write(c,    0,    c.length);    	compilable	  [FE]  ComparisonFailure  	27	13	replace
583	[BUG]  [BUGGY]  if(c!=  null)  {  out.write(c,  0,  c.length);  out.write(c,  0,  c.length);  }  else  {  out.write('n');  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c!=  null)  {  out.write(c,  0,  c.length);  out.write(c,  0,  c.length);  }  else  {  out.write('n');  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c!=  null)  {  out.write(c,  0,  c.length);  out.write(c,  0,  c.length);  }  else  {  out.write('n');  }	  out.write(c,    0,    c.length);    out.write(c,    0,    c.length);    	compilable	  [FE]  ComparisonFailure  	27	13	replace
584	[BUG]  [BUGGY]  OutputFactory  factory  =  input.getOutputFactory();  [CE]  cannot  find  symbol  [FE]        ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  OutputFactory  factory  =  input.getOutputFactory();  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	OutputFactory  factory  =  input.getOutputFactory();	          if(c!=    null)    {    out.write(c);    }    else    {    out.write(c);    }    if(c    >>    null)    {    out.write(c);    }    else    {    out.write(c);    }    	non-compiled	[CE]  cannot  find  symbol	179	None	replace
585	[BUG]  [BUGGY]  out.write(c,  0,  len);  char[]  c  =  Character.toChars(Character.codePointAt(pos,  consumed));  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]        IndexOutOfBoundsException      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,  0,  len);  char[]  c  =  Character.toChars(Character.codePointAt(pos,  consumed));  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,  0,  len);  char[]  c  =  Character.toChars(Character.codePointAt(pos,  consumed));	  out.write(c,    0,    len);    char[]    c    =    Character.toChars(Character.codePointAt(pos,    pos));    	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	177	None	replace
586	[BUG]  [BUGGY]  timeout  [FE]    ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  ==  0)  {  out.write(c);  }  while(consumed  ==  0)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	if(consumed    ==    0)    {    out.write(c);    }    while(consumed  ==  0)  {  out.write(c);  }	  	compilable	timeout	137	1	add
587	[BUG]  [BUGGY]  if(consumed  ==  0)  {  out.write(c);  }  while(consumed  ==  0)  {  out.write(c);  }  timeout  [FE]    ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  ==  0)  {  out.write(c);  }  while(consumed  ==  0)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed    ==    0)    {    out.write(c);    }    while(consumed  ==  0)  {  out.write(c);  }	  	compilable	timeout	137	1	add
588	[BUG]  [BUGGY]  if(consumed!=  0)  {  for(int  pt  =  0;  pt  <  consumeLen;  pt++)  {  char[]  c  =  c.toCharArray();  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed!=  0)  {  for(int  pt  =  0;  pt  <  consumeLen;  pt++)  {  char[]  c  =  c.toCharArray();  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed!=  0)  {  for(int  pt  =  0;  pt  <  consumeLen;  pt++)  {  char[]  c  =  c.toCharArray();  }	  if(c!=    null)    {    for(int    pt    =    0;    pt    <    consumeLen;    pt++)    {    char[]    c    =    c.toCharArray();    }    	non-compiled	[CE]  illegal  start  of  expression	174	None	replace
589	[BUG]  [BUGGY]  if(consumed!=  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed!=  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed!=  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  out.write(c);  }	  if(c!=    null)    {    for(int    pt    =    0;    pt    <    consumed;    pt++)    {    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
590	[BUG]  [BUGGY]  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  out.write(c);  }	  if(c!=    null)    {    for(int    pt    =    0;    pt    <    consumed;    pt++)    {    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
591	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pos  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >  0)  {  for(int  pos  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >  0)  {  for(int  pos  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  }	  if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    }    	non-compiled	[CE]  illegal  start  of  expression	146	None	replace
592	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write(c,  0,  len);  char[]  c  =  input.getChars(pos,  pos);  out.write(c,  0,  len);  }  else  {  out.write( " ");  }  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]        IndexOutOfBoundsException      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >  0)  {  out.write(c,  0,  len);  char[]  c  =  input.getChars(pos,  pos);  out.write(c,  0,  len);  }  else  {  out.write( " ");  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >  0)  {  out.write(c,  0,  len);  char[]  c  =  input.getChars(pos,  pos);  out.write(c,  0,  len);  }  else  {  out.write( " ");  }	  out.write(c,    0,    len);    char[]    c    =    input.getChars(pos,    pos);    out.write(c,    0,    len);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	115	None	replace
593	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write(c,  0,  len);  char[]  c  =  input.getChars(pos,  pos);  out.write(c,  0,  len);  }  else  {  [CE]  'else'  without  'if'  [FE]          IndexOutOfBoundsException      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >  0)  {  out.write(c,  0,  len);  char[]  c  =  input.getChars(pos,  pos);  out.write(c,  0,  len);  }  else  {  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >  0)  {  out.write(c,  0,  len);  char[]  c  =  input.getChars(pos,  pos);  out.write(c,  0,  len);  }  else  {	  out.write(c,    0,    len);    char[]    c    =    input.getChars(pos,    pos);    out.write(c,    0,    len);    	non-compiled	[CE]  'else'  without  'if'	115	None	replace
594	[BUG]  [BUGGY]          if(c!=    null)    {    out.write(c);    }    if(c  ==  null)  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }  if(c  ==  null)  {  out.write(c);  }  if(c  >=  null)  {  out.write(c);  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]    ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]          if(c!=    null)    {    out.write(c);    }    if(c  ==  null)  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }  if(c  ==  null)  {  out.write(c);  }  if(c  >=  null)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	                if(c!=        null)        {        out.write(c);        }        if(c    ==    null)    {    out.write(c);    }    if(c!=  null)  {  out.write(c);  }  if(c  ==  null)  {  out.write(c);  }  if(c  >=  null)  {  out.write(c);  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	10	None	add
595	[BUG]  [BUGGY]  if(consumed!=  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c[pos]  =  Character.charValue(c);  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed!=  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c[pos]  =  Character.charValue(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed!=  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c[pos]  =  Character.charValue(c);  }	  if(c!=    null)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    c[pos]    =    Character.charValue(c);    }    	non-compiled	[CE]  illegal  start  of  expression	164	None	replace
596	[BUG]  [BUGGY]  if(consumed  >=  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c[pos]  =  Character.charValue(c);  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >=  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c[pos]  =  Character.charValue(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >=  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c[pos]  =  Character.charValue(c);  }	  if(c!=    null)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    c[pos]    =    Character.charValue(c);    }    	non-compiled	[CE]  illegal  start  of  expression	164	None	replace
597	[BUG]  [BUGGY]  out.write(c,  pos,  len);  char[]  c  =  Character.toChars(Character.toChars(input,  pos));  out.write(c,  pos,  len);  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]    IndexOutOfBoundsException    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,  pos,  len);  char[]  c  =  Character.toChars(Character.toChars(input,  pos));  out.write(c,  pos,  len);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,    pos,    len);    char[]  c  =  Character.toChars(Character.toChars(input,  pos));  out.write(c,  pos,  len);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	36	None	add
598	[BUG]  [BUGGY]  out.write(c,  pos,  len);  char[]  c  =  Character.toChars(Character.toChars(input));  out.write(c,  pos,  len);  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]      IndexOutOfBoundsException    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,  pos,  len);  char[]  c  =  Character.toChars(Character.toChars(input));  out.write(c,  pos,  len);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,    pos,    len);    char[]  c  =  Character.toChars(Character.toChars(input));  out.write(c,  pos,  len);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	36	None	add
599	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write(c,  0,  len);  char[]  c  =  input.getChars(pos,  pos  +  1);  out.write(c,  0,  len);  }  else  {  out.write( " ");  }  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]              IndexOutOfBoundsException      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >  0)  {  out.write(c,  0,  len);  char[]  c  =  input.getChars(pos,  pos  +  1);  out.write(c,  0,  len);  }  else  {  out.write( " ");  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >  0)  {  out.write(c,  0,  len);  char[]  c  =  input.getChars(pos,  pos  +  1);  out.write(c,  0,  len);  }  else  {  out.write( " ");  }	  out.write(c,    0,    len);    char[]    c    =    input.getChars(pos,    pos    +    1);    out.write(c,    0,    len);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	118	None	replace
600	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }	  if(c!=    null)    {    for(int    pt    =    0;    pt    <    consumed;    pt++)    {    char[]    c    =    c.toCharArray();    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	153	None	replace
601	[BUG]  [BUGGY]  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }	  if(c!=    null)    {    for(int    pt    =    0;    pt    <    consumed;    pt++)    {    char[]    c    =    c.toCharArray();    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	153	None	replace
602	[BUG]  [BUGGY]  if(consumed!=  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed!=  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed!=  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }	  if(c!=    null)    {    for(int    pt    =    0;    pt    <    consumed;    pt++)    {    char[]    c    =    c.toCharArray();    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	153	None	replace
603	[BUG]  [BUGGY]  if(consumed  ==  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  ==  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  ==  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }	  if(c!=    null)    {    for(int    pt    =    0;    pt    <    consumed;    pt++)    {    char[]    c    =    c.toCharArray();    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	153	None	replace
604	[BUG]  [BUGGY]  out.write(c,  0,  len);  pos  =  Character.toChars(Character.codePointAt(consumed,  pos));  out.write(c,  0,  pos);  [CE]  no  suitable  method  found  for  codePointAt(int,int)  [FE]                IndexOutOfBoundsException      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,  0,  len);  pos  =  Character.toChars(Character.codePointAt(consumed,  pos));  out.write(c,  0,  pos);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,  0,  len);  pos  =  Character.toChars(Character.codePointAt(consumed,  pos));  out.write(c,  0,  pos);	  out.write(c,    0,    pos);    char[]    c    =    Character.toChars(Character.codePointAt(consumed,    pos));    out.write(c,    0,    pos);    	non-compiled	[CE]  no  suitable  method  found  for  codePointAt(int,int)	62	None	replace
605	[BUG]  [BUGGY]  out.write(c,  0,  len);  pos  =  Character.toChars(Character.codePointAt(consumed,  pos));  [CE]  no  suitable  method  found  for  codePointAt(int,int)  [FE]                  IndexOutOfBoundsException      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,  0,  len);  pos  =  Character.toChars(Character.codePointAt(consumed,  pos));  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,  0,  len);  pos  =  Character.toChars(Character.codePointAt(consumed,  pos));	  out.write(c,    0,    pos);    char[]    c    =    Character.toChars(Character.codePointAt(consumed,    pos));    out.write(c,    0,    pos);    	non-compiled	[CE]  no  suitable  method  found  for  codePointAt(int,int)	62	None	replace
606	[BUG]  [BUGGY]  out.copyCurrentSegments(c,  pos,  len);  [CE]  cannot  find  symbol  [FE]    IndexOutOfBoundsException    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.copyCurrentSegments(c,  pos,  len);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.copyCurrentSegments(c,  pos,  len);	  out.write(c,    pos,    len);    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
607	[BUG]  [BUGGY]  OutputStream  out  =  stream.readLine();  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  OutputStream  out  =  stream.readLine();  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	OutputStream  out  =  stream.readLine();	  OutputStream    out    =    outputStream.readLine();    	non-compiled	[CE]  cannot  find  symbol	136	None	replace
608	[BUG]  [BUGGY]  OutputStream  out  =  this.out.readLine();  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  OutputStream  out  =  this.out.readLine();  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	OutputStream  out  =  this.out.readLine();	  OutputStream    out    =    outputStream.readLine();    	non-compiled	[CE]  cannot  find  symbol	136	None	replace
609	[BUG]  [BUGGY]  pos  +=  Character.charCount(c,  offset);  [CE]  cannot  find  symbol  offset  [FE]                      ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  pos  +=  Character.charCount(c,  offset);  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	pos  +=  Character.charCount(c,  offset);	  pos    +=    Character.charCount(c,    consume);    	non-compiled	[CE]  cannot  find  symbol  offset	93	None	replace
610	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write(c,  0,  pos);  char[]  c  =  input.toChars(c);  out.write(c,  0,  pos);  }  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]        IndexOutOfBoundsException      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >  0)  {  out.write(c,  0,  pos);  char[]  c  =  input.toChars(c);  out.write(c,  0,  pos);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >  0)  {  out.write(c,  0,  pos);  char[]  c  =  input.toChars(c);  out.write(c,  0,  pos);  }	  out.write(c,    0,    pos);    char[]    c    =    input.toChars(c);    out.write(c,    0,    pos);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	100	None	replace
611	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write(c,  0,  pos);  char[]  c  =  input.toChars(c);  out.write(c,  0,  pos);  }  else  {  out.write('n');  }  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]          IndexOutOfBoundsException      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >  0)  {  out.write(c,  0,  pos);  char[]  c  =  input.toChars(c);  out.write(c,  0,  pos);  }  else  {  out.write('n');  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >  0)  {  out.write(c,  0,  pos);  char[]  c  =  input.toChars(c);  out.write(c,  0,  pos);  }  else  {  out.write('n');  }	  out.write(c,    0,    pos);    char[]    c    =    input.toChars(c);    out.write(c,    0,    pos);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	100	None	replace
612	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write(c,  0,  pos);  char[]  c  =  input.toChars(c);  out.write(c,  0,  pos);  }  else  {  out.write( " ");  }  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]            IndexOutOfBoundsException      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >  0)  {  out.write(c,  0,  pos);  char[]  c  =  input.toChars(c);  out.write(c,  0,  pos);  }  else  {  out.write( " ");  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >  0)  {  out.write(c,  0,  pos);  char[]  c  =  input.toChars(c);  out.write(c,  0,  pos);  }  else  {  out.write( " ");  }	  out.write(c,    0,    pos);    char[]    c    =    input.toChars(c);    out.write(c,    0,    pos);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	100	None	replace
613	[BUG]  [BUGGY]  out.write(c,  pos,  result);  [CE]  cannot  find  symbol  result  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,  pos,  result);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,  pos,  result);	  out.write(c,    pos,    consume);    	non-compiled	[CE]  cannot  find  symbol  result	35	None	replace
614	[BUG]  [BUGGY]  if(consumed  <  =  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  <  =  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  <  =  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c);  }	  if(consumed    ==    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
615	[BUG]  [BUGGY]  if(consumed  ==  0)  {  for(pos  =  0;  pos  <  len;  pos++)  {  c[pos]  =  c.charValue();  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  ==  0)  {  for(pos  =  0;  pos  <  len;  pos++)  {  c[pos]  =  c.charValue();  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  ==  0)  {  for(pos  =  0;  pos  <  len;  pos++)  {  c[pos]  =  c.charValue();  }	  if(c!=    null)    {    for(pos    =    0;    pos    <    len;    pos++)    {    c[pos]    =    c.charValue();    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
616	[BUG]  [BUGGY]  if(consumed  >=  0)  {  for(pos  =  0;  pos  <  len;  pos++)  {  c[pos]  =  c.charValue();  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >=  0)  {  for(pos  =  0;  pos  <  len;  pos++)  {  c[pos]  =  c.charValue();  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >=  0)  {  for(pos  =  0;  pos  <  len;  pos++)  {  c[pos]  =  c.charValue();  }	  if(c!=    null)    {    for(pos    =    0;    pos    <    len;    pos++)    {    c[pos]    =    c.charValue();    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
617	[BUG]  [BUGGY]  pos  >=  len)  {  for(pos  =  0;  pos  <  len;  pos++)  {  c[pos]  =  c.charValue();  }  [CE]  not  a  statement  [FE]                      ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  pos  >=  len)  {  for(pos  =  0;  pos  <  len;  pos++)  {  c[pos]  =  c.charValue();  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	pos  >=  len)  {  for(pos  =  0;  pos  <  len;  pos++)  {  c[pos]  =  c.charValue();  }	  if(c!=    null)    {    for(pos    =    0;    pos    <    len;    pos++)    {    c[pos]    =    c.charValue();    }    	non-compiled	[CE]  not  a  statement	72	None	replace
618	[BUG]  [BUGGY]  if(consumed  <  0)  {  for(int  pos  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  <  0)  {  for(int  pos  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  <  0)  {  for(int  pos  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }	  if(consumed    <    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	152	None	replace
619	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pos  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length();  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >  0)  {  for(int  pos  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length();  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >  0)  {  for(int  pos  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length();  }	  if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    pos    +=    c.length();    }    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
620	[BUG]  [BUGGY]  pos  +=  Character.charCount(c,  offset,  consumed);  [CE]  cannot  find  symbol  offset  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  pos  +=  Character.charCount(c,  offset,  consumed);  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	pos  +=  Character.charCount(c,  offset,  consumed);	  pos    +=    Character.charCount(c,    consumed);    	non-compiled	[CE]  cannot  find  symbol  offset	92	None	replace
621	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write(c,  0,  len);  char[]  c  =  input.toChars(input,  pos);  out.write(c,  0,  len);  }  else  {  out.write( " ");  }  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]            IndexOutOfBoundsException      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >  0)  {  out.write(c,  0,  len);  char[]  c  =  input.toChars(input,  pos);  out.write(c,  0,  len);  }  else  {  out.write( " ");  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >  0)  {  out.write(c,  0,  len);  char[]  c  =  input.toChars(input,  pos);  out.write(c,  0,  len);  }  else  {  out.write( " ");  }	  out.write(c,    0,    len);    char[]    c    =    input.toChars(input,    pos);    out.write(c,    0,    len);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	117	None	replace
622	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]          if(c!=    null)    {    out.write(c);    }    if(c!=  null)  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }  if(c  ==  null)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	                if(c!=        null)        {        out.write(c);        }        if(c!=    null)    {    out.write(c);    }    if(c!=  null)  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }  if(c  ==  null)  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	8	13	add
623	[BUG]  [BUGGY]          if(c!=    null)    {    out.write(c);    }    if(c!=  null)  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }  if(c  ==  null)  {  out.write(c);  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]          if(c!=    null)    {    out.write(c);    }    if(c!=  null)  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }  if(c  ==  null)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	                if(c!=        null)        {        out.write(c);        }        if(c!=    null)    {    out.write(c);    }    if(c!=  null)  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }  if(c  ==  null)  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	8	13	add
624	[BUG]  [BUGGY]  if(consumed  <  0)  {  for(int  pos  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length();  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  <  0)  {  for(int  pos  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length();  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  <  0)  {  for(int  pos  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length();  }	  if(consumed    >=    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    pos    +=    c.length();    }    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
625	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write(c,  0,  c.length);  char[]  c  =  Character.toChars(Character.toChars(c));  out.write(c,  0,  c.length);  }  else  {  out.write('n');  }  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]          ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >  0)  {  out.write(c,  0,  c.length);  char[]  c  =  Character.toChars(Character.toChars(c));  out.write(c,  0,  c.length);  }  else  {  out.write('n');  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >  0)  {  out.write(c,  0,  c.length);  char[]  c  =  Character.toChars(Character.toChars(c));  out.write(c,  0,  c.length);  }  else  {  out.write('n');  }	  out.write(c,    0,    c.length);    char[]    c    =    Character.toChars(Character.toChars(c));    out.write(c,    0,    c.length);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	105	None	replace
626	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write(c);  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >  0)  {  out.write(c);  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >  0)  {  out.write(c);  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }	  if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
627	[BUG]  [BUGGY]  if(consumed!=  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  c.toCharArray();  pos  +=  Character.charCount(c);  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed!=  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  c.toCharArray();  pos  +=  Character.charCount(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed!=  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  c.toCharArray();  pos  +=  Character.charCount(c);  }	          if(c!=    null)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    c.toCharArray();    pos    +=    Character.charCount(c);    }    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
628	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  c.toCharArray();  pos  +=  Character.charCount(c);  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  c.toCharArray();  pos  +=  Character.charCount(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  c.toCharArray();  pos  +=  Character.charCount(c);  }	          if(c!=    null)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    c.toCharArray();    pos    +=    Character.charCount(c);    }    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
629	[BUG]  [BUGGY]  out.write(c,  0,  c.length  -  1);  char[]  c  =  Character.toChars(Character.toChars(c));  out.write(c,  0,  c.length  -  1);  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]    ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,  0,  c.length  -  1);  char[]  c  =  Character.toChars(Character.toChars(c));  out.write(c,  0,  c.length  -  1);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,    0,    c.length    -    1);    char[]  c  =  Character.toChars(Character.toChars(c));  out.write(c,  0,  c.length  -  1);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	79	None	add
630	[BUG]  [BUGGY]  out.write(c,  0,  c.length  -  1);  char[]  c  =  Character.toChars(Character.toChars(input,  pos));  out.write(c,  0,  c.length  -  1);  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]      ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,  0,  c.length  -  1);  char[]  c  =  Character.toChars(Character.toChars(input,  pos));  out.write(c,  0,  c.length  -  1);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,    0,    c.length    -    1);    char[]  c  =  Character.toChars(Character.toChars(input,  pos));  out.write(c,  0,  c.length  -  1);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	79	None	add
631	[BUG]  [BUGGY]  out.write(c,    0,    len);    out.write(c,  0,  len);  if(consumed  >  0)  {  out.write(c,  0,  len);  out.write(c,  0,  len);  }  else  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  pos  +=  Character.charCount(pt);  }  [CE]  'else'  without  'if'  [FE]    IndexOutOfBoundsException    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,    0,    len);    out.write(c,  0,  len);  if(consumed  >  0)  {  out.write(c,  0,  len);  out.write(c,  0,  len);  }  else  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  pos  +=  Character.charCount(pt);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,        0,        len);        out.write(c,    0,    len);    if(consumed  >  0)  {  out.write(c,  0,  len);  out.write(c,  0,  len);  }  else  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  pos  +=  Character.charCount(pt);  }	  	non-compiled	[CE]  'else'  without  'if'	86	None	add
632	[BUG]  [BUGGY]  [FE]  IndexOutOfBoundsException  [FE]      IndexOutOfBoundsException    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,    0,    len);    out.write(c,  0,  len);  if(consumed  >  0)  {  out.write(c,  0,  len);  out.write(c,  0,  len);  }  else  {  out.write('n');  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	out.write(c,        0,        len);        out.write(c,    0,    len);    if(consumed  >  0)  {  out.write(c,  0,  len);  out.write(c,  0,  len);  }  else  {  out.write('n');  }	  	compilable	  [FE]  IndexOutOfBoundsException  	86	13	add
633	[BUG]  [BUGGY]  out.write(c,    0,    len);    out.write(c,  0,  len);  if(consumed  >  0)  {  out.write(c,  0,  len);  out.write(c,  0,  len);  }  else  {  out.write('n');  }  [FE]  IndexOutOfBoundsException  [FE]      IndexOutOfBoundsException    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,    0,    len);    out.write(c,  0,  len);  if(consumed  >  0)  {  out.write(c,  0,  len);  out.write(c,  0,  len);  }  else  {  out.write('n');  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,        0,        len);        out.write(c,    0,    len);    if(consumed  >  0)  {  out.write(c,  0,  len);  out.write(c,  0,  len);  }  else  {  out.write('n');  }	  	compilable	  [FE]  IndexOutOfBoundsException  	86	13	add
634	[BUG]  [BUGGY]  out.write(c,  0,  input.length);  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  [CE]  cannot  find  symbol  length  [FE]            ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,  0,  input.length);  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,  0,  input.length);  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));	  out.write(c,    0,    c.length);    char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    	non-compiled	[CE]  cannot  find  symbol  length	29	None	replace
635	[BUG]  [BUGGY]  out.write(c,  0,  input.length);  [CE]  cannot  find  symbol  length  [FE]              ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,  0,  input.length);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,  0,  input.length);	  out.write(c,    0,    c.length);    char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    	non-compiled	[CE]  cannot  find  symbol  length	29	None	replace
636	[BUG]  [BUGGY]  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length();  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length();  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length();  }	  if(c!=    null)    {    for(int    pt    =    0;    pt    <    consumed;    pt++)    {    char[]    c    =    c.toCharArray();    pos    +=    c.length();    }    	non-compiled	[CE]  illegal  start  of  expression	160	None	replace
637	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length();  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length();  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length();  }	  if(c!=    null)    {    for(int    pt    =    0;    pt    <    consumed;    pt++)    {    char[]    c    =    c.toCharArray();    pos    +=    c.length();    }    	non-compiled	[CE]  illegal  start  of  expression	160	None	replace
638	[BUG]  [BUGGY]  if(consumed!=  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length();  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed!=  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length();  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed!=  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length();  }	  if(c!=    null)    {    for(int    pt    =    0;    pt    <    consumed;    pt++)    {    char[]    c    =    c.toCharArray();    pos    +=    c.length();    }    	non-compiled	[CE]  illegal  start  of  expression	160	None	replace
639	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >=  0)  {  out.write(c);  }  if(consumed  <  0)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	if(consumed    >=    0)    {    out.write(c);    }    if(consumed  <  0)  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	139	13	add
640	[BUG]  [BUGGY]  if(consumed  >=  0)  {  out.write(c);  }  if(consumed  <  0)  {  out.write(c);  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >=  0)  {  out.write(c);  }  if(consumed  <  0)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed    >=    0)    {    out.write(c);    }    if(consumed  <  0)  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	139	13	add
641	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >  0)  {  out.write(c);  }  while(consumed  >  0)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	if(consumed    >    0)    {    out.write(c);    }    while(consumed  >  0)  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	141	1	add
642	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write(c);  }  while(consumed  >  0)  {  out.write(c);  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >  0)  {  out.write(c);  }  while(consumed  >  0)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed    >    0)    {    out.write(c);    }    while(consumed  >  0)  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	141	1	add
643	[BUG]  [BUGGY]  if(c!=  null  &&  c.length  >  0)  {  out.write(c,  consumed);  }  [CE]  no  suitable  method  found  for  write(char[],int)  [FE]    ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c!=  null  &&  c.length  >  0)  {  out.write(c,  consumed);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c!=  null  &&  c.length  >  0)  {  out.write(c,  consumed);  }	  if(c!=    null    &&    c.length    >    0)    {    out.write(c);    }    	non-compiled	[CE]  no  suitable  method  found  for  write(char[],int)	155	None	replace
644	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c!=  null  &&  c.length  >  0)  {  out.write(c,  0,  consumed);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	if(c!=  null  &&  c.length  >  0)  {  out.write(c,  0,  consumed);  }	  if(c!=    null    &&    c.length    >    0)    {    out.write(c);    }    	compilable	  [FE]  ComparisonFailure  	155	13	replace
645	[BUG]  [BUGGY]  if(c!=  null  &&  c.length  >  0)  {  out.write(c,  0,  consumed);  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c!=  null  &&  c.length  >  0)  {  out.write(c,  0,  consumed);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c!=  null  &&  c.length  >  0)  {  out.write(c,  0,  consumed);  }	  if(c!=    null    &&    c.length    >    0)    {    out.write(c);    }    	compilable	  [FE]  ComparisonFailure  	155	13	replace
646	[BUG]  [BUGGY]  if(consumed  <  0)  {  for(int  pos  =  0;  pos  <  consumed;  pos++)  {  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  <  0)  {  for(int  pos  =  0;  pos  <  consumed;  pos++)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  <  0)  {  for(int  pos  =  0;  pos  <  consumed;  pos++)  {  out.write(c);  }	  if(consumed    <    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
647	[BUG]  [BUGGY]  if(consumed!=  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  char[]  c  =  c.toCharArray();  pos  +=  Character.charCount(c);  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed!=  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  char[]  c  =  c.toCharArray();  pos  +=  Character.charCount(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed!=  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  char[]  c  =  c.toCharArray();  pos  +=  Character.charCount(c);  }	          if(c!=    null)    {    for(int    i    =    0;    i    <    len;    i++)    {    char[]    c    =    c.toCharArray();    pos    +=    Character.charCount(c);    }    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
648	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  char[]  c  =  c.toCharArray();  pos  +=  Character.charCount(c);  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  char[]  c  =  c.toCharArray();  pos  +=  Character.charCount(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  char[]  c  =  c.toCharArray();  pos  +=  Character.charCount(c);  }	          if(c!=    null)    {    for(int    i    =    0;    i    <    len;    i++)    {    char[]    c    =    c.toCharArray();    pos    +=    Character.charCount(c);    }    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
649	[BUG]  [BUGGY]  if(consumed!=  0)  {  for(int  pos  =  0;  pos  <  c.length;  pos++)  {  c[pos]  =  c.charValue();  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed!=  0)  {  for(int  pos  =  0;  pos  <  c.length;  pos++)  {  c[pos]  =  c.charValue();  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed!=  0)  {  for(int  pos  =  0;  pos  <  c.length;  pos++)  {  c[pos]  =  c.charValue();  }	  if(c!=    null)    {    for(int    pos    =    0;    pos    <    c.length;    pos++)    {    c[pos]    =    c.charValue();    }    	non-compiled	[CE]  illegal  start  of  expression	163	None	replace
650	[BUG]  [BUGGY]  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pos,  out));  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pos,  out));  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pos,  out));  }	  if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    pos    +=    Character.charCount(Character.codePointAt(pos,    pos));    }    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
651	[BUG]  [BUGGY]  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }	  if(c!=    null)    {    for(int    pt    =    0;    pt    <    consumed;    pt++)    {    char[]    c    =    c.toChars();    pos    +=    c.length();    }    	non-compiled	[CE]  illegal  start  of  expression	162	None	replace
652	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }	  if(c!=    null)    {    for(int    pt    =    0;    pt    <    consumed;    pt++)    {    char[]    c    =    c.toChars();    pos    +=    c.length();    }    	non-compiled	[CE]  illegal  start  of  expression	162	None	replace
653	[BUG]  [BUGGY]  if(consumed!=  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed!=  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed!=  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }	  if(c!=    null)    {    for(int    pt    =    0;    pt    <    consumed;    pt++)    {    char[]    c    =    c.toChars();    pos    +=    c.length();    }    	non-compiled	[CE]  illegal  start  of  expression	162	None	replace
654	[BUG]  [BUGGY]  if(consumed  <  =  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c[pos]);  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  <  =  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c[pos]);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  <  =  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c[pos]);  }	  if(consumed    ==    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    out.write(c[pos]);    }    	non-compiled	[CE]  illegal  start  of  expression	144	None	replace
655	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  c.length;  pt++)  {  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  c.length;  pt++)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  c.length;  pt++)  {  out.write(c);  }	  if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
656	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write(c,  0,  pos);  char[]  c  =  input.toChars(c,  0,  pos);  out.write(c,  0,  pos);  }  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]              IndexOutOfBoundsException      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >  0)  {  out.write(c,  0,  pos);  char[]  c  =  input.toChars(c,  0,  pos);  out.write(c,  0,  pos);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >  0)  {  out.write(c,  0,  pos);  char[]  c  =  input.toChars(c,  0,  pos);  out.write(c,  0,  pos);  }	  out.write(c,    0,    pos);    char[]    c    =    input.toChars(c,    0,    pos);    out.write(c,    0,    pos);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	103	None	replace
657	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write(c,  0,  pos);  char[]  c  =  input.toChars(c,  0,  pos);  out.write(c,  0,  len);  }  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                IndexOutOfBoundsException      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >  0)  {  out.write(c,  0,  pos);  char[]  c  =  input.toChars(c,  0,  pos);  out.write(c,  0,  len);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >  0)  {  out.write(c,  0,  pos);  char[]  c  =  input.toChars(c,  0,  pos);  out.write(c,  0,  len);  }	  out.write(c,    0,    pos);    char[]    c    =    input.toChars(c,    0,    pos);    out.write(c,    0,    pos);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	103	None	replace
658	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write(c,  0,  pos);  char[]  c  =  input.toChars(c,  0,  pos);  out.write(c,  0,  pos);  }  else  {  out.write('n');  }  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                  IndexOutOfBoundsException      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >  0)  {  out.write(c,  0,  pos);  char[]  c  =  input.toChars(c,  0,  pos);  out.write(c,  0,  pos);  }  else  {  out.write('n');  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >  0)  {  out.write(c,  0,  pos);  char[]  c  =  input.toChars(c,  0,  pos);  out.write(c,  0,  pos);  }  else  {  out.write('n');  }	  out.write(c,    0,    pos);    char[]    c    =    input.toChars(c,    0,    pos);    out.write(c,    0,    pos);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	103	None	replace
659	[BUG]  [BUGGY]  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length;  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length;  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length;  }	  if(c!=    null)    {    for(int    pt    =    0;    pt    <    consumed;    pt++)    {    char[]    c    =    c.toCharArray();    pos    +=    c.length;    }    	non-compiled	[CE]  illegal  start  of  expression	172	None	replace
660	[BUG]  [BUGGY]  if(consumed  ==  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length;  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  ==  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length;  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  ==  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length;  }	  if(c!=    null)    {    for(int    pt    =    0;    pt    <    consumed;    pt++)    {    char[]    c    =    c.toCharArray();    pos    +=    c.length;    }    	non-compiled	[CE]  illegal  start  of  expression	172	None	replace
661	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length;  }  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length;  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length;  }	  if(c!=    null)    {    for(int    pt    =    0;    pt    <    consumed;    pt++)    {    char[]    c    =    c.toCharArray();    pos    +=    c.length;    }    	non-compiled	[CE]  illegal  start  of  expression	172	None	replace
662	[BUG]  [BUGGY]  if(consumed!=  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length;  }  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed!=  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length;  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed!=  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length;  }	  if(c!=    null)    {    for(int    pt    =    0;    pt    <    consumed;    pt++)    {    char[]    c    =    c.toCharArray();    pos    +=    c.length;    }    	non-compiled	[CE]  illegal  start  of  expression	172	None	replace
663	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write(c,  0,  pos);  char[]  c  =  input.toChars(input);  out.write(c,  0,  pos);  }  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]          IndexOutOfBoundsException      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >  0)  {  out.write(c,  0,  pos);  char[]  c  =  input.toChars(input);  out.write(c,  0,  pos);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >  0)  {  out.write(c,  0,  pos);  char[]  c  =  input.toChars(input);  out.write(c,  0,  pos);  }	  out.write(c,    0,    pos);    char[]    c    =    input.toChars(input);    out.write(c,    0,    pos);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	101	None	replace
664	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write(c,  0,  pos);  char[]  c  =  input.toChars(input);  out.write(c,  0,  len);  }  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]            IndexOutOfBoundsException      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >  0)  {  out.write(c,  0,  pos);  char[]  c  =  input.toChars(input);  out.write(c,  0,  len);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >  0)  {  out.write(c,  0,  pos);  char[]  c  =  input.toChars(input);  out.write(c,  0,  len);  }	  out.write(c,    0,    pos);    char[]    c    =    input.toChars(input);    out.write(c,    0,    pos);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	101	None	replace
665	[BUG]  [BUGGY]  pos  +=  Character.charCount(c,  out,  len);  [CE]  method  charCount  in  class  Character  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  pos  +=  Character.charCount(c,  out,  len);  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	pos  +=  Character.charCount(c,  out,  len);	  pos    +=    Character.charCount(c,    out);    	non-compiled	[CE]  method  charCount  in  class  Character  cannot  be  applied  to  given  types;	98	None	replace
666	[BUG]  [BUGGY]  pos  +=  Character.charCount(c,  out,  pos);  [CE]  method  charCount  in  class  Character  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  pos  +=  Character.charCount(c,  out,  pos);  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	pos  +=  Character.charCount(c,  out,  pos);	  pos    +=    Character.charCount(c,    out);    	non-compiled	[CE]  method  charCount  in  class  Character  cannot  be  applied  to  given  types;	98	None	replace
667	[BUG]  [BUGGY]  if(c!=  null)  {  out.write(c,  consumed);  }  [CE]  no  suitable  method  found  for  write(char[],int)  [FE]    ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c!=  null)  {  out.write(c,  consumed);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c!=  null)  {  out.write(c,  consumed);  }	  if(c    ==    null)    {    out.write(c);    }    	non-compiled	[CE]  no  suitable  method  found  for  write(char[],int)	168	None	replace
668	[BUG]  [BUGGY]  out.write(c,  0,  consumed);  char[]  c  =  input.getChars(pos,  pos);  out.write(c,  0,  consumed);  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]    ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,  0,  consumed);  char[]  c  =  input.getChars(pos,  pos);  out.write(c,  0,  consumed);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,    0,    consumed);    char[]  c  =  input.getChars(pos,  pos);  out.write(c,  0,  consumed);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	14	None	add
669	[BUG]  [BUGGY]  out.write(c,  0,  consumed);  char[]  c  =  input.toChars(c);  out.write(c,  0,  consumed);  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]      ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,  0,  consumed);  char[]  c  =  input.toChars(c);  out.write(c,  0,  consumed);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,    0,    consumed);    char[]  c  =  input.toChars(c);  out.write(c,  0,  consumed);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	14	None	add
670	[BUG]  [BUGGY]  out.write(c,  0,  consumed);  char[]  c  =  input.toChars(pos);  out.write(c,  0,  consumed);  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]        ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,  0,  consumed);  char[]  c  =  input.toChars(pos);  out.write(c,  0,  consumed);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,    0,    consumed);    char[]  c  =  input.toChars(pos);  out.write(c,  0,  consumed);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	14	None	add
671	[BUG]  [BUGGY]  out.write(c,  0,  consumed);  char[]  c  =  input.toChars(input,  pos);  out.write(c,  0,  consumed);  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]          ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,  0,  consumed);  char[]  c  =  input.toChars(input,  pos);  out.write(c,  0,  consumed);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,    0,    consumed);    char[]  c  =  input.toChars(input,  pos);  out.write(c,  0,  consumed);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	14	None	add
672	[BUG]  [BUGGY]          if(c!=    null)    {    out.write(c);    }    else    {    out.write('n');    }    if(c  ==  null)  {  out.write(c);  }  else  {  out.write('n');  }  if(c!=  null)  {  out.write('n');  }  else  {  out.write(c);  }  else  {  out.write('n');  }  [CE]  'else'  without  'if'  [FE]    ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]          if(c!=    null)    {    out.write(c);    }    else    {    out.write('n');    }    if(c  ==  null)  {  out.write(c);  }  else  {  out.write('n');  }  if(c!=  null)  {  out.write('n');  }  else  {  out.write(c);  }  else  {  out.write('n');  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	                if(c!=        null)        {        out.write(c);        }        else        {        out.write('n');        }        if(c    ==    null)    {    out.write(c);    }    else    {    out.write('n');    }    if(c!=  null)  {  out.write('n');  }  else  {  out.write(c);  }  else  {  out.write('n');  }	  	non-compiled	[CE]  'else'  without  'if'	5	None	add
673	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]          if(c!=    null)    {    out.write(c);    }    else    {    out.write('n');    }    if(c  ==  null)  {  out.write(c);  }  else  {  out.write('n');  }  if(c!=  null)  {  out.write('n');  }  else  {  out.write('n');  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	                if(c!=        null)        {        out.write(c);        }        else        {        out.write('n');        }        if(c    ==    null)    {    out.write(c);    }    else    {    out.write('n');    }    if(c!=  null)  {  out.write('n');  }  else  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	5	13	add
674	[BUG]  [BUGGY]          if(c!=    null)    {    out.write(c);    }    else    {    out.write('n');    }    if(c  ==  null)  {  out.write(c);  }  else  {  out.write('n');  }  if(c!=  null)  {  out.write('n');  }  else  {  out.write('n');  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]          if(c!=    null)    {    out.write(c);    }    else    {    out.write('n');    }    if(c  ==  null)  {  out.write(c);  }  else  {  out.write('n');  }  if(c!=  null)  {  out.write('n');  }  else  {  out.write('n');  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	                if(c!=        null)        {        out.write(c);        }        else        {        out.write('n');        }        if(c    ==    null)    {    out.write(c);    }    else    {    out.write('n');    }    if(c!=  null)  {  out.write('n');  }  else  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	5	13	add
675	[BUG]  [BUGGY]  if(consumed  ==  0)  {  out.write(c);  }  else  {  for(int  pos  =  0;  pos  <  len  -  2;  pos++)  {  pos  +=  Character.charCount(Character.codePointAt(pos,  pos));  }  [CE]  'else'  without  'if'  [FE]        ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  ==  0)  {  out.write(c);  }  else  {  for(int  pos  =  0;  pos  <  len  -  2;  pos++)  {  pos  +=  Character.charCount(Character.codePointAt(pos,  pos));  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  ==  0)  {  out.write(c);  }  else  {  for(int  pos  =  0;  pos  <  len  -  2;  pos++)  {  pos  +=  Character.charCount(Character.codePointAt(pos,  pos));  }	  if(c!=    null)    {    out.write(c);    }    else    {    for(int    pos    =    0;    pos    <    len    -    2;    pos++)    {    pos    +=    Character.charCount(Character.codePointAt(pos,    pos));    }    	non-compiled	[CE]  'else'  without  'if'	41	None	replace
676	[BUG]  [BUGGY]  if(c!=  null)  {  out.write(c);  }  else  {  for(pos  =  0;  pos  <  len  -  2;  pos++)  {  pos  +=  Character.charCount(Character.codePointAt(pos,  pos));  }  [CE]  'else'  without  'if'  [FE]          ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c!=  null)  {  out.write(c);  }  else  {  for(pos  =  0;  pos  <  len  -  2;  pos++)  {  pos  +=  Character.charCount(Character.codePointAt(pos,  pos));  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c!=  null)  {  out.write(c);  }  else  {  for(pos  =  0;  pos  <  len  -  2;  pos++)  {  pos  +=  Character.charCount(Character.codePointAt(pos,  pos));  }	  if(c!=    null)    {    out.write(c);    }    else    {    for(int    pos    =    0;    pos    <    len    -    2;    pos++)    {    pos    +=    Character.charCount(Character.codePointAt(pos,    pos));    }    	non-compiled	[CE]  'else'  without  'if'	41	None	replace
677	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c,  0,  c.length);  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]          ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c,  0,  c.length);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c,  0,  c.length);	  out.write(c,    0,    c.length);    char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    out.write(c,    0,    c.length);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	28	None	replace
678	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write(c,  0,  c.length);  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c,  0,  c.length);  }  else  {  out.write(  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >  0)  {  out.write(c,  0,  c.length);  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c,  0,  c.length);  }  else  {  out.write(  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >  0)  {  out.write(c,  0,  c.length);  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c,  0,  c.length);  }  else  {  out.write(	  out.write(c,    0,    c.length);    char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    out.write(c,    0,    c.length);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
679	[BUG]  [BUGGY]  if(consumed!=  0)  {  for(int  pos  =  0;  pos  <  consumed;  pos++)  {  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed!=  0)  {  for(int  pos  =  0;  pos  <  consumed;  pos++)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed!=  0)  {  for(int  pos  =  0;  pos  <  consumed;  pos++)  {  out.write(c);  }	  if(c!=    null)    {    for(int    pos    =    0;    pos    <    consumed;    pos++)    {    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
680	[BUG]  [BUGGY]  if(consume  >  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length();  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consume  >  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length();  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consume  >  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length();  }	  if(consumed    ==    0)    {    if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    pos    +=    c.length();    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
681	[BUG]  [BUGGY]  out.write(c,  pos,  consumed);  char[]  c  =  input.toChars(c);  out.write(c,  pos,  consumed);  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]    IndexOutOfBoundsException    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,  pos,  consumed);  char[]  c  =  input.toChars(c);  out.write(c,  pos,  consumed);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,    pos,    consumed);    char[]  c  =  input.toChars(c);  out.write(c,  pos,  consumed);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	33	None	add
682	[BUG]  [BUGGY]  out.write(c,  pos,  consumed);  char[]  c  =  input.toChars(input);  out.write(c,  pos,  consumed);  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]      IndexOutOfBoundsException    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,  pos,  consumed);  char[]  c  =  input.toChars(input);  out.write(c,  pos,  consumed);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,    pos,    consumed);    char[]  c  =  input.toChars(input);  out.write(c,  pos,  consumed);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	33	None	add
683	[BUG]  [BUGGY]  out.write(c,  pos,  consumed);  char[]  c  =  input.toChars();  out.write(c,  pos,  consumed);  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]        IndexOutOfBoundsException    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,  pos,  consumed);  char[]  c  =  input.toChars();  out.write(c,  pos,  consumed);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,    pos,    consumed);    char[]  c  =  input.toChars();  out.write(c,  pos,  consumed);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	33	None	add
684	[BUG]  [BUGGY]  out.write(c,  pos,  consumed);  char[]  c  =  input.toChars(pos);  out.write(c,  pos,  consumed);  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]          IndexOutOfBoundsException    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,  pos,  consumed);  char[]  c  =  input.toChars(pos);  out.write(c,  pos,  consumed);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,    pos,    consumed);    char[]  c  =  input.toChars(pos);  out.write(c,  pos,  consumed);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	33	None	add
685	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pos  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length;  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >  0)  {  for(int  pos  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length;  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >  0)  {  for(int  pos  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length;  }	  if(consumed    >=    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    pos    +=    c.length;    }    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
686	[BUG]  [BUGGY]  if(c  ==  null)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  c.toCharArray();  pos  +=  Character.charCount(c);  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c  ==  null)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  c.toCharArray();  pos  +=  Character.charCount(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c  ==  null)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  c.toCharArray();  pos  +=  Character.charCount(c);  }	          if(c!=    null)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    c.toCharArray();    pos    +=    Character.charCount(c);    }    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
687	[BUG]  [BUGGY]  if(c!=  null)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  pos  +=  Character.charCount(c);  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c!=  null)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  pos  +=  Character.charCount(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c!=  null)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  pos  +=  Character.charCount(c);  }	          if(c!=    null)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    c.toCharArray();    pos    +=    Character.charCount(c);    }    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
688	[BUG]  [BUGGY]  if(consumed  <  =  0)  {  out.write(c);  }  else  {  out.write('n');  }  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  <  =  0)  {  out.write(c);  }  else  {  out.write('n');  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  <  =  0)  {  out.write(c);  }  else  {  out.write('n');  }	          if(c!=    null)    {    out.write(c);    }    else    {    out.write('n');    }    if(c!=    null)    {    out.write(c);    }    else    {    out.write('n');    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
689	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  chars.length;  pt++)  {  char[]  c  =  c.toCharArray();  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  chars.length;  pt++)  {  char[]  c  =  c.toCharArray();  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  chars.length;  pt++)  {  char[]  c  =  c.toCharArray();  }	  if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    }    	non-compiled	[CE]  illegal  start  of  expression	146	None	replace
690	[BUG]  [BUGGY]  out.write(c,  pos,  consumed);  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos),  consumed);  out.write(c,  pos,  consumed);  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]    IndexOutOfBoundsException    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,  pos,  consumed);  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos),  consumed);  out.write(c,  pos,  consumed);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,    pos,    consumed);    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos),  consumed);  out.write(c,  pos,  consumed);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	33	None	add
691	[BUG]  [BUGGY]  if(c  ==  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  char[]  c  =  c.toCharArray();  pos  +=  Character.charCount(c);  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c  ==  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  char[]  c  =  c.toCharArray();  pos  +=  Character.charCount(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c  ==  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  char[]  c  =  c.toCharArray();  pos  +=  Character.charCount(c);  }	          if(c!=    null)    {    for(int    i    =    0;    i    <    len;    i++)    {    char[]    c    =    c.toCharArray();    pos    +=    Character.charCount(c);    }    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
692	[BUG]  [BUGGY]  if(c  ==  null)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length;  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c  ==  null)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length;  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c  ==  null)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length;  }	  if(c!=    null)    {    for(int    pt    =    0;    pt    <    consumed;    pt++)    {    char[]    c    =    c.toCharArray();    pos    +=    c.length;    }    	non-compiled	[CE]  illegal  start  of  expression	172	None	replace
693	[BUG]  [BUGGY]  out.write(c,    0,    len);    out.write(c,  0,  len);  if(consumed  >  0)  {  out.write(c,  0,  len);  out.write(c,  0,  len);  }  else  {  for(int  pos  =  0;  pos  <  consumed;  pos++)  {  pos  +=  Character.charCount(Character.codePointAt(pos,  pos  [CE]  ')'  expected  [FE]    IndexOutOfBoundsException    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,    0,    len);    out.write(c,  0,  len);  if(consumed  >  0)  {  out.write(c,  0,  len);  out.write(c,  0,  len);  }  else  {  for(int  pos  =  0;  pos  <  consumed;  pos++)  {  pos  +=  Character.charCount(Character.codePointAt(pos,  pos  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,        0,        len);        out.write(c,    0,    len);    if(consumed  >  0)  {  out.write(c,  0,  len);  out.write(c,  0,  len);  }  else  {  for(int  pos  =  0;  pos  <  consumed;  pos++)  {  pos  +=  Character.charCount(Character.codePointAt(pos,  pos	  	non-compiled	[CE]  ')'  expected	86	None	add
694	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c  ==  null  ||  c.length  <  2)  {  out.write('n');  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	if(c  ==  null  ||  c.length  <  2)  {  out.write('n');  }	  if(c    ==    null)    {    out.write(c);    }    else    {    out.write('n');    }    	compilable	  [FE]  ComparisonFailure  	19	13	replace
695	[BUG]  [BUGGY]  if(c  ==  null  ||  c.length  <  2)  {  out.write('n');  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c  ==  null  ||  c.length  <  2)  {  out.write('n');  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c  ==  null  ||  c.length  <  2)  {  out.write('n');  }	  if(c    ==    null)    {    out.write(c);    }    else    {    out.write('n');    }    	compilable	  [FE]  ComparisonFailure  	19	13	replace
696	[BUG]  [BUGGY]  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c,  0,  c.length);  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c,  0,  c.length);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c,  0,  c.length);  }	  if(c    ==    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    out.write(c[pos]);    }    	non-compiled	[CE]  illegal  start  of  expression	169	None	replace
697	[BUG]  [BUGGY]  if(c  ==  null)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c[pos]  =  Character.charValue(c);  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c  ==  null)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c[pos]  =  Character.charValue(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c  ==  null)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c[pos]  =  Character.charValue(c);  }	  if(c!=    null)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    c[pos]    =    Character.charValue(c);    }    	non-compiled	[CE]  illegal  start  of  expression	164	None	replace
698	[BUG]  [BUGGY]  if(c!=  null)  {  for(int  pos  =  0;  pos  <  consumed;  pos++)  {  c[pos]  =  Character.charValue(c);  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c!=  null)  {  for(int  pos  =  0;  pos  <  consumed;  pos++)  {  c[pos]  =  Character.charValue(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c!=  null)  {  for(int  pos  =  0;  pos  <  consumed;  pos++)  {  c[pos]  =  Character.charValue(c);  }	  if(c!=    null)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    c[pos]    =    Character.charValue(c);    }    	non-compiled	[CE]  illegal  start  of  expression	164	None	replace
699	[BUG]  [BUGGY]  if(c!=  null)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c[pos]  =  Character.charValue(c,  pos);  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c!=  null)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c[pos]  =  Character.charValue(c,  pos);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c!=  null)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c[pos]  =  Character.charValue(c,  pos);  }	  if(c!=    null)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    c[pos]    =    Character.charValue(c);    }    	non-compiled	[CE]  illegal  start  of  expression	164	None	replace
700	[BUG]  [BUGGY]  OutputStream  c  =  input.outputStream();  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  OutputStream  c  =  input.outputStream();  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	OutputStream  c  =  input.outputStream();	          if(c!=    null)    {    out.write(c);    }    else    {    out.write('n');    }    if(c    >=    null)    {    out.write(c);    }    else    {    out.write('n');    }    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
701	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c!=  null)  {  out.write(c,  0,  c.length);  out.write(c,  0,  c.length);  }  else  {  out.write( " ");  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	if(c!=  null)  {  out.write(c,  0,  c.length);  out.write(c,  0,  c.length);  }  else  {  out.write( " ");  }	  out.write(c,    0,    c.length);    out.write(c,    0,    c.length);    	compilable	  [FE]  ComparisonFailure  	27	13	replace
702	[BUG]  [BUGGY]  if(c!=  null)  {  out.write(c,  0,  c.length);  out.write(c,  0,  c.length);  }  else  {  out.write( " ");  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c!=  null)  {  out.write(c,  0,  c.length);  out.write(c,  0,  c.length);  }  else  {  out.write( " ");  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c!=  null)  {  out.write(c,  0,  c.length);  out.write(c,  0,  c.length);  }  else  {  out.write( " ");  }	  out.write(c,    0,    c.length);    out.write(c,    0,    c.length);    	compilable	  [FE]  ComparisonFailure  	27	13	replace
703	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c,  0,  pos);  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]              IndexOutOfBoundsException      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c,  0,  pos);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c,  0,  pos);	  out.write(c,    0,    pos);    char[]    c    =    Character.toChars(Character.codePointAt(pos,    pos));    out.write(c,    0,    pos);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	61	None	replace
704	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(pos,  len));  out.write(c,  0,  pos);  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                IndexOutOfBoundsException      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(pos,  len));  out.write(c,  0,  pos);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	char[]  c  =  Character.toChars(Character.codePointAt(pos,  len));  out.write(c,  0,  pos);	  out.write(c,    0,    pos);    char[]    c    =    Character.toChars(Character.codePointAt(pos,    pos));    out.write(c,    0,    pos);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	61	None	replace
705	[BUG]  [BUGGY]  while(pos  >=  len)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  [CE]  'else'  without  'if'  [FE]              ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  while(pos  >=  len)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	while(pos  >=  len)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }	  if(consumed    >=    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    out.write(c);    }    	non-compiled	[CE]  'else'  without  'if'	120	None	replace
706	[BUG]  [BUGGY]  while(pos  >=  len)  {  if(consumed  >=  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  while(pos  >=  len)  {  if(consumed  >=  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	while(pos  >=  len)  {  if(consumed  >=  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }	  if(consumed    >=    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
707	[BUG]  [BUGGY]  if(c  ==  null  ||  c.length  <  2)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c  ==  null  ||  c.length  <  2)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c  ==  null  ||  c.length  <  2)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }	  if(c    ==    null)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	175	None	replace
708	[BUG]  [BUGGY]  out.write(c,  0,  len);  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos  +  1));  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]        IndexOutOfBoundsException      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,  0,  len);  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos  +  1));  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,  0,  len);  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos  +  1));	  out.write(c,    0,    len);    char[]    c    =    Character.toChars(Character.codePointAt(pos,    pos));    	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	177	None	replace
709	[BUG]  [BUGGY]  OutputStream  c  =  input.getOutputStream();  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  OutputStream  c  =  input.getOutputStream();  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	OutputStream  c  =  input.getOutputStream();	  if(c    ==    null)    {    out.write(c);    }    	non-compiled	[CE]  cannot  find  symbol	168	None	replace
710	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c!=  null)  {  out.write(0);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	if(c!=  null)  {  out.write(0);  }	  if(c    ==    null)    {    out.write(c);    }    	compilable	  [FE]  ComparisonFailure  	168	13	replace
711	[BUG]  [BUGGY]  if(c!=  null)  {  out.write(0);  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c!=  null)  {  out.write(0);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c!=  null)  {  out.write(0);  }	  if(c    ==    null)    {    out.write(c);    }    	compilable	  [FE]  ComparisonFailure  	168	13	replace
712	[BUG]  [BUGGY]  if(c!=  null)  {  for(int  pt  =  0;  pt  <  consume;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pt,  pos));  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c!=  null)  {  for(int  pt  =  0;  pt  <  consume;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pt,  pos));  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c!=  null)  {  for(int  pt  =  0;  pt  <  consume;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pt,  pos));  }	  if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    pos    +=    Character.charCount(Character.codePointAt(pt,    pos));    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
713	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >  0  ||  c!=  null)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	if(consumed  >  0  ||  c!=  null)  {  out.write(c);  }	  if(consumed    >    0)    {    if(c!=    null)    {    out.write(c);    }    	compilable	  [FE]  ComparisonFailure  	32	1	replace
714	[BUG]  [BUGGY]  if(consumed  >  0  ||  c!=  null)  {  out.write(c);  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >  0  ||  c!=  null)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >  0  ||  c!=  null)  {  out.write(c);  }	  if(consumed    >    0)    {    if(c!=    null)    {    out.write(c);    }    	compilable	  [FE]  ComparisonFailure  	32	1	replace
715	[BUG]  [BUGGY]  if(c!=  null)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  c.toCharArray();  if(c!=  null)  {  return;  }  [CE]  'else'  without  'if'  [FE]        ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c!=  null)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  c.toCharArray();  if(c!=  null)  {  return;  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c!=  null)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  c.toCharArray();  if(c!=  null)  {  return;  }	          if(c    ==    null)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    c.toCharArray();    if(c!=    null)    {    return;    }    	non-compiled	[CE]  'else'  without  'if'	158	None	replace
716	[BUG]  [BUGGY]  if(consumed  <  =  0)  {  out.write(c);  }  else  {  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  <  =  0)  {  out.write(c);  }  else  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  <  =  0)  {  out.write(c);  }  else  {  out.write(c);  }	          if(c!=    null)    {    out.write(c);    }    else    {    out.write(c);    }    if(c!=    null)    {    out.write(c);    }    else    {    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
717	[BUG]  [BUGGY]  [FE]  IndexOutOfBoundsException  [FE]    IndexOutOfBoundsException    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c!=  null)  {  out.write(c,  0,  pos);  out.write(c,  0,  pos);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	if(c!=  null)  {  out.write(c,  0,  pos);  out.write(c,  0,  pos);  }	  out.write(c,    0,    pos);    out.write(c,    0,    pos);    	compilable	  [FE]  IndexOutOfBoundsException  	58	13	replace
718	[BUG]  [BUGGY]  if(c!=  null)  {  out.write(c,  0,  pos);  out.write(c,  0,  pos);  }  [FE]  IndexOutOfBoundsException  [FE]    IndexOutOfBoundsException    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c!=  null)  {  out.write(c,  0,  pos);  out.write(c,  0,  pos);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c!=  null)  {  out.write(c,  0,  pos);  out.write(c,  0,  pos);  }	  out.write(c,    0,    pos);    out.write(c,    0,    pos);    	compilable	  [FE]  IndexOutOfBoundsException  	58	13	replace
719	[BUG]  [BUGGY]  [FE]  IndexOutOfBoundsException  [FE]      IndexOutOfBoundsException    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c!=  null)  {  out.write(c,  0,  pos);  out.write(c,  0,  pos);  }  else  {  out.write('n');  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	if(c!=  null)  {  out.write(c,  0,  pos);  out.write(c,  0,  pos);  }  else  {  out.write('n');  }	  out.write(c,    0,    pos);    out.write(c,    0,    pos);    	compilable	  [FE]  IndexOutOfBoundsException  	58	13	replace
720	[BUG]  [BUGGY]  if(c!=  null)  {  out.write(c,  0,  pos);  out.write(c,  0,  pos);  }  else  {  out.write('n');  }  [FE]  IndexOutOfBoundsException  [FE]      IndexOutOfBoundsException    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c!=  null)  {  out.write(c,  0,  pos);  out.write(c,  0,  pos);  }  else  {  out.write('n');  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c!=  null)  {  out.write(c,  0,  pos);  out.write(c,  0,  pos);  }  else  {  out.write('n');  }	  out.write(c,    0,    pos);    out.write(c,    0,    pos);    	compilable	  [FE]  IndexOutOfBoundsException  	58	13	replace
721	[BUG]  [BUGGY]  [FE]  IndexOutOfBoundsException  [FE]    IndexOutOfBoundsException    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,  0,  c.length  *  2);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	out.write(c,  0,  c.length  *  2);	  out.write(c,    0,    c.length    +    2);    	compilable	  [FE]  IndexOutOfBoundsException  	82	13	replace
722	[BUG]  [BUGGY]  out.write(c,  0,  c.length  *  2);  [FE]  IndexOutOfBoundsException  [FE]    IndexOutOfBoundsException    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,  0,  c.length  *  2);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,  0,  c.length  *  2);	  out.write(c,    0,    c.length    +    2);    	compilable	  [FE]  IndexOutOfBoundsException  	82	13	replace
723	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  chars.length;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  chars.length;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  chars.length;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }	  if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
724	[BUG]  [BUGGY]  if(c  ==  null  ||  c.length  <  2)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(c.charCount());  }  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c  ==  null  ||  c.length  <  2)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(c.charCount());  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c  ==  null  ||  c.length  <  2)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(c.charCount());  }	  if(c    ==    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    pos    +=    Character.charCount(c.charCount());    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
725	[BUG]  [BUGGY]  if(c.length  >  0)  {  out.write(c,  0,  c.length);  char[]  c  =  Character.toChars(Character.toChars(c));  out.write(c,  0,  c.length);  }  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]          ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c.length  >  0)  {  out.write(c,  0,  c.length);  char[]  c  =  Character.toChars(Character.toChars(c));  out.write(c,  0,  c.length);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c.length  >  0)  {  out.write(c,  0,  c.length);  char[]  c  =  Character.toChars(Character.toChars(c));  out.write(c,  0,  c.length);  }	  out.write(c,    0,    c.length);    char[]    c    =    Character.toChars(Character.toChars(c));    out.write(c,    0,    c.length);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	105	None	replace
726	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.toChars(c));  out.write(c,  0,  c.length);  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]            ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  char[]  c  =  Character.toChars(Character.toChars(c));  out.write(c,  0,  c.length);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	char[]  c  =  Character.toChars(Character.toChars(c));  out.write(c,  0,  c.length);	  out.write(c,    0,    c.length);    char[]    c    =    Character.toChars(Character.toChars(c));    out.write(c,    0,    c.length);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	105	None	replace
727	[BUG]  [BUGGY]          if(c!=    null)    {    out.write(c);    }    else    {    out.write('n');    }    if(c  ==  null)  {  out.write(c);  }  else  {  out.write('n');  }  if(c  >=  null)  {  out.write(c);  }  else  {  out.write('n');  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]    ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]          if(c!=    null)    {    out.write(c);    }    else    {    out.write('n');    }    if(c  ==  null)  {  out.write(c);  }  else  {  out.write('n');  }  if(c  >=  null)  {  out.write(c);  }  else  {  out.write('n');  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	                if(c!=        null)        {        out.write(c);        }        else        {        out.write('n');        }        if(c    ==    null)    {    out.write(c);    }    else    {    out.write('n');    }    if(c  >=  null)  {  out.write(c);  }  else  {  out.write('n');  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	5	None	add
728	[BUG]  [BUGGY]          if(c!=    null)    {    out.write(c);    }    else    {    out.write('n');    }    if(c  ==  null)  {  out.write(c);  }  else  {  out.write('n');  }  If(c!=  null)  {  out.write(c);  }  else  {  out.write('n');  }  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]          if(c!=    null)    {    out.write(c);    }    else    {    out.write('n');    }    if(c  ==  null)  {  out.write(c);  }  else  {  out.write('n');  }  If(c!=  null)  {  out.write(c);  }  else  {  out.write('n');  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	                if(c!=        null)        {        out.write(c);        }        else        {        out.write('n');        }        if(c    ==    null)    {    out.write(c);    }    else    {    out.write('n');    }    If(c!=  null)  {  out.write(c);  }  else  {  out.write('n');  }	  	non-compiled	[CE]  ';'  expected	5	None	add
729	[BUG]  [BUGGY]  if(c!=  null)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  out.write(c,  0,  c.length);  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c!=  null)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  out.write(c,  0,  c.length);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c!=  null)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  out.write(c,  0,  c.length);  }	  if(c    ==    null)    {    for(int    pt    =    0;    pt    <    consumed;    pt++)    {    out.write(c[pos]);    }    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
730	[BUG]  [BUGGY]  [FE]  IndexOutOfBoundsException  [FE]    IndexOutOfBoundsException    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,    0,    pos);    out.write(c,  0,  pos);  if(c!=  null)  {  out.write(c,  0,  pos);  out.write(c,  0,  pos);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	out.write(c,        0,        pos);        out.write(c,    0,    pos);    if(c!=  null)  {  out.write(c,  0,  pos);  out.write(c,  0,  pos);  }	  	compilable	  [FE]  IndexOutOfBoundsException  	57	12	add
731	[BUG]  [BUGGY]  out.write(c,    0,    pos);    out.write(c,  0,  pos);  if(c!=  null)  {  out.write(c,  0,  pos);  out.write(c,  0,  pos);  }  [FE]  IndexOutOfBoundsException  [FE]    IndexOutOfBoundsException    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,    0,    pos);    out.write(c,  0,  pos);  if(c!=  null)  {  out.write(c,  0,  pos);  out.write(c,  0,  pos);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,        0,        pos);        out.write(c,    0,    pos);    if(c!=  null)  {  out.write(c,  0,  pos);  out.write(c,  0,  pos);  }	  	compilable	  [FE]  IndexOutOfBoundsException  	57	12	add
732	[BUG]  [BUGGY]  [FE]  IndexOutOfBoundsException  [FE]      IndexOutOfBoundsException    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,    0,    pos);    out.write(c,  0,  pos);  if(pos  >  0)  {  out.write(c,  0,  pos);  out.write(c,  0,  pos);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	out.write(c,        0,        pos);        out.write(c,    0,    pos);    if(pos  >  0)  {  out.write(c,  0,  pos);  out.write(c,  0,  pos);  }	  	compilable	  [FE]  IndexOutOfBoundsException  	57	12	add
733	[BUG]  [BUGGY]  out.write(c,    0,    pos);    out.write(c,  0,  pos);  if(pos  >  0)  {  out.write(c,  0,  pos);  out.write(c,  0,  pos);  }  [FE]  IndexOutOfBoundsException  [FE]      IndexOutOfBoundsException    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,    0,    pos);    out.write(c,  0,  pos);  if(pos  >  0)  {  out.write(c,  0,  pos);  out.write(c,  0,  pos);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,        0,        pos);        out.write(c,    0,    pos);    if(pos  >  0)  {  out.write(c,  0,  pos);  out.write(c,  0,  pos);  }	  	compilable	  [FE]  IndexOutOfBoundsException  	57	12	add
734	[BUG]  [BUGGY]  if(c!=  null)  {  for(int  pt  =  0;  pt  <  consumeLen;  pt++)  {  pos  +=  Character.charCount(c);  }  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c!=  null)  {  for(int  pt  =  0;  pt  <  consumeLen;  pt++)  {  pos  +=  Character.charCount(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c!=  null)  {  for(int  pt  =  0;  pt  <  consumeLen;  pt++)  {  pos  +=  Character.charCount(c);  }	          if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    pos    +=    Character.charCount(c);    }    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
735	[BUG]  [BUGGY]  {  for(int  i  =  0;  i  <  len;  i++)  {  pos  +=  Character.charCount(c);  }  [CE]  'else'  without  'if'  [FE]        ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  {  for(int  i  =  0;  i  <  len;  i++)  {  pos  +=  Character.charCount(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	{  for(int  i  =  0;  i  <  len;  i++)  {  pos  +=  Character.charCount(c);  }	          if(c!=    null)    {    for(int    i    =    0;    i    <    len;    i++)    {    pos    +=    Character.charCount(c);    }    	non-compiled	[CE]  'else'  without  'if'	131	None	replace
736	[BUG]  [BUGGY]  if(c  ==  null  ||  c.length  <  2)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c[pos]  =  c.charValue();  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c  ==  null  ||  c.length  <  2)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c[pos]  =  c.charValue();  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c  ==  null  ||  c.length  <  2)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c[pos]  =  c.charValue();  }	  if(c    ==    null)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    c[pos]    =    c.charValue();    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
737	[BUG]  [BUGGY]  if(c.length  >  0)  {  out.write(c,  0,  c.length);  char[]  c  =  Character.toChars(Character.toChars(c,  pos));  out.write(c,  0,  c.length);  }  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]              ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c.length  >  0)  {  out.write(c,  0,  c.length);  char[]  c  =  Character.toChars(Character.toChars(c,  pos));  out.write(c,  0,  c.length);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c.length  >  0)  {  out.write(c,  0,  c.length);  char[]  c  =  Character.toChars(Character.toChars(c,  pos));  out.write(c,  0,  c.length);  }	  out.write(c,    0,    c.length);    char[]    c    =    Character.toChars(Character.toChars(c,    pos));    out.write(c,    0,    c.length);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	30	None	replace
738	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.toChars(c,  pos));  out.write(c,  0,  c.length);  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  char[]  c  =  Character.toChars(Character.toChars(c,  pos));  out.write(c,  0,  c.length);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	char[]  c  =  Character.toChars(Character.toChars(c,  pos));  out.write(c,  0,  c.length);	  out.write(c,    0,    c.length);    char[]    c    =    Character.toChars(Character.toChars(c,    pos));    out.write(c,    0,    c.length);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	30	None	replace
739	[BUG]  [BUGGY]  out.write(c,  0,  consumed);  char[]  c  =  input.toChars(Character.toChars(input,  pos));  out.write(c,  0,  consumed);  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]    ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,  0,  consumed);  char[]  c  =  input.toChars(Character.toChars(input,  pos));  out.write(c,  0,  consumed);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,    0,    consumed);    char[]  c  =  input.toChars(Character.toChars(input,  pos));  out.write(c,  0,  consumed);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	14	None	add
740	[BUG]  [BUGGY]  char[]  c  =  input.getChars(pos,  pos  +  1);  out.write(c,  0,  len);  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]              IndexOutOfBoundsException      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  char[]  c  =  input.getChars(pos,  pos  +  1);  out.write(c,  0,  len);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	char[]  c  =  input.getChars(pos,  pos  +  1);  out.write(c,  0,  len);	  out.write(c,    0,    len);    char[]    c    =    input.getChars(pos,    pos    +    1);    out.write(c,    0,    len);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	118	None	replace
741	[BUG]  [BUGGY]  if(c!=  'n')  {  out.write(c,  0,  len);  char[]  c  =  input.getChars(pos,  pos  +  1);  out.write(c,  0,  len);  }  [CE]  incomparable  types:  char[]  and  char  [FE]                IndexOutOfBoundsException      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c!=  'n')  {  out.write(c,  0,  len);  char[]  c  =  input.getChars(pos,  pos  +  1);  out.write(c,  0,  len);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c!=  'n')  {  out.write(c,  0,  len);  char[]  c  =  input.getChars(pos,  pos  +  1);  out.write(c,  0,  len);  }	  out.write(c,    0,    len);    char[]    c    =    input.getChars(pos,    pos    +    1);    out.write(c,    0,    len);    	non-compiled	[CE]  incomparable  types:  char[]  and  char	118	None	replace
742	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write(c);  }  if(consumed  >  0)  {  output.write(c);  }  [CE]  cannot  find  symbol  output  [FE]    ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >  0)  {  out.write(c);  }  if(consumed  >  0)  {  output.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed    >    0)    {    out.write(c);    }    if(consumed  >  0)  {  output.write(c);  }	  	non-compiled	[CE]  cannot  find  symbol  output	141	None	add
743	[BUG]  [BUGGY]  if(pos  >=  len)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(pos  >=  len)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(pos  >=  len)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }	  if(consumed!=    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
744	[BUG]  [BUGGY]  if(consumed  <  =  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  <  =  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  <  =  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }	  if(consumed!=    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
745	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,  0,  c.length  -  1);  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c,  0,  c.length  -  1);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	out.write(c,    0,    c.length    -    1);    c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c,  0,  c.length  -  1);	  	compilable	  [FE]  ComparisonFailure  	79	2	add
746	[BUG]  [BUGGY]  out.write(c,  0,  c.length  -  1);  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c,  0,  c.length  -  1);  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,  0,  c.length  -  1);  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c,  0,  c.length  -  1);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,    0,    c.length    -    1);    c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c,  0,  c.length  -  1);	  	compilable	  [FE]  ComparisonFailure  	79	2	add
747	[BUG]  [BUGGY]  if(c!=  null)  {  out.write(c,  0,  pos);  if(c!=  null)  {  out.write(c,  0,  pos);  }  [CE]  illegal  start  of  expression  [FE]        IndexOutOfBoundsException      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c!=  null)  {  out.write(c,  0,  pos);  if(c!=  null)  {  out.write(c,  0,  pos);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c!=  null)  {  out.write(c,  0,  pos);  if(c!=  null)  {  out.write(c,  0,  pos);  }	  out.write(c,    0,    pos);    if(c!=    null)    {    out.write(c,    0,    pos);    }    else    {    for(int    pos    =    0;    pos    <    len    -    2;    pos++)    {    pos    +=    Character.charCount(Character.codePointAt(pos,    pos));    }    	non-compiled	[CE]  illegal  start  of  expression	150	None	replace
748	[BUG]  [BUGGY]  [FE]  IndexOutOfBoundsException  [FE]          IndexOutOfBoundsException      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c!=  null)  {  out.write(c,  0,  pos);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	if(c!=  null)  {  out.write(c,  0,  pos);  }	  out.write(c,    0,    pos);    if(c!=    null)    {    out.write(c,    0,    pos);    }    else    {    for(int    pos    =    0;    pos    <    len    -    2;    pos++)    {    pos    +=    Character.charCount(Character.codePointAt(pos,    pos));    }    	compilable	  [FE]  IndexOutOfBoundsException  	150	13	replace
749	[BUG]  [BUGGY]  if(c!=  null)  {  out.write(c,  0,  pos);  }  [FE]  IndexOutOfBoundsException  [FE]          IndexOutOfBoundsException      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c!=  null)  {  out.write(c,  0,  pos);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c!=  null)  {  out.write(c,  0,  pos);  }	  out.write(c,    0,    pos);    if(c!=    null)    {    out.write(c,    0,    pos);    }    else    {    for(int    pos    =    0;    pos    <    len    -    2;    pos++)    {    pos    +=    Character.charCount(Character.codePointAt(pos,    pos));    }    	compilable	  [FE]  IndexOutOfBoundsException  	150	13	replace
750	[BUG]  [BUGGY]  while(pos  <  len)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  [CE]  'else'  without  'if'  [FE]                ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  while(pos  <  len)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	while(pos  <  len)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }	  if(consumed    <    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    out.write(c);    }    	non-compiled	[CE]  'else'  without  'if'	40	None	replace
751	[BUG]  [BUGGY]  char[]  c  =  input.getChars(pos,  pos);  out.write(c,  0,  len);  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]        IndexOutOfBoundsException      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  char[]  c  =  input.getChars(pos,  pos);  out.write(c,  0,  len);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	char[]  c  =  input.getChars(pos,  pos);  out.write(c,  0,  len);	  out.write(c,    0,    len);    char[]    c    =    input.getChars(pos,    pos);    out.write(c,    0,    len);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	115	None	replace
752	[BUG]  [BUGGY]  while(c!=  null  &&  c.length  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  [CE]  'else'  without  'if'  [FE]              ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  while(c!=  null  &&  c.length  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	while(c!=  null  &&  c.length  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }	  while(c!=    null)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    out.write(c);    }    	non-compiled	[CE]  'else'  without  'if'	176	None	replace
753	[BUG]  [BUGGY]  while(pos  >=  len)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c);  }  [CE]  'else'  without  'if'  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  while(pos  >=  len)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	while(pos  >=  len)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c);  }	  if(consumed    >=    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    out.write(c);    }    	non-compiled	[CE]  'else'  without  'if'	129	None	replace
754	[BUG]  [BUGGY]  char[]  c  =  input.toChars(pos);  out.write(c,  0,  len);  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]          IndexOutOfBoundsException      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  char[]  c  =  input.toChars(pos);  out.write(c,  0,  len);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	char[]  c  =  input.toChars(pos);  out.write(c,  0,  len);	  out.write(c,    0,    len);    char[]    c    =    input.toChars(c);    out.write(c,    0,    len);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	116	None	replace
755	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c,  0,  pos);  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]            IndexOutOfBoundsException      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c,  0,  pos);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c,  0,  pos);	  out.write(c,    0,    pos);    char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    out.write(c,    0,    pos);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	60	None	replace
756	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos),  pos);  out.write(c,  0,  pos);  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]              IndexOutOfBoundsException      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos),  pos);  out.write(c,  0,  pos);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	char[]  c  =  Character.toChars(Character.codePointAt(input,  pos),  pos);  out.write(c,  0,  pos);	  out.write(c,    0,    pos);    char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    out.write(c,    0,    pos);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	60	None	replace
757	[BUG]  [BUGGY]  out.write(c,  pos,  len);  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]    IndexOutOfBoundsException    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,  pos,  len);  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,    pos,    len);    char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	36	None	add
758	[BUG]  [BUGGY]  char[]  c  =  input.toChars(pos);  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]          IndexOutOfBoundsException      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  char[]  c  =  input.toChars(pos);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	char[]  c  =  input.toChars(pos);	  out.write(c,    0,    pos);    char[]    c    =    input.toChars(input);    out.write(c,    0,    pos);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	101	None	replace
759	[BUG]  [BUGGY]  if(consumed  <  =  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  <  =  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  <  =  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }	  if(consumed    ==    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
760	[BUG]  [BUGGY]  [FE]  IndexOutOfBoundsException  [FE]    IndexOutOfBoundsException    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c!=  null)  {  out.write(c,  0,  len);  out.write(c,  0,  len);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	if(c!=  null)  {  out.write(c,  0,  len);  out.write(c,  0,  len);  }	  out.write(c,    0,    len);    out.write(c,    0,    len);    	compilable	  [FE]  IndexOutOfBoundsException  	87	13	replace
761	[BUG]  [BUGGY]  if(c!=  null)  {  out.write(c,  0,  len);  out.write(c,  0,  len);  }  [FE]  IndexOutOfBoundsException  [FE]    IndexOutOfBoundsException    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c!=  null)  {  out.write(c,  0,  len);  out.write(c,  0,  len);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c!=  null)  {  out.write(c,  0,  len);  out.write(c,  0,  len);  }	  out.write(c,    0,    len);    out.write(c,    0,    len);    	compilable	  [FE]  IndexOutOfBoundsException  	87	13	replace
762	[BUG]  [BUGGY]  [FE]  IndexOutOfBoundsException  [FE]    IndexOutOfBoundsException    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,  0,  c.length  +  1);  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c,  0,  c.length  +  1);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	out.write(c,    0,    c.length    +    1);    c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c,  0,  c.length  +  1);	  	compilable	  [FE]  IndexOutOfBoundsException  	77	13	add
763	[BUG]  [BUGGY]  out.write(c,  0,  c.length  +  1);  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c,  0,  c.length  +  1);  [FE]  IndexOutOfBoundsException  [FE]    IndexOutOfBoundsException    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,  0,  c.length  +  1);  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c,  0,  c.length  +  1);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,    0,    c.length    +    1);    c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c,  0,  c.length  +  1);	  	compilable	  [FE]  IndexOutOfBoundsException  	77	13	add
764	[BUG]  [BUGGY]  if(c!=  null)  {  for(int  pt  =  0;  pt  <  consumeLen;  pt++)  {  pos  +=  Character.charCount(c.charCount());  }  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c!=  null)  {  for(int  pt  =  0;  pt  <  consumeLen;  pt++)  {  pos  +=  Character.charCount(c.charCount());  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c!=  null)  {  for(int  pt  =  0;  pt  <  consumeLen;  pt++)  {  pos  +=  Character.charCount(c.charCount());  }	  if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    pos    +=    Character.charCount(c.charCount());    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
765	[BUG]  [BUGGY]  if(consumed  >  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }  }	  if(consumed    <    0)    {    if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toChars();    pos    +=    c.length();    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
766	[BUG]  [BUGGY]  pos  +=  Character.toChars(Character.codePointAt(input,  pos));  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]    ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  pos  +=  Character.toChars(Character.codePointAt(input,  pos));  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	pos  +=  Character.toChars(Character.codePointAt(input,  pos));	  pos    +=    Character.charCount(Character.codePointAt(input,    pos));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	95	None	replace
767	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(input,  pos  +  1));  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	pos  +=  Character.charCount(Character.codePointAt(input,  pos  +  1));	  pos    +=    Character.charCount(Character.codePointAt(input,    pos));    	compilable	  [FE]  ComparisonFailure  	95	13	replace
768	[BUG]  [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(input,  pos  +  1));  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(input,  pos  +  1));  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	pos  +=  Character.charCount(Character.codePointAt(input,  pos  +  1));	  pos    +=    Character.charCount(Character.codePointAt(input,    pos));    	compilable	  [FE]  ComparisonFailure  	95	13	replace
769	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]        ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(input,  len));  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	pos  +=  Character.charCount(Character.codePointAt(input,  len));	  pos    +=    Character.charCount(Character.codePointAt(input,    pos));    	compilable	  [FE]  StringIndexOutOfBoundsException  	95	13	replace
770	[BUG]  [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(input,  len));  [FE]  StringIndexOutOfBoundsException  [FE]        ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(input,  len));  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	pos  +=  Character.charCount(Character.codePointAt(input,  len));	  pos    +=    Character.charCount(Character.codePointAt(input,    pos));    	compilable	  [FE]  StringIndexOutOfBoundsException  	95	13	replace
771	[BUG]  [BUGGY]  out.write(c,  0,  len);  char[]  c  =  Character.toChars(Character.codePointAt(pos,  input));  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]            IndexOutOfBoundsException      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,  0,  len);  char[]  c  =  Character.toChars(Character.codePointAt(pos,  input));  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,  0,  len);  char[]  c  =  Character.toChars(Character.codePointAt(pos,  input));	  out.write(c,    0,    len);    char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	89	None	replace
772	[BUG]  [BUGGY]  while(pos  >=  len)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c[pos]);  }  [CE]  'else'  without  'if'  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  while(pos  >=  len)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c[pos]);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	while(pos  >=  len)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c[pos]);  }	  if(consumed!=    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    out.write(c[pos]);    }    	non-compiled	[CE]  'else'  without  'if'	143	None	replace
773	[BUG]  [BUGGY]  if(c!=  null)  {  for(int  pt  =  0;  pt  <  consumeLen;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pos,  pos));  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c!=  null)  {  for(int  pt  =  0;  pt  <  consumeLen;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pos,  pos));  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c!=  null)  {  for(int  pt  =  0;  pt  <  consumeLen;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pos,  pos));  }	  if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    pos    +=    Character.charCount(Character.codePointAt(pos,    pos));    }    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
774	[BUG]  [BUGGY]  pos  <  len;  pos++)  {  c[pos]  =  c.charValue();  }  [CE]  >  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  pos  <  len;  pos++)  {  c[pos]  =  c.charValue();  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	pos  <  len;  pos++)  {  c[pos]  =  c.charValue();  }	  if(c!=    null)    {    for(pos    =    0;    pos    <    len;    pos++)    {    c[pos]    =    c.charValue();    }    	non-compiled	[CE]  >  expected	72	None	replace
775	[BUG]  [BUGGY]  if(c!=  null)  {  for(pos  =  0;  pos  <  len;  pos++)  {  c[pos]  =  Character.charValue();  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c!=  null)  {  for(pos  =  0;  pos  <  len;  pos++)  {  c[pos]  =  Character.charValue();  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c!=  null)  {  for(pos  =  0;  pos  <  len;  pos++)  {  c[pos]  =  Character.charValue();  }	  if(c!=    null)    {    for(pos    =    0;    pos    <    len;    pos++)    {    c[pos]    =    c.charValue();    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
776	[BUG]  [BUGGY]  if(consumed  >  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length;  }  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length;  }  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length;  }  }	  if(consumed    <    0)    {    if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    pos    +=    c.length;    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
777	[BUG]  [BUGGY]  if(pos  <  len)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length;  }  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(pos  <  len)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length;  }  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(pos  <  len)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length;  }  }	  if(consumed    <    0)    {    if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    pos    +=    c.length;    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
778	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c!=  null  &&  c.length  >  0)  {  out.write(c,  0,  c.length);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	if(c!=  null  &&  c.length  >  0)  {  out.write(c,  0,  c.length);  }	  if(c!=    null    &&    c.length    >    0)    {    out.write(c);    }    	compilable	  [FE]  ComparisonFailure  	155	1	replace
779	[BUG]  [BUGGY]  if(c!=  null  &&  c.length  >  0)  {  out.write(c,  0,  c.length);  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c!=  null  &&  c.length  >  0)  {  out.write(c,  0,  c.length);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c!=  null  &&  c.length  >  0)  {  out.write(c,  0,  c.length);  }	  if(c!=    null    &&    c.length    >    0)    {    out.write(c);    }    	compilable	  [FE]  ComparisonFailure  	155	1	replace
780	[BUG]  [BUGGY]          if(c!=    null)    {    out.write(c);    }    else    {    out.write('n');    }    if(c!=  null)  {  out.write('n');  }  else  {  out.write('n');  }  if(c  >=  null)  {  out.write(c);  }  else  {  out.write('n');  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]    ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]          if(c!=    null)    {    out.write(c);    }    else    {    out.write('n');    }    if(c!=  null)  {  out.write('n');  }  else  {  out.write('n');  }  if(c  >=  null)  {  out.write(c);  }  else  {  out.write('n');  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	                if(c!=        null)        {        out.write(c);        }        else        {        out.write('n');        }        if(c!=    null)    {    out.write('n');    }    else    {    out.write('n');    }    if(c  >=  null)  {  out.write(c);  }  else  {  out.write('n');  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	3	None	add
781	[BUG]  [BUGGY]  if(c  ==  null)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length();  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c  ==  null)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length();  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c  ==  null)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length();  }	  if(c!=    null)    {    for(int    pt    =    0;    pt    <    consumed;    pt++)    {    char[]    c    =    c.toCharArray();    pos    +=    c.length();    }    	non-compiled	[CE]  illegal  start  of  expression	160	None	replace
782	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c!=  null  &&  c.length  >  0)  {  out.write('n');  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	if(c!=  null  &&  c.length  >  0)  {  out.write('n');  }	  if(c!=    null)    {    out.write('n');    }    	compilable	  [FE]  ComparisonFailure  	110	13	replace
783	[BUG]  [BUGGY]  if(c!=  null  &&  c.length  >  0)  {  out.write('n');  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c!=  null  &&  c.length  >  0)  {  out.write('n');  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c!=  null  &&  c.length  >  0)  {  out.write('n');  }	  if(c!=    null)    {    out.write('n');    }    	compilable	  [FE]  ComparisonFailure  	110	13	replace
784	[BUG]  [BUGGY]  char[]  c  =  input.toChars(input,  pos);  out.write(c,  0,  len);  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]            IndexOutOfBoundsException      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  char[]  c  =  input.toChars(input,  pos);  out.write(c,  0,  len);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	char[]  c  =  input.toChars(input,  pos);  out.write(c,  0,  len);	  out.write(c,    0,    len);    char[]    c    =    input.toChars(input,    pos);    out.write(c,    0,    len);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	117	None	replace
785	[BUG]  [BUGGY]  if(pos  >=  len)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(pos  >=  len)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(pos  >=  len)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }	  if(consumed    >=    0)    {    if(c!=    null)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
786	[BUG]  [BUGGY]  if(c!=  null)  {  for(int  pos  =  0;  pos  <  c.length;  pos++)  {  c[pos]  =  Character.toChars(c.charValue());  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c!=  null)  {  for(int  pos  =  0;  pos  <  c.length;  pos++)  {  c[pos]  =  Character.toChars(c.charValue());  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c!=  null)  {  for(int  pos  =  0;  pos  <  c.length;  pos++)  {  c[pos]  =  Character.toChars(c.charValue());  }	  if(c!=    null)    {    for(int    pos    =    0;    pos    <    c.length;    pos++)    {    c[pos]    =    c.charValue();    }    	non-compiled	[CE]  illegal  start  of  expression	163	None	replace
787	[BUG]  [BUGGY]  if(c!=  null)  {  for(int  pos  =  0;  pos  <  c.length;  pos++)  {  c[pos]  =  c.toCharArray();  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c!=  null)  {  for(int  pos  =  0;  pos  <  c.length;  pos++)  {  c[pos]  =  c.toCharArray();  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c!=  null)  {  for(int  pos  =  0;  pos  <  c.length;  pos++)  {  c[pos]  =  c.toCharArray();  }	  if(c!=    null)    {    for(int    pos    =    0;    pos    <    c.length;    pos++)    {    c[pos]    =    c.charValue();    }    	non-compiled	[CE]  illegal  start  of  expression	163	None	replace
788	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(pos,  out));  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]          IndexOutOfBoundsException      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(pos,  out));  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	char[]  c  =  Character.toChars(Character.codePointAt(pos,  out));	  out.write(c,    0,    pos);    char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	59	None	replace
789	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >  0)  {  out.write(c,  0,  consumed);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	if(consumed  >  0)  {  out.write(c,  0,  consumed);  }	  if(consumed    >    0)    {    out.write(c);    }    	compilable	  [FE]  ComparisonFailure  	142	13	replace
790	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write(c,  0,  consumed);  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >  0)  {  out.write(c,  0,  consumed);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >  0)  {  out.write(c,  0,  consumed);  }	  if(consumed    >    0)    {    out.write(c);    }    	compilable	  [FE]  ComparisonFailure  	142	13	replace
791	[BUG]  [BUGGY]          if(c!=    null)    {    out.write(c);    }    if(c  ==  null)  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }  if(c  ==  null)  {  out.write(c);  }  else  {  for(int  pt  =  0;  pt  <  len  -  2;  pt++)  {  pos  +=  Character.charCount(Character.  [CE]  ')'  expected  [FE]    ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]          if(c!=    null)    {    out.write(c);    }    if(c  ==  null)  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }  if(c  ==  null)  {  out.write(c);  }  else  {  for(int  pt  =  0;  pt  <  len  -  2;  pt++)  {  pos  +=  Character.charCount(Character.  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	                if(c!=        null)        {        out.write(c);        }        if(c    ==    null)    {    out.write(c);    }    if(c!=  null)  {  out.write(c);  }  if(c  ==  null)  {  out.write(c);  }  else  {  for(int  pt  =  0;  pt  <  len  -  2;  pt++)  {  pos  +=  Character.charCount(Character.	  	non-compiled	[CE]  ')'  expected	10	None	add
792	[BUG]  [BUGGY]          if(c!=    null)    {    out.write(c);    }    if(c  ==  null)  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }  if(c  ==  null)  {  out.write(c);  }  else  {  for(int  pt  =  0;  pt  <  len  -  2;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt  [CE]  ')'  expected  [FE]      ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]          if(c!=    null)    {    out.write(c);    }    if(c  ==  null)  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }  if(c  ==  null)  {  out.write(c);  }  else  {  for(int  pt  =  0;  pt  <  len  -  2;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	                if(c!=        null)        {        out.write(c);        }        if(c    ==    null)    {    out.write(c);    }    if(c!=  null)  {  out.write(c);  }  if(c  ==  null)  {  out.write(c);  }  else  {  for(int  pt  =  0;  pt  <  len  -  2;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt	  	non-compiled	[CE]  ')'  expected	10	None	add
793	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]              ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c!=  null)  {  out.write(c,  0,  c.length);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	if(c!=  null)  {  out.write(c,  0,  c.length);  }	          if(c!=    null)    {    out.write(c);    }    if(c    >>    null)    {    out.write(c);    }    	compilable	  [FE]  ComparisonFailure  	13	1	replace
794	[BUG]  [BUGGY]  if(c!=  null)  {  out.write(c,  0,  c.length);  }  [FE]  ComparisonFailure  [FE]              ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c!=  null)  {  out.write(c,  0,  c.length);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c!=  null)  {  out.write(c,  0,  c.length);  }	          if(c!=    null)    {    out.write(c);    }    if(c    >>    null)    {    out.write(c);    }    	compilable	  [FE]  ComparisonFailure  	13	1	replace
795	[BUG]  [BUGGY]  [FE]  IndexOutOfBoundsException  [FE]                ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c!=  null)  {  out.write(c,  0,  len);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	if(c!=  null)  {  out.write(c,  0,  len);  }	          if(c!=    null)    {    out.write(c);    }    if(c    >>    null)    {    out.write(c);    }    	compilable	  [FE]  IndexOutOfBoundsException  	13	13	replace
796	[BUG]  [BUGGY]  if(c!=  null)  {  out.write(c,  0,  len);  }  [FE]  IndexOutOfBoundsException  [FE]                ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c!=  null)  {  out.write(c,  0,  len);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c!=  null)  {  out.write(c,  0,  len);  }	          if(c!=    null)    {    out.write(c);    }    if(c    >>    null)    {    out.write(c);    }    	compilable	  [FE]  IndexOutOfBoundsException  	13	13	replace
797	[BUG]  [BUGGY]  if(pos  <  len)  {  out.write(c,  0,  pos);  char[]  c  =  input.toChars(c,  0,  pos);  out.write(c,  0,  pos);  }  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]              IndexOutOfBoundsException      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(pos  <  len)  {  out.write(c,  0,  pos);  char[]  c  =  input.toChars(c,  0,  pos);  out.write(c,  0,  pos);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(pos  <  len)  {  out.write(c,  0,  pos);  char[]  c  =  input.toChars(c,  0,  pos);  out.write(c,  0,  pos);  }	  out.write(c,    0,    pos);    char[]    c    =    input.toChars(c,    0,    pos);    out.write(c,    0,    pos);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	103	None	replace
798	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(consumed,  pos));  out.write(c,  0,  pos);  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                IndexOutOfBoundsException      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(consumed,  pos));  out.write(c,  0,  pos);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	char[]  c  =  Character.toChars(Character.codePointAt(consumed,  pos));  out.write(c,  0,  pos);	  out.write(c,    0,    pos);    char[]    c    =    Character.toChars(Character.codePointAt(consumed,    pos));    out.write(c,    0,    pos);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	62	None	replace
799	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]          if(c!=    null)    {    out.write(c);    }    if(c!=  null)  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }  if(c  ==  null)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	                if(c!=        null)        {        out.write(c);        }        if(c!=    null)    {    out.write(c);    }    if(c!=  null)  {  out.write(c);  }  if(c  ==  null)  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	8	13	add
800	[BUG]  [BUGGY]          if(c!=    null)    {    out.write(c);    }    if(c!=  null)  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }  if(c  ==  null)  {  out.write(c);  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]          if(c!=    null)    {    out.write(c);    }    if(c!=  null)  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }  if(c  ==  null)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	                if(c!=        null)        {        out.write(c);        }        if(c!=    null)    {    out.write(c);    }    if(c!=  null)  {  out.write(c);  }  if(c  ==  null)  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	8	13	add
801	[BUG]  [BUGGY]  timeout  [FE]      ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]          if(c!=    null)    {    out.write(c);    }    if(c!=  null)  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }  while(c!=  null)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	                if(c!=        null)        {        out.write(c);        }        if(c!=    null)    {    out.write(c);    }    if(c!=  null)  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }  while(c!=  null)  {  out.write(c);  }	  	compilable	timeout	8	1	add
802	[BUG]  [BUGGY]          if(c!=    null)    {    out.write(c);    }    if(c!=  null)  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }  while(c!=  null)  {  out.write(c);  }  timeout  [FE]      ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]          if(c!=    null)    {    out.write(c);    }    if(c!=  null)  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }  while(c!=  null)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	                if(c!=        null)        {        out.write(c);        }        if(c!=    null)    {    out.write(c);    }    if(c!=  null)  {  out.write(c);  }  if(c!=  null)  {  out.write(c);  }  while(c!=  null)  {  out.write(c);  }	  	compilable	timeout	8	1	add
803	[BUG]  [BUGGY]  pos  +=  Character.charCount(c,  0,  pos);  [CE]  method  charCount  in  class  Character  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  pos  +=  Character.charCount(c,  0,  pos);  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	pos  +=  Character.charCount(c,  0,  pos);	  pos    +=    Character.charCount(c,    pos);    	non-compiled	[CE]  method  charCount  in  class  Character  cannot  be  applied  to  given  types;	178	None	replace
804	[BUG]  [BUGGY]  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }	  if(c!=    null)    {    for(int    pt    =    0;    pt    <    consumed;    pt++)    {    char[]    c    =    c.toCharArray();    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	153	None	replace
805	[BUG]  [BUGGY]  if(c  ==  null)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c  ==  null)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c  ==  null)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }	          if(c!=    null)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    c.toChars();    pos    +=    c.length();    }    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
806	[BUG]  [BUGGY]  pos  <  len  -  2)  {  if(c!=  null)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }  [CE]  >  expected  [FE]          ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  pos  <  len  -  2)  {  if(c!=  null)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	pos  <  len  -  2)  {  if(c!=  null)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }	          if(c!=    null)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    c.toChars();    pos    +=    c.length();    }    	non-compiled	[CE]  >  expected	97	None	replace
807	[BUG]  [BUGGY]  if(c!=  null)  {  for(pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c!=  null)  {  for(pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c!=  null)  {  for(pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }	          if(c!=    null)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    c.toChars();    pos    +=    c.length();    }    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
808	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  c.length;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length;  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  c.length;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length;  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  c.length;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length;  }	  if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    pos    +=    c.length;    }    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
809	[BUG]  [BUGGY]  if(c  ==  null)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c  ==  null)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c  ==  null)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }	  if(c!=    null)    {    for(int    pt    =    0;    pt    <    consumed;    pt++)    {    char[]    c    =    c.toChars();    pos    +=    c.length();    }    	non-compiled	[CE]  illegal  start  of  expression	162	None	replace
810	[BUG]  [BUGGY]  if(pos!=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(pos!=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(pos!=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  }	  if(consumed!=    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    }    	non-compiled	[CE]  illegal  start  of  expression	145	None	replace
811	[BUG]  [BUGGY]  if(consumed  <  =  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  <  =  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  <  =  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  }	  if(consumed!=    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    }    	non-compiled	[CE]  illegal  start  of  expression	145	None	replace
812	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  out.write(c);  }	  if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
813	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,    0,    c.length);    out.write(c,  0,  c.length);  if(c!=  null)  {  out.write(c,  0,  c.length);  out.write(c,  0,  c.length);  }  else  {  out.write(c,  0,  c.length);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	out.write(c,        0,        c.length);        out.write(c,    0,    c.length);    if(c!=  null)  {  out.write(c,  0,  c.length);  out.write(c,  0,  c.length);  }  else  {  out.write(c,  0,  c.length);  }	  	compilable	  [FE]  ComparisonFailure  	26	13	add
814	[BUG]  [BUGGY]  out.write(c,    0,    c.length);    out.write(c,  0,  c.length);  if(c!=  null)  {  out.write(c,  0,  c.length);  out.write(c,  0,  c.length);  }  else  {  out.write(c,  0,  c.length);  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,    0,    c.length);    out.write(c,  0,  c.length);  if(c!=  null)  {  out.write(c,  0,  c.length);  out.write(c,  0,  c.length);  }  else  {  out.write(c,  0,  c.length);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,        0,        c.length);        out.write(c,    0,    c.length);    if(c!=  null)  {  out.write(c,  0,  c.length);  out.write(c,  0,  c.length);  }  else  {  out.write(c,  0,  c.length);  }	  	compilable	  [FE]  ComparisonFailure  	26	13	add
815	[BUG]  [BUGGY]  out.write(c,    0,    c.length);    out.write(c,  0,  c.length);  if(c!=  null)  {  out.write(c,  0,  c.length);  out.write(c,  0,  c.length);  }  else  {  for(int  pos  =  0;  pos  <  len  -  2;  pos++)  {  pos  +=  Character.charCount(Character.codePointAt(pos,  pos  [CE]  ')'  expected  [FE]      ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,    0,    c.length);    out.write(c,  0,  c.length);  if(c!=  null)  {  out.write(c,  0,  c.length);  out.write(c,  0,  c.length);  }  else  {  for(int  pos  =  0;  pos  <  len  -  2;  pos++)  {  pos  +=  Character.charCount(Character.codePointAt(pos,  pos  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,        0,        c.length);        out.write(c,    0,    c.length);    if(c!=  null)  {  out.write(c,  0,  c.length);  out.write(c,  0,  c.length);  }  else  {  for(int  pos  =  0;  pos  <  len  -  2;  pos++)  {  pos  +=  Character.charCount(Character.codePointAt(pos,  pos	  	non-compiled	[CE]  ')'  expected	26	None	add
816	[BUG]  [BUGGY]  pos  +=  Character.charCount(c,  offset,  len);  [CE]  cannot  find  symbol  offset  [FE]                      ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  pos  +=  Character.charCount(c,  offset,  len);  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	pos  +=  Character.charCount(c,  offset,  len);	  pos    +=    Character.charCount(c,    len);    	non-compiled	[CE]  cannot  find  symbol  offset	99	None	replace
817	[BUG]  [BUGGY]  [FE]  IndexOutOfBoundsException  [FE]    IndexOutOfBoundsException    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,  0,  c.length  +  2);  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c,  0,  c.length  +  2);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	out.write(c,    0,    c.length    +    2);    c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c,  0,  c.length  +  2);	  	compilable	  [FE]  IndexOutOfBoundsException  	81	13	add
818	[BUG]  [BUGGY]  out.write(c,  0,  c.length  +  2);  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c,  0,  c.length  +  2);  [FE]  IndexOutOfBoundsException  [FE]    IndexOutOfBoundsException    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,  0,  c.length  +  2);  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c,  0,  c.length  +  2);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,    0,    c.length    +    2);    c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c,  0,  c.length  +  2);	  	compilable	  [FE]  IndexOutOfBoundsException  	81	13	add
819	[BUG]  [BUGGY]  out.write(c,  pos,  raw);  [CE]  cannot  find  symbol  raw  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  out.write(c,  pos,  raw);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,  pos,  raw);	  out.write(c,    pos,    consume);    	non-compiled	[CE]  cannot  find  symbol  raw	35	None	replace
820	[BUG]  [BUGGY]  if(pos  <  len)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(pos  <  len)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(pos  <  len)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  }	  if(consumed    ==    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    }    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
821	[BUG]  [BUGGY]  if(c  ==  null)  {  for(int  pt  =  0;  pt  <  consumeLen;  pt++)  {  char[]  c  =  c.toCharArray();  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(c  ==  null)  {  for(int  pt  =  0;  pt  <  consumeLen;  pt++)  {  char[]  c  =  c.toCharArray();  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(c  ==  null)  {  for(int  pt  =  0;  pt  <  consumeLen;  pt++)  {  char[]  c  =  c.toCharArray();  }	  if(c!=    null)    {    for(int    pt    =    0;    pt    <    consumeLen;    pt++)    {    char[]    c    =    c.toCharArray();    }    	non-compiled	[CE]  illegal  start  of  expression	174	None	replace
822	[BUG]  [BUGGY]  OutputStream  out  =  input.readLine(),  pos;  [CE]  cannot  find  symbol  [FE]        ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  OutputStream  out  =  input.readLine(),  pos;  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	OutputStream  out  =  input.readLine(),  pos;	  OutputStream    out    =    input.readLine();    	non-compiled	[CE]  cannot  find  symbol	135	None	replace
823	[BUG]  [BUGGY]  if(pos  <  len)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  if(pos  <  len)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	if(pos  <  len)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }	  if(consumed    <    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    c.toCharArray();    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	152	None	replace
824	[BUG]  [BUGGY]          if(c!=    null)    {    out.write(c);    }    else    {    out.write('n');    }    if(c!=  null)  {  out.write(c);  }  else  {  out.write('n');  }  if(c  >=  null)  {  out.write(c);  }  else  {  out.write('n');  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]    ComparisonFailure    [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]          if(c!=    null)    {    out.write(c);    }    else    {    out.write('n');    }    if(c!=  null)  {  out.write(c);  }  else  {  out.write('n');  }  if(c  >=  null)  {  out.write(c);  }  else  {  out.write('n');  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	                if(c!=        null)        {        out.write(c);        }        else        {        out.write('n');        }        if(c!=    null)    {    out.write(c);    }    else    {    out.write('n');    }    if(c  >=  null)  {  out.write(c);  }  else  {  out.write('n');  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	1	None	add
825	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.toChars(input,  pos));  out.write(c,  0,  c.length);  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]        ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  char[]  c  =  Character.toChars(Character.toChars(input,  pos));  out.write(c,  0,  c.length);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	char[]  c  =  Character.toChars(Character.toChars(input,  pos));  out.write(c,  0,  c.length);	  out.write(c,    0,    c.length);    char[]    c    =    Character.toChars(Character.toChars(input,    pos));    out.write(c,    0,    c.length);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	104	None	replace
826	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.toChars(input,  pos));  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]          ComparisonFailure      [CONTEXT]      }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));      [BUGGY]  char[]  c  =  Character.toChars(Character.toChars(input,  pos));  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	char[]  c  =  Character.toChars(Character.toChars(input,  pos));	  out.write(c,    0,    c.length);    char[]    c    =    Character.toChars(Character.toChars(input,    pos));    out.write(c,    0,    c.length);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	104	None	replace
