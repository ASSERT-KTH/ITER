bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  IndexOutOfBoundsException  [FE]    ComparisonFailure  [CONTEXT]  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  [BUGGY]  out.write(c,  0,  pos);  [BUGGY]  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	out.write(c,  0,  pos);	out.write(c);  	compilable	  [FE]  IndexOutOfBoundsException  	3	13	replace
2	[BUG]  [BUGGY]  out.write(c,  0,  pos);  [FE]  IndexOutOfBoundsException  [FE]    ComparisonFailure  [CONTEXT]  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  [BUGGY]  out.write(c,  0,  pos);  [BUGGY]  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,  0,  pos);	out.write(c);  	compilable	  [FE]  IndexOutOfBoundsException  	3	13	replace
3	[BUG]  [BUGGY]  [FE]  IndexOutOfBoundsException  [FE]      ComparisonFailure  [CONTEXT]  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  [BUGGY]  out.write(c,  0,  len);  [BUGGY]  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	out.write(c,  0,  len);	out.write(c);  	compilable	  [FE]  IndexOutOfBoundsException  	3	13	replace
4	[BUG]  [BUGGY]  out.write(c,  0,  len);  [FE]  IndexOutOfBoundsException  [FE]      ComparisonFailure  [CONTEXT]  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  [BUGGY]  out.write(c,  0,  len);  [BUGGY]  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,  0,  len);	out.write(c);  	compilable	  [FE]  IndexOutOfBoundsException  	3	13	replace
5	[BUG]  [BUGGY]  out.write(c,  pos);  [CE]  no  suitable  method  found  for  write(char[],int)  [FE]        ComparisonFailure  [CONTEXT]  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  [BUGGY]  out.write(c,  pos);  [BUGGY]  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,  pos);	out.write(c);  	non-compiled	[CE]  no  suitable  method  found  for  write(char[],int)	3	None	replace
6	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure  [CONTEXT]  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  [BUGGY]    [BUGGY]  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	  	out.write(c);  	compilable	  [FE]  ComparisonFailure  	3	13	replace
7	[BUG]  [BUGGY]    [FE]  ComparisonFailure  [FE]          ComparisonFailure  [CONTEXT]  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  [BUGGY]    [BUGGY]  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	  	out.write(c);  	compilable	  [FE]  ComparisonFailure  	3	13	replace
8	[BUG]  [BUGGY]    if(c!=  null)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure  [CONTEXT]  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  [BUGGY]    if(c!=  null)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  [BUGGY]  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	    if(c!=  null)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }		non-compiled	[CE]  illegal  start  of  expression	4	None	add
9	[BUG]  [BUGGY]    if(c!=  null)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c[pos]  =  c.charValue();  }  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure  [CONTEXT]  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  [BUGGY]    if(c!=  null)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c[pos]  =  c.charValue();  }  [BUGGY]  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	    if(c!=  null)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c[pos]  =  c.charValue();  }		non-compiled	[CE]  illegal  start  of  expression	4	None	add
10	[BUG]  [BUGGY]    if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure  [CONTEXT]  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  [BUGGY]    if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c);  }  [BUGGY]  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	    if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c);  }		non-compiled	[CE]  illegal  start  of  expression	4	None	add
11	[BUG]  [BUGGY]    if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c[pos]);  }  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure  [CONTEXT]  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  [BUGGY]    if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c[pos]);  }  [BUGGY]  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	    if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c[pos]);  }		non-compiled	[CE]  illegal  start  of  expression	4	None	add
12	[BUG]  [BUGGY]    pos  +=  Character.charCount(c);  [CE]  method  charCount  in  class  Character  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure  [CONTEXT]  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  [BUGGY]    pos  +=  Character.charCount(c);  [BUGGY]  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	    pos  +=  Character.charCount(c);		non-compiled	[CE]  method  charCount  in  class  Character  cannot  be  applied  to  given  types;	4	None	add
13	[BUG]  [BUGGY]  out.write(c,  0,  consume);  [CE]  cannot  find  symbol  consume  [FE]    ComparisonFailure  [CONTEXT]  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  [BUGGY]  out.write(c,  0,  consume);  [BUGGY]  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,  0,  consume);	out.write(c);  	non-compiled	[CE]  cannot  find  symbol  consume	3	None	replace
14	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure  [CONTEXT]  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  [BUGGY]    if(c!=  null)  {  out.write(c);  }  [BUGGY]  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	    if(c!=  null)  {  out.write(c);  }		compilable	  [FE]  ComparisonFailure  	4	13	add
15	[BUG]  [BUGGY]    if(c!=  null)  {  out.write(c);  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure  [CONTEXT]  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  [BUGGY]    if(c!=  null)  {  out.write(c);  }  [BUGGY]  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	    if(c!=  null)  {  out.write(c);  }		compilable	  [FE]  ComparisonFailure  	4	13	add
16	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure  [CONTEXT]  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  [BUGGY]    if(c!=  null)  {  out.write(c);  }  else  {  out.write('n');  }  [BUGGY]  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	    if(c!=  null)  {  out.write(c);  }  else  {  out.write('n');  }		compilable	  [FE]  ComparisonFailure  	4	13	add
17	[BUG]  [BUGGY]    if(c!=  null)  {  out.write(c);  }  else  {  out.write('n');  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure  [CONTEXT]  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  [BUGGY]    if(c!=  null)  {  out.write(c);  }  else  {  out.write('n');  }  [BUGGY]  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	    if(c!=  null)  {  out.write(c);  }  else  {  out.write('n');  }		compilable	  [FE]  ComparisonFailure  	4	13	add
18	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure  [CONTEXT]  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  [BUGGY]    if(c!=  null)  {  out.write(c);  }  else  {  out.write(c);  }  [BUGGY]  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	    if(c!=  null)  {  out.write(c);  }  else  {  out.write(c);  }		compilable	  [FE]  ComparisonFailure  	4	13	add
19	[BUG]  [BUGGY]    if(c!=  null)  {  out.write(c);  }  else  {  out.write(c);  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure  [CONTEXT]  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  [BUGGY]    if(c!=  null)  {  out.write(c);  }  else  {  out.write(c);  }  [BUGGY]  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	    if(c!=  null)  {  out.write(c);  }  else  {  out.write(c);  }		compilable	  [FE]  ComparisonFailure  	4	13	add
20	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure  [CONTEXT]  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  [BUGGY]  out.write(c,  0,  c.length);  [BUGGY]  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	add	out.write(c,  0,  c.length);	out.write(c);  	compilable	  [FE]  ComparisonFailure  	3	1	replace
21	[BUG]  [BUGGY]  out.write(c,  0,  c.length);  [FE]  ComparisonFailure  [FE]    ComparisonFailure  [CONTEXT]  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  [BUGGY]  out.write(c,  0,  c.length);  [BUGGY]  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	out.write(c,  0,  c.length);	out.write(c);  	compilable	  [FE]  ComparisonFailure  	3	1	replace
22	[BUG]  [BUGGY]    if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure  [CONTEXT]  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  [BUGGY]    if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }  [BUGGY]  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	    if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  out.write(c);  }		non-compiled	[CE]  illegal  start  of  expression	4	None	add
23	[BUG]  [BUGGY]    if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  }  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure  [CONTEXT]  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  [BUGGY]    if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  }  [BUGGY]  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	    if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  }		non-compiled	[CE]  illegal  start  of  expression	4	None	add
24	[BUG]  [BUGGY]    if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure  [CONTEXT]  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  [BUGGY]    if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }  [BUGGY]  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	    if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toChars();  pos  +=  c.length();  }		non-compiled	[CE]  illegal  start  of  expression	4	None	add
25	[BUG]  [BUGGY]    if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length();  }  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure  [CONTEXT]  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  [BUGGY]    if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length();  }  [BUGGY]  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	    if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length();  }		non-compiled	[CE]  illegal  start  of  expression	4	None	add
26	[BUG]  [BUGGY]    if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length;  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure  [CONTEXT]  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  [BUGGY]    if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length;  }  [BUGGY]  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	    if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  c.toCharArray();  pos  +=  c.length;  }		non-compiled	[CE]  illegal  start  of  expression	4	None	add
