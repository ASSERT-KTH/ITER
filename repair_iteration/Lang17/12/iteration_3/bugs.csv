bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  while  (pos  <  len  &&  input.length()  ==  0  ||  input.charAt(pos  -  1)!=  '-')  {  [BUGGY]      int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	add	while  (pos  <  len  &&  input.length()  ==  0  ||  input.charAt(pos  -  1)!=  '-')  {	  while    (pos    <    len    &&    input.length()    >    0    ||    input.charAt(pos    -    1)!=    '-')    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	31	19	replace
2	[BUG]  [BUGGY]  while  (pos  <  len  &&  input.length()  ==  0  ||  input.charAt(pos  -  1)!=  '-')  {  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  while  (pos  <  len  &&  input.length()  ==  0  ||  input.charAt(pos  -  1)!=  '-')  {  [BUGGY]      int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	while  (pos  <  len  &&  input.length()  ==  0  ||  input.charAt(pos  -  1)!=  '-')  {	  while    (pos    <    len    &&    input.length()    >    0    ||    input.charAt(pos    -    1)!=    '-')    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	31	19	replace
3	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  while  (pos  <  len  &&  input.length()!=  0  ||  input.charAt(pos  -  1)!=  '-')  {  [BUGGY]      int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	add	while  (pos  <  len  &&  input.length()!=  0  ||  input.charAt(pos  -  1)!=  '-')  {	  while    (pos    <    len    &&    input.length()    >    0    ||    input.charAt(pos    -    1)!=    '-')    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	31	19	replace
4	[BUG]  [BUGGY]  while  (pos  <  len  &&  input.length()!=  0  ||  input.charAt(pos  -  1)!=  '-')  {  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  while  (pos  <  len  &&  input.length()!=  0  ||  input.charAt(pos  -  1)!=  '-')  {  [BUGGY]      int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	while  (pos  <  len  &&  input.length()!=  0  ||  input.charAt(pos  -  1)!=  '-')  {	  while    (pos    <    len    &&    input.length()    >    0    ||    input.charAt(pos    -    1)!=    '-')    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	31	19	replace
5	[BUG]  [BUGGY]  if(pos  <  len)  {  if(len  <  2)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  <  len)  {  if(len  <  2)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  <  len)  {  if(len  <  2)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }	  if(len    <    2)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
6	[BUG]  [BUGGY]  if(pos  <  len)  {  if(len  <  1)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  <  len)  {  if(len  <  1)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  <  len)  {  if(len  <  1)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }	  if(len    <    2)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
7	[BUG]  [BUGGY]  if(pos  <  len)  {  if(len  >  2)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  <  len)  {  if(len  >  2)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  <  len)  {  if(len  >  2)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }	  if(len    <    2)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
8	[BUG]  [BUGGY]  pos  =  output.length();  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  pos  =  output.length();  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	pos  =  output.length();	  pos    =    input.length()    +    1;    	non-compiled	[CE]  class,  interface,  or  enum  expected	21	None	replace
9	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  while  (pos  <  len  &&  input.length()  >  1)  {  [BUGGY]      int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	add	while  (pos  <  len  &&  input.length()  >  1)  {	  while    (pos    <    len    &&    input.length()    >    0)    {    while    (pos    <    len    &&    input.length()    >    0)    {    	compilable	  [FE]  ComparisonFailure  	82	4	replace
10	[BUG]  [BUGGY]  while  (pos  <  len  &&  input.length()  >  1)  {  [FE]  ComparisonFailure  [FE]        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  while  (pos  <  len  &&  input.length()  >  1)  {  [BUGGY]      int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	while  (pos  <  len  &&  input.length()  >  1)  {	  while    (pos    <    len    &&    input.length()    >    0)    {    while    (pos    <    len    &&    input.length()    >    0)    {    	compilable	  [FE]  ComparisonFailure  	82	4	replace
11	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  while  (pos  <  len  ||  input.length()  ==  0)  {  [BUGGY]      int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	add	while  (pos  <  len  ||  input.length()  ==  0)  {	  while    (pos    <    len    ||    input.length()    >    0)    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	29	10	replace
12	[BUG]  [BUGGY]  while  (pos  <  len  ||  input.length()  ==  0)  {  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  while  (pos  <  len  ||  input.length()  ==  0)  {  [BUGGY]      int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	while  (pos  <  len  ||  input.length()  ==  0)  {	  while    (pos    <    len    ||    input.length()    >    0)    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	29	10	replace
13	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  while  (pos  <  input.length())  {  [BUGGY]      int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	add	while  (pos  <  input.length())  {	  while    (pos    <    len    -    1)    {    int    len    =    Character.codePointCount(input,    0,    input.length());    while    (pos    <    len    -    1)    {    	compilable	  [FE]  ComparisonFailure  	153	2	replace
14	[BUG]  [BUGGY]  while  (pos  <  input.length())  {  [FE]  ComparisonFailure  [FE]        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  while  (pos  <  input.length())  {  [BUGGY]      int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	while  (pos  <  input.length())  {	  while    (pos    <    len    -    1)    {    int    len    =    Character.codePointCount(input,    0,    input.length());    while    (pos    <    len    -    1)    {    	compilable	  [FE]  ComparisonFailure  	153	2	replace
15	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  while  (pos  <  0)  {  [BUGGY]      int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	add	while  (pos  <  0)  {	  while    (pos    <    len    -    1)    {    int    len    =    Character.codePointCount(input,    0,    input.length());    while    (pos    <    len    -    1)    {    	compilable	  [FE]  AssertionFailedError  	153	19	replace
16	[BUG]  [BUGGY]  while  (pos  <  0)  {  [FE]  AssertionFailedError  [FE]          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  while  (pos  <  0)  {  [BUGGY]      int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	while  (pos  <  0)  {	  while    (pos    <    len    -    1)    {    int    len    =    Character.codePointCount(input,    0,    input.length());    while    (pos    <    len    -    1)    {    	compilable	  [FE]  AssertionFailedError  	153	19	replace
17	[BUG]  [BUGGY]  pos  =  len.length();  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  pos  =  len.length();  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	pos  =  len.length();	          pos    =    input.length();    pos    =    output.length();    	non-compiled	[CE]  class,  interface,  or  enum  expected	43	None	replace
18	[BUG]  [BUGGY]  pos  =  in.length();  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  pos  =  in.length();  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	pos  =  in.length();	          pos    =    input.length();    pos    =    output.length();    	non-compiled	[CE]  class,  interface,  or  enum  expected	43	None	replace
19	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  while(pos  >=  len  -  1)  {  [BUGGY]      int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	add	while(pos  >=  len  -  1)  {	  while(pos    >    len    -    1)    {    	compilable	  [FE]  AssertionFailedError  	140	19	replace
20	[BUG]  [BUGGY]  while(pos  >=  len  -  1)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  while(pos  >=  len  -  1)  {  [BUGGY]      int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	while(pos  >=  len  -  1)  {	  while(pos    >    len    -    1)    {    	compilable	  [FE]  AssertionFailedError  	140	19	replace
21	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  while(pos  >  len  -  2)  {  [BUGGY]      int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	add	while(pos  >  len  -  2)  {	  while(pos    >    len    -    1)    {    	compilable	  [FE]  AssertionFailedError  	140	19	replace
22	[BUG]  [BUGGY]  while(pos  >  len  -  2)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  while(pos  >  len  -  2)  {  [BUGGY]      int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	while(pos  >  len  -  2)  {	  while(pos    >    len    -    1)    {    	compilable	  [FE]  AssertionFailedError  	140	19	replace
23	[BUG]  [BUGGY]  out.write(input.charAt(pos,  pos));  [CE]  class,  interface,  or  enum  expected  [FE]          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  out.write(input.charAt(pos,  pos));  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	out.write(input.charAt(pos,  pos));	  out.write(input.charAt(pos,    len));    	non-compiled	[CE]  class,  interface,  or  enum  expected	18	None	replace
24	[BUG]  [BUGGY]  out.write(input.charAt(pos,  pos  +  1));  [CE]  class,  interface,  or  enum  expected  [FE]            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  out.write(input.charAt(pos,  pos  +  1));  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	out.write(input.charAt(pos,  pos  +  1));	  out.write(input.charAt(pos,    len));    	non-compiled	[CE]  class,  interface,  or  enum  expected	18	None	replace
25	[BUG]  [BUGGY]  out.write(input.charAt(pos,  len  -  1));  [CE]  class,  interface,  or  enum  expected  [FE]              ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  out.write(input.charAt(pos,  len  -  1));  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	out.write(input.charAt(pos,  len  -  1));	  out.write(input.charAt(pos,    len));    	non-compiled	[CE]  class,  interface,  or  enum  expected	18	None	replace
26	[BUG]  [BUGGY]  out.write(input.charAt(pos,  len  +  1));  [CE]  class,  interface,  or  enum  expected  [FE]                ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  out.write(input.charAt(pos,  len  +  1));  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	out.write(input.charAt(pos,  len  +  1));	  out.write(input.charAt(pos,    len));    	non-compiled	[CE]  class,  interface,  or  enum  expected	18	None	replace
27	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  >  0)  {  for(int  c  =  0;  c  <  len;  c++)  {  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	add	if(pos  >  0)  {  for(int  c  =  0;  c  <  len;  c++)  {  out.write(c);  }	  if(pos    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    out.write(c);    }    	compilable	  [FE]  AssertionFailedError  	141	19	replace
28	[BUG]  [BUGGY]  if(pos  >  0)  {  for(int  c  =  0;  c  <  len;  c++)  {  out.write(c);  }  [FE]  AssertionFailedError  [FE]                ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  >  0)  {  for(int  c  =  0;  c  <  len;  c++)  {  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  >  0)  {  for(int  c  =  0;  c  <  len;  c++)  {  out.write(c);  }	  if(pos    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    out.write(c);    }    	compilable	  [FE]  AssertionFailedError  	141	19	replace
29	[BUG]  [BUGGY]  int  c  =  input.length();  [CE]  class,  interface,  or  enum  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  int  c  =  input.length();  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	int  c  =  input.length();	  if(pos    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    out.write(c);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	141	None	replace
30	[BUG]  [BUGGY]  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c,  out);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                    ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c,  out);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c,  out);  }	  if(pos    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	141	None	replace
31	[BUG]  [BUGGY]  if(pos  <  len)  {  out.write(input.charAt(0));  out.write(input.charAt(2));  }  [CE]  class,  interface,  or  enum  expected  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  <  len)  {  out.write(input.charAt(0));  out.write(input.charAt(2));  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  <  len)  {  out.write(input.charAt(0));  out.write(input.charAt(2));  }	          out.write(input.charAt(0));    out.write(input.charAt(2));    	non-compiled	[CE]  class,  interface,  or  enum  expected	60	None	replace
32	[BUG]  [BUGGY]  if(pos  >  0)  {  out.write(input.charAt(0));  out.write(input.charAt(2));  }  [CE]  class,  interface,  or  enum  expected  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  >  0)  {  out.write(input.charAt(0));  out.write(input.charAt(2));  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  >  0)  {  out.write(input.charAt(0));  out.write(input.charAt(2));  }	          out.write(input.charAt(0));    out.write(input.charAt(2));    	non-compiled	[CE]  class,  interface,  or  enum  expected	60	None	replace
33	[BUG]  [BUGGY]  if(len  >  0)  {  out.write(input.charAt(0));  out.write(input.charAt(2));  }  [CE]  class,  interface,  or  enum  expected  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  >  0)  {  out.write(input.charAt(0));  out.write(input.charAt(2));  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  >  0)  {  out.write(input.charAt(0));  out.write(input.charAt(2));  }	          out.write(input.charAt(0));    out.write(input.charAt(2));    	non-compiled	[CE]  class,  interface,  or  enum  expected	60	None	replace
34	[BUG]  [BUGGY]  out.write(c,  0,  len);  [CE]  class,  interface,  or  enum  expected  [FE]        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  out.write(c,  0,  len);  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	out.write(c,  0,  len);	  out.write(c);    	non-compiled	[CE]  class,  interface,  or  enum  expected	17	None	replace
35	[BUG]  [BUGGY]  out.write(c,  pos);  [CE]  class,  interface,  or  enum  expected  [FE]          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  out.write(c,  pos);  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	out.write(c,  pos);	  out.write(c);    	non-compiled	[CE]  class,  interface,  or  enum  expected	17	None	replace
36	[BUG]  [BUGGY]  char[]  c  =  input.toChars(pos);  [CE]  class,  interface,  or  enum  expected  [FE]            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  char[]  c  =  input.toChars(pos);  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	char[]  c  =  input.toChars(pos);	  out.write(c);    	non-compiled	[CE]  class,  interface,  or  enum  expected	17	None	replace
37	[BUG]  [BUGGY]  if(pos  <  len)  {  for(int  c  =  0;  c  <  len;  c++)  {  out.write(c);  }  if(pos  <  len)  {  for(int  c  =  0;  c  <  len;  c++)  {  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  <  len)  {  for(int  c  =  0;  c  <  len;  c++)  {  out.write(c);  }  if(pos  <  len)  {  for(int  c  =  0;  c  <  len;  c++)  {  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos    <    len)    {    for(int    c    =    0;    c    <    len;    c++)    {    out.write(c);    }    if(pos  <  len)  {  for(int  c  =  0;  c  <  len;  c++)  {  out.write(c);  }	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
38	[BUG]  [BUGGY]  if(pos  <  len)  {  for(int  c  =  0;  c  <  len;  c++)  {  out.write(c);  }  pos  <  len)  {  for(int  c  =  0;  c  <  len;  c++)  {  out.write(c);  }  [CE]  >  expected  [FE]      ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  <  len)  {  for(int  c  =  0;  c  <  len;  c++)  {  out.write(c);  }  pos  <  len)  {  for(int  c  =  0;  c  <  len;  c++)  {  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos    <    len)    {    for(int    c    =    0;    c    <    len;    c++)    {    out.write(c);    }    pos  <  len)  {  for(int  c  =  0;  c  <  len;  c++)  {  out.write(c);  }	  	non-compiled	[CE]  >  expected	1	None	add
39	[BUG]  [BUGGY]  if(pos  <  len)  {  for(int  c  =  0;  c  <  len;  c++)  {  out.write(c);  }  If(pos  <  len)  {  for(int  c  =  0;  c  <  len;  c++)  {  out.write(c);  }  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  <  len)  {  for(int  c  =  0;  c  <  len;  c++)  {  out.write(c);  }  If(pos  <  len)  {  for(int  c  =  0;  c  <  len;  c++)  {  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos    <    len)    {    for(int    c    =    0;    c    <    len;    c++)    {    out.write(c);    }    If(pos  <  len)  {  for(int  c  =  0;  c  <  len;  c++)  {  out.write(c);  }	  	non-compiled	[CE]  ';'  expected	1	None	add
40	[BUG]  [BUGGY]  if(pos  >  0)  {  if(pos  <  len)  {  for(int  c  =  0;  c  <  len;  c++)  {  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  >  0)  {  if(pos  <  len)  {  for(int  c  =  0;  c  <  len;  c++)  {  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  >  0)  {  if(pos  <  len)  {  for(int  c  =  0;  c  <  len;  c++)  {  out.write(c);  }	  if(pos    <    len)    {    for(int    c    =    0;    c    <    len;    c++)    {    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
41	[BUG]  [BUGGY]  if(pos  <  len)  {  for(int  c  =  0;  c  <  in.length();  c++)  {  out.write(c);  }  [CE]  cannot  find  symbol  in  [FE]      ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  <  len)  {  for(int  c  =  0;  c  <  in.length();  c++)  {  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  <  len)  {  for(int  c  =  0;  c  <  in.length();  c++)  {  out.write(c);  }	  if(pos    <    len)    {    for(int    c    =    0;    c    <    len;    c++)    {    out.write(c);    }    	non-compiled	[CE]  cannot  find  symbol  in	2	None	replace
42	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]          out.write('n');    out.write('n');  out.write('n');  out.write('n');  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	add	                out.write('n');        out.write('n');    out.write('n');  out.write('n');	  	compilable	  [FE]  ComparisonFailure  	70	19	add
43	[BUG]  [BUGGY]          out.write('n');    out.write('n');  out.write('n');  out.write('n');  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]          out.write('n');    out.write('n');  out.write('n');  out.write('n');  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	                out.write('n');        out.write('n');    out.write('n');  out.write('n');	  	compilable	  [FE]  ComparisonFailure  	70	19	add
44	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]          out.write('n');    out.write('n');  if(pos  <  len)  {  out.write('n');  out.write('n');  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	add	                out.write('n');        out.write('n');    if(pos  <  len)  {  out.write('n');  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	70	19	add
45	[BUG]  [BUGGY]          out.write('n');    out.write('n');  if(pos  <  len)  {  out.write('n');  out.write('n');  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]          out.write('n');    out.write('n');  if(pos  <  len)  {  out.write('n');  out.write('n');  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	                out.write('n');        out.write('n');    if(pos  <  len)  {  out.write('n');  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	70	19	add
46	[BUG]  [BUGGY]          out.write('n');    out.write('n');  int  len  =  Character.codePointCount(input,  0,  input.length());  [CE]  variable  len  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]        ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]          out.write('n');    out.write('n');  int  len  =  Character.codePointCount(input,  0,  input.length());  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	                out.write('n');        out.write('n');    int  len  =  Character.codePointCount(input,  0,  input.length());	  	non-compiled	[CE]  variable  len  is  already  defined  in  method  translate(CharSequence,Writer)	70	None	add
47	[BUG]  [BUGGY]          out.write('n');    out.write('n');  if(pos  <  len)  {  out.write('n');  out.write('n');  }  else  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write('[');  }  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]          out.write('n');    out.write('n');  if(pos  <  len)  {  out.write('n');  out.write('n');  }  else  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write('[');  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	                out.write('n');        out.write('n');    if(pos  <  len)  {  out.write('n');  out.write('n');  }  else  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write('[');  }	  	non-compiled	[CE]  illegal  start  of  expression	70	None	add
48	[BUG]  [BUGGY]          out.write('n');    out.write('n');  if(pos  <  len)  {  out.write('n');  out.write('n');  }  else  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]          out.write('n');    out.write('n');  if(pos  <  len)  {  out.write('n');  out.write('n');  }  else  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	                out.write('n');        out.write('n');    if(pos  <  len)  {  out.write('n');  out.write('n');  }  else  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }	  	non-compiled	[CE]  illegal  start  of  expression	70	None	add
49	[BUG]  [BUGGY]  out.write('['  +  input.length()  +  1);  [CE]  class,  interface,  or  enum  expected  [FE]        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  out.write('['  +  input.length()  +  1);  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	out.write('['  +  input.length()  +  1);	  out.write('[');    	non-compiled	[CE]  class,  interface,  or  enum  expected	159	None	replace
50	[BUG]  [BUGGY]  out.write('[',  pos);  [CE]  class,  interface,  or  enum  expected  [FE]          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  out.write('[',  pos);  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	out.write('[',  pos);	  out.write('[');    	non-compiled	[CE]  class,  interface,  or  enum  expected	159	None	replace
51	[BUG]  [BUGGY]  if(len  >  0)  {  pos  =  input.length();  pos  =  input.length();  this.char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  >  0)  {  pos  =  input.length();  pos  =  input.length();  this.char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  >  0)  {  pos  =  input.length();  pos  =  input.length();  this.char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }	          pos    =    input.length();    pos    =    input.length();    this.char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    out.write(c);    	non-compiled	[CE]  <identifier>  expected	147	None	replace
52	[BUG]  [BUGGY]  if(pos  <  len)  {  pos  =  input.length();  pos  =  input.length();  this.char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  <  len)  {  pos  =  input.length();  pos  =  input.length();  this.char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  <  len)  {  pos  =  input.length();  pos  =  input.length();  this.char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }	          pos    =    input.length();    pos    =    input.length();    this.char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    out.write(c);    	non-compiled	[CE]  <identifier>  expected	147	None	replace
53	[BUG]  [BUGGY]  if(len  <  2)  {  pos  =  input.length();  pos  =  input.length();  this.char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  <  2)  {  pos  =  input.length();  pos  =  input.length();  this.char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  <  2)  {  pos  =  input.length();  pos  =  input.length();  this.char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }	          pos    =    input.length();    pos    =    input.length();    this.char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    out.write(c);    	non-compiled	[CE]  <identifier>  expected	147	None	replace
54	[BUG]  [BUGGY]  if(len  <  =  0)  {  pos  =  input.length();  pos  =  input.length();  this.char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  <  =  0)  {  pos  =  input.length();  pos  =  input.length();  this.char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  <  =  0)  {  pos  =  input.length();  pos  =  input.length();  this.char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }	          pos    =    input.length();    pos    =    input.length();    this.char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    out.write(c);    	non-compiled	[CE]  illegal  start  of  expression	147	None	replace
55	[BUG]  [BUGGY]  Integer  pos  =  input.length();  [CE]  class,  interface,  or  enum  expected  [FE]              ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  Integer  pos  =  input.length();  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	Integer  pos  =  input.length();	  int    pos    =    input.length()    -    2;    	non-compiled	[CE]  class,  interface,  or  enum  expected	53	None	replace
56	[BUG]  [BUGGY]  int  pos  =  output.length();  [CE]  class,  interface,  or  enum  expected  [FE]                ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  int  pos  =  output.length();  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	int  pos  =  output.length();	  int    pos    =    input.length()    -    2;    	non-compiled	[CE]  class,  interface,  or  enum  expected	53	None	replace
57	[BUG]  [BUGGY]  int  len  =  Character.codePointCount(input,  0,  input.length());  out.write(len  +  1);  [CE]  class,  interface,  or  enum  expected  [FE]            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  int  len  =  Character.codePointCount(input,  0,  input.length());  out.write(len  +  1);  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	int  len  =  Character.codePointCount(input,  0,  input.length());  out.write(len  +  1);	          out.write(len);    int    len    =    Character.codePointCount(input,    0,    input.length());    out.write(len);    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
58	[BUG]  [BUGGY]  int  len  =  Character.codePointCount(input,  0,  input.length());  out.write(len);  [CE]  class,  interface,  or  enum  expected  [FE]              ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  int  len  =  Character.codePointCount(input,  0,  input.length());  out.write(len);  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	int  len  =  Character.codePointCount(input,  0,  input.length());  out.write(len);	          out.write(len);    int    len    =    Character.codePointCount(input,    0,    input.length());    out.write(len);    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
59	[BUG]  [BUGGY]  Integer  len  =  input.length();  [CE]  class,  interface,  or  enum  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  Integer  len  =  input.length();  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	Integer  len  =  input.length();	  int    len    =    input.length()    +    1;    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
60	[BUG]  [BUGGY]  char  len  =  input.length();  [CE]  class,  interface,  or  enum  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  char  len  =  input.length();  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	char  len  =  input.length();	  int    len    =    input.length()    +    1;    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
61	[BUG]  [BUGGY]  while  (pos  <  len  -  1  &&  input.length()  >  0)  {  while  (pos  <  len  -  1  &&  input.length()  >  0)  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  while  (pos  <  len  -  1  &&  input.length()  >  0)  {  while  (pos  <  len  -  1  &&  input.length()  >  0)  {  [BUGGY]      int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	while    (pos    <    len    -    1    &&    input.length()    >    0)    {    while  (pos  <  len  -  1  &&  input.length()  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	94	None	add
62	[BUG]  [BUGGY]  while  (pos  <  len  -  1  &&  input.length()  >  0)  {  int  len  =  Character.codePointCount(input,  0,  input.length());  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  while  (pos  <  len  -  1  &&  input.length()  >  0)  {  int  len  =  Character.codePointCount(input,  0,  input.length());  [BUGGY]      int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	while    (pos    <    len    -    1    &&    input.length()    >    0)    {    int  len  =  Character.codePointCount(input,  0,  input.length());	  	non-compiled	[CE]  illegal  start  of  expression	94	None	add
63	[BUG]  [BUGGY]  while  (pos  <  len  -  1  &&  input.length()  >  0)  {  int  len  =  input.length();  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  while  (pos  <  len  -  1  &&  input.length()  >  0)  {  int  len  =  input.length();  [BUGGY]      int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	while    (pos    <    len    -    1    &&    input.length()    >    0)    {    int  len  =  input.length();	  	non-compiled	[CE]  illegal  start  of  expression	94	None	add
64	[BUG]  [BUGGY]  while  (pos  <  len  -  1  &&  input.length()  >  0)  {  int  pos  =  len  -  1;  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  while  (pos  <  len  -  1  &&  input.length()  >  0)  {  int  pos  =  len  -  1;  [BUGGY]      int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	while    (pos    <    len    -    1    &&    input.length()    >    0)    {    int  pos  =  len  -  1;	  	non-compiled	[CE]  illegal  start  of  expression	94	None	add
65	[BUG]  [BUGGY]  while  (pos  <  len  -  1  &&  input.length()  >  0)  {  int  pos  =  len  -  1  &&  input.length()  >  0)  {  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  while  (pos  <  len  -  1  &&  input.length()  >  0)  {  int  pos  =  len  -  1  &&  input.length()  >  0)  {  [BUGGY]      int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	while    (pos    <    len    -    1    &&    input.length()    >    0)    {    int  pos  =  len  -  1  &&  input.length()  >  0)  {	  	non-compiled	[CE]  ';'  expected	94	None	add
66	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  while  (pos  <  0  ||  input.length()  >  0)  {  [BUGGY]      int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	add	while  (pos  <  0  ||  input.length()  >  0)  {	  while    (pos    <    len    &&    input.length()    >    0)    {    int    len    =    Character.codePointCount(input);    while    (pos    <    len    &&    input.length()    >    0)    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	145	19	replace
67	[BUG]  [BUGGY]  while  (pos  <  0  ||  input.length()  >  0)  {  [FE]  StringIndexOutOfBoundsException  [FE]          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  while  (pos  <  0  ||  input.length()  >  0)  {  [BUGGY]      int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	while  (pos  <  0  ||  input.length()  >  0)  {	  while    (pos    <    len    &&    input.length()    >    0)    {    int    len    =    Character.codePointCount(input);    while    (pos    <    len    &&    input.length()    >    0)    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	145	19	replace
68	[BUG]  [BUGGY]  out.write('n');  c  =  input.getChars(pos,  input.length());  [CE]  class,  interface,  or  enum  expected  [FE]              ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  out.write('n');  c  =  input.getChars(pos,  input.length());  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	out.write('n');  c  =  input.getChars(pos,  input.length());	          out.write('n');    char[]    c    =    input.getChars(pos,    input.length());    out.write('n');    	non-compiled	[CE]  class,  interface,  or  enum  expected	116	None	replace
69	[BUG]  [BUGGY]  out.write('n');  char[]  c  =  input.getChars(pos,  input.length());  [CE]  class,  interface,  or  enum  expected  [FE]                ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  out.write('n');  char[]  c  =  input.getChars(pos,  input.length());  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	out.write('n');  char[]  c  =  input.getChars(pos,  input.length());	          out.write('n');    char[]    c    =    input.getChars(pos,    input.length());    out.write('n');    	non-compiled	[CE]  class,  interface,  or  enum  expected	116	None	replace
70	[BUG]  [BUGGY]  char[]  c  =  input.getChars(pos,  input.length());  out.write('n');  [CE]  class,  interface,  or  enum  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  char[]  c  =  input.getChars(pos,  input.length());  out.write('n');  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	char[]  c  =  input.getChars(pos,  input.length());  out.write('n');	          out.write('n');    char[]    c    =    input.getChars(pos,    input.length());    out.write('n');    	non-compiled	[CE]  class,  interface,  or  enum  expected	116	None	replace
71	[BUG]  [BUGGY]  while  (pos  <  len  -  1)  {  int  pos  =  input.length()  +  1;  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  while  (pos  <  len  -  1)  {  int  pos  =  input.length()  +  1;  [BUGGY]      int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	while  (pos  <  len  -  1)  {  int  pos  =  input.length()  +  1;	  while    (pos    <    len    -    1)    {    int    pos    =    input.length();    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	88	None	replace
72	[BUG]  [BUGGY]  if(pos  <  len)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  String  c  =  input.getString(pos);  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                      ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  <  len)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  String  c  =  input.getString(pos);  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  <  len)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  String  c  =  input.getString(pos);  out.write(c);  }	  if(pos    <    len)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    String    c    =    input.getChars(pos);    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	35	None	replace
73	[BUG]  [BUGGY]  if(pos  <  len)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  String[]  c  =  input.getChars(pos);  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  <  len)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  String[]  c  =  input.getChars(pos);  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  <  len)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  String[]  c  =  input.getChars(pos);  out.write(c);  }	  if(pos    <    len)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    String    c    =    input.getChars(pos);    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	35	None	replace
74	[BUG]  [BUGGY]  if(pos  <  len)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  string  c  =  input.getChars(pos);  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  <  len)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  string  c  =  input.getChars(pos);  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  <  len)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  string  c  =  input.getChars(pos);  out.write(c);  }	  if(pos    <    len)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    String    c    =    input.getChars(pos);    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	35	None	replace
75	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(  pos));  out.write(input.charAt(0));  out.write(input.charAt(  pos));  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	add	                out.write(input.charAt(0));        out.write(input.charAt(    pos));    out.write(input.charAt(0));  out.write(input.charAt(  pos));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	111	19	add
76	[BUG]  [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(  pos));  out.write(input.charAt(0));  out.write(input.charAt(  pos));  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(  pos));  out.write(input.charAt(0));  out.write(input.charAt(  pos));  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	                out.write(input.charAt(0));        out.write(input.charAt(    pos));    out.write(input.charAt(0));  out.write(input.charAt(  pos));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	111	19	add
77	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(  pos));  out.write(input.charAt(1));  out.write(input.charAt(  pos));  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	add	                out.write(input.charAt(0));        out.write(input.charAt(    pos));    out.write(input.charAt(1));  out.write(input.charAt(  pos));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	111	19	add
78	[BUG]  [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(  pos));  out.write(input.charAt(1));  out.write(input.charAt(  pos));  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(  pos));  out.write(input.charAt(1));  out.write(input.charAt(  pos));  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	                out.write(input.charAt(0));        out.write(input.charAt(    pos));    out.write(input.charAt(1));  out.write(input.charAt(  pos));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	111	19	add
79	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(  pos));  if(pos  <  len)  {  out.write(input.charAt(0));  out.write(input.charAt(  pos));  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	add	                out.write(input.charAt(0));        out.write(input.charAt(    pos));    if(pos  <  len)  {  out.write(input.charAt(0));  out.write(input.charAt(  pos));  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	111	19	add
80	[BUG]  [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(  pos));  if(pos  <  len)  {  out.write(input.charAt(0));  out.write(input.charAt(  pos));  }  [FE]  StringIndexOutOfBoundsException  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(  pos));  if(pos  <  len)  {  out.write(input.charAt(0));  out.write(input.charAt(  pos));  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	                out.write(input.charAt(0));        out.write(input.charAt(    pos));    if(pos  <  len)  {  out.write(input.charAt(0));  out.write(input.charAt(  pos));  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	111	19	add
81	[BUG]  [BUGGY]  while  (pos  <  len  ||  input.length()  >  0)  {  int  len  =  input.length();  [CE]  variable  len  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  while  (pos  <  len  ||  input.length()  >  0)  {  int  len  =  input.length();  [BUGGY]      int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	while  (pos  <  len  ||  input.length()  >  0)  {  int  len  =  input.length();	  while    (pos    <    len    &&    input.length()    >    0)    {    int    len    =    input.length();    	non-compiled	[CE]  variable  len  is  already  defined  in  method  translate(CharSequence,Writer)	84	None	replace
82	[BUG]  [BUGGY]  if(pos  <  len)  {  out.write(input.charAt(0));  out.write(input.charAt(0));  }  [CE]  class,  interface,  or  enum  expected  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  <  len)  {  out.write(input.charAt(0));  out.write(input.charAt(0));  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  <  len)  {  out.write(input.charAt(0));  out.write(input.charAt(0));  }	          out.write(input.charAt(0));    out.write(input.charAt(0));    	non-compiled	[CE]  class,  interface,  or  enum  expected	56	None	replace
83	[BUG]  [BUGGY]  if(pos  >  0)  {  out.write(input.charAt(0));  out.write(input.charAt(0));  }  [CE]  class,  interface,  or  enum  expected  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  >  0)  {  out.write(input.charAt(0));  out.write(input.charAt(0));  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  >  0)  {  out.write(input.charAt(0));  out.write(input.charAt(0));  }	          out.write(input.charAt(0));    out.write(input.charAt(0));    	non-compiled	[CE]  class,  interface,  or  enum  expected	56	None	replace
84	[BUG]  [BUGGY]  if(pos  <  len)  {  out.write(input.charAt(0));  out.write(input.charAt(1));  }  [CE]  class,  interface,  or  enum  expected  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  <  len)  {  out.write(input.charAt(0));  out.write(input.charAt(1));  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  <  len)  {  out.write(input.charAt(0));  out.write(input.charAt(1));  }	          out.write(input.charAt(0));    out.write(input.charAt(0));    	non-compiled	[CE]  class,  interface,  or  enum  expected	56	None	replace
85	[BUG]  [BUGGY]  if(pos  <  len)  {  for(int  pos  =  0;  pos  <  input.length();  pos++)  {  char[]  c  =  input.getChars(pos,  out);  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                      ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  <  len)  {  for(int  pos  =  0;  pos  <  input.length();  pos++)  {  char[]  c  =  input.getChars(pos,  out);  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  <  len)  {  for(int  pos  =  0;  pos  <  input.length();  pos++)  {  char[]  c  =  input.getChars(pos,  out);  out.write(c);  }	  if(pos    <    len)    {    for(int    pos    =    0;    pos    <    input.length();    pos++)    {    char[]    c    =    input.getChars(pos);    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	93	None	replace
86	[BUG]  [BUGGY]  if(pos  <  len)  {  for(int  pos  =  0;  pos  <  input.length();  pos++)  {  char[]  c  =  output.getChars(pos);  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  <  len)  {  for(int  pos  =  0;  pos  <  input.length();  pos++)  {  char[]  c  =  output.getChars(pos);  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  <  len)  {  for(int  pos  =  0;  pos  <  input.length();  pos++)  {  char[]  c  =  output.getChars(pos);  out.write(c);  }	  if(pos    <    len)    {    for(int    pos    =    0;    pos    <    input.length();    pos++)    {    char[]    c    =    input.getChars(pos);    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	93	None	replace
87	[BUG]  [BUGGY]  if(pos  <  len)  {  for(int  pos  =  0;  pos  <  input.length();  pos++)  {  String  c  =  input.getChars(pos);  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  <  len)  {  for(int  pos  =  0;  pos  <  input.length();  pos++)  {  String  c  =  input.getChars(pos);  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  <  len)  {  for(int  pos  =  0;  pos  <  input.length();  pos++)  {  String  c  =  input.getChars(pos);  out.write(c);  }	  if(pos    <    len)    {    for(int    pos    =    0;    pos    <    input.length();    pos++)    {    char[]    c    =    input.getChars(pos);    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	93	None	replace
88	[BUG]  [BUGGY]  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos,  out);  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                    ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos,  out);  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos,  out);  out.write(c);  }	  if(pos    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	160	None	replace
89	[BUG]  [BUGGY]  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  output.toChars(pos);  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                      ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  output.toChars(pos);  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  output.toChars(pos);  out.write(c);  }	  if(pos    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	160	None	replace
90	[BUG]  [BUGGY]  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  String  c  =  input.toChars(pos);  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  String  c  =  input.toChars(pos);  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  String  c  =  input.toChars(pos);  out.write(c);  }	  if(pos    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	160	None	replace
91	[BUG]  [BUGGY]  char[]  input  =  input.toChars(pos);  [CE]  class,  interface,  or  enum  expected  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  char[]  input  =  input.toChars(pos);  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	char[]  input  =  input.toChars(pos);	          out.write(input.charAt(0));    char[]    input    =    input.toChars(pos);    	non-compiled	[CE]  class,  interface,  or  enum  expected	61	None	replace
92	[BUG]  [BUGGY]  out.write(input.charAt(0));  char[]  input  =  input.toChars(pos,  out);  [CE]  class,  interface,  or  enum  expected  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  out.write(input.charAt(0));  char[]  input  =  input.toChars(pos,  out);  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	out.write(input.charAt(0));  char[]  input  =  input.toChars(pos,  out);	          out.write(input.charAt(0));    char[]    input    =    input.toChars(pos);    	non-compiled	[CE]  class,  interface,  or  enum  expected	61	None	replace
93	[BUG]  [BUGGY]  while(pos  >  len  -  1)  {  while(pos  >  len  -  1)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  while(pos  >  len  -  1)  {  while(pos  >  len  -  1)  {  [BUGGY]      int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	while(pos    >    len    -    1)    {    while(pos  >  len  -  1)  {	  	non-compiled	[CE]  illegal  start  of  expression	139	None	add
94	[BUG]  [BUGGY]  while(pos  >  len  -  1)  {  int  len  =  Character.codePointCount(input,  0,  input.length());  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  while(pos  >  len  -  1)  {  int  len  =  Character.codePointCount(input,  0,  input.length());  [BUGGY]      int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	while(pos    >    len    -    1)    {    int  len  =  Character.codePointCount(input,  0,  input.length());	  	non-compiled	[CE]  illegal  start  of  expression	139	None	add
95	[BUG]  [BUGGY]  while(pos  >  len  -  1)  {  int  len  =  Character.codePointCount(input,  0,  input.length());  while(pos  >  len  -  1)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  while(pos  >  len  -  1)  {  int  len  =  Character.codePointCount(input,  0,  input.length());  while(pos  >  len  -  1)  {  [BUGGY]      int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	while(pos    >    len    -    1)    {    int  len  =  Character.codePointCount(input,  0,  input.length());  while(pos  >  len  -  1)  {	  	non-compiled	[CE]  illegal  start  of  expression	139	None	add
96	[BUG]  [BUGGY]  while(pos  >  len  -  1)  {  int  pos  >  len  -  1)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  while(pos  >  len  -  1)  {  int  pos  >  len  -  1)  {  [BUGGY]      int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	while(pos    >    len    -    1)    {    int  pos  >  len  -  1)  {	  	non-compiled	[CE]  ';'  expected	139	None	add
97	[BUG]  [BUGGY]  while(pos  >  len  -  1)  {  int  len  =  Character.codePointCount(input,  0,  input.length()  -  1);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  while(pos  >  len  -  1)  {  int  len  =  Character.codePointCount(input,  0,  input.length()  -  1);  [BUGGY]      int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	while(pos    >    len    -    1)    {    int  len  =  Character.codePointCount(input,  0,  input.length()  -  1);	  	non-compiled	[CE]  illegal  start  of  expression	139	None	add
98	[BUG]  [BUGGY]  if(pos  <  len)  {  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c  =  input.toChars(pos);  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  <  len)  {  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c  =  input.toChars(pos);  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  <  len)  {  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c  =  input.toChars(pos);  out.write(c);  }	  if(pos    >    0)    {    if(pos    <    len)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
99	[BUG]  [BUGGY]  if(pos  <  len)  {  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c  =  input.toChars(pos);  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  <  len)  {  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c  =  input.toChars(pos);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  <  len)  {  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c  =  input.toChars(pos);  }	  if(pos    >    0)    {    if(pos    <    len)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
100	[BUG]  [BUGGY]  if(pos  <  len)  {  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c  =  input.chars(pos);  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  <  len)  {  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c  =  input.chars(pos);  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  <  len)  {  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c  =  input.chars(pos);  out.write(c);  }	  if(pos    >    0)    {    if(pos    <    len)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
101	[BUG]  [BUGGY]  if(pos  <  len)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  0,  input.length()));  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  <  len)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  0,  input.length()));  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  <  len)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  0,  input.length()));  out.write(c);  }	  if(pos    <    len)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    Character.toChars(Character.codePointAt(pos,    pt));    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	64	None	replace
102	[BUG]  [BUGGY]  if(pos  <  len)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c  =  Character.toChars(Character.codePointAt(pos,  pt));  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                  ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  <  len)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c  =  Character.toChars(Character.codePointAt(pos,  pt));  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  <  len)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c  =  Character.toChars(Character.codePointAt(pos,  pt));  out.write(c);  }	  if(pos    <    len)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    Character.toChars(Character.codePointAt(pos,    pt));    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	64	None	replace
103	[BUG]  [BUGGY]  if(pos  <  len)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  Character[]  c  =  Character.toChars(Character.codePointAt(pos,  pt));  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                    ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  <  len)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  Character[]  c  =  Character.toChars(Character.codePointAt(pos,  pt));  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  <  len)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  Character[]  c  =  Character.toChars(Character.codePointAt(pos,  pt));  out.write(c);  }	  if(pos    <    len)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    Character.toChars(Character.codePointAt(pos,    pt));    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	64	None	replace
104	[BUG]  [BUGGY]  Input  pos  =  input.length();  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  Input  pos  =  input.length();  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	Input  pos  =  input.length();	          pos    =    input.length();    Input    pos    =    input.length();    	non-compiled	[CE]  class,  interface,  or  enum  expected	127	None	replace
105	[BUG]  [BUGGY]  int  pos  =  input.length();  Input  pos  =  input.length();  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  int  pos  =  input.length();  Input  pos  =  input.length();  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	int  pos  =  input.length();  Input  pos  =  input.length();	          pos    =    input.length();    Input    pos    =    input.length();    	non-compiled	[CE]  class,  interface,  or  enum  expected	127	None	replace
106	[BUG]  [BUGGY]  Enum  pos  =  input.length();  Input  pos  =  input.length();  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  Enum  pos  =  input.length();  Input  pos  =  input.length();  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	Enum  pos  =  input.length();  Input  pos  =  input.length();	          pos    =    input.length();    Input    pos    =    input.length();    	non-compiled	[CE]  class,  interface,  or  enum  expected	127	None	replace
107	[BUG]  [BUGGY]  Integer  len  =  Character.codePointCount(input,  0,  input.length());  [CE]  class,  interface,  or  enum  expected  [FE]              ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  Integer  len  =  Character.codePointCount(input,  0,  input.length());  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	Integer  len  =  Character.codePointCount(input,  0,  input.length());	  int    len    =    Character.codePointCount(input,    0,    input.length()    -    3);    	non-compiled	[CE]  class,  interface,  or  enum  expected	118	None	replace
108	[BUG]  [BUGGY]  char  len  =  Character.codePointCount(input,  0,  input.length());  [CE]  class,  interface,  or  enum  expected  [FE]                ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  char  len  =  Character.codePointCount(input,  0,  input.length());  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	char  len  =  Character.codePointCount(input,  0,  input.length());	  int    len    =    Character.codePointCount(input,    0,    input.length()    -    3);    	non-compiled	[CE]  class,  interface,  or  enum  expected	118	None	replace
109	[BUG]  [BUGGY]  if(len  >  0)  {  pos  =  input.length();  pos  =  input.length();  this.char[]  c  =  Character.toChars(Character.codePointCount(input,  0,  input.length());  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  >  0)  {  pos  =  input.length();  pos  =  input.length();  this.char[]  c  =  Character.toChars(Character.codePointCount(input,  0,  input.length());  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  >  0)  {  pos  =  input.length();  pos  =  input.length();  this.char[]  c  =  Character.toChars(Character.codePointCount(input,  0,  input.length());  }	          pos    =    input.length();    pos    =    input.length();    this.char[]    c    =    Character.toChars(Character.codePointCount(input,    0,    input.length());    	non-compiled	[CE]  <identifier>  expected	149	None	replace
110	[BUG]  [BUGGY]  if(len  >  0)  {  pos  =  input.length();  pos  =  input.length();  }  else  {  this.char[]  c  =  Character.toChars(Character.codePointCount(input,  0,  input.length());  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  >  0)  {  pos  =  input.length();  pos  =  input.length();  }  else  {  this.char[]  c  =  Character.toChars(Character.codePointCount(input,  0,  input.length());  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  >  0)  {  pos  =  input.length();  pos  =  input.length();  }  else  {  this.char[]  c  =  Character.toChars(Character.codePointCount(input,  0,  input.length());  }	          pos    =    input.length();    pos    =    input.length();    this.char[]    c    =    Character.toChars(Character.codePointCount(input,    0,    input.length());    	non-compiled	[CE]  <identifier>  expected	149	None	replace
111	[BUG]  [BUGGY]  if(len  <  2)  {  pos  =  input.length();  pos  =  input.length();  this.char[]  c  =  Character.toChars(Character.codePointCount(input,  0,  input.length());  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  <  2)  {  pos  =  input.length();  pos  =  input.length();  this.char[]  c  =  Character.toChars(Character.codePointCount(input,  0,  input.length());  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  <  2)  {  pos  =  input.length();  pos  =  input.length();  this.char[]  c  =  Character.toChars(Character.codePointCount(input,  0,  input.length());  }	          pos    =    input.length();    pos    =    input.length();    this.char[]    c    =    Character.toChars(Character.codePointCount(input,    0,    input.length());    	non-compiled	[CE]  <identifier>  expected	149	None	replace
112	[BUG]  [BUGGY]  pos  =  input.length();  this.char[]  c  =  Character.toChars(Character.codePointCount(input,  0,  input.length());  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  pos  =  input.length();  this.char[]  c  =  Character.toChars(Character.codePointCount(input,  0,  input.length());  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	pos  =  input.length();  this.char[]  c  =  Character.toChars(Character.codePointCount(input,  0,  input.length());	          pos    =    input.length();    pos    =    input.length();    this.char[]    c    =    Character.toChars(Character.codePointCount(input,    0,    input.length());    	non-compiled	[CE]  <identifier>  expected	149	None	replace
113	[BUG]  [BUGGY]  char[]  input  =  input.getChars(pos);  [CE]  class,  interface,  or  enum  expected  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  char[]  input  =  input.getChars(pos);  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	char[]  input  =  input.getChars(pos);	          out.write(input.charAt(pos));    char[]    input    =    input.getChars(pos);    	non-compiled	[CE]  class,  interface,  or  enum  expected	80	None	replace
114	[BUG]  [BUGGY]  out.write(input.charAt(pos  +  1));  char[]  input  =  input.getChars(pos);  [CE]  class,  interface,  or  enum  expected  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  out.write(input.charAt(pos  +  1));  char[]  input  =  input.getChars(pos);  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	out.write(input.charAt(pos  +  1));  char[]  input  =  input.getChars(pos);	          out.write(input.charAt(pos));    char[]    input    =    input.getChars(pos);    	non-compiled	[CE]  class,  interface,  or  enum  expected	80	None	replace
115	[BUG]  [BUGGY]  out.write(input.charAt(pos  -  1));  char[]  input  =  input.getChars(pos);  [CE]  class,  interface,  or  enum  expected  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  out.write(input.charAt(pos  -  1));  char[]  input  =  input.getChars(pos);  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	out.write(input.charAt(pos  -  1));  char[]  input  =  input.getChars(pos);	          out.write(input.charAt(pos));    char[]    input    =    input.getChars(pos);    	non-compiled	[CE]  class,  interface,  or  enum  expected	80	None	replace
116	[BUG]  [BUGGY]  InputStream  input  =  input.getInputStream();  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  InputStream  input  =  input.getInputStream();  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	InputStream  input  =  input.getInputStream();	          pos    =    input.length();    InputStream    input    =    input.getInputStream();    	non-compiled	[CE]  class,  interface,  or  enum  expected	128	None	replace
117	[BUG]  [BUGGY]  int  pos  =  input.length();  InputStream  input  =  input.getInputStream();  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  int  pos  =  input.length();  InputStream  input  =  input.getInputStream();  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	int  pos  =  input.length();  InputStream  input  =  input.getInputStream();	          pos    =    input.length();    InputStream    input    =    input.getInputStream();    	non-compiled	[CE]  class,  interface,  or  enum  expected	128	None	replace
118	[BUG]  [BUGGY]  pos  =  input.length();  InputStream  input  =  this.input.getInputStream();  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  pos  =  input.length();  InputStream  input  =  this.input.getInputStream();  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	pos  =  input.length();  InputStream  input  =  this.input.getInputStream();	          pos    =    input.length();    InputStream    input    =    input.getInputStream();    	non-compiled	[CE]  class,  interface,  or  enum  expected	128	None	replace
119	[BUG]  [BUGGY]  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  String  c  =  input.getChars(pos);  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                  ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  String  c  =  input.getChars(pos);  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  String  c  =  input.getChars(pos);  out.write(c);  }	  if(pos    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    input.getChars(pos);    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	132	None	replace
120	[BUG]  [BUGGY]  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  output.getChars(pos);  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                    ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  output.getChars(pos);  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  output.getChars(pos);  out.write(c);  }	  if(pos    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    input.getChars(pos);    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	132	None	replace
121	[BUG]  [BUGGY]  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.getChars(pos,  out);  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                      ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.getChars(pos,  out);  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.getChars(pos,  out);  out.write(c);  }	  if(pos    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    input.getChars(pos);    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	132	None	replace
122	[BUG]  [BUGGY]  out.write(input.length());  [CE]  class,  interface,  or  enum  expected  [FE]                ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  out.write(input.length());  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	out.write(input.length());	          out.write(len);    int    len    =    Character.codePointCount(input,    0,    input.length()    -    1);    out.write(len);    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
123	[BUG]  [BUGGY]  if(pos  <  len)  {  for(int  pos  =  0;  pos  <  input.length();  pos++)  {  char[]  c  =  input.toChars(pos,  out);  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  <  len)  {  for(int  pos  =  0;  pos  <  input.length();  pos++)  {  char[]  c  =  input.toChars(pos,  out);  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  <  len)  {  for(int  pos  =  0;  pos  <  input.length();  pos++)  {  char[]  c  =  input.toChars(pos,  out);  out.write(c);  }	  if(pos    <    len)    {    for(int    pos    =    0;    pos    <    input.length();    pos++)    {    char[]    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	108	None	replace
124	[BUG]  [BUGGY]  if(pos  <  len)  {  for(int  pos  =  0;  pos  <  input.length();  pos++)  {  char[]  c  =  output.toChars(pos);  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  <  len)  {  for(int  pos  =  0;  pos  <  input.length();  pos++)  {  char[]  c  =  output.toChars(pos);  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  <  len)  {  for(int  pos  =  0;  pos  <  input.length();  pos++)  {  char[]  c  =  output.toChars(pos);  out.write(c);  }	  if(pos    <    len)    {    for(int    pos    =    0;    pos    <    input.length();    pos++)    {    char[]    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	108	None	replace
125	[BUG]  [BUGGY]  if(pos  <  len)  {  for(int  pos  =  0;  pos  <  input.length();  pos++)  {  c  =  input.toChars(pos);  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  <  len)  {  for(int  pos  =  0;  pos  <  input.length();  pos++)  {  c  =  input.toChars(pos);  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  <  len)  {  for(int  pos  =  0;  pos  <  input.length();  pos++)  {  c  =  input.toChars(pos);  out.write(c);  }	  if(pos    <    len)    {    for(int    pos    =    0;    pos    <    input.length();    pos++)    {    char[]    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	108	None	replace
126	[BUG]  [BUGGY]  out.write('N',  pos);  [CE]  class,  interface,  or  enum  expected  [FE]        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  out.write('N',  pos);  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	out.write('N',  pos);	  out.write('n',    len);    	non-compiled	[CE]  class,  interface,  or  enum  expected	109	None	replace
127	[BUG]  [BUGGY]  if(pos  <  len)  {  for(int  pos  =  0;  pos  <  chars.length;  pos++)  {  String  c  =  input.getChars(pos);  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                      ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  <  len)  {  for(int  pos  =  0;  pos  <  chars.length;  pos++)  {  String  c  =  input.getChars(pos);  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  <  len)  {  for(int  pos  =  0;  pos  <  chars.length;  pos++)  {  String  c  =  input.getChars(pos);  out.write(c);  }	  if(pos    <    len)    {    for(int    pos    =    0;    pos    <    chars.length;    pos++)    {    char[]    c    =    input.getChars(pos);    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	134	None	replace
128	[BUG]  [BUGGY]  if(pos  <  len)  {  for(int  pos  =  0;  pos  <  input.length;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  <  len)  {  for(int  pos  =  0;  pos  <  input.length;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  <  len)  {  for(int  pos  =  0;  pos  <  input.length;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }	  if(pos    <    len)    {    for(int    pos    =    0;    pos    <    c.length;    pos++)    {    char[]    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	162	None	replace
129	[BUG]  [BUGGY]  if(pos  <  len)  {  for(int  pos  =  0;  pos  <  in.length;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  <  len)  {  for(int  pos  =  0;  pos  <  in.length;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  <  len)  {  for(int  pos  =  0;  pos  <  in.length;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }	  if(pos    <    len)    {    for(int    pos    =    0;    pos    <    c.length;    pos++)    {    char[]    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	162	None	replace
130	[BUG]  [BUGGY]  if(pos  <  len)  {  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c  =  input.getChars(pos);  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  <  len)  {  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c  =  input.getChars(pos);  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  <  len)  {  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c  =  input.getChars(pos);  out.write(c);  }	  if(pos    >    0)    {    if(pos    <    len)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    c    =    input.getChars(pos);    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
131	[BUG]  [BUGGY]  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c  =  input.getChars(pos);  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                      ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c  =  input.getChars(pos);  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c  =  input.getChars(pos);  out.write(c);  }	  if(pos    >    0)    {    if(pos    <    len)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    c    =    input.getChars(pos);    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	34	None	replace
132	[BUG]  [BUGGY]  if(pos  <  len)  {  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  <  len)  {  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  <  len)  {  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }	  if(pos    >    0)    {    if(pos    <    len)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    c    =    input.getChars(pos);    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
133	[BUG]  [BUGGY]  if(pos  <  len)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c  =  output.toChars(pos);  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  <  len)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c  =  output.toChars(pos);  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  <  len)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c  =  output.toChars(pos);  out.write(c);  }	  if(pos    <    len)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	16	None	replace
134	[BUG]  [BUGGY]  if(pos  <  len)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c  =  input.toString(pos);  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  <  len)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c  =  input.toString(pos);  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  <  len)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c  =  input.toString(pos);  out.write(c);  }	  if(pos    <    len)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	16	None	replace
135	[BUG]  [BUGGY]  if(pos  <  len)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c  =  input.chars(pos);  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  <  len)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c  =  input.chars(pos);  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  <  len)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c  =  input.chars(pos);  out.write(c);  }	  if(pos    <    len)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	16	None	replace
136	[BUG]  [BUGGY]  InputStream  out  =  input.getOutputStream();  [CE]  class,  interface,  or  enum  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  InputStream  out  =  input.getOutputStream();  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	InputStream  out  =  input.getOutputStream();	  OutputStream    out    =    output.getOutputStream();    	non-compiled	[CE]  class,  interface,  or  enum  expected	47	None	replace
137	[BUG]  [BUGGY]  OutputStream  out  =  input.getInputStream();  [CE]  class,  interface,  or  enum  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  OutputStream  out  =  input.getInputStream();  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	OutputStream  out  =  input.getInputStream();	  OutputStream    out    =    output.getOutputStream();    	non-compiled	[CE]  class,  interface,  or  enum  expected	47	None	replace
138	[BUG]  [BUGGY]  char  len  =  Character.codePointCount(input,  pos,  input.length());  [CE]  class,  interface,  or  enum  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  char  len  =  Character.codePointCount(input,  pos,  input.length());  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	char  len  =  Character.codePointCount(input,  pos,  input.length());	  int    len    =    Character.codePointCount(input,    pos,    input.length());    	non-compiled	[CE]  class,  interface,  or  enum  expected	69	None	replace
139	[BUG]  [BUGGY]  char[]  input  =  input.getChars();  [CE]  class,  interface,  or  enum  expected  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  char[]  input  =  input.getChars();  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	char[]  input  =  input.getChars();	          out.write(input.charAt(0));    char[]    input    =    input.getChars();    	non-compiled	[CE]  class,  interface,  or  enum  expected	62	None	replace
140	[BUG]  [BUGGY]  out.write(input.charAt(0));  int[]  input  =  input.getChars();  [CE]  class,  interface,  or  enum  expected  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  out.write(input.charAt(0));  int[]  input  =  input.getChars();  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	out.write(input.charAt(0));  int[]  input  =  input.getChars();	          out.write(input.charAt(0));    char[]    input    =    input.getChars();    	non-compiled	[CE]  class,  interface,  or  enum  expected	62	None	replace
141	[BUG]  [BUGGY]  out.write('n');  c  =  input.toChars(pos);  [CE]  class,  interface,  or  enum  expected  [FE]                ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  out.write('n');  c  =  input.toChars(pos);  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	out.write('n');  c  =  input.toChars(pos);	          out.write('n');    char[]    c    =    input.toChars(pos);    	non-compiled	[CE]  class,  interface,  or  enum  expected	75	None	replace
142	[BUG]  [BUGGY]  out.write('n');  char[]  c  =  input.toString(pos);  [CE]  class,  interface,  or  enum  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  out.write('n');  char[]  c  =  input.toString(pos);  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	out.write('n');  char[]  c  =  input.toString(pos);	          out.write('n');    char[]    c    =    input.toChars(pos);    	non-compiled	[CE]  class,  interface,  or  enum  expected	75	None	replace
143	[BUG]  [BUGGY]  if(pos  >  -2)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                      ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  >  -2)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  >  -2)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }	  if(pos    >    -1)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	161	None	replace
144	[BUG]  [BUGGY]  if(pos  >  -1)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos,  out);  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  >  -1)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos,  out);  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  >  -1)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos,  out);  out.write(c);  }	  if(pos    >    -1)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	161	None	replace
145	[BUG]  [BUGGY]  if(pos  >  -1)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  String  c  =  input.toChars(pos);  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  >  -1)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  String  c  =  input.toChars(pos);  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  >  -1)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  String  c  =  input.toChars(pos);  out.write(c);  }	  if(pos    >    -1)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	161	None	replace
146	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(2));  out.write(input.charAt(0));  out.write(input.charAt(2));  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	add	                out.write(input.charAt(0));        out.write(input.charAt(2));    out.write(input.charAt(0));  out.write(input.charAt(2));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	59	19	add
147	[BUG]  [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(2));  out.write(input.charAt(0));  out.write(input.charAt(2));  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(2));  out.write(input.charAt(0));  out.write(input.charAt(2));  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	                out.write(input.charAt(0));        out.write(input.charAt(2));    out.write(input.charAt(0));  out.write(input.charAt(2));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	59	19	add
148	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(2));  out.write(input.charAt(1));  out.write(input.charAt(2));  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	add	                out.write(input.charAt(0));        out.write(input.charAt(2));    out.write(input.charAt(1));  out.write(input.charAt(2));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	59	19	add
149	[BUG]  [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(2));  out.write(input.charAt(1));  out.write(input.charAt(2));  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(2));  out.write(input.charAt(1));  out.write(input.charAt(2));  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	                out.write(input.charAt(0));        out.write(input.charAt(2));    out.write(input.charAt(1));  out.write(input.charAt(2));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	59	19	add
150	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(2));  out.write(input.charAt(0));  out.write(input.charAt(3));  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	add	                out.write(input.charAt(0));        out.write(input.charAt(2));    out.write(input.charAt(0));  out.write(input.charAt(3));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	59	19	add
151	[BUG]  [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(2));  out.write(input.charAt(0));  out.write(input.charAt(3));  [FE]  StringIndexOutOfBoundsException  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(2));  out.write(input.charAt(0));  out.write(input.charAt(3));  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	                out.write(input.charAt(0));        out.write(input.charAt(2));    out.write(input.charAt(0));  out.write(input.charAt(3));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	59	19	add
152	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(2));  out.write(input.charAt(1));  out.write(input.charAt(3));  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	add	                out.write(input.charAt(0));        out.write(input.charAt(2));    out.write(input.charAt(1));  out.write(input.charAt(3));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	59	19	add
153	[BUG]  [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(2));  out.write(input.charAt(1));  out.write(input.charAt(3));  [FE]  StringIndexOutOfBoundsException  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(2));  out.write(input.charAt(1));  out.write(input.charAt(3));  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	                out.write(input.charAt(0));        out.write(input.charAt(2));    out.write(input.charAt(1));  out.write(input.charAt(3));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	59	19	add
154	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]            StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(2));  out.write(input.charAt(0));  out.write(input.charAt(1));  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	add	                out.write(input.charAt(0));        out.write(input.charAt(2));    out.write(input.charAt(0));  out.write(input.charAt(1));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	59	19	add
155	[BUG]  [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(2));  out.write(input.charAt(0));  out.write(input.charAt(1));  [FE]  StringIndexOutOfBoundsException  [FE]            StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(2));  out.write(input.charAt(0));  out.write(input.charAt(1));  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	                out.write(input.charAt(0));        out.write(input.charAt(2));    out.write(input.charAt(0));  out.write(input.charAt(1));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	59	19	add
156	[BUG]  [BUGGY]  char[]  c  =  input.toChars(pos);  out.write('n');  [CE]  class,  interface,  or  enum  expected  [FE]            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  char[]  c  =  input.toChars(pos);  out.write('n');  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	char[]  c  =  input.toChars(pos);  out.write('n');	          out.write('n');    char[]    c    =    input.toChars(pos);    out.write('n');    	non-compiled	[CE]  class,  interface,  or  enum  expected	73	None	replace
157	[BUG]  [BUGGY]  while  (pos  <  len  -  1)  {  int  len  =  Character.codePointCount(input,  0,  input.length()  -  1);  [CE]  variable  len  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  while  (pos  <  len  -  1)  {  int  len  =  Character.codePointCount(input,  0,  input.length()  -  1);  [BUGGY]      int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	while  (pos  <  len  -  1)  {  int  len  =  Character.codePointCount(input,  0,  input.length()  -  1);	  while    (pos    <    len    -    1)    {    int    len    =    Character.codePointCount(input,    0,    input.length());    	non-compiled	[CE]  variable  len  is  already  defined  in  method  translate(CharSequence,Writer)	37	None	replace
158	[BUG]  [BUGGY]  out.write('n');  c  =  input.toChars();  [CE]  class,  interface,  or  enum  expected  [FE]            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  out.write('n');  c  =  input.toChars();  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	out.write('n');  c  =  input.toChars();	          out.write('n');    char[]    c    =    input.toChars();    	non-compiled	[CE]  class,  interface,  or  enum  expected	165	None	replace
159	[BUG]  [BUGGY]  char[]  c  =  input.toChars();  [CE]  class,  interface,  or  enum  expected  [FE]              ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  char[]  c  =  input.toChars();  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	char[]  c  =  input.toChars();	          out.write('n');    char[]    c    =    input.toChars();    	non-compiled	[CE]  class,  interface,  or  enum  expected	165	None	replace
160	[BUG]  [BUGGY]  out.write('n');  char[]  c  =  input.toString();  [CE]  class,  interface,  or  enum  expected  [FE]                ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  out.write('n');  char[]  c  =  input.toString();  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	out.write('n');  char[]  c  =  input.toString();	          out.write('n');    char[]    c    =    input.toChars();    	non-compiled	[CE]  class,  interface,  or  enum  expected	165	None	replace
161	[BUG]  [BUGGY]  if(pos  <  len)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c  =  Character.toChars(Character.codePointCount(pos,  pos));  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                  ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  <  len)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c  =  Character.toChars(Character.codePointCount(pos,  pos));  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  <  len)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c  =  Character.toChars(Character.codePointCount(pos,  pos));  out.write(c);  }	  if(pos    <    len)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    c    =    Character.toChars(Character.codePointAt(pos,    pos));    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	65	None	replace
162	[BUG]  [BUGGY]  int  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  [CE]  class,  interface,  or  enum  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  int  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	int  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);	  if(pos    <    len)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    c    =    Character.toChars(Character.codePointAt(pos,    pos));    out.write(c);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	65	None	replace
163	[BUG]  [BUGGY]  out.write(input.charAt(pos  +  1));  char[]  input  =  input.getChars();  [CE]  class,  interface,  or  enum  expected  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  out.write(input.charAt(pos  +  1));  char[]  input  =  input.getChars();  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	out.write(input.charAt(pos  +  1));  char[]  input  =  input.getChars();	          out.write(input.charAt(pos));    char[]    input    =    input.getChars();    	non-compiled	[CE]  class,  interface,  or  enum  expected	79	None	replace
164	[BUG]  [BUGGY]  if(pos  <  len)  {  out.write(input.charAt(0));  out.write(input.charAt(pos));  }  [CE]  class,  interface,  or  enum  expected  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  <  len)  {  out.write(input.charAt(0));  out.write(input.charAt(pos));  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  <  len)  {  out.write(input.charAt(0));  out.write(input.charAt(pos));  }	          out.write(input.charAt(0));    out.write(input.charAt(    pos));    	non-compiled	[CE]  class,  interface,  or  enum  expected	112	None	replace
165	[BUG]  [BUGGY]  if(pos  >  0)  {  out.write(input.charAt(0));  out.write(input.charAt(pos));  }  [CE]  class,  interface,  or  enum  expected  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  >  0)  {  out.write(input.charAt(0));  out.write(input.charAt(pos));  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  >  0)  {  out.write(input.charAt(0));  out.write(input.charAt(pos));  }	          out.write(input.charAt(0));    out.write(input.charAt(    pos));    	non-compiled	[CE]  class,  interface,  or  enum  expected	112	None	replace
166	[BUG]  [BUGGY]  OutputStream  out  =  this.input.getOutputStream(pos);  [CE]  class,  interface,  or  enum  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  OutputStream  out  =  this.input.getOutputStream(pos);  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	OutputStream  out  =  this.input.getOutputStream(pos);	  OutputStream    out    =    this.input.getOutputStream();    	non-compiled	[CE]  class,  interface,  or  enum  expected	46	None	replace
167	[BUG]  [BUGGY]  OutputStream  out  =  outputStream.getOutputStream();  [CE]  class,  interface,  or  enum  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  OutputStream  out  =  outputStream.getOutputStream();  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	OutputStream  out  =  outputStream.getOutputStream();	  OutputStream    out    =    this.input.getOutputStream();    	non-compiled	[CE]  class,  interface,  or  enum  expected	46	None	replace
168	[BUG]  [BUGGY]  if(len  >  0)  {  out.write(input.charAt(0));  out.write(input.charAt(0));  }  [CE]  class,  interface,  or  enum  expected  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  >  0)  {  out.write(input.charAt(0));  out.write(input.charAt(0));  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  >  0)  {  out.write(input.charAt(0));  out.write(input.charAt(0));  }	          out.write(input.charAt(pos));    out.write(input.charAt(pos));    	non-compiled	[CE]  class,  interface,  or  enum  expected	77	None	replace
169	[BUG]  [BUGGY]  if(len  >  0)  {  out.write(input.charAt(pos  +  1));  out.write(input.charAt(pos  +  1));  }  [CE]  class,  interface,  or  enum  expected  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  >  0)  {  out.write(input.charAt(pos  +  1));  out.write(input.charAt(pos  +  1));  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  >  0)  {  out.write(input.charAt(pos  +  1));  out.write(input.charAt(pos  +  1));  }	          out.write(input.charAt(pos));    out.write(input.charAt(pos));    	non-compiled	[CE]  class,  interface,  or  enum  expected	77	None	replace
170	[BUG]  [BUGGY]  if(len  <  2)  {  out.write(input.charAt(0));  out.write(input.charAt(0));  }  [CE]  class,  interface,  or  enum  expected  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  <  2)  {  out.write(input.charAt(0));  out.write(input.charAt(0));  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  <  2)  {  out.write(input.charAt(0));  out.write(input.charAt(0));  }	          out.write(input.charAt(pos));    out.write(input.charAt(pos));    	non-compiled	[CE]  class,  interface,  or  enum  expected	77	None	replace
171	[BUG]  [BUGGY]  int  pos  =  len  -  1;  [CE]  class,  interface,  or  enum  expected  [FE]                ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  int  pos  =  len  -  1;  [BUGGY]      int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	int  pos  =  len  -  1;	  while    (pos    <    len    &&    input.length()    >    0)    {    int    pos    =    len    -    1;    	non-compiled	[CE]  class,  interface,  or  enum  expected	86	None	replace
172	[BUG]  [BUGGY]  while  (pos  <  len  &&  input.length()  >  0)  {  int  pos  =  input.length  -  1;  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                  ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  while  (pos  <  len  &&  input.length()  >  0)  {  int  pos  =  input.length  -  1;  [BUGGY]      int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	while  (pos  <  len  &&  input.length()  >  0)  {  int  pos  =  input.length  -  1;	  while    (pos    <    len    &&    input.length()    >    0)    {    int    pos    =    len    -    1;    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	86	None	replace
173	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  while  (pos  <  len  -  1  ||  input.length()  >  0)  {  [BUGGY]      int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	add	while  (pos  <  len  -  1  ||  input.length()  >  0)  {	  while    (pos    <    len    -    1    &&    input.length()    >    0)    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	95	19	replace
174	[BUG]  [BUGGY]  while  (pos  <  len  -  1  ||  input.length()  >  0)  {  [FE]  StringIndexOutOfBoundsException  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  while  (pos  <  len  -  1  ||  input.length()  >  0)  {  [BUGGY]      int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	while  (pos  <  len  -  1  ||  input.length()  >  0)  {	  while    (pos    <    len    -    1    &&    input.length()    >    0)    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	95	19	replace
175	[BUG]  [BUGGY]  while  (pos  <  len  -  1)  {  int  pos  =  len  -  2;  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  while  (pos  <  len  -  1)  {  int  pos  =  len  -  2;  [BUGGY]      int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	while  (pos  <  len  -  1)  {  int  pos  =  len  -  2;	  while    (pos    <    len    -    1)    {    int    pos    =    len    -    1;    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	38	None	replace
176	[BUG]  [BUGGY]  out.write(c);  OutputStream  out  =  input.getOutputStream();  [CE]  class,  interface,  or  enum  expected  [FE]          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  out.write(c);  OutputStream  out  =  input.getOutputStream();  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	out.write(c);  OutputStream  out  =  input.getOutputStream();	          out.write(len);    OutputStream    out    =    input.getOutputStream();    	non-compiled	[CE]  class,  interface,  or  enum  expected	90	None	replace
177	[BUG]  [BUGGY]  out.write(len  +  1);  OutputStream  out  =  input.getOutputStream();  [CE]  class,  interface,  or  enum  expected  [FE]            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  out.write(len  +  1);  OutputStream  out  =  input.getOutputStream();  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	out.write(len  +  1);  OutputStream  out  =  input.getOutputStream();	          out.write(len);    OutputStream    out    =    input.getOutputStream();    	non-compiled	[CE]  class,  interface,  or  enum  expected	90	None	replace
178	[BUG]  [BUGGY]  if(pos  <  1)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                  ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  <  1)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  <  1)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }	  if(len    <    1)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	121	None	replace
179	[BUG]  [BUGGY]  if(len  >  0)  {  out.write(input.charAt(pos));  char[]  input  =  input.getChars(pos,  input.length());  out.write(input.charAt(pos));  }  [CE]  class,  interface,  or  enum  expected  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  >  0)  {  out.write(input.charAt(pos));  char[]  input  =  input.getChars(pos,  input.length());  out.write(input.charAt(pos));  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  >  0)  {  out.write(input.charAt(pos));  char[]  input  =  input.getChars(pos,  input.length());  out.write(input.charAt(pos));  }	          out.write(input.charAt(pos));    char[]    input    =    input.getChars(pos,    input.length());    out.write(input.charAt(pos));    	non-compiled	[CE]  class,  interface,  or  enum  expected	101	None	replace
180	[BUG]  [BUGGY]  char[]  input  =  input.getChars(pos,  len.length());  out.write(input.charAt(pos));  [CE]  class,  interface,  or  enum  expected  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  char[]  input  =  input.getChars(pos,  len.length());  out.write(input.charAt(pos));  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	char[]  input  =  input.getChars(pos,  len.length());  out.write(input.charAt(pos));	          out.write(input.charAt(pos));    char[]    input    =    input.getChars(pos,    input.length());    out.write(input.charAt(pos));    	non-compiled	[CE]  class,  interface,  or  enum  expected	101	None	replace
181	[BUG]  [BUGGY]  if(len  >  0)  {  out.write(input.charAt(pos));  char[]  input  =  input.getChars(pos,  input.length());  out.write(input.charAt(pos));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  class,  interface,  or  enum  expected  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  >  0)  {  out.write(input.charAt(pos));  char[]  input  =  input.getChars(pos,  input.length());  out.write(input.charAt(pos));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  >  0)  {  out.write(input.charAt(pos));  char[]  input  =  input.getChars(pos,  input.length());  out.write(input.charAt(pos));  }  else  {  throw  new  IllegalArgumentException( " ");  }	          out.write(input.charAt(pos));    char[]    input    =    input.getChars(pos,    input.length());    out.write(input.charAt(pos));    	non-compiled	[CE]  class,  interface,  or  enum  expected	101	None	replace
182	[BUG]  [BUGGY]  if(len  >  0)  {  out.write(input.charAt(pos));  char[]  input  =  input.getChars(pos,  input.length());  out.write(input.charAt(pos));  }  else  {  for(int  pos  =  0;  [CE]  '.class'  expected  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  >  0)  {  out.write(input.charAt(pos));  char[]  input  =  input.getChars(pos,  input.length());  out.write(input.charAt(pos));  }  else  {  for(int  pos  =  0;  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  >  0)  {  out.write(input.charAt(pos));  char[]  input  =  input.getChars(pos,  input.length());  out.write(input.charAt(pos));  }  else  {  for(int  pos  =  0;	          out.write(input.charAt(pos));    char[]    input    =    input.getChars(pos,    input.length());    out.write(input.charAt(pos));    	non-compiled	[CE]  '.class'  expected	101	None	replace
183	[BUG]  [BUGGY]  while  (pos  <  input.length()  &&  input.length()  >  0)  {  int  len  =  Character.codePointCount(input,  0,  input.length());  [CE]  variable  len  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  while  (pos  <  input.length()  &&  input.length()  >  0)  {  int  len  =  Character.codePointCount(input,  0,  input.length());  [BUGGY]      int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	while  (pos  <  input.length()  &&  input.length()  >  0)  {  int  len  =  Character.codePointCount(input,  0,  input.length());	  while    (pos    <    len    &&    input.length()    >    0)    {    int    len    =    Character.codePointCount(input,    0,    input.length());    	non-compiled	[CE]  variable  len  is  already  defined  in  method  translate(CharSequence,Writer)	83	None	replace
184	[BUG]  [BUGGY]  if(len  >  0)  {  out.write(input.charAt(pos));  char[]  input  =  input.getChars(pos,  input.length()  -  1);  out.write(input.charAt(pos));  }  [CE]  class,  interface,  or  enum  expected  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  >  0)  {  out.write(input.charAt(pos));  char[]  input  =  input.getChars(pos,  input.length()  -  1);  out.write(input.charAt(pos));  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  >  0)  {  out.write(input.charAt(pos));  char[]  input  =  input.getChars(pos,  input.length()  -  1);  out.write(input.charAt(pos));  }	          out.write(input.charAt(pos));    char[]    input    =    input.getChars(pos,    input.length()    -    1);    out.write(input.charAt(pos));    	non-compiled	[CE]  class,  interface,  or  enum  expected	103	None	replace
185	[BUG]  [BUGGY]  char[]  input  =  input.getChars(pos,  pos.length()  -  1);  out.write(input.charAt(pos));  [CE]  class,  interface,  or  enum  expected  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  char[]  input  =  input.getChars(pos,  pos.length()  -  1);  out.write(input.charAt(pos));  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	char[]  input  =  input.getChars(pos,  pos.length()  -  1);  out.write(input.charAt(pos));	          out.write(input.charAt(pos));    char[]    input    =    input.getChars(pos,    input.length()    -    1);    out.write(input.charAt(pos));    	non-compiled	[CE]  class,  interface,  or  enum  expected	103	None	replace
186	[BUG]  [BUGGY]  char[]  input  =  input.getChars(pos,  pos.length()  -  1);  [CE]  class,  interface,  or  enum  expected  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  char[]  input  =  input.getChars(pos,  pos.length()  -  1);  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	char[]  input  =  input.getChars(pos,  pos.length()  -  1);	          out.write(input.charAt(pos));    char[]    input    =    input.getChars(pos,    input.length()    -    1);    out.write(input.charAt(pos));    	non-compiled	[CE]  class,  interface,  or  enum  expected	103	None	replace
187	[BUG]  [BUGGY]  while  (pos  <  len  -  1)  {  int  len  =  input.length()  +  1;  [CE]  variable  len  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  while  (pos  <  len  -  1)  {  int  len  =  input.length()  +  1;  [BUGGY]      int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	while  (pos  <  len  -  1)  {  int  len  =  input.length()  +  1;	  while    (pos    <    len    -    1)    {    int    len    =    input.length();    	non-compiled	[CE]  variable  len  is  already  defined  in  method  translate(CharSequence,Writer)	87	None	replace
188	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(0));  out.write(input.charAt(0));  out.write(input.charAt(0));  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	add	                out.write(input.charAt(0));        out.write(input.charAt(0));    out.write(input.charAt(0));  out.write(input.charAt(0));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	55	19	add
189	[BUG]  [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(0));  out.write(input.charAt(0));  out.write(input.charAt(0));  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(0));  out.write(input.charAt(0));  out.write(input.charAt(0));  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	                out.write(input.charAt(0));        out.write(input.charAt(0));    out.write(input.charAt(0));  out.write(input.charAt(0));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	55	19	add
190	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(0));  out.write(input.charAt(0));  out.write(input.charAt(1));  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	add	                out.write(input.charAt(0));        out.write(input.charAt(0));    out.write(input.charAt(0));  out.write(input.charAt(1));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	55	19	add
191	[BUG]  [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(0));  out.write(input.charAt(0));  out.write(input.charAt(1));  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(0));  out.write(input.charAt(0));  out.write(input.charAt(1));  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	                out.write(input.charAt(0));        out.write(input.charAt(0));    out.write(input.charAt(0));  out.write(input.charAt(1));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	55	19	add
192	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(0));  out.write(input.charAt(1));  out.write(input.charAt(1));  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	add	                out.write(input.charAt(0));        out.write(input.charAt(0));    out.write(input.charAt(1));  out.write(input.charAt(1));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	55	19	add
193	[BUG]  [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(0));  out.write(input.charAt(1));  out.write(input.charAt(1));  [FE]  StringIndexOutOfBoundsException  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(0));  out.write(input.charAt(1));  out.write(input.charAt(1));  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	                out.write(input.charAt(0));        out.write(input.charAt(0));    out.write(input.charAt(1));  out.write(input.charAt(1));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	55	19	add
194	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(0));  if(pos  <  len)  {  out.write(input.charAt(0));  out.write(input.charAt(0));  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	add	                out.write(input.charAt(0));        out.write(input.charAt(0));    if(pos  <  len)  {  out.write(input.charAt(0));  out.write(input.charAt(0));  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	55	19	add
195	[BUG]  [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(0));  if(pos  <  len)  {  out.write(input.charAt(0));  out.write(input.charAt(0));  }  [FE]  StringIndexOutOfBoundsException  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(0));  if(pos  <  len)  {  out.write(input.charAt(0));  out.write(input.charAt(0));  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	                out.write(input.charAt(0));        out.write(input.charAt(0));    if(pos  <  len)  {  out.write(input.charAt(0));  out.write(input.charAt(0));  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	55	19	add
196	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]            StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(0));  if(pos  <  len)  {  out.write(input.charAt(0));  out.write(input.charAt(1));  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	add	                out.write(input.charAt(0));        out.write(input.charAt(0));    if(pos  <  len)  {  out.write(input.charAt(0));  out.write(input.charAt(1));  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	55	19	add
197	[BUG]  [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(0));  if(pos  <  len)  {  out.write(input.charAt(0));  out.write(input.charAt(1));  }  [FE]  StringIndexOutOfBoundsException  [FE]            StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(0));  if(pos  <  len)  {  out.write(input.charAt(0));  out.write(input.charAt(1));  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	                out.write(input.charAt(0));        out.write(input.charAt(0));    if(pos  <  len)  {  out.write(input.charAt(0));  out.write(input.charAt(1));  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	55	19	add
198	[BUG]  [BUGGY]  if(len  >  0)  {  out.write('n');  out.write('n');  }  [CE]  class,  interface,  or  enum  expected  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  >  0)  {  out.write('n');  out.write('n');  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  >  0)  {  out.write('n');  out.write('n');  }	          out.write('n');    out.write('n');    	non-compiled	[CE]  class,  interface,  or  enum  expected	71	None	replace
199	[BUG]  [BUGGY]  if(len  >  0)  {  out.write('n');  out.write('n');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  class,  interface,  or  enum  expected  [FE]      ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  >  0)  {  out.write('n');  out.write('n');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  >  0)  {  out.write('n');  out.write('n');  }  else  {  throw  new  IllegalArgumentException( " ");  }	          out.write('n');    out.write('n');    	non-compiled	[CE]  class,  interface,  or  enum  expected	71	None	replace
200	[BUG]  [BUGGY]  if(len  <  =  0)  {  out.write('n');  out.write('n');  }  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  <  =  0)  {  out.write('n');  out.write('n');  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  <  =  0)  {  out.write('n');  out.write('n');  }	          out.write('n');    out.write('n');    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
201	[BUG]  [BUGGY]  char[]  c  =  input.toChars('[');  out.write('n');  [CE]  class,  interface,  or  enum  expected  [FE]          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  char[]  c  =  input.toChars('[');  out.write('n');  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	char[]  c  =  input.toChars('[');  out.write('n');	          out.write('n');    char[]    c    =    input.toChars('[');    out.write('n');    	non-compiled	[CE]  class,  interface,  or  enum  expected	164	None	replace
202	[BUG]  [BUGGY]  out.write('n');  char[]  c  =  input.toChars('[',  pos);  out.write('n');  [CE]  class,  interface,  or  enum  expected  [FE]            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  out.write('n');  char[]  c  =  input.toChars('[',  pos);  out.write('n');  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	out.write('n');  char[]  c  =  input.toChars('[',  pos);  out.write('n');	          out.write('n');    char[]    c    =    input.toChars('[');    out.write('n');    	non-compiled	[CE]  class,  interface,  or  enum  expected	164	None	replace
203	[BUG]  [BUGGY]  OutputStream  out  =  input.outputStream(pos);  [CE]  class,  interface,  or  enum  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  OutputStream  out  =  input.outputStream(pos);  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	OutputStream  out  =  input.outputStream(pos);	  OutputStream    out    =    input.outputStream();    	non-compiled	[CE]  class,  interface,  or  enum  expected	125	None	replace
204	[BUG]  [BUGGY]  OutputStream  out  =  input.inputStream();  [CE]  class,  interface,  or  enum  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  OutputStream  out  =  input.inputStream();  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	OutputStream  out  =  input.inputStream();	  OutputStream    out    =    input.outputStream();    	non-compiled	[CE]  class,  interface,  or  enum  expected	125	None	replace
205	[BUG]  [BUGGY]  OutputStream  out  =  input.getOutputStream(),  pos);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  OutputStream  out  =  input.getOutputStream(),  pos);  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	OutputStream  out  =  input.getOutputStream(),  pos);	  OutputStream    out    =    input.getOutputStream(),    len);    	non-compiled	[CE]  ';'  expected	48	None	replace
206	[BUG]  [BUGGY]  OutputStream  out  =  input.getOutputStream(),  0,  len);  [CE]  <identifier>  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  OutputStream  out  =  input.getOutputStream(),  0,  len);  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	OutputStream  out  =  input.getOutputStream(),  0,  len);	  OutputStream    out    =    input.getOutputStream(),    len);    	non-compiled	[CE]  <identifier>  expected	48	None	replace
207	[BUG]  [BUGGY]  OutputStream  out  =  input.getOutputStream(),  len  +  1);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  OutputStream  out  =  input.getOutputStream(),  len  +  1);  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	OutputStream  out  =  input.getOutputStream(),  len  +  1);	  OutputStream    out    =    input.getOutputStream(),    len);    	non-compiled	[CE]  ';'  expected	48	None	replace
208	[BUG]  [BUGGY]  OutputStream  out  =  input.getOutputStream(),  pos  +  len);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  OutputStream  out  =  input.getOutputStream(),  pos  +  len);  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	OutputStream  out  =  input.getOutputStream(),  pos  +  len);	  OutputStream    out    =    input.getOutputStream(),    len);    	non-compiled	[CE]  ';'  expected	48	None	replace
209	[BUG]  [BUGGY]  char[]  c  =  input.toChars(input,  0,  input.length());  [CE]  class,  interface,  or  enum  expected  [FE]          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  char[]  c  =  input.toChars(input,  0,  input.length());  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	char[]  c  =  input.toChars(input,  0,  input.length());	          out.write('n');    char[]    c    =    input.toChars(input,    0,    input.length());    	non-compiled	[CE]  class,  interface,  or  enum  expected	114	None	replace
210	[BUG]  [BUGGY]  out.write('n');  c  =  input.toChars(input,  0,  input.length());  [CE]  class,  interface,  or  enum  expected  [FE]            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  out.write('n');  c  =  input.toChars(input,  0,  input.length());  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	out.write('n');  c  =  input.toChars(input,  0,  input.length());	          out.write('n');    char[]    c    =    input.toChars(input,    0,    input.length());    	non-compiled	[CE]  class,  interface,  or  enum  expected	114	None	replace
211	[BUG]  [BUGGY]  char[]  c  =  input.toChars(input,  0,  len.length());  [CE]  class,  interface,  or  enum  expected  [FE]              ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  char[]  c  =  input.toChars(input,  0,  len.length());  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	char[]  c  =  input.toChars(input,  0,  len.length());	          out.write('n');    char[]    c    =    input.toChars(input,    0,    input.length());    	non-compiled	[CE]  class,  interface,  or  enum  expected	114	None	replace
212	[BUG]  [BUGGY]  out.write(c);  int  len  =  Character.codePointCount(input,  0,  input.length());  [CE]  class,  interface,  or  enum  expected  [FE]              ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  out.write(c);  int  len  =  Character.codePointCount(input,  0,  input.length());  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	out.write(c);  int  len  =  Character.codePointCount(input,  0,  input.length());	          out.write(len);    int    len    =    Character.codePointCount(input,    0,    input.length()    -    1);    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
213	[BUG]  [BUGGY]  if(pos  <  len)  {  out.write(len);  int  len  =  Character.codePointCount(input,  0,  input.length());  }  [CE]  class,  interface,  or  enum  expected  [FE]                ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  <  len)  {  out.write(len);  int  len  =  Character.codePointCount(input,  0,  input.length());  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  <  len)  {  out.write(len);  int  len  =  Character.codePointCount(input,  0,  input.length());  }	          out.write(len);    int    len    =    Character.codePointCount(input,    0,    input.length()    -    1);    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
214	[BUG]  [BUGGY]  out.write('n');  int  len  =  Character.codePointCount(input,  0,  input.length());  [CE]  class,  interface,  or  enum  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  out.write('n');  int  len  =  Character.codePointCount(input,  0,  input.length());  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	out.write('n');  int  len  =  Character.codePointCount(input,  0,  input.length());	          out.write(len);    int    len    =    Character.codePointCount(input,    0,    input.length()    -    1);    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
215	[BUG]  [BUGGY]  if(pos  <  len)  {  for(int  pos  =  0;  pos  <  input.length;  pos++)  {  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                    ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  <  len)  {  for(int  pos  =  0;  pos  <  input.length;  pos++)  {  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  <  len)  {  for(int  pos  =  0;  pos  <  input.length;  pos++)  {  out.write(c);  }	  if(pos    <    len)    {    for(int    pos    =    0;    pos    <    c.length;    pos++)    {    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	143	None	replace
216	[BUG]  [BUGGY]  if(pos  <  len)  {  for(int  c  =  0;  pos  <  c.length;  pos++)  {  out.write(c);  }  [CE]  int  cannot  be  dereferenced  [FE]                      ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  <  len)  {  for(int  c  =  0;  pos  <  c.length;  pos++)  {  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  <  len)  {  for(int  c  =  0;  pos  <  c.length;  pos++)  {  out.write(c);  }	  if(pos    <    len)    {    for(int    pos    =    0;    pos    <    c.length;    pos++)    {    out.write(c);    }    	non-compiled	[CE]  int  cannot  be  dereferenced	143	None	replace
217	[BUG]  [BUGGY]  if(pos  <  len)  {  for(int  c  =  0;  pos  <  input.length;  pos++)  {  out.write(c);  }  [CE]  cannot  find  symbol  length  [FE]                        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  <  len)  {  for(int  c  =  0;  pos  <  input.length;  pos++)  {  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  <  len)  {  for(int  c  =  0;  pos  <  input.length;  pos++)  {  out.write(c);  }	  if(pos    <    len)    {    for(int    pos    =    0;    pos    <    c.length;    pos++)    {    out.write(c);    }    	non-compiled	[CE]  cannot  find  symbol  length	143	None	replace
218	[BUG]  [BUGGY]  if(pos  <  2)  {  for(int  pos  =  0;  pos  <  len.length();  pos++)  {  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                  ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  <  2)  {  for(int  pos  =  0;  pos  <  len.length();  pos++)  {  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  <  2)  {  for(int  pos  =  0;  pos  <  len.length();  pos++)  {  out.write(c);  }	  if(pos    <    2)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	142	None	replace
219	[BUG]  [BUGGY]  if(pos  <  2)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c,  out);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                    ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  <  2)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c,  out);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  <  2)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c,  out);  }	  if(pos    <    2)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	142	None	replace
220	[BUG]  [BUGGY]  char[]  input  =  input.toChars(pos);  out.write(input.charAt(pos));  [CE]  class,  interface,  or  enum  expected  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  char[]  input  =  input.toChars(pos);  out.write(input.charAt(pos));  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	char[]  input  =  input.toChars(pos);  out.write(input.charAt(pos));	          out.write(input.charAt(pos));    char[]    input    =    input.toChars(pos);    out.write(input.charAt(pos));    	non-compiled	[CE]  class,  interface,  or  enum  expected	100	None	replace
221	[BUG]  [BUGGY]  if(pos  <  len)  {  out.write(input.charAt(pos));  char[]  input  =  input.toChars(pos);  out.write(input.charAt(pos));  }  [CE]  class,  interface,  or  enum  expected  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  <  len)  {  out.write(input.charAt(pos));  char[]  input  =  input.toChars(pos);  out.write(input.charAt(pos));  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  <  len)  {  out.write(input.charAt(pos));  char[]  input  =  input.toChars(pos);  out.write(input.charAt(pos));  }	          out.write(input.charAt(pos));    char[]    input    =    input.toChars(pos);    out.write(input.charAt(pos));    	non-compiled	[CE]  class,  interface,  or  enum  expected	100	None	replace
222	[BUG]  [BUGGY]  if(pos  <  len)  {  out.write(input.charAt(0));  char[]  input  =  input.toChars(pos);  out.write(input.charAt(0));  }  [CE]  class,  interface,  or  enum  expected  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  <  len)  {  out.write(input.charAt(0));  char[]  input  =  input.toChars(pos);  out.write(input.charAt(0));  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  <  len)  {  out.write(input.charAt(0));  char[]  input  =  input.toChars(pos);  out.write(input.charAt(0));  }	          out.write(input.charAt(pos));    char[]    input    =    input.toChars(pos);    out.write(input.charAt(pos));    	non-compiled	[CE]  class,  interface,  or  enum  expected	100	None	replace
223	[BUG]  [BUGGY]  if(pos  >  0)  {  out.write(len);  out.write(len);  }  [CE]  class,  interface,  or  enum  expected  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  >  0)  {  out.write(len);  out.write(len);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  >  0)  {  out.write(len);  out.write(len);  }	          out.write(len);    out.write(len);    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
224	[BUG]  [BUGGY]  if(pos  <  len)  {  out.write(len);  out.write(len);  }  [CE]  class,  interface,  or  enum  expected  [FE]      ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  <  len)  {  out.write(len);  out.write(len);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  <  len)  {  out.write(len);  out.write(len);  }	          out.write(len);    out.write(len);    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
225	[BUG]  [BUGGY]  if(pos  <  len)  {  out.write(len);  out.write(len  +  1);  }  [CE]  class,  interface,  or  enum  expected  [FE]        ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  <  len)  {  out.write(len);  out.write(len  +  1);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  <  len)  {  out.write(len);  out.write(len  +  1);  }	          out.write(len);    out.write(len);    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
226	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]          out.write(input.charAt(pos));    out.write(input.charAt(pos));  out.write(input.charAt(pos));  out.write(input.charAt(pos));  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	add	                out.write(input.charAt(pos));        out.write(input.charAt(pos));    out.write(input.charAt(pos));  out.write(input.charAt(pos));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	76	19	add
227	[BUG]  [BUGGY]          out.write(input.charAt(pos));    out.write(input.charAt(pos));  out.write(input.charAt(pos));  out.write(input.charAt(pos));  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]          out.write(input.charAt(pos));    out.write(input.charAt(pos));  out.write(input.charAt(pos));  out.write(input.charAt(pos));  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	                out.write(input.charAt(pos));        out.write(input.charAt(pos));    out.write(input.charAt(pos));  out.write(input.charAt(pos));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	76	19	add
228	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]          out.write(input.charAt(pos));    out.write(input.charAt(pos));  if(pos  <  len)  {  out.write(input.charAt(pos));  out.write(input.charAt(pos));  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	add	                out.write(input.charAt(pos));        out.write(input.charAt(pos));    if(pos  <  len)  {  out.write(input.charAt(pos));  out.write(input.charAt(pos));  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	76	19	add
229	[BUG]  [BUGGY]          out.write(input.charAt(pos));    out.write(input.charAt(pos));  if(pos  <  len)  {  out.write(input.charAt(pos));  out.write(input.charAt(pos));  }  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]          out.write(input.charAt(pos));    out.write(input.charAt(pos));  if(pos  <  len)  {  out.write(input.charAt(pos));  out.write(input.charAt(pos));  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	                out.write(input.charAt(pos));        out.write(input.charAt(pos));    if(pos  <  len)  {  out.write(input.charAt(pos));  out.write(input.charAt(pos));  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	76	19	add
230	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]          out.write(input.charAt(pos));    out.write(input.charAt(pos));  if(pos  <  len)  {  out.write(input.charAt(pos));  out.write(input.charAt(pos));  }  else  {  out.write(input.charAt(pos));  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	add	                out.write(input.charAt(pos));        out.write(input.charAt(pos));    if(pos  <  len)  {  out.write(input.charAt(pos));  out.write(input.charAt(pos));  }  else  {  out.write(input.charAt(pos));  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	76	19	add
231	[BUG]  [BUGGY]          out.write(input.charAt(pos));    out.write(input.charAt(pos));  if(pos  <  len)  {  out.write(input.charAt(pos));  out.write(input.charAt(pos));  }  else  {  out.write(input.charAt(pos));  }  [FE]  StringIndexOutOfBoundsException  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]          out.write(input.charAt(pos));    out.write(input.charAt(pos));  if(pos  <  len)  {  out.write(input.charAt(pos));  out.write(input.charAt(pos));  }  else  {  out.write(input.charAt(pos));  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	                out.write(input.charAt(pos));        out.write(input.charAt(pos));    if(pos  <  len)  {  out.write(input.charAt(pos));  out.write(input.charAt(pos));  }  else  {  out.write(input.charAt(pos));  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	76	19	add
232	[BUG]  [BUGGY]          out.write(input.charAt(pos));    out.write(input.charAt(pos));  if(pos  <  len)  {  out.write(input.charAt(pos));  out.write(input.charAt(pos));  }  else  {  break;  }  [CE]  break  outside  switch  or  loop  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]          out.write(input.charAt(pos));    out.write(input.charAt(pos));  if(pos  <  len)  {  out.write(input.charAt(pos));  out.write(input.charAt(pos));  }  else  {  break;  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	                out.write(input.charAt(pos));        out.write(input.charAt(pos));    if(pos  <  len)  {  out.write(input.charAt(pos));  out.write(input.charAt(pos));  }  else  {  break;  }	  	non-compiled	[CE]  break  outside  switch  or  loop	76	None	add
233	[BUG]  [BUGGY]  out.write(len  -  2);  [CE]  class,  interface,  or  enum  expected  [FE]          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  out.write(len  -  2);  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	out.write(len  -  2);	  out.write(len    -    1);    	non-compiled	[CE]  class,  interface,  or  enum  expected	124	None	replace
234	[BUG]  [BUGGY]  out.write(input.length()  -  1);  [CE]  class,  interface,  or  enum  expected  [FE]            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  out.write(input.length()  -  1);  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	out.write(input.length()  -  1);	  out.write(len    -    1);    	non-compiled	[CE]  class,  interface,  or  enum  expected	124	None	replace
235	[BUG]  [BUGGY]  out.write(pos  -  1);  [CE]  class,  interface,  or  enum  expected  [FE]              ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  out.write(pos  -  1);  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	out.write(pos  -  1);	  out.write(len    -    1);    	non-compiled	[CE]  class,  interface,  or  enum  expected	124	None	replace
236	[BUG]  [BUGGY]  if(len  >  0)  {  pos  =  input.length();  pos  =  input.length();  }  [CE]  class,  interface,  or  enum  expected  [FE]    AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  >  0)  {  pos  =  input.length();  pos  =  input.length();  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  >  0)  {  pos  =  input.length();  pos  =  input.length();  }	          pos    =    input.length();    pos    =    input.length();    	non-compiled	[CE]  class,  interface,  or  enum  expected	41	None	replace
237	[BUG]  [BUGGY]  if(len  >  0)  {  pos  =  input.length();  pos  =  input.length();  }  else  {  out.write('n');  }  [CE]  class,  interface,  or  enum  expected  [FE]      AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  >  0)  {  pos  =  input.length();  pos  =  input.length();  }  else  {  out.write('n');  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  >  0)  {  pos  =  input.length();  pos  =  input.length();  }  else  {  out.write('n');  }	          pos    =    input.length();    pos    =    input.length();    	non-compiled	[CE]  class,  interface,  or  enum  expected	41	None	replace
238	[BUG]  [BUGGY]  if(len  <  2)  {  pos  =  input.length();  pos  =  input.length();  }  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  <  2)  {  pos  =  input.length();  pos  =  input.length();  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  <  2)  {  pos  =  input.length();  pos  =  input.length();  }	          pos    =    input.length();    pos    =    input.length();    	non-compiled	[CE]  class,  interface,  or  enum  expected	41	None	replace
239	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]          pos    =    input.length();    pos  =  input.length();  pos  =  input.length();  pos  =  input.length();  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	add	                pos        =        input.length();        pos    =    input.length();    pos  =  input.length();  pos  =  input.length();	  	compilable	  [FE]  AssertionFailedError  	40	19	add
240	[BUG]  [BUGGY]          pos    =    input.length();    pos  =  input.length();  pos  =  input.length();  pos  =  input.length();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]          pos    =    input.length();    pos  =  input.length();  pos  =  input.length();  pos  =  input.length();  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	                pos        =        input.length();        pos    =    input.length();    pos  =  input.length();  pos  =  input.length();	  	compilable	  [FE]  AssertionFailedError  	40	19	add
241	[BUG]  [BUGGY]          pos    =    input.length();    pos  =  input.length();  int  pos  =  input.length();  pos  =  input.length();  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]      AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]          pos    =    input.length();    pos  =  input.length();  int  pos  =  input.length();  pos  =  input.length();  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	                pos        =        input.length();        pos    =    input.length();    int  pos  =  input.length();  pos  =  input.length();	  	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	40	None	add
242	[BUG]  [BUGGY]          pos    =    input.length();    pos  =  input.length();  pos  =  input.length();  pos  =  output.length();  [CE]  cannot  find  symbol  output  [FE]        AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]          pos    =    input.length();    pos  =  input.length();  pos  =  input.length();  pos  =  output.length();  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	                pos        =        input.length();        pos    =    input.length();    pos  =  input.length();  pos  =  output.length();	  	non-compiled	[CE]  cannot  find  symbol  output	40	None	add
243	[BUG]  [BUGGY]          pos    =    input.length();    pos  =  input.length();  pos  =  in.length();  pos  =  input.length();  [CE]  cannot  find  symbol  in  [FE]          AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]          pos    =    input.length();    pos  =  input.length();  pos  =  in.length();  pos  =  input.length();  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	                pos        =        input.length();        pos    =    input.length();    pos  =  in.length();  pos  =  input.length();	  	non-compiled	[CE]  cannot  find  symbol  in	40	None	add
244	[BUG]  [BUGGY]          pos    =    input.length();    pos  =  input.length();  pos  =  output.length();  pos  =  input.length();  [CE]  cannot  find  symbol  output  [FE]            AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]          pos    =    input.length();    pos  =  input.length();  pos  =  output.length();  pos  =  input.length();  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	                pos        =        input.length();        pos    =    input.length();    pos  =  output.length();  pos  =  input.length();	  	non-compiled	[CE]  cannot  find  symbol  output	40	None	add
245	[BUG]  [BUGGY]  if(len  >  0)  {  pos  =  input.length();  pos  =  input.length());  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  >  0)  {  pos  =  input.length();  pos  =  input.length());  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  >  0)  {  pos  =  input.length();  pos  =  input.length());  }	          pos    =    input.length();    pos    =    input.length());    	non-compiled	[CE]  ';'  expected	45	None	replace
246	[BUG]  [BUGGY]  out.write('n');  char[]  c  =  input.toChars(0,  len);  [CE]  class,  interface,  or  enum  expected  [FE]              ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  out.write('n');  char[]  c  =  input.toChars(0,  len);  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	out.write('n');  char[]  c  =  input.toChars(0,  len);	          out.write('n');    char[]    c    =    input.toChars(0,    pos);    out.write('n');    	non-compiled	[CE]  class,  interface,  or  enum  expected	74	None	replace
247	[BUG]  [BUGGY]  char[]  c  =  input.toChars(0,  len);  out.write('n');  [CE]  class,  interface,  or  enum  expected  [FE]                ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  char[]  c  =  input.toChars(0,  len);  out.write('n');  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	char[]  c  =  input.toChars(0,  len);  out.write('n');	          out.write('n');    char[]    c    =    input.toChars(0,    pos);    out.write('n');    	non-compiled	[CE]  class,  interface,  or  enum  expected	74	None	replace
248	[BUG]  [BUGGY]  out.write('n');  c  =  input.toChars(0,  len);  [CE]  class,  interface,  or  enum  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  out.write('n');  c  =  input.toChars(0,  len);  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	out.write('n');  c  =  input.toChars(0,  len);	          out.write('n');    char[]    c    =    input.toChars(0,    pos);    out.write('n');    	non-compiled	[CE]  class,  interface,  or  enum  expected	74	None	replace
249	[BUG]  [BUGGY]  char[]  input  =  input.charAt(pos);  [CE]  class,  interface,  or  enum  expected  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  char[]  input  =  input.charAt(pos);  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	char[]  input  =  input.charAt(pos);	          out.write(input.charAt(pos));    char[]    input    =    input.charAt(pos);    	non-compiled	[CE]  class,  interface,  or  enum  expected	150	None	replace
250	[BUG]  [BUGGY]  out.write(input.charAt(pos  +  1));  char[]  input  =  input.charAt(pos  +  1);  [CE]  class,  interface,  or  enum  expected  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  out.write(input.charAt(pos  +  1));  char[]  input  =  input.charAt(pos  +  1);  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	out.write(input.charAt(pos  +  1));  char[]  input  =  input.charAt(pos  +  1);	          out.write(input.charAt(pos));    char[]    input    =    input.charAt(pos);    	non-compiled	[CE]  class,  interface,  or  enum  expected	150	None	replace
251	[BUG]  [BUGGY]  out.write(input.charAt(pos  +  1)+  1);  [CE]  class,  interface,  or  enum  expected  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  out.write(input.charAt(pos  +  1)+  1);  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	out.write(input.charAt(pos  +  1)+  1);	  out.write(input.charAt(pos    +    1));    	non-compiled	[CE]  class,  interface,  or  enum  expected	19	None	replace
252	[BUG]  [BUGGY]  out.write(input.charAt(pos  +  2));  [CE]  class,  interface,  or  enum  expected  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  out.write(input.charAt(pos  +  2));  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	out.write(input.charAt(pos  +  2));	  out.write(input.charAt(pos    +    1));    	non-compiled	[CE]  class,  interface,  or  enum  expected	19	None	replace
253	[BUG]  [BUGGY]  out.write(input.charAt(pos  +  1),  input.length());  [CE]  class,  interface,  or  enum  expected  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  out.write(input.charAt(pos  +  1),  input.length());  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	out.write(input.charAt(pos  +  1),  input.length());	  out.write(input.charAt(pos    +    1));    	non-compiled	[CE]  class,  interface,  or  enum  expected	19	None	replace
254	[BUG]  [BUGGY]  out.write(input.charAt(0),  pos  +  1);  [CE]  class,  interface,  or  enum  expected  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  out.write(input.charAt(0),  pos  +  1);  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	out.write(input.charAt(0),  pos  +  1);	  out.write(input.charAt(0),    pos);    	non-compiled	[CE]  class,  interface,  or  enum  expected	20	None	replace
255	[BUG]  [BUGGY]  out.write(input.charAt(0),  len);  [CE]  class,  interface,  or  enum  expected  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  out.write(input.charAt(0),  len);  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	out.write(input.charAt(0),  len);	  out.write(input.charAt(0),    pos);    	non-compiled	[CE]  class,  interface,  or  enum  expected	20	None	replace
256	[BUG]  [BUGGY]  out.write(input.charAt(0),  pos  +  len);  [CE]  class,  interface,  or  enum  expected  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  out.write(input.charAt(0),  pos  +  len);  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	out.write(input.charAt(0),  pos  +  len);	  out.write(input.charAt(0),    pos);    	non-compiled	[CE]  class,  interface,  or  enum  expected	20	None	replace
257	[BUG]  [BUGGY]  out.write(input.charAt(pos),  pos);  [CE]  class,  interface,  or  enum  expected  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  out.write(input.charAt(pos),  pos);  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	out.write(input.charAt(pos),  pos);	  out.write(input.charAt(0),    pos);    	non-compiled	[CE]  class,  interface,  or  enum  expected	20	None	replace
258	[BUG]  [BUGGY]  char[]  c  =  input.charAt(pos  +  len);  [CE]  class,  interface,  or  enum  expected  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  char[]  c  =  input.charAt(pos  +  len);  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	char[]  c  =  input.charAt(pos  +  len);	  out.write(input.charAt(pos    +    len));    	non-compiled	[CE]  class,  interface,  or  enum  expected	110	None	replace
259	[BUG]  [BUGGY]  out.write(Integer.toString(pos  +  1));  [CE]  class,  interface,  or  enum  expected  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  out.write(Integer.toString(pos  +  1));  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	out.write(Integer.toString(pos  +  1));	  out.write(Integer.toString(pos));    	non-compiled	[CE]  class,  interface,  or  enum  expected	135	None	replace
260	[BUG]  [BUGGY]  out.write(Integer.toString(input));  [CE]  class,  interface,  or  enum  expected  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  out.write(Integer.toString(input));  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	out.write(Integer.toString(input));	  out.write(Integer.toString(pos));    	non-compiled	[CE]  class,  interface,  or  enum  expected	135	None	replace
261	[BUG]  [BUGGY]  out.write(Integer.toString(pos)+  1);  [CE]  class,  interface,  or  enum  expected  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  out.write(Integer.toString(pos)+  1);  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	out.write(Integer.toString(pos)+  1);	  out.write(Integer.toString(pos));    	non-compiled	[CE]  class,  interface,  or  enum  expected	135	None	replace
262	[BUG]  [BUGGY]  int  pos  =  input.length()  -  len;  [CE]  class,  interface,  or  enum  expected  [FE]            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  int  pos  =  input.length()  -  len;  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	int  pos  =  input.length()  -  len;	  int    pos    =    input.length()    +    len;    	non-compiled	[CE]  class,  interface,  or  enum  expected	99	None	replace
263	[BUG]  [BUGGY]  out.write(Integer.toString(pos,  len));  [CE]  class,  interface,  or  enum  expected  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  out.write(Integer.toString(pos,  len));  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	out.write(Integer.toString(pos,  len));	  out.write(Integer.toString(len));    	non-compiled	[CE]  class,  interface,  or  enum  expected	119	None	replace
264	[BUG]  [BUGGY]  out.write(Integer.toString(pos),  len);  [CE]  class,  interface,  or  enum  expected  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  out.write(Integer.toString(pos),  len);  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	out.write(Integer.toString(pos),  len);	  out.write(Integer.toString(len));    	non-compiled	[CE]  class,  interface,  or  enum  expected	119	None	replace
265	[BUG]  [BUGGY]  if(len  >  0)  {  pos  =  input.length();  pos  =  input.length();  this.char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  }  [CE]  <identifier>  expected  [FE]        AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  >  0)  {  pos  =  input.length();  pos  =  input.length();  this.char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  >  0)  {  pos  =  input.length();  pos  =  input.length();  this.char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  }	          pos    =    input.length();    pos    =    input.length();    this.char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    	non-compiled	[CE]  <identifier>  expected	146	None	replace
266	[BUG]  [BUGGY]  if(pos  <  len)  {  pos  =  input.length();  pos  =  input.length();  this.char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  <  len)  {  pos  =  input.length();  pos  =  input.length();  this.char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  <  len)  {  pos  =  input.length();  pos  =  input.length();  this.char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  }	          pos    =    input.length();    pos    =    input.length();    this.char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    	non-compiled	[CE]  <identifier>  expected	146	None	replace
267	[BUG]  [BUGGY]  if(len  <  2)  {  pos  =  input.length();  pos  =  input.length();  this.char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  <  2)  {  pos  =  input.length();  pos  =  input.length();  this.char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  <  2)  {  pos  =  input.length();  pos  =  input.length();  this.char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  }	          pos    =    input.length();    pos    =    input.length();    this.char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    	non-compiled	[CE]  <identifier>  expected	146	None	replace
268	[BUG]  [BUGGY]  if(len  >  0)  {  pos  =  input.length();  pos  =  input.length();  this.char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  }  else  {  out.write(c);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  >  0)  {  pos  =  input.length();  pos  =  input.length();  this.char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  }  else  {  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  >  0)  {  pos  =  input.length();  pos  =  input.length();  this.char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  }  else  {  out.write(c);  }	          pos    =    input.length();    pos    =    input.length();    this.char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    	non-compiled	[CE]  <identifier>  expected	146	None	replace
269	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]          out.write(len);    out.write(len);  out.write(len);  out.write(len);  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	add	                out.write(len);        out.write(len);    out.write(len);  out.write(len);	  	compilable	  [FE]  ComparisonFailure  	8	19	add
270	[BUG]  [BUGGY]          out.write(len);    out.write(len);  out.write(len);  out.write(len);  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]          out.write(len);    out.write(len);  out.write(len);  out.write(len);  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	                out.write(len);        out.write(len);    out.write(len);  out.write(len);	  	compilable	  [FE]  ComparisonFailure  	8	19	add
271	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]          out.write(len);    out.write(len);  out.write(pos);  out.write(pos);  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	add	                out.write(len);        out.write(len);    out.write(pos);  out.write(pos);	  	compilable	  [FE]  ComparisonFailure  	8	19	add
272	[BUG]  [BUGGY]          out.write(len);    out.write(len);  out.write(pos);  out.write(pos);  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]          out.write(len);    out.write(len);  out.write(pos);  out.write(pos);  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	                out.write(len);        out.write(len);    out.write(pos);  out.write(pos);	  	compilable	  [FE]  ComparisonFailure  	8	19	add
273	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]          out.write(len);    out.write(len);  out.write(pos);  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	add	                out.write(len);        out.write(len);    out.write(pos);	  	compilable	  [FE]  ComparisonFailure  	8	19	add
274	[BUG]  [BUGGY]          out.write(len);    out.write(len);  out.write(pos);  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]          out.write(len);    out.write(len);  out.write(pos);  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	                out.write(len);        out.write(len);    out.write(pos);	  	compilable	  [FE]  ComparisonFailure  	8	19	add
275	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]          out.write(len);    out.write(len);  out.write(input.length());  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	add	                out.write(len);        out.write(len);    out.write(input.length());	  	compilable	  [FE]  ComparisonFailure  	8	19	add
276	[BUG]  [BUGGY]          out.write(len);    out.write(len);  out.write(input.length());  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]          out.write(len);    out.write(len);  out.write(input.length());  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	                out.write(len);        out.write(len);    out.write(input.length());	  	compilable	  [FE]  ComparisonFailure  	8	19	add
277	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]          out.write(len);    out.write(len);  out.write(pos);  out.write(len);  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	add	                out.write(len);        out.write(len);    out.write(pos);  out.write(len);	  	compilable	  [FE]  ComparisonFailure  	8	19	add
278	[BUG]  [BUGGY]          out.write(len);    out.write(len);  out.write(pos);  out.write(len);  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]          out.write(len);    out.write(len);  out.write(pos);  out.write(len);  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	                out.write(len);        out.write(len);    out.write(pos);  out.write(len);	  	compilable	  [FE]  ComparisonFailure  	8	19	add
279	[BUG]  [BUGGY]  if(pos  <  len)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointCount(pos,  0,  input.length()));  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                  ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  <  len)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointCount(pos,  0,  input.length()));  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  <  len)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointCount(pos,  0,  input.length()));  out.write(c);  }	  if(pos    <    len)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    Character.toChars(Character.codePointCount(pos,    pos));    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	98	None	replace
280	[BUG]  [BUGGY]  if(pos  <  len)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointCount(pos,  pt));  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                    ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  <  len)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointCount(pos,  pt));  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  <  len)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointCount(pos,  pt));  out.write(c);  }	  if(pos    <    len)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    Character.toChars(Character.codePointCount(pos,    pos));    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	98	None	replace
281	[BUG]  [BUGGY]  char  len  =  Character.codePointCount(input);  [CE]  class,  interface,  or  enum  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  char  len  =  Character.codePointCount(input);  [BUGGY]      int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	char  len  =  Character.codePointCount(input);	  int    len    =    Character.codePointCount(input);    	non-compiled	[CE]  class,  interface,  or  enum  expected	151	None	replace
282	[BUG]  [BUGGY]  pos  <  len)  {  for(int  pos  =  0;  pos  <  input.length();  pos++)  {  out.write(c);  }  [CE]  >  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  pos  <  len)  {  for(int  pos  =  0;  pos  <  input.length();  pos++)  {  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	pos  <  len)  {  for(int  pos  =  0;  pos  <  input.length();  pos++)  {  out.write(c);  }	  if(pos    <    len)    {    for(int    pos    =    0;    pos    <    out.length();    pos++)    {    out.write(c);    }    	non-compiled	[CE]  >  expected	4	None	replace
283	[BUG]  [BUGGY]  if(pos  <  len)  {  for(int  pos  =  0;  pos  <  input.length();  pos++)  {  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                      ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  <  len)  {  for(int  pos  =  0;  pos  <  input.length();  pos++)  {  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  <  len)  {  for(int  pos  =  0;  pos  <  input.length();  pos++)  {  out.write(c);  }	  if(pos    <    len)    {    for(int    pos    =    0;    pos    <    out.length();    pos++)    {    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	4	None	replace
284	[BUG]  [BUGGY]  pos  <  len)  {  for(int  pos  =  0;  pos  <  out.length();  pos++)  {  out.write(c);  }  [CE]  >  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  pos  <  len)  {  for(int  pos  =  0;  pos  <  out.length();  pos++)  {  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	pos  <  len)  {  for(int  pos  =  0;  pos  <  out.length();  pos++)  {  out.write(c);  }	  if(pos    <    len)    {    for(int    pos    =    0;    pos    <    out.length();    pos++)    {    out.write(c);    }    	non-compiled	[CE]  >  expected	4	None	replace
285	[BUG]  [BUGGY]  while  (pos  <  len  -  1)  {  int  len  =  Character.codePointCount(pos,  0,  input.length());  [CE]  variable  len  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]              ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  while  (pos  <  len  -  1)  {  int  len  =  Character.codePointCount(pos,  0,  input.length());  [BUGGY]      int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	while  (pos  <  len  -  1)  {  int  len  =  Character.codePointCount(pos,  0,  input.length());	  while    (pos    <    len    -    2)    {    int    len    =    Character.codePointCount(pos,    0,    input.length());    	non-compiled	[CE]  variable  len  is  already  defined  in  method  translate(CharSequence,Writer)	27	None	replace
286	[BUG]  [BUGGY]  out.write('n',  pos  +  1);  [CE]  class,  interface,  or  enum  expected  [FE]        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  out.write('n',  pos  +  1);  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	out.write('n',  pos  +  1);	  out.write('n',    pos);    	non-compiled	[CE]  class,  interface,  or  enum  expected	49	None	replace
287	[BUG]  [BUGGY]  out.write('n',  pos  +  len);  [CE]  class,  interface,  or  enum  expected  [FE]          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  out.write('n',  pos  +  len);  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	out.write('n',  pos  +  len);	  out.write('n',    pos);    	non-compiled	[CE]  class,  interface,  or  enum  expected	49	None	replace
288	[BUG]  [BUGGY]  int  len  =  Character.length(input,  0,  input.length());  [CE]  class,  interface,  or  enum  expected  [FE]        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  int  len  =  Character.length(input,  0,  input.length());  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	int  len  =  Character.length(input,  0,  input.length());	          out.write(len);    int    len    =    Character.length(input,    0,    input.length());    out.write(len);    	non-compiled	[CE]  class,  interface,  or  enum  expected	156	None	replace
289	[BUG]  [BUGGY]  int  len  =  Character.length(input,  0,  input.length());  out.write(len);  [CE]  class,  interface,  or  enum  expected  [FE]          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  int  len  =  Character.length(input,  0,  input.length());  out.write(len);  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	int  len  =  Character.length(input,  0,  input.length());  out.write(len);	          out.write(len);    int    len    =    Character.length(input,    0,    input.length());    out.write(len);    	non-compiled	[CE]  class,  interface,  or  enum  expected	156	None	replace
290	[BUG]  [BUGGY]  int  len  =  Character.length(input,  0,  input.length());  out.write(len  +  1);  [CE]  class,  interface,  or  enum  expected  [FE]            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  int  len  =  Character.length(input,  0,  input.length());  out.write(len  +  1);  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	int  len  =  Character.length(input,  0,  input.length());  out.write(len  +  1);	          out.write(len);    int    len    =    Character.length(input,    0,    input.length());    out.write(len);    	non-compiled	[CE]  class,  interface,  or  enum  expected	156	None	replace
291	[BUG]  [BUGGY]  if(len  >  0)  {  pos  =  input.length();  pos  =  input.length();  this.char[]  c  =  Character.toChars(Character.codePointAt(input,  pos),  c);  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  >  0)  {  pos  =  input.length();  pos  =  input.length();  this.char[]  c  =  Character.toChars(Character.codePointAt(input,  pos),  c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  >  0)  {  pos  =  input.length();  pos  =  input.length();  this.char[]  c  =  Character.toChars(Character.codePointAt(input,  pos),  c);  }	          pos    =    input.length();    pos    =    input.length();    this.char[]    c    =    Character.toChars(Character.codePointAt(input,    pos),    c);    	non-compiled	[CE]  <identifier>  expected	148	None	replace
292	[BUG]  [BUGGY]  if(len  <  2)  {  pos  =  input.length();  pos  =  input.length();  this.char[]  c  =  Character.toChars(Character.codePointAt(input,  pos),  c);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  <  2)  {  pos  =  input.length();  pos  =  input.length();  this.char[]  c  =  Character.toChars(Character.codePointAt(input,  pos),  c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  <  2)  {  pos  =  input.length();  pos  =  input.length();  this.char[]  c  =  Character.toChars(Character.codePointAt(input,  pos),  c);  }	          pos    =    input.length();    pos    =    input.length();    this.char[]    c    =    Character.toChars(Character.codePointAt(input,    pos),    c);    	non-compiled	[CE]  <identifier>  expected	148	None	replace
293	[BUG]  [BUGGY]  if(len  >  0)  {  pos  =  input.length();  pos  =  input.length();  this.char[]  c  =  Character.toChars(Character.codePointAt(input,  pos),  c);  }  else  {  out.write(c);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  >  0)  {  pos  =  input.length();  pos  =  input.length();  this.char[]  c  =  Character.toChars(Character.codePointAt(input,  pos),  c);  }  else  {  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  >  0)  {  pos  =  input.length();  pos  =  input.length();  this.char[]  c  =  Character.toChars(Character.codePointAt(input,  pos),  c);  }  else  {  out.write(c);  }	          pos    =    input.length();    pos    =    input.length();    this.char[]    c    =    Character.toChars(Character.codePointAt(input,    pos),    c);    	non-compiled	[CE]  <identifier>  expected	148	None	replace
294	[BUG]  [BUGGY]  int  pos  =  input.length();  this.char[]  c  =  Character.toChars(Character.codePointAt(input,  pos),  c);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  int  pos  =  input.length();  this.char[]  c  =  Character.toChars(Character.codePointAt(input,  pos),  c);  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	int  pos  =  input.length();  this.char[]  c  =  Character.toChars(Character.codePointAt(input,  pos),  c);	          pos    =    input.length();    pos    =    input.length();    this.char[]    c    =    Character.toChars(Character.codePointAt(input,    pos),    c);    	non-compiled	[CE]  <identifier>  expected	148	None	replace
295	[BUG]  [BUGGY]  Integer  c  =  input.getValue();  [CE]  class,  interface,  or  enum  expected  [FE]                ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  Integer  c  =  input.getValue();  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	Integer  c  =  input.getValue();	  if(len    <    2)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    out.write(c);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	120	None	replace
296	[BUG]  [BUGGY]  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pt));  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]              ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pt));  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pt));  out.write(c);  }	  if(pos    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    Character.toChars(Character.codePointAt(pos,    pos));    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	157	None	replace
297	[BUG]  [BUGGY]  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }	  if(pos    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    Character.toChars(Character.codePointAt(pos,    pos));    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	157	None	replace
298	[BUG]  [BUGGY]  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  Character[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                  ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  Character[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  Character[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }	  if(pos    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    Character.toChars(Character.codePointAt(pos,    pos));    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	157	None	replace
299	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  while  (pos  <  len  &&  input.length()  >  2)  {  [BUGGY]      int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	add	while  (pos  <  len  &&  input.length()  >  2)  {	  while    (pos    <    len    &&    input.length()    >    0)    {    int    len    =    Character.codePointCount(input,    0,    input.length());    while    (pos    <    len    &&    input.length()    >    0)    {    	compilable	  [FE]  ComparisonFailure  	144	7	replace
300	[BUG]  [BUGGY]  while  (pos  <  len  &&  input.length()  >  2)  {  [FE]  ComparisonFailure  [FE]        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  while  (pos  <  len  &&  input.length()  >  2)  {  [BUGGY]      int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	while  (pos  <  len  &&  input.length()  >  2)  {	  while    (pos    <    len    &&    input.length()    >    0)    {    int    len    =    Character.codePointCount(input,    0,    input.length());    while    (pos    <    len    &&    input.length()    >    0)    {    	compilable	  [FE]  ComparisonFailure  	144	7	replace
301	[BUG]  [BUGGY]  pos  =  input.lastIndexOf('.',  len);  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  pos  =  input.lastIndexOf('.',  len);  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	pos  =  input.lastIndexOf('.',  len);	  pos    =    input.lastIndexOf('.');    	non-compiled	[CE]  class,  interface,  or  enum  expected	166	None	replace
302	[BUG]  [BUGGY]  pos  =  input.indexOf('.',  len);  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  pos  =  input.indexOf('.',  len);  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	pos  =  input.indexOf('.',  len);	  pos    =    input.lastIndexOf('.');    	non-compiled	[CE]  class,  interface,  or  enum  expected	166	None	replace
303	[BUG]  [BUGGY]  pos  =  input.indexOf('.');  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  pos  =  input.indexOf('.');  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	pos  =  input.indexOf('.');	  pos    =    input.lastIndexOf('.');    	non-compiled	[CE]  class,  interface,  or  enum  expected	166	None	replace
304	[BUG]  [BUGGY]  pos  =  input.lastIndexOf('.',  len)+  1;  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  pos  =  input.lastIndexOf('.',  len)+  1;  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	pos  =  input.lastIndexOf('.',  len)+  1;	  pos    =    input.lastIndexOf('.');    	non-compiled	[CE]  class,  interface,  or  enum  expected	166	None	replace
305	[BUG]  [BUGGY]  if(pos  >  0)  {  out.write(input.charAt(0));  out.write(input.charAt(1));  }  [CE]  class,  interface,  or  enum  expected  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  >  0)  {  out.write(input.charAt(0));  out.write(input.charAt(1));  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  >  0)  {  out.write(input.charAt(0));  out.write(input.charAt(1));  }	          out.write(input.charAt(0));    out.write(input.charAt(1));    	non-compiled	[CE]  class,  interface,  or  enum  expected	58	None	replace
306	[BUG]  [BUGGY]  if(len  <  1)  {  out.write(input.charAt(0));  out.write(input.charAt(1));  }  [CE]  class,  interface,  or  enum  expected  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  <  1)  {  out.write(input.charAt(0));  out.write(input.charAt(1));  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  <  1)  {  out.write(input.charAt(0));  out.write(input.charAt(1));  }	          out.write(input.charAt(0));    out.write(input.charAt(1));    	non-compiled	[CE]  class,  interface,  or  enum  expected	58	None	replace
307	[BUG]  [BUGGY]  if(pos  <  len)  {  for(int  pos  =  0;  pos  <  in.length;  pos++)  {  char[]  c  =  input.getChars(pos);  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                    ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  <  len)  {  for(int  pos  =  0;  pos  <  in.length;  pos++)  {  char[]  c  =  input.getChars(pos);  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  <  len)  {  for(int  pos  =  0;  pos  <  in.length;  pos++)  {  char[]  c  =  input.getChars(pos);  out.write(c);  }	  if(pos    <    len)    {    for(int    pos    =    0;    pos    <    c.length;    pos++)    {    char[]    c    =    input.getChars(pos);    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	133	None	replace
308	[BUG]  [BUGGY]  if(pos  <  len)  {  for(int  pos  =  0;  pos  <  output.length;  pos++)  {  char[]  c  =  input.getChars(pos);  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                      ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  <  len)  {  for(int  pos  =  0;  pos  <  output.length;  pos++)  {  char[]  c  =  input.getChars(pos);  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  <  len)  {  for(int  pos  =  0;  pos  <  output.length;  pos++)  {  char[]  c  =  input.getChars(pos);  out.write(c);  }	  if(pos    <    len)    {    for(int    pos    =    0;    pos    <    c.length;    pos++)    {    char[]    c    =    input.getChars(pos);    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	133	None	replace
309	[BUG]  [BUGGY]  char[]  input  =  input.toChars(pos,  pos);  out.write(input.charAt(pos));  [CE]  class,  interface,  or  enum  expected  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  char[]  input  =  input.toChars(pos,  pos);  out.write(input.charAt(pos));  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	char[]  input  =  input.toChars(pos,  pos);  out.write(input.charAt(pos));	          out.write(input.charAt(pos));    char[]    input    =    input.toChars(pos,    input.charAt(pos));    out.write(input.charAt(pos));    	non-compiled	[CE]  class,  interface,  or  enum  expected	102	None	replace
310	[BUG]  [BUGGY]  char[]  input  =  input.toChars(pos,  len);  out.write(input.charAt(pos));  [CE]  class,  interface,  or  enum  expected  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  char[]  input  =  input.toChars(pos,  len);  out.write(input.charAt(pos));  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	char[]  input  =  input.toChars(pos,  len);  out.write(input.charAt(pos));	          out.write(input.charAt(pos));    char[]    input    =    input.toChars(pos,    input.charAt(pos));    out.write(input.charAt(pos));    	non-compiled	[CE]  class,  interface,  or  enum  expected	102	None	replace
311	[BUG]  [BUGGY]  char[]  input  =  input.toChars(pos,  pos);  [CE]  class,  interface,  or  enum  expected  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  char[]  input  =  input.toChars(pos,  pos);  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	char[]  input  =  input.toChars(pos,  pos);	          out.write(input.charAt(pos));    char[]    input    =    input.toChars(pos,    input.charAt(pos));    out.write(input.charAt(pos));    	non-compiled	[CE]  class,  interface,  or  enum  expected	102	None	replace
312	[BUG]  [BUGGY]  char[]  input  =  input.toChars(pos,  pos);  out.write(input.charAt(pos  +  1));  [CE]  class,  interface,  or  enum  expected  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  char[]  input  =  input.toChars(pos,  pos);  out.write(input.charAt(pos  +  1));  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	char[]  input  =  input.toChars(pos,  pos);  out.write(input.charAt(pos  +  1));	          out.write(input.charAt(pos));    char[]    input    =    input.toChars(pos,    input.charAt(pos));    out.write(input.charAt(pos));    	non-compiled	[CE]  class,  interface,  or  enum  expected	102	None	replace
313	[BUG]  [BUGGY]  if(pos  <  1)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                      ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  <  1)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  <  1)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }	  if(len    <    1)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	107	None	replace
314	[BUG]  [BUGGY]  if(pos  <  len)  {  if(len  >  1)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  <  len)  {  if(len  >  1)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  <  len)  {  if(len  >  1)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }	  if(len    <    1)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
315	[BUG]  [BUGGY]  if(pos  <  len)  {  if(len  <  2)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  <  len)  {  if(len  <  2)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  <  len)  {  if(len  <  2)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }	  if(len    <    2)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    Character.toChars(Character.codePointAt(pos,    pos));    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
316	[BUG]  [BUGGY]  if(pos  <  len)  {  if(len  <  2)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  <  len)  {  if(len  <  2)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  <  len)  {  if(len  <  2)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }  }	  if(len    <    2)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    Character.toChars(Character.codePointAt(pos,    pos));    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	96	None	replace
317	[BUG]  [BUGGY]  if(pos  <  len)  {  if(len  <  2)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(  [CE]  '.class'  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  <  len)  {  if(len  <  2)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  <  len)  {  if(len  <  2)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(	  if(len    <    2)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    Character.toChars(Character.codePointAt(pos,    pos));    out.write(c);    }    	non-compiled	[CE]  '.class'  expected	96	None	replace
318	[BUG]  [BUGGY]  out.write(input.charAt(pos  -  1)+  1);  [CE]  class,  interface,  or  enum  expected  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  out.write(input.charAt(pos  -  1)+  1);  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	out.write(input.charAt(pos  -  1)+  1);	  out.write(input.charAt(pos    -    1));    	non-compiled	[CE]  class,  interface,  or  enum  expected	32	None	replace
319	[BUG]  [BUGGY]  out.write(input.charAt(pos  -  1),  input.length());  [CE]  class,  interface,  or  enum  expected  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  out.write(input.charAt(pos  -  1),  input.length());  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	out.write(input.charAt(pos  -  1),  input.length());	  out.write(input.charAt(pos    -    1));    	non-compiled	[CE]  class,  interface,  or  enum  expected	32	None	replace
320	[BUG]  [BUGGY]  char[]  c  =  input.toChars(input,  0,  len.length());  out.write('n');  [CE]  class,  interface,  or  enum  expected  [FE]        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  char[]  c  =  input.toChars(input,  0,  len.length());  out.write('n');  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	char[]  c  =  input.toChars(input,  0,  len.length());  out.write('n');	          out.write('n');    char[]    c    =    input.toChars(input,    0,    input.length());    out.write('n');    	non-compiled	[CE]  class,  interface,  or  enum  expected	113	None	replace
321	[BUG]  [BUGGY]  char  pos  =  input.length();  [CE]  class,  interface,  or  enum  expected  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  char  pos  =  input.length();  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	char  pos  =  input.length();	          out.write(input.charAt(pos));    int    pos    =    input.length();    	non-compiled	[CE]  class,  interface,  or  enum  expected	81	None	replace
322	[BUG]  [BUGGY]  out.write(input.charAt(pos  +  1));  int  pos  =  input.length();  [CE]  class,  interface,  or  enum  expected  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  out.write(input.charAt(pos  +  1));  int  pos  =  input.length();  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	out.write(input.charAt(pos  +  1));  int  pos  =  input.length();	          out.write(input.charAt(pos));    int    pos    =    input.length();    	non-compiled	[CE]  class,  interface,  or  enum  expected	81	None	replace
323	[BUG]  [BUGGY]  out.write(input.charAt(pos  -  1));  int  pos  =  input.length();  [CE]  class,  interface,  or  enum  expected  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  out.write(input.charAt(pos  -  1));  int  pos  =  input.length();  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	out.write(input.charAt(pos  -  1));  int  pos  =  input.length();	          out.write(input.charAt(pos));    int    pos    =    input.length();    	non-compiled	[CE]  class,  interface,  or  enum  expected	81	None	replace
324	[BUG]  [BUGGY]  out.write('n');  char[]  c  =  input.toChars(input);  [CE]  class,  interface,  or  enum  expected  [FE]            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  out.write('n');  char[]  c  =  input.toChars(input);  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	out.write('n');  char[]  c  =  input.toChars(input);	          out.write('n');    char[]    c    =    input.toChars(input);    out.write('n');    	non-compiled	[CE]  class,  interface,  or  enum  expected	115	None	replace
325	[BUG]  [BUGGY]  char[]  c  =  input.toChars(input);  out.write('n');  [CE]  class,  interface,  or  enum  expected  [FE]              ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  char[]  c  =  input.toChars(input);  out.write('n');  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	char[]  c  =  input.toChars(input);  out.write('n');	          out.write('n');    char[]    c    =    input.toChars(input);    out.write('n');    	non-compiled	[CE]  class,  interface,  or  enum  expected	115	None	replace
326	[BUG]  [BUGGY]  out.write('n');  c  =  input.toChars(input);  [CE]  class,  interface,  or  enum  expected  [FE]                ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  out.write('n');  c  =  input.toChars(input);  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	out.write('n');  c  =  input.toChars(input);	          out.write('n');    char[]    c    =    input.toChars(input);    out.write('n');    	non-compiled	[CE]  class,  interface,  or  enum  expected	115	None	replace
327	[BUG]  [BUGGY]  char[]  c  =  input.getChars();  [CE]  class,  interface,  or  enum  expected  [FE]          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  char[]  c  =  input.getChars();  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	char[]  c  =  input.getChars();	          out.write('n');    char[]    c    =    input.getChars();    	non-compiled	[CE]  class,  interface,  or  enum  expected	72	None	replace
328	[BUG]  [BUGGY]  out.write('n');  c  =  input.getChars();  [CE]  class,  interface,  or  enum  expected  [FE]            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  out.write('n');  c  =  input.getChars();  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	out.write('n');  c  =  input.getChars();	          out.write('n');    char[]    c    =    input.getChars();    	non-compiled	[CE]  class,  interface,  or  enum  expected	72	None	replace
329	[BUG]  [BUGGY]  out.write('n');  String  c  =  input.getChars();  [CE]  class,  interface,  or  enum  expected  [FE]              ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  out.write('n');  String  c  =  input.getChars();  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	out.write('n');  String  c  =  input.getChars();	          out.write('n');    char[]    c    =    input.getChars();    	non-compiled	[CE]  class,  interface,  or  enum  expected	72	None	replace
330	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                  ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  <  len)  {  for(int  c  =  0;  c  <  input.length();  c++)  {  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	add	if(pos  <  len)  {  for(int  c  =  0;  c  <  input.length();  c++)  {  out.write(c);  }	  if(pos    <    len)    {    for(int    pos    =    0;    pos    <    in.length();    pos++)    {    out.write(c);    }    	compilable	  [FE]  ComparisonFailure  	3	19	replace
331	[BUG]  [BUGGY]  if(pos  <  len)  {  for(int  c  =  0;  c  <  input.length();  c++)  {  out.write(c);  }  [FE]  ComparisonFailure  [FE]                  ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  <  len)  {  for(int  c  =  0;  c  <  input.length();  c++)  {  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  <  len)  {  for(int  c  =  0;  c  <  input.length();  c++)  {  out.write(c);  }	  if(pos    <    len)    {    for(int    pos    =    0;    pos    <    in.length();    pos++)    {    out.write(c);    }    	compilable	  [FE]  ComparisonFailure  	3	19	replace
332	[BUG]  [BUGGY]  if(pos  <  1)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  <  1)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  <  1)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }	  if(len    <    1)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    Character.toChars(Character.codePointAt(pos,    pos));    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	97	None	replace
333	[BUG]  [BUGGY]  if(pos  <  len)  {  if(len  <  1)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  <  len)  {  if(len  <  1)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  <  len)  {  if(len  <  1)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }	  if(len    <    1)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    Character.toChars(Character.codePointAt(pos,    pos));    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
334	[BUG]  [BUGGY]  if(pos  <  len)  {  if(len  <  1)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                    ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  <  len)  {  if(len  <  1)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  <  len)  {  if(len  <  1)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }  }	  if(len    <    1)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    Character.toChars(Character.codePointAt(pos,    pos));    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	97	None	replace
335	[BUG]  [BUGGY]  int  pos  =  input.length();  pos  =  input.length();  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  int  pos  =  input.length();  pos  =  input.length();  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	int  pos  =  input.length();  pos  =  input.length();	          pos    =    input.length();    pos    =    in.length();    	non-compiled	[CE]  class,  interface,  or  enum  expected	44	None	replace
336	[BUG]  [BUGGY]  pos  =  out.length();  pos  =  input.length();  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  pos  =  out.length();  pos  =  input.length();  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	pos  =  out.length();  pos  =  input.length();	          pos    =    input.length();    pos    =    in.length();    	non-compiled	[CE]  class,  interface,  or  enum  expected	44	None	replace
337	[BUG]  [BUGGY]  pos  =  output.length();  pos  =  input.length();  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  pos  =  output.length();  pos  =  input.length();  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	pos  =  output.length();  pos  =  input.length();	          pos    =    input.length();    pos    =    in.length();    	non-compiled	[CE]  class,  interface,  or  enum  expected	44	None	replace
338	[BUG]  [BUGGY]  if(pos  <  len)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  String  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]              ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  <  len)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  String  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  <  len)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  String  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }	  if(pos    <    len)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    Character[]    c    =    Character.toChars(Character.codePointAt(pos,    pos));    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	63	None	replace
339	[BUG]  [BUGGY]  if(pos  <  len)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  Character[]  c  =  Character.toChars(Character.codePointCount(pos,  pos));  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  <  len)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  Character[]  c  =  Character.toChars(Character.codePointCount(pos,  pos));  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  <  len)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  Character[]  c  =  Character.toChars(Character.codePointCount(pos,  pos));  out.write(c);  }	  if(pos    <    len)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    Character[]    c    =    Character.toChars(Character.codePointAt(pos,    pos));    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	63	None	replace
340	[BUG]  [BUGGY]  if(pos  <  len)  {  if(len  <  2)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.getChars(pos);  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  <  len)  {  if(len  <  2)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.getChars(pos);  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  <  len)  {  if(len  <  2)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.getChars(pos);  out.write(c);  }	  if(len    <    2)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    input.getChars(pos);    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
341	[BUG]  [BUGGY]  if(pos  <  2)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.getChars(pos);  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                    ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  <  2)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.getChars(pos);  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  <  2)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.getChars(pos);  out.write(c);  }	  if(len    <    2)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    input.getChars(pos);    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	91	None	replace
342	[BUG]  [BUGGY]  if(pos  <  len)  {  if(len  <  2)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c  =  input.getChars(pos);  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  <  len)  {  if(len  <  2)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c  =  input.getChars(pos);  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  <  len)  {  if(len  <  2)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c  =  input.getChars(pos);  out.write(c);  }	  if(len    <    2)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    input.getChars(pos);    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
343	[BUG]  [BUGGY]  char[]  input  =  input.charAt(0);  [CE]  class,  interface,  or  enum  expected  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  char[]  input  =  input.charAt(0);  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	char[]  input  =  input.charAt(0);	          out.write(input.charAt(0));    char[]    input    =    input.charAt(0);    	non-compiled	[CE]  class,  interface,  or  enum  expected	152	None	replace
344	[BUG]  [BUGGY]  out.write(input.charAt(0));  char[]  input  =  input.charAt(1);  [CE]  class,  interface,  or  enum  expected  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  out.write(input.charAt(0));  char[]  input  =  input.charAt(1);  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	out.write(input.charAt(0));  char[]  input  =  input.charAt(1);	          out.write(input.charAt(0));    char[]    input    =    input.charAt(0);    	non-compiled	[CE]  class,  interface,  or  enum  expected	152	None	replace
345	[BUG]  [BUGGY]  while  (pos  <  len  ||  input.length()  >  0)  {  while  (pos  <  len  ||  input.length()  >  0)  {  [CE]  illegal  start  of  expression  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  while  (pos  <  len  ||  input.length()  >  0)  {  while  (pos  <  len  ||  input.length()  >  0)  {  [BUGGY]      int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	while    (pos    <    len    ||    input.length()    >    0)    {    while  (pos  <  len  ||  input.length()  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	28	None	add
346	[BUG]  [BUGGY]  while  (pos  <  len  ||  input.length()  >  0)  {  int  len  =  Character.codePointCount(input,  0,  input.length());  [CE]  illegal  start  of  expression  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  while  (pos  <  len  ||  input.length()  >  0)  {  int  len  =  Character.codePointCount(input,  0,  input.length());  [BUGGY]      int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	while    (pos    <    len    ||    input.length()    >    0)    {    int  len  =  Character.codePointCount(input,  0,  input.length());	  	non-compiled	[CE]  illegal  start  of  expression	28	None	add
347	[BUG]  [BUGGY]  while  (pos  <  len  ||  input.length()  >  0)  {  int  pos  =  len;  while  (pos  <  len  ||  input.length()  >  0)  {  [CE]  illegal  start  of  expression  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  while  (pos  <  len  ||  input.length()  >  0)  {  int  pos  =  len;  while  (pos  <  len  ||  input.length()  >  0)  {  [BUGGY]      int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	while    (pos    <    len    ||    input.length()    >    0)    {    int  pos  =  len;  while  (pos  <  len  ||  input.length()  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	28	None	add
348	[BUG]  [BUGGY]  if(pos  <  len)  {  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  <  len)  {  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  <  len)  {  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }	  if(pos    >    0)    {    if(pos    <    len)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
349	[BUG]  [BUGGY]  char[]  c  =  input.toChars();  out.write('n');  [CE]  class,  interface,  or  enum  expected  [FE]        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  char[]  c  =  input.toChars();  out.write('n');  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	char[]  c  =  input.toChars();  out.write('n');	          out.write('n');    char[]    c    =    input.toChars();    out.write('n');    	non-compiled	[CE]  class,  interface,  or  enum  expected	163	None	replace
350	[BUG]  [BUGGY]  while  (pos  <  len  &&  input.length()  >  0  ||  input.charAt(pos  -  1)!=  '-')  {  while  (pos  <  len  &&  input.length()  >  0  ||  input.charAt(pos  -  1)!=  '-')  {  [CE]  illegal  start  of  expression  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  while  (pos  <  len  &&  input.length()  >  0  ||  input.charAt(pos  -  1)!=  '-')  {  while  (pos  <  len  &&  input.length()  >  0  ||  input.charAt(pos  -  1)!=  '-')  {  [BUGGY]      int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	while    (pos    <    len    &&    input.length()    >    0    ||    input.charAt(pos    -    1)!=    '-')    {    while  (pos  <  len  &&  input.length()  >  0  ||  input.charAt(pos  -  1)!=  '-')  {	  	non-compiled	[CE]  illegal  start  of  expression	30	None	add
351	[BUG]  [BUGGY]  while  (pos  <  len  &&  input.length()  >  0  ||  input.charAt(pos  -  1)!=  '-')  {  int  len  =  Character.codePointCount(input,  0,  input.length());  [CE]  illegal  start  of  expression  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  while  (pos  <  len  &&  input.length()  >  0  ||  input.charAt(pos  -  1)!=  '-')  {  int  len  =  Character.codePointCount(input,  0,  input.length());  [BUGGY]      int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	while    (pos    <    len    &&    input.length()    >    0    ||    input.charAt(pos    -    1)!=    '-')    {    int  len  =  Character.codePointCount(input,  0,  input.length());	  	non-compiled	[CE]  illegal  start  of  expression	30	None	add
352	[BUG]  [BUGGY]  while  (pos  <  len  &&  input.length()  >  0  ||  input.charAt(pos  -  1)!=  '-')  {  while  (pos  <  len  &&  input.length()  >  0  ||  input.charAt(pos  -  1)  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  while  (pos  <  len  &&  input.length()  >  0  ||  input.charAt(pos  -  1)!=  '-')  {  while  (pos  <  len  &&  input.length()  >  0  ||  input.charAt(pos  -  1)  ==  '-')  {  [BUGGY]      int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	while    (pos    <    len    &&    input.length()    >    0    ||    input.charAt(pos    -    1)!=    '-')    {    while  (pos  <  len  &&  input.length()  >  0  ||  input.charAt(pos  -  1)  ==  '-')  {	  	non-compiled	[CE]  illegal  start  of  expression	30	None	add
353	[BUG]  [BUGGY]  while  (pos  <  len  &&  input.length()  >  0  ||  input.charAt(pos  -  1)!=  '-')  {  while  (pos  <  len  &&  input.length()  >  0  ||  input.charAt(pos  -  1)  >=  '-')  {  [CE]  illegal  start  of  expression  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  while  (pos  <  len  &&  input.length()  >  0  ||  input.charAt(pos  -  1)!=  '-')  {  while  (pos  <  len  &&  input.length()  >  0  ||  input.charAt(pos  -  1)  >=  '-')  {  [BUGGY]      int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	while    (pos    <    len    &&    input.length()    >    0    ||    input.charAt(pos    -    1)!=    '-')    {    while  (pos  <  len  &&  input.length()  >  0  ||  input.charAt(pos  -  1)  >=  '-')  {	  	non-compiled	[CE]  illegal  start  of  expression	30	None	add
354	[BUG]  [BUGGY]  while  (pos  <  len  &&  input.length()  >  0  ||  input.charAt(pos  -  1)!=  '-')  {  int  len  =  input.length();  [CE]  illegal  start  of  expression  [FE]            StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  while  (pos  <  len  &&  input.length()  >  0  ||  input.charAt(pos  -  1)!=  '-')  {  int  len  =  input.length();  [BUGGY]      int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	while    (pos    <    len    &&    input.length()    >    0    ||    input.charAt(pos    -    1)!=    '-')    {    int  len  =  input.length();	  	non-compiled	[CE]  illegal  start  of  expression	30	None	add
355	[BUG]  [BUGGY]  while(pos  <  len  -  1)  {  int  len  =  Character.codePointCount(input,  0,  input.length());  out.write(len  +  1);  [CE]  variable  len  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  while(pos  <  len  -  1)  {  int  len  =  Character.codePointCount(input,  0,  input.length());  out.write(len  +  1);  [BUGGY]      int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	while(pos  <  len  -  1)  {  int  len  =  Character.codePointCount(input,  0,  input.length());  out.write(len  +  1);	  while    (pos    <    len    -    1)    {    int    len    =    Character.codePointCount(input,    0,    input.length());    out.write(len);    	non-compiled	[CE]  variable  len  is  already  defined  in  method  translate(CharSequence,Writer)	155	None	replace
356	[BUG]  [BUGGY]  if(pos  <  len)  {  for(int  pos  =  0;  pos  <  input.length;  pos++)  {  char[]  c  =  input.getChars(pos,  out);  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                    ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  <  len)  {  for(int  pos  =  0;  pos  <  input.length;  pos++)  {  char[]  c  =  input.getChars(pos,  out);  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  <  len)  {  for(int  pos  =  0;  pos  <  input.length;  pos++)  {  char[]  c  =  input.getChars(pos,  out);  out.write(c);  }	  if(pos    <    len)    {    for(int    pos    =    0;    pos    <    input.length;    pos++)    {    char[]    c    =    input.getChars(pos);    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	92	None	replace
357	[BUG]  [BUGGY]  if(pos  <  len)  {  for(int  pos  =  0;  pos  <  input.length;  pos++)  {  char[]  c  =  output.getChars(pos);  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                      ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  <  len)  {  for(int  pos  =  0;  pos  <  input.length;  pos++)  {  char[]  c  =  output.getChars(pos);  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  <  len)  {  for(int  pos  =  0;  pos  <  input.length;  pos++)  {  char[]  c  =  output.getChars(pos);  out.write(c);  }	  if(pos    <    len)    {    for(int    pos    =    0;    pos    <    input.length;    pos++)    {    char[]    c    =    input.getChars(pos);    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	92	None	replace
358	[BUG]  [BUGGY]  if(pos  <  len)  {  for(int  pos  =  0;  pos  <  input.length;  pos++)  {  String  c  =  input.getChars(pos);  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  <  len)  {  for(int  pos  =  0;  pos  <  input.length;  pos++)  {  String  c  =  input.getChars(pos);  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  <  len)  {  for(int  pos  =  0;  pos  <  input.length;  pos++)  {  String  c  =  input.getChars(pos);  out.write(c);  }	  if(pos    <    len)    {    for(int    pos    =    0;    pos    <    input.length;    pos++)    {    char[]    c    =    input.getChars(pos);    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	92	None	replace
359	[BUG]  [BUGGY]  if(pos  >  -2)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  >  -2)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  >  -2)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }	  if(pos    >    -1)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    Character.toChars(Character.codePointAt(pos,    pos));    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	158	None	replace
360	[BUG]  [BUGGY]  if(pos  >  -1)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pt));  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                  ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  >  -1)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pt));  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  >  -1)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pt));  out.write(c);  }	  if(pos    >    -1)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    Character.toChars(Character.codePointAt(pos,    pos));    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	158	None	replace
361	[BUG]  [BUGGY]  if(pos  >  -1)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                    ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  >  -1)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  >  -1)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }	  if(pos    >    -1)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    Character.toChars(Character.codePointAt(pos,    pos));    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	158	None	replace
362	[BUG]  [BUGGY]  if(pos  <  len)  {  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.getChars(pos);  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  <  len)  {  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.getChars(pos);  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  <  len)  {  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.getChars(pos);  out.write(c);  }	  if(pos    >    0)    {    if(pos    <    len)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    input.getChars(pos);    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
363	[BUG]  [BUGGY]  out.write(len  +  2);  [CE]  class,  interface,  or  enum  expected  [FE]        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  out.write(len  +  2);  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	out.write(len  +  2);	  out.write(len    +    1);    	non-compiled	[CE]  class,  interface,  or  enum  expected	123	None	replace
364	[BUG]  [BUGGY]  out.write(input.length()  +  1);  [CE]  class,  interface,  or  enum  expected  [FE]          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  out.write(input.length()  +  1);  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	out.write(input.length()  +  1);	  out.write(len    +    1);    	non-compiled	[CE]  class,  interface,  or  enum  expected	123	None	replace
365	[BUG]  [BUGGY]  out.write(c);  int  len  =  input.length();  [CE]  class,  interface,  or  enum  expected  [FE]        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  out.write(c);  int  len  =  input.length();  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	out.write(c);  int  len  =  input.length();	          out.write(len);    int    len    =    input.length();    	non-compiled	[CE]  class,  interface,  or  enum  expected	89	None	replace
366	[BUG]  [BUGGY]  out.write(input.length());  int  len  =  input.length();  [CE]  class,  interface,  or  enum  expected  [FE]          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  out.write(input.length());  int  len  =  input.length();  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	out.write(input.length());  int  len  =  input.length();	          out.write(len);    int    len    =    input.length();    	non-compiled	[CE]  class,  interface,  or  enum  expected	89	None	replace
367	[BUG]  [BUGGY]  out.write(input.charAt(pos  +  1));  char[]  input  =  input.toChars(pos);  [CE]  class,  interface,  or  enum  expected  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  out.write(input.charAt(pos  +  1));  char[]  input  =  input.toChars(pos);  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	out.write(input.charAt(pos  +  1));  char[]  input  =  input.toChars(pos);	          out.write(input.charAt(pos));    char[]    input    =    input.toChars(pos);    	non-compiled	[CE]  class,  interface,  or  enum  expected	78	None	replace
368	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(1));  out.write(input.charAt(0));  out.write(input.charAt(1));  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	add	                out.write(input.charAt(0));        out.write(input.charAt(1));    out.write(input.charAt(0));  out.write(input.charAt(1));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	57	19	add
369	[BUG]  [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(1));  out.write(input.charAt(0));  out.write(input.charAt(1));  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(1));  out.write(input.charAt(0));  out.write(input.charAt(1));  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	                out.write(input.charAt(0));        out.write(input.charAt(1));    out.write(input.charAt(0));  out.write(input.charAt(1));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	57	19	add
370	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(1));  out.write(input.charAt(1));  out.write(input.charAt(1));  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	add	                out.write(input.charAt(0));        out.write(input.charAt(1));    out.write(input.charAt(1));  out.write(input.charAt(1));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	57	19	add
371	[BUG]  [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(1));  out.write(input.charAt(1));  out.write(input.charAt(1));  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(1));  out.write(input.charAt(1));  out.write(input.charAt(1));  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	                out.write(input.charAt(0));        out.write(input.charAt(1));    out.write(input.charAt(1));  out.write(input.charAt(1));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	57	19	add
372	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(1));  out.write(input.charAt(0));  out.write(input.charAt(2));  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	add	                out.write(input.charAt(0));        out.write(input.charAt(1));    out.write(input.charAt(0));  out.write(input.charAt(2));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	57	19	add
373	[BUG]  [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(1));  out.write(input.charAt(0));  out.write(input.charAt(2));  [FE]  StringIndexOutOfBoundsException  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(1));  out.write(input.charAt(0));  out.write(input.charAt(2));  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	                out.write(input.charAt(0));        out.write(input.charAt(1));    out.write(input.charAt(0));  out.write(input.charAt(2));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	57	19	add
374	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(1));  out.write(input.charAt(1));  out.write(input.charAt(2));  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	add	                out.write(input.charAt(0));        out.write(input.charAt(1));    out.write(input.charAt(1));  out.write(input.charAt(2));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	57	19	add
375	[BUG]  [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(1));  out.write(input.charAt(1));  out.write(input.charAt(2));  [FE]  StringIndexOutOfBoundsException  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(1));  out.write(input.charAt(1));  out.write(input.charAt(2));  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	                out.write(input.charAt(0));        out.write(input.charAt(1));    out.write(input.charAt(1));  out.write(input.charAt(2));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	57	19	add
376	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]            StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(1));  out.write(input.charAt(0));  out.write(input.charAt(3));  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	add	                out.write(input.charAt(0));        out.write(input.charAt(1));    out.write(input.charAt(0));  out.write(input.charAt(3));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	57	19	add
377	[BUG]  [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(1));  out.write(input.charAt(0));  out.write(input.charAt(3));  [FE]  StringIndexOutOfBoundsException  [FE]            StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(1));  out.write(input.charAt(0));  out.write(input.charAt(3));  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	                out.write(input.charAt(0));        out.write(input.charAt(1));    out.write(input.charAt(0));  out.write(input.charAt(3));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	57	19	add
378	[BUG]  [BUGGY]  int  pos  =  len;  [CE]  class,  interface,  or  enum  expected  [FE]        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  int  pos  =  len;  [BUGGY]      int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	int  pos  =  len;	  while    (pos    <    len    &&    input.length()    >    0)    {    int    pos    =    len;    	non-compiled	[CE]  class,  interface,  or  enum  expected	129	None	replace
379	[BUG]  [BUGGY]  while  (pos  <  len  ||  input.length()  >  0)  {  int  pos  =  len;  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  while  (pos  <  len  ||  input.length()  >  0)  {  int  pos  =  len;  [BUGGY]      int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	while  (pos  <  len  ||  input.length()  >  0)  {  int  pos  =  len;	  while    (pos    <    len    &&    input.length()    >    0)    {    int    pos    =    len;    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	129	None	replace
380	[BUG]  [BUGGY]  if(len  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                    ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }	  if(pos    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	160	None	replace
381	[BUG]  [BUGGY]  if(len  >  0)  {  out.write(c);  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [CE]  cannot  find  symbol  c  [FE]                      ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  >  0)  {  out.write(c);  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  >  0)  {  out.write(c);  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }	  if(pos    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  cannot  find  symbol  c	160	None	replace
382	[BUG]  [BUGGY]  if(len  >  0)  {  for(int  pos  =  0;  pos  <  input.length();  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  >  0)  {  for(int  pos  =  0;  pos  <  input.length();  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  >  0)  {  for(int  pos  =  0;  pos  <  input.length();  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }	  if(pos    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	160	None	replace
383	[BUG]  [BUGGY]  if(len  >  0)  {  int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [CE]  >  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  >  0)  {  int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  >  0)  {  int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }	  if(pos    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  >  expected	160	None	replace
384	[BUG]  [BUGGY]  if(len  <  2)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c  =  input.toChars(pos);  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  <  2)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c  =  input.toChars(pos);  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  <  2)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c  =  input.toChars(pos);  out.write(c);  }	  if(pos    <    len)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	16	None	replace
385	[BUG]  [BUGGY]  if(len  <  1)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c  =  input.toChars(pos);  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  <  1)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c  =  input.toChars(pos);  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  <  1)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c  =  input.toChars(pos);  out.write(c);  }	  if(pos    <    len)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	16	None	replace
386	[BUG]  [BUGGY]  if(len  <  1)  {  for(int  pos  =  0;  pos  <  input.length();  pos++)  {  c  =  input.toChars(pos);  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  <  1)  {  for(int  pos  =  0;  pos  <  input.length();  pos++)  {  c  =  input.toChars(pos);  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  <  1)  {  for(int  pos  =  0;  pos  <  input.length();  pos++)  {  c  =  input.toChars(pos);  out.write(c);  }	  if(pos    <    len)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	16	None	replace
387	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  while  (pos  <  input.length()  &&  input.charAt(pos)!=  '-')  {  [BUGGY]      int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	add	while  (pos  <  input.length()  &&  input.charAt(pos)!=  '-')  {	  while    (pos    <    len    &&    input.length()    >    0)    {    while    (pos    <    len    &&    input.length()    >    0)    {    	compilable	  [FE]  ComparisonFailure  	82	3	replace
388	[BUG]  [BUGGY]  while  (pos  <  input.length()  &&  input.charAt(pos)!=  '-')  {  [FE]  ComparisonFailure  [FE]        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  while  (pos  <  input.length()  &&  input.charAt(pos)!=  '-')  {  [BUGGY]      int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	while  (pos  <  input.length()  &&  input.charAt(pos)!=  '-')  {	  while    (pos    <    len    &&    input.length()    >    0)    {    while    (pos    <    len    &&    input.length()    >    0)    {    	compilable	  [FE]  ComparisonFailure  	82	3	replace
389	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]          out.write(len);    out.write(len);  out.write(len);  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	add	                out.write(len);        out.write(len);    out.write(len);	  	compilable	  [FE]  ComparisonFailure  	8	19	add
390	[BUG]  [BUGGY]          out.write(len);    out.write(len);  out.write(len);  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]          out.write(len);    out.write(len);  out.write(len);  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	                out.write(len);        out.write(len);    out.write(len);	  	compilable	  [FE]  ComparisonFailure  	8	19	add
391	[BUG]  [BUGGY]          out.write(len);    out.write(len);  OutputStream  out  =  input.getOutputStream();  [CE]  cannot  find  symbol  [FE]      ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]          out.write(len);    out.write(len);  OutputStream  out  =  input.getOutputStream();  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	                out.write(len);        out.write(len);    OutputStream  out  =  input.getOutputStream();	  	non-compiled	[CE]  cannot  find  symbol	8	None	add
392	[BUG]  [BUGGY]  if(len  <  2)  {  for(int  pos  =  0;  pos  <  input.length;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  <  2)  {  for(int  pos  =  0;  pos  <  input.length;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  <  2)  {  for(int  pos  =  0;  pos  <  input.length;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }	  if(pos    <    len)    {    for(int    pos    =    0;    pos    <    c.length;    pos++)    {    char[]    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	162	None	replace
393	[BUG]  [BUGGY]  if(len  <  1)  {  for(int  pos  =  0;  pos  <  input.length;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  <  1)  {  for(int  pos  =  0;  pos  <  input.length;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  <  1)  {  for(int  pos  =  0;  pos  <  input.length;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }	  if(pos    <    len)    {    for(int    pos    =    0;    pos    <    c.length;    pos++)    {    char[]    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	162	None	replace
394	[BUG]  [BUGGY]  if(len  <  2)  {  for(int  pos  =  0;  pos  <  input.length();  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  <  2)  {  for(int  pos  =  0;  pos  <  input.length();  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  <  2)  {  for(int  pos  =  0;  pos  <  input.length();  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }	  if(pos    <    len)    {    for(int    pos    =    0;    pos    <    c.length;    pos++)    {    char[]    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	162	None	replace
395	[BUG]  [BUGGY]  if(len  <  1)  {  for(int  pos  =  0;  pos  <  input.length();  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                              ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  <  1)  {  for(int  pos  =  0;  pos  <  input.length();  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  <  1)  {  for(int  pos  =  0;  pos  <  input.length();  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }	  if(pos    <    len)    {    for(int    pos    =    0;    pos    <    c.length;    pos++)    {    char[]    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	162	None	replace
396	[BUG]  [BUGGY]  int  pos  =  input.getLength();  [CE]  class,  interface,  or  enum  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  int  pos  =  input.getLength();  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	int  pos  =  input.getLength();	  if(pos    <    len)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    String    c    =    input.getChars(pos);    out.write(c);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	35	None	replace
397	[BUG]  [BUGGY]  int  len  =  input.getLength();  [CE]  class,  interface,  or  enum  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  int  len  =  input.getLength();  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	int  len  =  input.getLength();	  if(pos    <    len)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    String    c    =    input.getChars(pos);    out.write(c);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	35	None	replace
398	[BUG]  [BUGGY]          pos    =    input.length();    pos  =  input.length();  Integer  pos  =  input.length();  pos  =  input.length();  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]    AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]          pos    =    input.length();    pos  =  input.length();  Integer  pos  =  input.length();  pos  =  input.length();  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	                pos        =        input.length();        pos    =    input.length();    Integer  pos  =  input.length();  pos  =  input.length();	  	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	40	None	add
399	[BUG]  [BUGGY]  out.write(Integer.toHexString(len));  [CE]  class,  interface,  or  enum  expected  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  out.write(Integer.toHexString(len));  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	out.write(Integer.toHexString(len));	  out.write(Integer.toString(pos));    	non-compiled	[CE]  class,  interface,  or  enum  expected	135	None	replace
400	[BUG]  [BUGGY]  out.write(Integer.toString(pos  +  len));  [CE]  class,  interface,  or  enum  expected  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  out.write(Integer.toString(pos  +  len));  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	out.write(Integer.toString(pos  +  len));	  out.write(Integer.toString(pos));    	non-compiled	[CE]  class,  interface,  or  enum  expected	135	None	replace
401	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(2));  out.write(input.charAt(0));  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	add	                out.write(input.charAt(0));        out.write(input.charAt(2));    out.write(input.charAt(0));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	59	19	add
402	[BUG]  [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(2));  out.write(input.charAt(0));  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(2));  out.write(input.charAt(0));  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	                out.write(input.charAt(0));        out.write(input.charAt(2));    out.write(input.charAt(0));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	59	19	add
403	[BUG]  [BUGGY]  if(len  <  2)  {  for(int  pos  =  0;  pos  <  input.length;  pos++)  {  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                    ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  <  2)  {  for(int  pos  =  0;  pos  <  input.length;  pos++)  {  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  <  2)  {  for(int  pos  =  0;  pos  <  input.length;  pos++)  {  out.write(c);  }	  if(pos    <    len)    {    for(int    pos    =    0;    pos    <    c.length;    pos++)    {    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	143	None	replace
404	[BUG]  [BUGGY]  if(len  <  1)  {  for(int  pos  =  0;  pos  <  input.length;  pos++)  {  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                      ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  <  1)  {  for(int  pos  =  0;  pos  <  input.length;  pos++)  {  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  <  1)  {  for(int  pos  =  0;  pos  <  input.length;  pos++)  {  out.write(c);  }	  if(pos    <    len)    {    for(int    pos    =    0;    pos    <    c.length;    pos++)    {    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	143	None	replace
405	[BUG]  [BUGGY]  if(len  <  2)  {  for(int  pos  =  0;  pos  <  input.length();  pos++)  {  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  <  2)  {  for(int  pos  =  0;  pos  <  input.length();  pos++)  {  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  <  2)  {  for(int  pos  =  0;  pos  <  input.length();  pos++)  {  out.write(c);  }	  if(pos    <    len)    {    for(int    pos    =    0;    pos    <    c.length;    pos++)    {    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	143	None	replace
406	[BUG]  [BUGGY]  int  len  =  Character.codePointCount(input,  pos,  input.length()  -  1);  [CE]  class,  interface,  or  enum  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  int  len  =  Character.codePointCount(input,  pos,  input.length()  -  1);  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	int  len  =  Character.codePointCount(input,  pos,  input.length()  -  1);	  int    len    =    Character.codePointCount(input,    pos,    input.length());    	non-compiled	[CE]  class,  interface,  or  enum  expected	69	None	replace
407	[BUG]  [BUGGY]  if(len  <  2)  {  for(pos  =  0;  pos  <  input.length();  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  <  2)  {  for(pos  =  0;  pos  <  input.length();  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  <  2)  {  for(pos  =  0;  pos  <  input.length();  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }	  if(pos    <    len)    {    for(int    pos    =    0;    pos    <    input.length();    pos++)    {    char[]    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
408	[BUG]  [BUGGY]  if(len  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.getChars(pos);  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                  ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.getChars(pos);  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.getChars(pos);  out.write(c);  }	  if(pos    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    input.getChars(pos);    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	132	None	replace
409	[BUG]  [BUGGY]  if(len  >  0)  {  for(int  pos  =  0;  pos  <  input.length();  pos++)  {  char[]  c  =  input.getChars(pos);  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                    ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  >  0)  {  for(int  pos  =  0;  pos  <  input.length();  pos++)  {  char[]  c  =  input.getChars(pos);  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  >  0)  {  for(int  pos  =  0;  pos  <  input.length();  pos++)  {  char[]  c  =  input.getChars(pos);  out.write(c);  }	  if(pos    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    input.getChars(pos);    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	132	None	replace
410	[BUG]  [BUGGY]  if(len  >  0)  {  for(int  pos  =  0;  pos  <  input.length;  pos++)  {  char[]  c  =  input.getChars(pos);  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                      ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  >  0)  {  for(int  pos  =  0;  pos  <  input.length;  pos++)  {  char[]  c  =  input.getChars(pos);  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  >  0)  {  for(int  pos  =  0;  pos  <  input.length;  pos++)  {  char[]  c  =  input.getChars(pos);  out.write(c);  }	  if(pos    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    input.getChars(pos);    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	132	None	replace
411	[BUG]  [BUGGY]  if(len  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.getChars(pos,  out);  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.getChars(pos,  out);  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.getChars(pos,  out);  out.write(c);  }	  if(pos    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    input.getChars(pos);    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	132	None	replace
412	[BUG]  [BUGGY]  if(len  <  2)  {  for(int  pos  =  0;  pos  <  input.length;  pos++)  {  char[]  c  =  input.getChars(pos);  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                    ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  <  2)  {  for(int  pos  =  0;  pos  <  input.length;  pos++)  {  char[]  c  =  input.getChars(pos);  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  <  2)  {  for(int  pos  =  0;  pos  <  input.length;  pos++)  {  char[]  c  =  input.getChars(pos);  out.write(c);  }	  if(pos    <    len)    {    for(int    pos    =    0;    pos    <    input.length;    pos++)    {    char[]    c    =    input.getChars(pos);    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	92	None	replace
413	[BUG]  [BUGGY]  if(len  <  2)  {  for(int  pos  =  0;  pos  <  input.length;  pos++)  {  char[]  c  =  input.getChars(pos,  out);  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                      ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  <  2)  {  for(int  pos  =  0;  pos  <  input.length;  pos++)  {  char[]  c  =  input.getChars(pos,  out);  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  <  2)  {  for(int  pos  =  0;  pos  <  input.length;  pos++)  {  char[]  c  =  input.getChars(pos,  out);  out.write(c);  }	  if(pos    <    len)    {    for(int    pos    =    0;    pos    <    input.length;    pos++)    {    char[]    c    =    input.getChars(pos);    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	92	None	replace
414	[BUG]  [BUGGY]  if(len  >  0)  {  out.write(input.charAt(pos));  char[]  input  =  input.toChars(pos);  out.write(input.charAt(pos));  }  [CE]  class,  interface,  or  enum  expected  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  >  0)  {  out.write(input.charAt(pos));  char[]  input  =  input.toChars(pos);  out.write(input.charAt(pos));  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  >  0)  {  out.write(input.charAt(pos));  char[]  input  =  input.toChars(pos);  out.write(input.charAt(pos));  }	          out.write(input.charAt(pos));    char[]    input    =    input.toChars(pos);    out.write(input.charAt(pos));    	non-compiled	[CE]  class,  interface,  or  enum  expected	100	None	replace
415	[BUG]  [BUGGY]  if(len  >  0)  {  out.write(input.toChars(pos));  char[]  input  =  input.toChars(pos);  out.write(input.charAt(pos));  }  [CE]  class,  interface,  or  enum  expected  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  >  0)  {  out.write(input.toChars(pos));  char[]  input  =  input.toChars(pos);  out.write(input.charAt(pos));  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  >  0)  {  out.write(input.toChars(pos));  char[]  input  =  input.toChars(pos);  out.write(input.charAt(pos));  }	          out.write(input.charAt(pos));    char[]    input    =    input.toChars(pos);    out.write(input.charAt(pos));    	non-compiled	[CE]  class,  interface,  or  enum  expected	100	None	replace
416	[BUG]  [BUGGY]  if(len  >  0)  {  out.write(input.charAt(0));  char[]  input  =  input.toChars(pos);  out.write(input.charAt(0));  }  [CE]  class,  interface,  or  enum  expected  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  >  0)  {  out.write(input.charAt(0));  char[]  input  =  input.toChars(pos);  out.write(input.charAt(0));  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  >  0)  {  out.write(input.charAt(0));  char[]  input  =  input.toChars(pos);  out.write(input.charAt(0));  }	          out.write(input.charAt(pos));    char[]    input    =    input.toChars(pos);    out.write(input.charAt(pos));    	non-compiled	[CE]  class,  interface,  or  enum  expected	100	None	replace
417	[BUG]  [BUGGY]  if(len  <  2)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  Character[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]              ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  <  2)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  Character[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  <  2)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  Character[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }	  if(pos    <    len)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    Character[]    c    =    Character.toChars(Character.codePointAt(pos,    pos));    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	63	None	replace
418	[BUG]  [BUGGY]  if(len  <  1)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  Character[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  <  1)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  Character[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  <  1)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  Character[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }	  if(pos    <    len)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    Character[]    c    =    Character.toChars(Character.codePointAt(pos,    pos));    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	63	None	replace
419	[BUG]  [BUGGY]  if(len  <  2)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  Character[]  c  =  Character.toChars(Character.codePointAt(pos,  out));  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                  ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  <  2)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  Character[]  c  =  Character.toChars(Character.codePointAt(pos,  out));  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  <  2)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  Character[]  c  =  Character.toChars(Character.codePointAt(pos,  out));  out.write(c);  }	  if(pos    <    len)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    Character[]    c    =    Character.toChars(Character.codePointAt(pos,    pos));    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	63	None	replace
420	[BUG]  [BUGGY]  if(len  <  2)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  Character[]  c  =  Character.toChars(Character.codePointCount(pos,  pos));  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                    ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  <  2)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  Character[]  c  =  Character.toChars(Character.codePointCount(pos,  pos));  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  <  2)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  Character[]  c  =  Character.toChars(Character.codePointCount(pos,  pos));  out.write(c);  }	  if(pos    <    len)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    Character[]    c    =    Character.toChars(Character.codePointAt(pos,    pos));    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	63	None	replace
421	[BUG]  [BUGGY]  while  (pos  <  len  -  1  &&  input.length()  >  0)  {  int  pos  =  input.length();  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  while  (pos  <  len  -  1  &&  input.length()  >  0)  {  int  pos  =  input.length();  [BUGGY]      int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	while    (pos    <    len    -    1    &&    input.length()    >    0)    {    int  pos  =  input.length();	  	non-compiled	[CE]  illegal  start  of  expression	94	None	add
422	[BUG]  [BUGGY]  if(len  >  0)  {  for(int  pos  =  0;  pos  <  input.length();  pos++)  {  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                  ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  >  0)  {  for(int  pos  =  0;  pos  <  input.length();  pos++)  {  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  >  0)  {  for(int  pos  =  0;  pos  <  input.length();  pos++)  {  out.write(c);  }	  if(pos    <    len)    {    for(int    pos    =    0;    pos    <    in.length();    pos++)    {    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	3	None	replace
423	[BUG]  [BUGGY]  if(len  <  1)  {  for(int  pos  =  0;  pos  <  input.length();  pos++)  {  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                    ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  <  1)  {  for(int  pos  =  0;  pos  <  input.length();  pos++)  {  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  <  1)  {  for(int  pos  =  0;  pos  <  input.length();  pos++)  {  out.write(c);  }	  if(pos    <    len)    {    for(int    pos    =    0;    pos    <    in.length();    pos++)    {    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	3	None	replace
424	[BUG]  [BUGGY]  if(len  >  0)  {  for(int  pos  =  0;  pos  <  in.length();  pos++)  {  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                      ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  >  0)  {  for(int  pos  =  0;  pos  <  in.length();  pos++)  {  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  >  0)  {  for(int  pos  =  0;  pos  <  in.length();  pos++)  {  out.write(c);  }	  if(pos    <    len)    {    for(int    pos    =    0;    pos    <    in.length();    pos++)    {    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	3	None	replace
425	[BUG]  [BUGGY]  out.write(input.charAt(pos));  int  len  =  input.length();  [CE]  class,  interface,  or  enum  expected  [FE]        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  out.write(input.charAt(pos));  int  len  =  input.length();  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	out.write(input.charAt(pos));  int  len  =  input.length();	          out.write(len);    int    len    =    input.length();    	non-compiled	[CE]  class,  interface,  or  enum  expected	89	None	replace
426	[BUG]  [BUGGY]  out.write('n');  int  len  =  input.length();  [CE]  class,  interface,  or  enum  expected  [FE]          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  out.write('n');  int  len  =  input.length();  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	out.write('n');  int  len  =  input.length();	          out.write(len);    int    len    =    input.length();    	non-compiled	[CE]  class,  interface,  or  enum  expected	89	None	replace
427	[BUG]  [BUGGY]  out.write(input.getOutputStream());  [CE]  class,  interface,  or  enum  expected  [FE]          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  out.write(input.getOutputStream());  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	out.write(input.getOutputStream());	          out.write(len);    OutputStream    out    =    input.getOutputStream();    	non-compiled	[CE]  class,  interface,  or  enum  expected	90	None	replace
428	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  <  2)  {  for(int  c  =  0;  c  <  len;  c++)  {  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	add	if(len  <  2)  {  for(int  c  =  0;  c  <  len;  c++)  {  out.write(c);  }	  if(pos    <    len)    {    for(int    c    =    0;    c    <    len;    c++)    {    out.write(c);    }    	compilable	  [FE]  AssertionFailedError  	2	19	replace
429	[BUG]  [BUGGY]  if(len  <  2)  {  for(int  c  =  0;  c  <  len;  c++)  {  out.write(c);  }  [FE]  AssertionFailedError  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  <  2)  {  for(int  c  =  0;  c  <  len;  c++)  {  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  <  2)  {  for(int  c  =  0;  c  <  len;  c++)  {  out.write(c);  }	  if(pos    <    len)    {    for(int    c    =    0;    c    <    len;    c++)    {    out.write(c);    }    	compilable	  [FE]  AssertionFailedError  	2	19	replace
430	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  <  1)  {  for(int  c  =  0;  c  <  len;  c++)  {  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	add	if(len  <  1)  {  for(int  c  =  0;  c  <  len;  c++)  {  out.write(c);  }	  if(pos    <    len)    {    for(int    c    =    0;    c    <    len;    c++)    {    out.write(c);    }    	compilable	  [FE]  AssertionFailedError  	2	19	replace
431	[BUG]  [BUGGY]  if(len  <  1)  {  for(int  c  =  0;  c  <  len;  c++)  {  out.write(c);  }  [FE]  AssertionFailedError  [FE]      ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  <  1)  {  for(int  c  =  0;  c  <  len;  c++)  {  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  <  1)  {  for(int  c  =  0;  c  <  len;  c++)  {  out.write(c);  }	  if(pos    <    len)    {    for(int    c    =    0;    c    <    len;    c++)    {    out.write(c);    }    	compilable	  [FE]  AssertionFailedError  	2	19	replace
432	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  <  1)  {  for(int  c  =  0;  c  <  input.length();  c++)  {  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	add	if(len  <  1)  {  for(int  c  =  0;  c  <  input.length();  c++)  {  out.write(c);  }	  if(pos    <    len)    {    for(int    c    =    0;    c    <    len;    c++)    {    out.write(c);    }    	compilable	  [FE]  AssertionFailedError  	2	19	replace
433	[BUG]  [BUGGY]  if(len  <  1)  {  for(int  c  =  0;  c  <  input.length();  c++)  {  out.write(c);  }  [FE]  AssertionFailedError  [FE]        ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  <  1)  {  for(int  c  =  0;  c  <  input.length();  c++)  {  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  <  1)  {  for(int  c  =  0;  c  <  input.length();  c++)  {  out.write(c);  }	  if(pos    <    len)    {    for(int    c    =    0;    c    <    len;    c++)    {    out.write(c);    }    	compilable	  [FE]  AssertionFailedError  	2	19	replace
434	[BUG]  [BUGGY]  if(len  <  2)  {  for(int  pos  =  0;  pos  <  input.length();  pos++)  {  char[]  c  =  input.getChars(pos);  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                      ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  <  2)  {  for(int  pos  =  0;  pos  <  input.length();  pos++)  {  char[]  c  =  input.getChars(pos);  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  <  2)  {  for(int  pos  =  0;  pos  <  input.length();  pos++)  {  char[]  c  =  input.getChars(pos);  out.write(c);  }	  if(pos    <    len)    {    for(int    pos    =    0;    pos    <    input.length();    pos++)    {    char[]    c    =    input.getChars(pos);    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	93	None	replace
435	[BUG]  [BUGGY]  if(len  <  1)  {  for(int  pos  =  0;  pos  <  input.length();  pos++)  {  char[]  c  =  input.getChars(pos);  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  <  1)  {  for(int  pos  =  0;  pos  <  input.length();  pos++)  {  char[]  c  =  input.getChars(pos);  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  <  1)  {  for(int  pos  =  0;  pos  <  input.length();  pos++)  {  char[]  c  =  input.getChars(pos);  out.write(c);  }	  if(pos    <    len)    {    for(int    pos    =    0;    pos    <    input.length();    pos++)    {    char[]    c    =    input.getChars(pos);    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	93	None	replace
436	[BUG]  [BUGGY]  if(len  >  0)  {  int  pos  =  input.length();  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.getChars(pos);  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  >  0)  {  int  pos  =  input.length();  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.getChars(pos);  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  >  0)  {  int  pos  =  input.length();  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.getChars(pos);  out.write(c);  }	  if(pos    <    len)    {    for(int    pos    =    0;    pos    <    input.length();    pos++)    {    char[]    c    =    input.getChars(pos);    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	93	None	replace
437	[BUG]  [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(  pos));  Output.write(input.charAt(0));  out.write(input.charAt(  pos));  [CE]  cannot  find  symbol  Output  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(  pos));  Output.write(input.charAt(0));  out.write(input.charAt(  pos));  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	                out.write(input.charAt(0));        out.write(input.charAt(    pos));    Output.write(input.charAt(0));  out.write(input.charAt(  pos));	  	non-compiled	[CE]  cannot  find  symbol  Output	111	None	add
438	[BUG]  [BUGGY]  out.write(c  +  1);  [CE]  class,  interface,  or  enum  expected  [FE]        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  out.write(c  +  1);  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	out.write(c  +  1);	  out.write(c);    	non-compiled	[CE]  class,  interface,  or  enum  expected	17	None	replace
439	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(0));  out.write(input.charAt(0));  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	add	                out.write(input.charAt(0));        out.write(input.charAt(0));    out.write(input.charAt(0));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	55	19	add
440	[BUG]  [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(0));  out.write(input.charAt(0));  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(0));  out.write(input.charAt(0));  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	                out.write(input.charAt(0));        out.write(input.charAt(0));    out.write(input.charAt(0));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	55	19	add
441	[BUG]  [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(0));  out.write(input.charAt0);  out.write(input.charAt0);  [CE]  cannot  find  symbol  charAt0  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(0));  out.write(input.charAt0);  out.write(input.charAt0);  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	                out.write(input.charAt(0));        out.write(input.charAt(0));    out.write(input.charAt0);  out.write(input.charAt0);	  	non-compiled	[CE]  cannot  find  symbol  charAt0	55	None	add
442	[BUG]  [BUGGY]  if(len  >  0)  {  out.write(input.charAt(0));  out.write(input.charAt(pos));  }  [CE]  class,  interface,  or  enum  expected  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  >  0)  {  out.write(input.charAt(0));  out.write(input.charAt(pos));  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  >  0)  {  out.write(input.charAt(0));  out.write(input.charAt(pos));  }	          out.write(input.charAt(0));    out.write(input.charAt(    pos));    	non-compiled	[CE]  class,  interface,  or  enum  expected	112	None	replace
443	[BUG]  [BUGGY]  if(len  <  =  0)  {  out.write(input.charAt(0));  out.write(input.charAt(pos));  }  [CE]  illegal  start  of  expression  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  <  =  0)  {  out.write(input.charAt(0));  out.write(input.charAt(pos));  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  <  =  0)  {  out.write(input.charAt(0));  out.write(input.charAt(pos));  }	          out.write(input.charAt(0));    out.write(input.charAt(    pos));    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
444	[BUG]  [BUGGY]  if(len  <  =  0)  {  out.write(input.charAt(0));  out.write(input.charAt(pos));  }  else  {  out.write(input.charAt(0));  }  [CE]  illegal  start  of  expression  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  <  =  0)  {  out.write(input.charAt(0));  out.write(input.charAt(pos));  }  else  {  out.write(input.charAt(0));  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  <  =  0)  {  out.write(input.charAt(0));  out.write(input.charAt(pos));  }  else  {  out.write(input.charAt(0));  }	          out.write(input.charAt(0));    out.write(input.charAt(    pos));    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
445	[BUG]  [BUGGY]  out.write(len  -  3);  [CE]  class,  interface,  or  enum  expected  [FE]          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  out.write(len  -  3);  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	out.write(len  -  3);	  out.write(len    -    1);    	non-compiled	[CE]  class,  interface,  or  enum  expected	124	None	replace
446	[BUG]  [BUGGY]  if(len  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(out);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                    ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(out);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(out);  }	  if(len    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	122	None	replace
447	[BUG]  [BUGGY]  if(len  <  2)  {  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.getChars(pos);  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  <  2)  {  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.getChars(pos);  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  <  2)  {  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.getChars(pos);  out.write(c);  }	  if(pos    >    0)    {    if(pos    <    len)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    input.getChars(pos);    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
448	[BUG]  [BUGGY]  if(len  <  1)  {  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.getChars(pos);  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  <  1)  {  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.getChars(pos);  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  <  1)  {  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.getChars(pos);  out.write(c);  }	  if(pos    >    0)    {    if(pos    <    len)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    input.getChars(pos);    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
449	[BUG]  [BUGGY]  if(len  >  0)  {  if(pos  <  len)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.getChars(pos);  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  >  0)  {  if(pos  <  len)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.getChars(pos);  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  >  0)  {  if(pos  <  len)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.getChars(pos);  out.write(c);  }	  if(pos    >    0)    {    if(pos    <    len)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    input.getChars(pos);    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
450	[BUG]  [BUGGY]  if(len  >  0)  {  if(pos  >=  len)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.getChars(pos);  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  >  0)  {  if(pos  >=  len)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.getChars(pos);  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  >  0)  {  if(pos  >=  len)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.getChars(pos);  out.write(c);  }	  if(pos    >    0)    {    if(pos    <    len)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    input.getChars(pos);    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
451	[BUG]  [BUGGY]  if(len  <  =  0)  {  out.write(input.charAt(0));  out.write(input.charAt(0));  }  else  {  out.write(input.charAt(0));  }  [CE]  illegal  start  of  expression  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  <  =  0)  {  out.write(input.charAt(0));  out.write(input.charAt(0));  }  else  {  out.write(input.charAt(0));  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  <  =  0)  {  out.write(input.charAt(0));  out.write(input.charAt(0));  }  else  {  out.write(input.charAt(0));  }	          out.write(input.charAt(0));    out.write(input.charAt(0));    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
452	[BUG]  [BUGGY]  if(len  <  =  0)  {  out.write(input.charAt(0));  out.write(input.charAt(0));  }  [CE]  illegal  start  of  expression  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  <  =  0)  {  out.write(input.charAt(0));  out.write(input.charAt(0));  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  <  =  0)  {  out.write(input.charAt(0));  out.write(input.charAt(0));  }	          out.write(input.charAt(0));    out.write(input.charAt(0));    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
453	[BUG]  [BUGGY]  if(len  <  =  0)  {  out.write(input.charAt(0));  out.write(input.charAt(1));  }  else  {  out.write(input.charAt(0));  }  [CE]  illegal  start  of  expression  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  <  =  0)  {  out.write(input.charAt(0));  out.write(input.charAt(1));  }  else  {  out.write(input.charAt(0));  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  <  =  0)  {  out.write(input.charAt(0));  out.write(input.charAt(1));  }  else  {  out.write(input.charAt(0));  }	          out.write(input.charAt(0));    out.write(input.charAt(0));    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
454	[BUG]  [BUGGY]  out.write('n',  len);  char[]  c  =  input.getChars();  [CE]  class,  interface,  or  enum  expected  [FE]          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  out.write('n',  len);  char[]  c  =  input.getChars();  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	out.write('n',  len);  char[]  c  =  input.getChars();	          out.write('n');    char[]    c    =    input.getChars();    	non-compiled	[CE]  class,  interface,  or  enum  expected	72	None	replace
455	[BUG]  [BUGGY]  if(len  >  0)  {  out.write(input.charAt(pos));  char[]  input  =  input.toChars(pos,  input.charAt(pos));  out.write(input.charAt(pos));  }  [CE]  class,  interface,  or  enum  expected  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  >  0)  {  out.write(input.charAt(pos));  char[]  input  =  input.toChars(pos,  input.charAt(pos));  out.write(input.charAt(pos));  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  >  0)  {  out.write(input.charAt(pos));  char[]  input  =  input.toChars(pos,  input.charAt(pos));  out.write(input.charAt(pos));  }	          out.write(input.charAt(pos));    char[]    input    =    input.toChars(pos,    input.charAt(pos));    out.write(input.charAt(pos));    	non-compiled	[CE]  class,  interface,  or  enum  expected	102	None	replace
456	[BUG]  [BUGGY]  if(len  >  0)  {  out.write(input.toChars(pos,  pos));  char[]  input  =  input.toChars(pos,  input.charAt(pos));  out.write(input.charAt(pos));  }  [CE]  class,  interface,  or  enum  expected  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  >  0)  {  out.write(input.toChars(pos,  pos));  char[]  input  =  input.toChars(pos,  input.charAt(pos));  out.write(input.charAt(pos));  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  >  0)  {  out.write(input.toChars(pos,  pos));  char[]  input  =  input.toChars(pos,  input.charAt(pos));  out.write(input.charAt(pos));  }	          out.write(input.charAt(pos));    char[]    input    =    input.toChars(pos,    input.charAt(pos));    out.write(input.charAt(pos));    	non-compiled	[CE]  class,  interface,  or  enum  expected	102	None	replace
457	[BUG]  [BUGGY]  if(len  >  0)  {  out.write(input.charAt(0));  char[]  input  =  input.toChars(pos,  input.charAt(0));  out.write(input.charAt(0));  }  [CE]  class,  interface,  or  enum  expected  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  >  0)  {  out.write(input.charAt(0));  char[]  input  =  input.toChars(pos,  input.charAt(0));  out.write(input.charAt(0));  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  >  0)  {  out.write(input.charAt(0));  char[]  input  =  input.toChars(pos,  input.charAt(0));  out.write(input.charAt(0));  }	          out.write(input.charAt(pos));    char[]    input    =    input.toChars(pos,    input.charAt(pos));    out.write(input.charAt(pos));    	non-compiled	[CE]  class,  interface,  or  enum  expected	102	None	replace
458	[BUG]  [BUGGY]  if(len  >  0)  {  out.write(input.charAt(pos  +  1));  char[]  input  =  input.toChars(pos,  input.charAt(pos  +  1));  out.write(input.charAt(pos  +  1));  }  [CE]  class,  interface,  or  enum  expected  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  >  0)  {  out.write(input.charAt(pos  +  1));  char[]  input  =  input.toChars(pos,  input.charAt(pos  +  1));  out.write(input.charAt(pos  +  1));  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  >  0)  {  out.write(input.charAt(pos  +  1));  char[]  input  =  input.toChars(pos,  input.charAt(pos  +  1));  out.write(input.charAt(pos  +  1));  }	          out.write(input.charAt(pos));    char[]    input    =    input.toChars(pos,    input.charAt(pos));    out.write(input.charAt(pos));    	non-compiled	[CE]  class,  interface,  or  enum  expected	102	None	replace
459	[BUG]  [BUGGY]  while(pos  <  len  -  1)  {  int  input  =  input.length();  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  while(pos  <  len  -  1)  {  int  input  =  input.length();  [BUGGY]      int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	while(pos  <  len  -  1)  {  int  input  =  input.length();	  while    (pos    <    len    -    1)    {    int    len    =    input.length();    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	87	None	replace
460	[BUG]  [BUGGY]  if(len  <  1)  {  pos  =  input.length();  pos  =  input.length();  this.char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  <  1)  {  pos  =  input.length();  pos  =  input.length();  this.char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  <  1)  {  pos  =  input.length();  pos  =  input.length();  this.char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }	          pos    =    input.length();    pos    =    input.length();    this.char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    out.write(c);    	non-compiled	[CE]  <identifier>  expected	147	None	replace
461	[BUG]  [BUGGY]  out.write('n');  c  =  input.toString();  [CE]  class,  interface,  or  enum  expected  [FE]            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  out.write('n');  c  =  input.toString();  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	out.write('n');  c  =  input.toString();	          out.write('n');    char[]    c    =    input.toChars();    	non-compiled	[CE]  class,  interface,  or  enum  expected	165	None	replace
462	[BUG]  [BUGGY]  if(len  <  2)  {  for(int  pos  =  0;  pos  <  out.length();  pos++)  {  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                    ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  <  2)  {  for(int  pos  =  0;  pos  <  out.length();  pos++)  {  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  <  2)  {  for(int  pos  =  0;  pos  <  out.length();  pos++)  {  out.write(c);  }	  if(pos    <    len)    {    for(int    pos    =    0;    pos    <    out.length();    pos++)    {    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	4	None	replace
463	[BUG]  [BUGGY]  if(len  <  1)  {  for(int  pos  =  0;  pos  <  out.length();  pos++)  {  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                      ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  <  1)  {  for(int  pos  =  0;  pos  <  out.length();  pos++)  {  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  <  1)  {  for(int  pos  =  0;  pos  <  out.length();  pos++)  {  out.write(c);  }	  if(pos    <    len)    {    for(int    pos    =    0;    pos    <    out.length();    pos++)    {    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	4	None	replace
464	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]          out.write('n');    out.write('n');  out.write('n');  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	add	                out.write('n');        out.write('n');    out.write('n');	  	compilable	  [FE]  ComparisonFailure  	70	19	add
465	[BUG]  [BUGGY]          out.write('n');    out.write('n');  out.write('n');  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]          out.write('n');    out.write('n');  out.write('n');  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	                out.write('n');        out.write('n');    out.write('n');	  	compilable	  [FE]  ComparisonFailure  	70	19	add
466	[BUG]  [BUGGY]          out.write('n');    out.write('n');  OutputStream  out  =  input.getOutputStream();  [CE]  cannot  find  symbol  [FE]      ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]          out.write('n');    out.write('n');  OutputStream  out  =  input.getOutputStream();  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	                out.write('n');        out.write('n');    OutputStream  out  =  input.getOutputStream();	  	non-compiled	[CE]  cannot  find  symbol	70	None	add
467	[BUG]  [BUGGY]          out.write('n');    out.write('n');  OutputStream  out  =  input.readLine();  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]          out.write('n');    out.write('n');  OutputStream  out  =  input.readLine();  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	                out.write('n');        out.write('n');    OutputStream  out  =  input.readLine();	  	non-compiled	[CE]  cannot  find  symbol	70	None	add
468	[BUG]  [BUGGY]  if(out!=  null)  {  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c  =  input.toChars(pos);  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(out!=  null)  {  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c  =  input.toChars(pos);  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(out!=  null)  {  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c  =  input.toChars(pos);  out.write(c);  }	  if(pos    >    0)    {    if(pos    <    len)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
469	[BUG]  [BUGGY]  if(len  <  2)  {  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c  =  input.toChars(pos);  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  <  2)  {  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c  =  input.toChars(pos);  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  <  2)  {  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c  =  input.toChars(pos);  out.write(c);  }	  if(pos    >    0)    {    if(pos    <    len)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
470	[BUG]  [BUGGY]  if(len  <  1)  {  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c  =  input.toChars(pos);  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  <  1)  {  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c  =  input.toChars(pos);  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  <  1)  {  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c  =  input.toChars(pos);  out.write(c);  }	  if(pos    >    0)    {    if(pos    <    len)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
471	[BUG]  [BUGGY]  if(len  >  0)  {  if(pos  <  len)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c  =  input.toChars(pos);  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  >  0)  {  if(pos  <  len)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c  =  input.toChars(pos);  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  >  0)  {  if(pos  <  len)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c  =  input.toChars(pos);  out.write(c);  }	  if(pos    >    0)    {    if(pos    <    len)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
472	[BUG]  [BUGGY]  pos  =  input.lastIndexOf('.',  pos);  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  pos  =  input.lastIndexOf('.',  pos);  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	pos  =  input.lastIndexOf('.',  pos);	  pos    =    input.lastIndexOf('.');    	non-compiled	[CE]  class,  interface,  or  enum  expected	166	None	replace
473	[BUG]  [BUGGY]  out.write(Integer.toString(len  +  1));  [CE]  class,  interface,  or  enum  expected  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  out.write(Integer.toString(len  +  1));  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	out.write(Integer.toString(len  +  1));	  out.write(Integer.toString(len));    	non-compiled	[CE]  class,  interface,  or  enum  expected	119	None	replace
474	[BUG]  [BUGGY]  out.write(Integer.toString(len  -  1));  [CE]  class,  interface,  or  enum  expected  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  out.write(Integer.toString(len  -  1));  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	out.write(Integer.toString(len  -  1));	  out.write(Integer.toString(len));    	non-compiled	[CE]  class,  interface,  or  enum  expected	119	None	replace
475	[BUG]  [BUGGY]  if(len  <  2)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                  ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  <  2)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  <  2)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }	  if(pos    <    len)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    c    =    Character.toChars(Character.codePointAt(pos,    pos));    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	65	None	replace
476	[BUG]  [BUGGY]  if(len  <  1)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                    ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  <  1)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  <  1)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }	  if(pos    <    len)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    c    =    Character.toChars(Character.codePointAt(pos,    pos));    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	65	None	replace
477	[BUG]  [BUGGY]  if(len  <  2)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c  =  Character.toChars(Character.codePointCount(pos,  pos));  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                      ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  <  2)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c  =  Character.toChars(Character.codePointCount(pos,  pos));  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  <  2)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c  =  Character.toChars(Character.codePointCount(pos,  pos));  out.write(c);  }	  if(pos    <    len)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    c    =    Character.toChars(Character.codePointAt(pos,    pos));    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	65	None	replace
478	[BUG]  [BUGGY]  if(len  <  1)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c  =  Character.toChars(Character.codePointCount(pos,  pos));  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  <  1)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c  =  Character.toChars(Character.codePointCount(pos,  pos));  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  <  1)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c  =  Character.toChars(Character.codePointCount(pos,  pos));  out.write(c);  }	  if(pos    <    len)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    c    =    Character.toChars(Character.codePointAt(pos,    pos));    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	65	None	replace
479	[BUG]  [BUGGY]  out.write('n');  c  =  input.toString(pos);  [CE]  class,  interface,  or  enum  expected  [FE]                ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  out.write('n');  c  =  input.toString(pos);  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	out.write('n');  c  =  input.toString(pos);	          out.write('n');    char[]    c    =    input.toChars(pos);    	non-compiled	[CE]  class,  interface,  or  enum  expected	75	None	replace
480	[BUG]  [BUGGY]  out.write('n');  pos  =  input.toChars(pos);  [CE]  class,  interface,  or  enum  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  out.write('n');  pos  =  input.toChars(pos);  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	out.write('n');  pos  =  input.toChars(pos);	          out.write('n');    char[]    c    =    input.toChars(pos);    	non-compiled	[CE]  class,  interface,  or  enum  expected	75	None	replace
481	[BUG]  [BUGGY]  if(len  <  2)  {  for(int  pos  =  0;  pos  <  chars.length;  pos++)  {  char[]  c  =  input.getChars(pos);  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                      ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  <  2)  {  for(int  pos  =  0;  pos  <  chars.length;  pos++)  {  char[]  c  =  input.getChars(pos);  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  <  2)  {  for(int  pos  =  0;  pos  <  chars.length;  pos++)  {  char[]  c  =  input.getChars(pos);  out.write(c);  }	  if(pos    <    len)    {    for(int    pos    =    0;    pos    <    chars.length;    pos++)    {    char[]    c    =    input.getChars(pos);    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	134	None	replace
482	[BUG]  [BUGGY]  if(len  <  =  0)  {  out.write('n');  out.write('n');  }  else  {  out.write(input.substring(pos,  len));  }  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  <  =  0)  {  out.write('n');  out.write('n');  }  else  {  out.write(input.substring(pos,  len));  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  <  =  0)  {  out.write('n');  out.write('n');  }  else  {  out.write(input.substring(pos,  len));  }	          out.write('n');    out.write('n');    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
483	[BUG]  [BUGGY]  if(len  >  0)  {  out.write(input.charAt(pos  -  1));  char[]  input  =  input.getChars(pos,  input.length()  -  1);  out.write(input.charAt(pos  -  1));  }  [CE]  class,  interface,  or  enum  expected  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  >  0)  {  out.write(input.charAt(pos  -  1));  char[]  input  =  input.getChars(pos,  input.length()  -  1);  out.write(input.charAt(pos  -  1));  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  >  0)  {  out.write(input.charAt(pos  -  1));  char[]  input  =  input.getChars(pos,  input.length()  -  1);  out.write(input.charAt(pos  -  1));  }	          out.write(input.charAt(pos));    char[]    input    =    input.getChars(pos,    input.length()    -    1);    out.write(input.charAt(pos));    	non-compiled	[CE]  class,  interface,  or  enum  expected	103	None	replace
484	[BUG]  [BUGGY]  if(len  >  0)  {  out.write(input.charAt(0));  char[]  input  =  input.getChars(pos,  input.length()  -  1);  out.write(input.charAt(pos));  }  [CE]  class,  interface,  or  enum  expected  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  >  0)  {  out.write(input.charAt(0));  char[]  input  =  input.getChars(pos,  input.length()  -  1);  out.write(input.charAt(pos));  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  >  0)  {  out.write(input.charAt(0));  char[]  input  =  input.getChars(pos,  input.length()  -  1);  out.write(input.charAt(pos));  }	          out.write(input.charAt(pos));    char[]    input    =    input.getChars(pos,    input.length()    -    1);    out.write(input.charAt(pos));    	non-compiled	[CE]  class,  interface,  or  enum  expected	103	None	replace
485	[BUG]  [BUGGY]  if(len  >  0)  {  out.write(input.charAt(pos  +  1));  char[]  input  =  input.getChars(pos,  input.length()  -  1);  out.write(input.charAt(pos  +  1));  }  [CE]  class,  interface,  or  enum  expected  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  >  0)  {  out.write(input.charAt(pos  +  1));  char[]  input  =  input.getChars(pos,  input.length()  -  1);  out.write(input.charAt(pos  +  1));  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  >  0)  {  out.write(input.charAt(pos  +  1));  char[]  input  =  input.getChars(pos,  input.length()  -  1);  out.write(input.charAt(pos  +  1));  }	          out.write(input.charAt(pos));    char[]    input    =    input.getChars(pos,    input.length()    -    1);    out.write(input.charAt(pos));    	non-compiled	[CE]  class,  interface,  or  enum  expected	103	None	replace
486	[BUG]  [BUGGY]  float  len  =  input.length();  [CE]  class,  interface,  or  enum  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  float  len  =  input.length();  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	float  len  =  input.length();	  int    len    =    input.length()    +    1;    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
487	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  while  (pos  <  len  &&  input.length()  >  0  ||  input.charAt(pos  -  1)  ==  '-')  {  [BUGGY]      int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	add	while  (pos  <  len  &&  input.length()  >  0  ||  input.charAt(pos  -  1)  ==  '-')  {	  while    (pos    <    len    &&    input.length()    >    0    ||    input.charAt(pos    -    1)!=    '-')    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	31	10	replace
488	[BUG]  [BUGGY]  while  (pos  <  len  &&  input.length()  >  0  ||  input.charAt(pos  -  1)  ==  '-')  {  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  while  (pos  <  len  &&  input.length()  >  0  ||  input.charAt(pos  -  1)  ==  '-')  {  [BUGGY]      int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	while  (pos  <  len  &&  input.length()  >  0  ||  input.charAt(pos  -  1)  ==  '-')  {	  while    (pos    <    len    &&    input.length()    >    0    ||    input.charAt(pos    -    1)!=    '-')    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	31	10	replace
489	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  while  (pos  <  len  ||  input.length()  >  0  ||  input.charAt(pos  -  1)!=  '-')  {  [BUGGY]      int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	add	while  (pos  <  len  ||  input.length()  >  0  ||  input.charAt(pos  -  1)!=  '-')  {	  while    (pos    <    len    &&    input.length()    >    0    ||    input.charAt(pos    -    1)!=    '-')    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	31	19	replace
490	[BUG]  [BUGGY]  while  (pos  <  len  ||  input.length()  >  0  ||  input.charAt(pos  -  1)!=  '-')  {  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  while  (pos  <  len  ||  input.length()  >  0  ||  input.charAt(pos  -  1)!=  '-')  {  [BUGGY]      int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	while  (pos  <  len  ||  input.length()  >  0  ||  input.charAt(pos  -  1)!=  '-')  {	  while    (pos    <    len    &&    input.length()    >    0    ||    input.charAt(pos    -    1)!=    '-')    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	31	19	replace
491	[BUG]  [BUGGY]  if(len  <  2)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  out));  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]              ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  <  2)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  out));  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  <  2)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  out));  out.write(c);  }	  if(len    <    2)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    Character.toChars(Character.codePointAt(pos,    pos));    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	96	None	replace
492	[BUG]  [BUGGY]  if(len  <  2)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  p));  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  <  2)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  p));  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  <  2)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  p));  out.write(c);  }	  if(len    <    2)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    Character.toChars(Character.codePointAt(pos,    pos));    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	96	None	replace
493	[BUG]  [BUGGY]  if(len  <  =  0)  {  pos  =  input.length();  pos  =  input.length();  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  <  =  0)  {  pos  =  input.length();  pos  =  input.length();  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  <  =  0)  {  pos  =  input.length();  pos  =  input.length();  }	          pos    =    input.length();    pos    =    input.length());    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
494	[BUG]  [BUGGY]  if(len  >  -1)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                      ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  >  -1)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  >  -1)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }	  if(pos    >    -1)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	161	None	replace
495	[BUG]  [BUGGY]  if(len  >  -1)  {  out.write(c);  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [CE]  cannot  find  symbol  c  [FE]                        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  >  -1)  {  out.write(c);  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  >  -1)  {  out.write(c);  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }	  if(pos    >    -1)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  cannot  find  symbol  c	161	None	replace
496	[BUG]  [BUGGY]  if(len  >  -1)  {  int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [CE]  >  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  >  -1)  {  int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  >  -1)  {  int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }	  if(pos    >    -1)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  >  expected	161	None	replace
497	[BUG]  [BUGGY]  if(len  <  2)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(out);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                  ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  <  2)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(out);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  <  2)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(out);  }	  if(pos    <    2)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	142	None	replace
498	[BUG]  [BUGGY]  pos  =  input.length()  *  len;  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  pos  =  input.length()  *  len;  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	pos  =  input.length()  *  len;	  pos    =    input.length()    +    len;    	non-compiled	[CE]  class,  interface,  or  enum  expected	104	None	replace
499	[BUG]  [BUGGY]  if(len  >  0)  {  pos  =  input.length();  pos  =  input.length();  this.char[]  c  =  Character.toChars(Character.codePointCount(input,  0,  input.length());  }  else  {  out.write(c);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  >  0)  {  pos  =  input.length();  pos  =  input.length();  this.char[]  c  =  Character.toChars(Character.codePointCount(input,  0,  input.length());  }  else  {  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  >  0)  {  pos  =  input.length();  pos  =  input.length();  this.char[]  c  =  Character.toChars(Character.codePointCount(input,  0,  input.length());  }  else  {  out.write(c);  }	          pos    =    input.length();    pos    =    input.length();    this.char[]    c    =    Character.toChars(Character.codePointCount(input,    0,    input.length());    	non-compiled	[CE]  <identifier>  expected	149	None	replace
500	[BUG]  [BUGGY]  if(len  >  0)  {  for(int  pos  =  0;  pos  <  out.length();  pos++)  {  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  >  0)  {  for(int  pos  =  0;  pos  <  out.length();  pos++)  {  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  >  0)  {  for(int  pos  =  0;  pos  <  out.length();  pos++)  {  out.write(c);  }	  if(pos    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	141	None	replace
501	[BUG]  [BUGGY]  while  (pos  <  len  ||  input.length()  >  0)  {  int  len  =  Character.codePointCount(input);  [CE]  illegal  start  of  expression  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  while  (pos  <  len  ||  input.length()  >  0)  {  int  len  =  Character.codePointCount(input);  [BUGGY]      int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	while    (pos    <    len    ||    input.length()    >    0)    {    int  len  =  Character.codePointCount(input);	  	non-compiled	[CE]  illegal  start  of  expression	28	None	add
502	[BUG]  [BUGGY]  while  (pos  <  len  ||  input.length()  >  0)  {  int  pos  =  input.length();  [CE]  illegal  start  of  expression  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  while  (pos  <  len  ||  input.length()  >  0)  {  int  pos  =  input.length();  [BUGGY]      int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	while    (pos    <    len    ||    input.length()    >    0)    {    int  pos  =  input.length();	  	non-compiled	[CE]  illegal  start  of  expression	28	None	add
503	[BUG]  [BUGGY]  if(len  <  2)  {  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  <  2)  {  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  <  2)  {  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }	  if(pos    >    0)    {    if(pos    <    len)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
504	[BUG]  [BUGGY]  if(len  <  1)  {  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  <  1)  {  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  <  1)  {  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }	  if(pos    >    0)    {    if(pos    <    len)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
505	[BUG]  [BUGGY]  if(len  >  0)  {  if(pos  <  len)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  >  0)  {  if(pos  <  len)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  >  0)  {  if(pos  <  len)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }	  if(pos    >    0)    {    if(pos    <    len)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
506	[BUG]  [BUGGY]  if(len  >  0)  {  if(pos  >=  len)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  >  0)  {  if(pos  >=  len)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  >  0)  {  if(pos  >=  len)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }	  if(pos    >    0)    {    if(pos    <    len)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
507	[BUG]  [BUGGY]  float  pos  =  input.length();  [CE]  class,  interface,  or  enum  expected  [FE]            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  float  pos  =  input.length();  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	float  pos  =  input.length();	  int    pos    =    input.length()    -    1;    	non-compiled	[CE]  class,  interface,  or  enum  expected	52	None	replace
508	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  while(pos  ==  len  -  1)  {  [BUGGY]      int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	add	while(pos  ==  len  -  1)  {	  while(pos    >    len    -    1)    {    	compilable	  [FE]  AssertionFailedError  	140	18	replace
509	[BUG]  [BUGGY]  while(pos  ==  len  -  1)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  while(pos  ==  len  -  1)  {  [BUGGY]      int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	while(pos  ==  len  -  1)  {	  while(pos    >    len    -    1)    {    	compilable	  [FE]  AssertionFailedError  	140	18	replace
510	[BUG]  [BUGGY]  if(len  <  =  0)  {  pos  =  input.length();  pos  =  input.length();  this.char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  <  =  0)  {  pos  =  input.length();  pos  =  input.length();  this.char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  <  =  0)  {  pos  =  input.length();  pos  =  input.length();  this.char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  }	          pos    =    input.length();    pos    =    input.length();    this.char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    	non-compiled	[CE]  illegal  start  of  expression	146	None	replace
511	[BUG]  [BUGGY]  if(len  <  2)  {  out.write(input.charAt(0));  out.write(input.charAt(2));  }  [CE]  class,  interface,  or  enum  expected  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  <  2)  {  out.write(input.charAt(0));  out.write(input.charAt(2));  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  <  2)  {  out.write(input.charAt(0));  out.write(input.charAt(2));  }	          out.write(input.charAt(0));    out.write(input.charAt(2));    	non-compiled	[CE]  class,  interface,  or  enum  expected	60	None	replace
512	[BUG]  [BUGGY]  if(len  <  2)  {  out.write(input.charAt(0));  out.write(input.charAt(2));  }  else  {  out.write(input.charAt(0));  }  [CE]  class,  interface,  or  enum  expected  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  <  2)  {  out.write(input.charAt(0));  out.write(input.charAt(2));  }  else  {  out.write(input.charAt(0));  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  <  2)  {  out.write(input.charAt(0));  out.write(input.charAt(2));  }  else  {  out.write(input.charAt(0));  }	          out.write(input.charAt(0));    out.write(input.charAt(2));    	non-compiled	[CE]  class,  interface,  or  enum  expected	60	None	replace
513	[BUG]  [BUGGY]  if(len  <  2)  {  for(pos  =  0;  pos  <  input.length;  pos++)  {  char[]  c  =  input.getChars(pos);  out.write(c);  }  [CE]  cannot  find  symbol  length  [FE]                    ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  <  2)  {  for(pos  =  0;  pos  <  input.length;  pos++)  {  char[]  c  =  input.getChars(pos);  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  <  2)  {  for(pos  =  0;  pos  <  input.length;  pos++)  {  char[]  c  =  input.getChars(pos);  out.write(c);  }	  if(pos    <    len)    {    for(int    pos    =    0;    pos    <    c.length;    pos++)    {    char[]    c    =    input.getChars(pos);    out.write(c);    }    	non-compiled	[CE]  cannot  find  symbol  length	133	None	replace
514	[BUG]  [BUGGY]  if(len  <  2)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointCount(pos,  pos));  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                  ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  <  2)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointCount(pos,  pos));  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  <  2)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointCount(pos,  pos));  out.write(c);  }	  if(pos    <    len)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    Character.toChars(Character.codePointCount(pos,    pos));    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	98	None	replace
515	[BUG]  [BUGGY]  if(len  <  2)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  0,  input.length()));  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                    ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  <  2)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  0,  input.length()));  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  <  2)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  0,  input.length()));  out.write(c);  }	  if(pos    <    len)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    Character.toChars(Character.codePointCount(pos,    pos));    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	98	None	replace
516	[BUG]  [BUGGY]  if(len  <  1)  {  pos  =  input.length();  pos  =  input.length();  this.char[]  c  =  Character.toChars(Character.codePointAt(input,  pos),  c);  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  <  1)  {  pos  =  input.length();  pos  =  input.length();  this.char[]  c  =  Character.toChars(Character.codePointAt(input,  pos),  c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  <  1)  {  pos  =  input.length();  pos  =  input.length();  this.char[]  c  =  Character.toChars(Character.codePointAt(input,  pos),  c);  }	          pos    =    input.length();    pos    =    input.length();    this.char[]    c    =    Character.toChars(Character.codePointAt(input,    pos),    c);    	non-compiled	[CE]  <identifier>  expected	148	None	replace
517	[BUG]  [BUGGY]  pos  =  input.length();  InputStream  input  =  output.getInputStream();  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  pos  =  input.length();  InputStream  input  =  output.getInputStream();  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	pos  =  input.length();  InputStream  input  =  output.getInputStream();	          pos    =    input.length();    InputStream    input    =    input.getInputStream();    	non-compiled	[CE]  class,  interface,  or  enum  expected	128	None	replace
518	[BUG]  [BUGGY]  int  pos  =  Character.codePointCount(input);  [CE]  class,  interface,  or  enum  expected  [FE]          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  int  pos  =  Character.codePointCount(input);  [BUGGY]      int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	int  pos  =  Character.codePointCount(input);	  while    (pos    <    len    -    2)    {    int    len    =    Character.codePointCount(input);    while    (pos    <    len    -    2)    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	137	None	replace
519	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]          out.write(input.charAt(pos));    out.write(input.charAt(pos));  out.write(input.charAt(pos));  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	add	                out.write(input.charAt(pos));        out.write(input.charAt(pos));    out.write(input.charAt(pos));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	76	19	add
520	[BUG]  [BUGGY]          out.write(input.charAt(pos));    out.write(input.charAt(pos));  out.write(input.charAt(pos));  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]          out.write(input.charAt(pos));    out.write(input.charAt(pos));  out.write(input.charAt(pos));  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	                out.write(input.charAt(pos));        out.write(input.charAt(pos));    out.write(input.charAt(pos));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	76	19	add
521	[BUG]  [BUGGY]          out.write(input.charAt(pos));    out.write(input.charAt(pos));  out.write(input.charAt(pos));  out.write(Input.charAt(pos));  [CE]  cannot  find  symbol  Input  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]          out.write(input.charAt(pos));    out.write(input.charAt(pos));  out.write(input.charAt(pos));  out.write(Input.charAt(pos));  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	                out.write(input.charAt(pos));        out.write(input.charAt(pos));    out.write(input.charAt(pos));  out.write(Input.charAt(pos));	  	non-compiled	[CE]  cannot  find  symbol  Input	76	None	add
522	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]          out.write(input.charAt(pos));    out.write(input.charAt(pos));  out.write(input.charAt(0));  out.write(input.charAt(pos));  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	add	                out.write(input.charAt(pos));        out.write(input.charAt(pos));    out.write(input.charAt(0));  out.write(input.charAt(pos));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	76	19	add
523	[BUG]  [BUGGY]          out.write(input.charAt(pos));    out.write(input.charAt(pos));  out.write(input.charAt(0));  out.write(input.charAt(pos));  [FE]  StringIndexOutOfBoundsException  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]          out.write(input.charAt(pos));    out.write(input.charAt(pos));  out.write(input.charAt(0));  out.write(input.charAt(pos));  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	                out.write(input.charAt(pos));        out.write(input.charAt(pos));    out.write(input.charAt(0));  out.write(input.charAt(pos));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	76	19	add
524	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(1));  out.write(input.charAt(0));  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	add	                out.write(input.charAt(0));        out.write(input.charAt(1));    out.write(input.charAt(0));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	57	19	add
525	[BUG]  [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(1));  out.write(input.charAt(0));  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(1));  out.write(input.charAt(0));  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	                out.write(input.charAt(0));        out.write(input.charAt(1));    out.write(input.charAt(0));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	57	19	add
526	[BUG]  [BUGGY]  out.write('['  +  input.length()  -  1);  [CE]  class,  interface,  or  enum  expected  [FE]        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  out.write('['  +  input.length()  -  1);  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	out.write('['  +  input.length()  -  1);	  out.write('[');    	non-compiled	[CE]  class,  interface,  or  enum  expected	159	None	replace
527	[BUG]  [BUGGY]  out.write('['  +  input.length());  [CE]  class,  interface,  or  enum  expected  [FE]          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  out.write('['  +  input.length());  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	out.write('['  +  input.length());	  out.write('[');    	non-compiled	[CE]  class,  interface,  or  enum  expected	159	None	replace
528	[BUG]  [BUGGY]  out.write(input.charAt(pos,  0));  [CE]  class,  interface,  or  enum  expected  [FE]          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  out.write(input.charAt(pos,  0));  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	out.write(input.charAt(pos,  0));	  out.write(input.charAt(pos,    len));    	non-compiled	[CE]  class,  interface,  or  enum  expected	18	None	replace
529	[BUG]  [BUGGY]  out.write(input.charAt(0));  int  len  =  Character.codePointCount(input,  0,  input.length());  [CE]  class,  interface,  or  enum  expected  [FE]              ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  out.write(input.charAt(0));  int  len  =  Character.codePointCount(input,  0,  input.length());  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	out.write(input.charAt(0));  int  len  =  Character.codePointCount(input,  0,  input.length());	          out.write(len);    int    len    =    Character.codePointCount(input,    0,    input.length()    -    1);    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
530	[BUG]  [BUGGY]  OutputStream  out  =  input.outputStream(0);  [CE]  class,  interface,  or  enum  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  OutputStream  out  =  input.outputStream(0);  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	OutputStream  out  =  input.outputStream(0);	  OutputStream    out    =    input.outputStream();    	non-compiled	[CE]  class,  interface,  or  enum  expected	125	None	replace
531	[BUG]  [BUGGY]  out.write(input.charAt(0));  pos  =  input.toChars(pos);  [CE]  class,  interface,  or  enum  expected  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  out.write(input.charAt(0));  pos  =  input.toChars(pos);  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	out.write(input.charAt(0));  pos  =  input.toChars(pos);	          out.write(input.charAt(0));    char[]    input    =    input.toChars(pos);    	non-compiled	[CE]  class,  interface,  or  enum  expected	61	None	replace
532	[BUG]  [BUGGY]  while  (pos  <  len  &&  input.length()  >  0  ||  input.charAt(pos  -  1)!=  '-')  {  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len  &&  input.length()  >  0  ||  input.charAt(pos  -  1)!=  '-')  {  [CE]  illegal  start  of  expression  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  while  (pos  <  len  &&  input.length()  >  0  ||  input.charAt(pos  -  1)!=  '-')  {  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len  &&  input.length()  >  0  ||  input.charAt(pos  -  1)!=  '-')  {  [BUGGY]      int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	while    (pos    <    len    &&    input.length()    >    0    ||    input.charAt(pos    -    1)!=    '-')    {    int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len  &&  input.length()  >  0  ||  input.charAt(pos  -  1)!=  '-')  {	  	non-compiled	[CE]  illegal  start  of  expression	30	None	add
533	[BUG]  [BUGGY]  if(len  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]              ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }	  if(pos    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    Character.toChars(Character.codePointAt(pos,    pos));    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	157	None	replace
534	[BUG]  [BUGGY]  if(len  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  p));  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  p));  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  p));  out.write(c);  }	  if(pos    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    Character.toChars(Character.codePointAt(pos,    pos));    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	157	None	replace
535	[BUG]  [BUGGY]  if(len  >  0)  {  out.write(c);  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }  [CE]  cannot  find  symbol  c  [FE]                  ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  >  0)  {  out.write(c);  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  >  0)  {  out.write(c);  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }	  if(pos    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    Character.toChars(Character.codePointAt(pos,    pos));    out.write(c);    }    	non-compiled	[CE]  cannot  find  symbol  c	157	None	replace
536	[BUG]  [BUGGY]  if(len  >  0)  {  int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }  [CE]  >  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  >  0)  {  int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  >  0)  {  int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }	  if(pos    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    Character.toChars(Character.codePointAt(pos,    pos));    out.write(c);    }    	non-compiled	[CE]  >  expected	157	None	replace
537	[BUG]  [BUGGY]  OutputStream  out  =  output.getOutputStream(pos);  [CE]  class,  interface,  or  enum  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  OutputStream  out  =  output.getOutputStream(pos);  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	OutputStream  out  =  output.getOutputStream(pos);	  OutputStream    out    =    output.getOutputStream();    	non-compiled	[CE]  class,  interface,  or  enum  expected	47	None	replace
538	[BUG]  [BUGGY]  if(out!=  null)  {  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c  =  input.getChars(pos);  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(out!=  null)  {  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c  =  input.getChars(pos);  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(out!=  null)  {  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c  =  input.getChars(pos);  out.write(c);  }	  if(pos    >    0)    {    if(pos    <    len)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    c    =    input.getChars(pos);    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
539	[BUG]  [BUGGY]  if(len  <  2)  {  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c  =  input.getChars(pos);  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  <  2)  {  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c  =  input.getChars(pos);  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  <  2)  {  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c  =  input.getChars(pos);  out.write(c);  }	  if(pos    >    0)    {    if(pos    <    len)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    c    =    input.getChars(pos);    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
540	[BUG]  [BUGGY]  if(len  <  =  0)  {  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c  =  input.getChars(pos);  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  <  =  0)  {  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c  =  input.getChars(pos);  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  <  =  0)  {  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c  =  input.getChars(pos);  out.write(c);  }	  if(pos    >    0)    {    if(pos    <    len)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    c    =    input.getChars(pos);    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
541	[BUG]  [BUGGY]  if(len  >  0)  {  if(pos  <  len)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c  =  input.getChars(pos);  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  >  0)  {  if(pos  <  len)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c  =  input.getChars(pos);  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  >  0)  {  if(pos  <  len)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c  =  input.getChars(pos);  out.write(c);  }	  if(pos    >    0)    {    if(pos    <    len)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    c    =    input.getChars(pos);    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
542	[BUG]  [BUGGY]  out.write('  ');  [CE]  class,  interface,  or  enum  expected  [FE]            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  out.write('  ');  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	out.write('  ');	          out.write(len);    int    len    =    Character.codePointCount(input,    0,    input.length());    out.write(len);    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
543	[BUG]  [BUGGY]  if(len  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(  [CE]  '.class'  expected  [FE]                ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(	  if(len    <    1)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    Character.toChars(Character.codePointAt(pos,    pos));    out.write(c);    }    	non-compiled	[CE]  '.class'  expected	97	None	replace
544	[BUG]  [BUGGY]  if(len  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  out));  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                  ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  out));  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  out));  out.write(c);  }	  if(len    <    1)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    Character.toChars(Character.codePointAt(pos,    pos));    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	97	None	replace
545	[BUG]  [BUGGY]  char[]  c  =  input.toChars(input,  0,  len);  out.write('n');  [CE]  class,  interface,  or  enum  expected  [FE]        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  char[]  c  =  input.toChars(input,  0,  len);  out.write('n');  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	char[]  c  =  input.toChars(input,  0,  len);  out.write('n');	          out.write('n');    char[]    c    =    input.toChars(input,    0,    input.length());    out.write('n');    	non-compiled	[CE]  class,  interface,  or  enum  expected	113	None	replace
546	[BUG]  [BUGGY]  pos  =  input.length();  pos  =  out.length();  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  pos  =  input.length();  pos  =  out.length();  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	pos  =  input.length();  pos  =  out.length();	          pos    =    input.length();    pos    =    output.length();    	non-compiled	[CE]  class,  interface,  or  enum  expected	43	None	replace
547	[BUG]  [BUGGY]  pos  =  out.length();  pos  =  output.length();  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  pos  =  out.length();  pos  =  output.length();  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	pos  =  out.length();  pos  =  output.length();	          pos    =    input.length();    pos    =    output.length();    	non-compiled	[CE]  class,  interface,  or  enum  expected	43	None	replace
548	[BUG]  [BUGGY]  if(len  <  =  0)  {  out.write(input.charAt(pos  +  1));  out.write(input.charAt(pos  +  1));  }  else  {  out.write(input.charAt(pos  +  1));  }  [CE]  illegal  start  of  expression  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  <  =  0)  {  out.write(input.charAt(pos  +  1));  out.write(input.charAt(pos  +  1));  }  else  {  out.write(input.charAt(pos  +  1));  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  <  =  0)  {  out.write(input.charAt(pos  +  1));  out.write(input.charAt(pos  +  1));  }  else  {  out.write(input.charAt(pos  +  1));  }	          out.write(input.charAt(pos));    out.write(input.charAt(pos));    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
549	[BUG]  [BUGGY]  if(len  <  =  0)  {  out.write(input.charAt(pos  +  1));  out.write(input.charAt(pos  +  1));  }  [CE]  illegal  start  of  expression  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  <  =  0)  {  out.write(input.charAt(pos  +  1));  out.write(input.charAt(pos  +  1));  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  <  =  0)  {  out.write(input.charAt(pos  +  1));  out.write(input.charAt(pos  +  1));  }	          out.write(input.charAt(pos));    out.write(input.charAt(pos));    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
550	[BUG]  [BUGGY]  int  pos  =  input.length()  *  len;  [CE]  class,  interface,  or  enum  expected  [FE]            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  int  pos  =  input.length()  *  len;  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	int  pos  =  input.length()  *  len;	  int    pos    =    input.length()    +    len;    	non-compiled	[CE]  class,  interface,  or  enum  expected	99	None	replace
551	[BUG]  [BUGGY]  if(len  <  2)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.getChars(pos,  out);  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                  ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  <  2)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.getChars(pos,  out);  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  <  2)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.getChars(pos,  out);  out.write(c);  }	  if(len    <    2)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    input.getChars(pos);    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	91	None	replace
552	[BUG]  [BUGGY]  int  len  =  Character.codePointCount(input,  pos);  [CE]  class,  interface,  or  enum  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  int  len  =  Character.codePointCount(input,  pos);  [BUGGY]      int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	int  len  =  Character.codePointCount(input,  pos);	  int    len    =    Character.codePointCount(input);    	non-compiled	[CE]  class,  interface,  or  enum  expected	151	None	replace
553	[BUG]  [BUGGY]  out.write('n');  String  c  =  input.toChars(input,  0,  input.length());  [CE]  class,  interface,  or  enum  expected  [FE]          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  out.write('n');  String  c  =  input.toChars(input,  0,  input.length());  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	out.write('n');  String  c  =  input.toChars(input,  0,  input.length());	          out.write('n');    char[]    c    =    input.toChars(input,    0,    input.length());    	non-compiled	[CE]  class,  interface,  or  enum  expected	114	None	replace
554	[BUG]  [BUGGY]  out.write('n');  c  =  input.toChars('[');  out.write('n');  [CE]  class,  interface,  or  enum  expected  [FE]          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  out.write('n');  c  =  input.toChars('[');  out.write('n');  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	out.write('n');  c  =  input.toChars('[');  out.write('n');	          out.write('n');    char[]    c    =    input.toChars('[');    out.write('n');    	non-compiled	[CE]  class,  interface,  or  enum  expected	164	None	replace
555	[BUG]  [BUGGY]  if(len  <  2)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pt));  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  <  2)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pt));  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  <  2)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pt));  out.write(c);  }	  if(pos    <    len)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    Character.toChars(Character.codePointAt(pos,    pt));    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	64	None	replace
556	[BUG]  [BUGGY]  if(len  <  1)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pt));  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                  ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  <  1)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pt));  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  <  1)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pt));  out.write(c);  }	  if(pos    <    len)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    Character.toChars(Character.codePointAt(pos,    pt));    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	64	None	replace
557	[BUG]  [BUGGY]  if(len  <  2)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  input));  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                    ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  <  2)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  input));  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  <  2)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  input));  out.write(c);  }	  if(pos    <    len)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    Character.toChars(Character.codePointAt(pos,    pt));    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	64	None	replace
558	[BUG]  [BUGGY]  if(pos  <  len)  {  for(int  c  =  0;  c  <  len;  c++)  {  out.write(c);  }  if(pos  <  len)  {  for(int  c  =  0;  c  <  len;  c++)  {  out.write(c);  }  }  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  <  len)  {  for(int  c  =  0;  c  <  len;  c++)  {  out.write(c);  }  if(pos  <  len)  {  for(int  c  =  0;  c  <  len;  c++)  {  out.write(c);  }  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos    <    len)    {    for(int    c    =    0;    c    <    len;    c++)    {    out.write(c);    }    if(pos  <  len)  {  for(int  c  =  0;  c  <  len;  c++)  {  out.write(c);  }  }	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
559	[BUG]  [BUGGY]  while  (pos  <  len  &&  input.length()  >  0)  {  int  pos  =  out.length();  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  while  (pos  <  len  &&  input.length()  >  0)  {  int  pos  =  out.length();  [BUGGY]      int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	while  (pos  <  len  &&  input.length()  >  0)  {  int  pos  =  out.length();	  while    (pos    <    len    &&    input.length()    >    0)    {    int    pos    =    len;    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	129	None	replace
560	[BUG]  [BUGGY]  while  (pos  <  len  -  1)  {  int  input  =  Character.codePointCount(input,  0,  input.length());  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  while  (pos  <  len  -  1)  {  int  input  =  Character.codePointCount(input,  0,  input.length());  [BUGGY]      int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	while  (pos  <  len  -  1)  {  int  input  =  Character.codePointCount(input,  0,  input.length());	  while    (pos    <    len    -    1)    {    int    len    =    Character.codePointCount(input,    0,    input.length());    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	37	None	replace
561	[BUG]  [BUGGY]  while(pos  >  len  -  1)  {  int  pos  =  len  -  1;  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  while(pos  >  len  -  1)  {  int  pos  =  len  -  1;  [BUGGY]      int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	while(pos    >    len    -    1)    {    int  pos  =  len  -  1;	  	non-compiled	[CE]  illegal  start  of  expression	139	None	add
562	[BUG]  [BUGGY]  while(pos  >  len  -  1)  {  int  len  =  input.length();  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  while(pos  >  len  -  1)  {  int  len  =  input.length();  [BUGGY]      int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	while(pos    >    len    -    1)    {    int  len  =  input.length();	  	non-compiled	[CE]  illegal  start  of  expression	139	None	add
563	[BUG]  [BUGGY]  while(pos  >  len  -  1)  {  pos  =  len  -  1;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  while(pos  >  len  -  1)  {  pos  =  len  -  1;  [BUGGY]      int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	while(pos    >    len    -    1)    {    pos  =  len  -  1;	  	non-compiled	[CE]  illegal  start  of  expression	139	None	add
564	[BUG]  [BUGGY]  if(len  >  -1)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  >  -1)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  >  -1)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }	  if(pos    >    -1)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    Character.toChars(Character.codePointAt(pos,    pos));    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	158	None	replace
565	[BUG]  [BUGGY]  if(len  >  -1)  {  out.write(c);  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }  [CE]  cannot  find  symbol  c  [FE]                  ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  >  -1)  {  out.write(c);  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  >  -1)  {  out.write(c);  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }	  if(pos    >    -1)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    Character.toChars(Character.codePointAt(pos,    pos));    out.write(c);    }    	non-compiled	[CE]  cannot  find  symbol  c	158	None	replace
566	[BUG]  [BUGGY]  if(len  >  -1)  {  int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }  [CE]  >  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  >  -1)  {  int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  >  -1)  {  int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }	  if(pos    >    -1)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    Character.toChars(Character.codePointAt(pos,    pos));    out.write(c);    }    	non-compiled	[CE]  >  expected	158	None	replace
567	[BUG]  [BUGGY]  if(len  >  0)  {  pos  =  input.length();  int  pos  =  input.length();  }  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  >  0)  {  pos  =  input.length();  int  pos  =  input.length();  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  >  0)  {  pos  =  input.length();  int  pos  =  input.length();  }	          pos    =    input.length();    int    pos    =    input.length();    	non-compiled	[CE]  class,  interface,  or  enum  expected	42	None	replace
568	[BUG]  [BUGGY]  if(len  >  0)  {  pos  =  input.length();  int  pos  =  input.length();  }  else  {  out.write(input);  return;  }  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  >  0)  {  pos  =  input.length();  int  pos  =  input.length();  }  else  {  out.write(input);  return;  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  >  0)  {  pos  =  input.length();  int  pos  =  input.length();  }  else  {  out.write(input);  return;  }	          pos    =    input.length();    int    pos    =    input.length();    	non-compiled	[CE]  class,  interface,  or  enum  expected	42	None	replace
569	[BUG]  [BUGGY]  if(len  >  0)  {  out.write(input.charAt(0));  out.write(input.charAt(1));  }  [CE]  class,  interface,  or  enum  expected  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  >  0)  {  out.write(input.charAt(0));  out.write(input.charAt(1));  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  >  0)  {  out.write(input.charAt(0));  out.write(input.charAt(1));  }	          out.write(input.charAt(0));    out.write(input.charAt(1));    	non-compiled	[CE]  class,  interface,  or  enum  expected	58	None	replace
570	[BUG]  [BUGGY]  if(len  >  0)  {  out.write(input.charAt(0));  out.write(input.charAt(1));  }  else  {  out.write(input.charAt(0));  }  [CE]  class,  interface,  or  enum  expected  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  >  0)  {  out.write(input.charAt(0));  out.write(input.charAt(1));  }  else  {  out.write(input.charAt(0));  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  >  0)  {  out.write(input.charAt(0));  out.write(input.charAt(1));  }  else  {  out.write(input.charAt(0));  }	          out.write(input.charAt(0));    out.write(input.charAt(1));    	non-compiled	[CE]  class,  interface,  or  enum  expected	58	None	replace
571	[BUG]  [BUGGY]  if(len  <  1)  {  out.write(input.charAt(0));  out.write(input.charAt(1));  }  else  {  out.write(input.charAt(0));  }  [CE]  class,  interface,  or  enum  expected  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  <  1)  {  out.write(input.charAt(0));  out.write(input.charAt(1));  }  else  {  out.write(input.charAt(0));  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  <  1)  {  out.write(input.charAt(0));  out.write(input.charAt(1));  }  else  {  out.write(input.charAt(0));  }	          out.write(input.charAt(0));    out.write(input.charAt(1));    	non-compiled	[CE]  class,  interface,  or  enum  expected	58	None	replace
572	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  while(pos  <  len  -  1)  {  out.write(input.charAt(pos));  [BUGGY]      int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	add	while(pos  <  len  -  1)  {  out.write(input.charAt(pos));	  while    (pos    <    len    -    1)    {    int    len    =    Character.codePointCount(input,    0,    input.length());    out.write(len);    	compilable	  [FE]  ComparisonFailure  	155	19	replace
573	[BUG]  [BUGGY]  while(pos  <  len  -  1)  {  out.write(input.charAt(pos));  [FE]  ComparisonFailure  [FE]            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  while(pos  <  len  -  1)  {  out.write(input.charAt(pos));  [BUGGY]      int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	while(pos  <  len  -  1)  {  out.write(input.charAt(pos));	  while    (pos    <    len    -    1)    {    int    len    =    Character.codePointCount(input,    0,    input.length());    out.write(len);    	compilable	  [FE]  ComparisonFailure  	155	19	replace
574	[BUG]  [BUGGY]  out.write('n');  char[]  c  =  input.toChars(pos,  0,  input.length());  [CE]  class,  interface,  or  enum  expected  [FE]        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  out.write('n');  char[]  c  =  input.toChars(pos,  0,  input.length());  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	out.write('n');  char[]  c  =  input.toChars(pos,  0,  input.length());	          out.write('n');    char[]    c    =    input.toChars(input,    0,    input.length());    out.write('n');    	non-compiled	[CE]  class,  interface,  or  enum  expected	113	None	replace
575	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  while  (pos  <  len  &&  input.length()  >  0  ||  input.charAt(pos)!=  '-')  {  [BUGGY]      int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	add	while  (pos  <  len  &&  input.length()  >  0  ||  input.charAt(pos)!=  '-')  {	  while    (pos    <    len    &&    input.length()    >    0)    {    int    len    =    Character.codePointCount(input);    while    (pos    <    len    &&    input.length()    >    0)    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	145	19	replace
576	[BUG]  [BUGGY]  while  (pos  <  len  &&  input.length()  >  0  ||  input.charAt(pos)!=  '-')  {  [FE]  StringIndexOutOfBoundsException  [FE]          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  while  (pos  <  len  &&  input.length()  >  0  ||  input.charAt(pos)!=  '-')  {  [BUGGY]      int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	while  (pos  <  len  &&  input.length()  >  0  ||  input.charAt(pos)!=  '-')  {	  while    (pos    <    len    &&    input.length()    >    0)    {    int    len    =    Character.codePointCount(input);    while    (pos    <    len    &&    input.length()    >    0)    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	145	19	replace
577	[BUG]  [BUGGY]  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointCount(pos,  pos));  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                  ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointCount(pos,  pos));  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointCount(pos,  pos));  out.write(c);  }	  if(pos    <    len)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    Character.toChars(Character.codePointCount(pos,    pos));    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	98	None	replace
578	[BUG]  [BUGGY]  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointCount(pos,  0,  input.length()));  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                    ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointCount(pos,  0,  input.length()));  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointCount(pos,  0,  input.length()));  out.write(c);  }	  if(pos    <    len)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    Character.toChars(Character.codePointCount(pos,    pos));    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	98	None	replace
579	[BUG]  [BUGGY]  char[]  c  =  input.getChars(pos,  input.length());  [CE]  class,  interface,  or  enum  expected  [FE]              ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  char[]  c  =  input.getChars(pos,  input.length());  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	char[]  c  =  input.getChars(pos,  input.length());	          out.write('n');    char[]    c    =    input.getChars(pos,    input.length());    out.write('n');    	non-compiled	[CE]  class,  interface,  or  enum  expected	116	None	replace
580	[BUG]  [BUGGY]  if(c  ==  '.')  {  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c  =  input.getChars(pos);  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(c  ==  '.')  {  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c  =  input.getChars(pos);  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(c  ==  '.')  {  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c  =  input.getChars(pos);  out.write(c);  }	  if(pos    >    0)    {    if(pos    <    len)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    c    =    input.getChars(pos);    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
581	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c  =  input.getChars(pos);  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c  =  input.getChars(pos);  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(c  ==  'n'  ||  c  ==  'r')  {  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c  =  input.getChars(pos);  out.write(c);  }	  if(pos    >    0)    {    if(pos    <    len)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    c    =    input.getChars(pos);    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
582	[BUG]  [BUGGY]  if(pos  <  len)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c  =  input.getChars(pos);  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  <  len)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c  =  input.getChars(pos);  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  <  len)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c  =  input.getChars(pos);  out.write(c);  }	  if(pos    >    0)    {    if(pos    <    len)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    c    =    input.getChars(pos);    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	34	None	replace
583	[BUG]  [BUGGY]  out.write('  ');  int  len  =  Character.codePointCount(input,  0,  input.length());  [CE]  class,  interface,  or  enum  expected  [FE]              ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  out.write('  ');  int  len  =  Character.codePointCount(input,  0,  input.length());  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	out.write('  ');  int  len  =  Character.codePointCount(input,  0,  input.length());	          out.write(len);    int    len    =    Character.codePointCount(input,    0,    input.length()    -    1);    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
584	[BUG]  [BUGGY]  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  input.length();  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  input.length();  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  >  0)  {  for(int  pos  =  0;  pos  <  input.length();  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }	  if(pos    <    len)    {    for(int    pos    =    0;    pos    <    input.length();    pos++)    {    char[]    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	108	None	replace
585	[BUG]  [BUGGY]  if(pos  >  -1)  {  for(int  pos  =  0;  pos  <  input.length();  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  >  -1)  {  for(int  pos  =  0;  pos  <  input.length();  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  >  -1)  {  for(int  pos  =  0;  pos  <  input.length();  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }	  if(pos    <    len)    {    for(int    pos    =    0;    pos    <    input.length();    pos++)    {    char[]    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	108	None	replace
586	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]                    ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  <  len)  {  for(int  c  =  0;  pos  <  input.length();  pos++)  {  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	add	if(pos  <  len)  {  for(int  c  =  0;  pos  <  input.length();  pos++)  {  out.write(c);  }	  if(pos    <    len)    {    for(int    pos    =    0;    pos    <    out.length();    pos++)    {    out.write(c);    }    	compilable	  [FE]  StringIndexOutOfBoundsException  	4	19	replace
587	[BUG]  [BUGGY]  if(pos  <  len)  {  for(int  c  =  0;  pos  <  input.length();  pos++)  {  out.write(c);  }  [FE]  StringIndexOutOfBoundsException  [FE]                    ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  <  len)  {  for(int  c  =  0;  pos  <  input.length();  pos++)  {  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  <  len)  {  for(int  c  =  0;  pos  <  input.length();  pos++)  {  out.write(c);  }	  if(pos    <    len)    {    for(int    pos    =    0;    pos    <    out.length();    pos++)    {    out.write(c);    }    	compilable	  [FE]  StringIndexOutOfBoundsException  	4	19	replace
588	[BUG]  [BUGGY]  if(pos  <  len)  {  for(int  pos  =  0;  pos  <  output.length();  pos++)  {  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                      ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  <  len)  {  for(int  pos  =  0;  pos  <  output.length();  pos++)  {  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  <  len)  {  for(int  pos  =  0;  pos  <  output.length();  pos++)  {  out.write(c);  }	  if(pos    <    len)    {    for(int    pos    =    0;    pos    <    out.length();    pos++)    {    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	4	None	replace
589	[BUG]  [BUGGY]  if(pos  <  len)  {  for(int  pos  =  0;  pos  <  c;  pos++)  {  String  c  =  input.getChars(pos);  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                      ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  <  len)  {  for(int  pos  =  0;  pos  <  c;  pos++)  {  String  c  =  input.getChars(pos);  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  <  len)  {  for(int  pos  =  0;  pos  <  c;  pos++)  {  String  c  =  input.getChars(pos);  out.write(c);  }	  if(pos    <    len)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    String    c    =    input.getChars(pos);    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	35	None	replace
590	[BUG]  [BUGGY]  if(input.length()  >  0)  {  pos  =  input.length();  int  pos  =  input.length();  }  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(input.length()  >  0)  {  pos  =  input.length();  int  pos  =  input.length();  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(input.length()  >  0)  {  pos  =  input.length();  int  pos  =  input.length();  }	          pos    =    input.length();    int    pos    =    input.length();    	non-compiled	[CE]  class,  interface,  or  enum  expected	42	None	replace
591	[BUG]  [BUGGY]  if(input.length()  >  0)  {  pos  =  input.length();  int  pos  =  input.length();  }  else  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  pos  +=  input.length();  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]            AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(input.length()  >  0)  {  pos  =  input.length();  int  pos  =  input.length();  }  else  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  pos  +=  input.length();  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(input.length()  >  0)  {  pos  =  input.length();  int  pos  =  input.length();  }  else  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  pos  +=  input.length();  }	          pos    =    input.length();    int    pos    =    input.length();    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	42	None	replace
592	[BUG]  [BUGGY]  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  input.length();  pos++)  {  char[]  c  =  input.getChars(pos);  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                      ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  input.length();  pos++)  {  char[]  c  =  input.getChars(pos);  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  >  0)  {  for(int  pos  =  0;  pos  <  input.length();  pos++)  {  char[]  c  =  input.getChars(pos);  out.write(c);  }	  if(pos    <    len)    {    for(int    pos    =    0;    pos    <    input.length();    pos++)    {    char[]    c    =    input.getChars(pos);    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	93	None	replace
593	[BUG]  [BUGGY]  if(pos  <  len)  {  for(int  pos  =  0;  pos  <  input.length();  pos++)  {  char[]  c  =  input.getChars(pos,  0,  input.length());  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  <  len)  {  for(int  pos  =  0;  pos  <  input.length();  pos++)  {  char[]  c  =  input.getChars(pos,  0,  input.length());  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  <  len)  {  for(int  pos  =  0;  pos  <  input.length();  pos++)  {  char[]  c  =  input.getChars(pos,  0,  input.length());  out.write(c);  }	  if(pos    <    len)    {    for(int    pos    =    0;    pos    <    input.length();    pos++)    {    char[]    c    =    input.getChars(pos);    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	93	None	replace
594	[BUG]  [BUGGY]  if(pos  <  len)  {  for(int  pos  =  0;  pos  <  input.size();  pos++)  {  char[]  c  =  input.getChars(pos);  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  <  len)  {  for(int  pos  =  0;  pos  <  input.size();  pos++)  {  char[]  c  =  input.getChars(pos);  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  <  len)  {  for(int  pos  =  0;  pos  <  input.size();  pos++)  {  char[]  c  =  input.getChars(pos);  out.write(c);  }	  if(pos    <    len)    {    for(int    pos    =    0;    pos    <    input.length();    pos++)    {    char[]    c    =    input.getChars(pos);    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	93	None	replace
595	[BUG]  [BUGGY]  Integer  pt  =  input.length();  [CE]  class,  interface,  or  enum  expected  [FE]              ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  Integer  pt  =  input.length();  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	Integer  pt  =  input.length();	  if(pos    <    len)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    Character[]    c    =    Character.toChars(Character.codePointAt(pos,    pos));    out.write(c);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	63	None	replace
596	[BUG]  [BUGGY]  OutputStream  input  =  input.getOutputStream();  [CE]  class,  interface,  or  enum  expected  [FE]                ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  OutputStream  input  =  input.getOutputStream();  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	OutputStream  input  =  input.getOutputStream();	  if(pos    <    len)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    Character[]    c    =    Character.toChars(Character.codePointAt(pos,    pos));    out.write(c);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	63	None	replace
597	[BUG]  [BUGGY]          out.write(input.charAt(pos));    out.write(input.charAt(pos));  if(len  <  =  0)  {  out.write(input.charAt(pos));  out.write(input.charAt(pos));  }  [CE]  illegal  start  of  expression  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]          out.write(input.charAt(pos));    out.write(input.charAt(pos));  if(len  <  =  0)  {  out.write(input.charAt(pos));  out.write(input.charAt(pos));  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	                out.write(input.charAt(pos));        out.write(input.charAt(pos));    if(len  <  =  0)  {  out.write(input.charAt(pos));  out.write(input.charAt(pos));  }	  	non-compiled	[CE]  illegal  start  of  expression	76	None	add
598	[BUG]  [BUGGY]  if(pt  >  0)  {  if(pos  <  len)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pt));  out.  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pt  >  0)  {  if(pos  <  len)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pt));  out.  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pt  >  0)  {  if(pos  <  len)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pt));  out.	  if(pos    <    len)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    Character.toChars(Character.codePointAt(pos,    pt));    out.write(c);    }    	non-compiled	[CE]  <identifier>  expected	64	None	replace
599	[BUG]  [BUGGY]  if(pt  >  0)  {  if(pos  <  len)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pt));  out.write(  [CE]  '.class'  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pt  >  0)  {  if(pos  <  len)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pt));  out.write(  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pt  >  0)  {  if(pos  <  len)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pt));  out.write(	  if(pos    <    len)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    Character.toChars(Character.codePointAt(pos,    pt));    out.write(c);    }    	non-compiled	[CE]  '.class'  expected	64	None	replace
600	[BUG]  [BUGGY]  if(pt  >  0)  {  if(pos  <  len)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pt));  out.write  [CE]  not  a  statement  [FE]                    ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pt  >  0)  {  if(pos  <  len)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pt));  out.write  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pt  >  0)  {  if(pos  <  len)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pt));  out.write	  if(pos    <    len)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    Character.toChars(Character.codePointAt(pos,    pt));    out.write(c);    }    	non-compiled	[CE]  not  a  statement	64	None	replace
601	[BUG]  [BUGGY]  if(len  <  1)  {  pos  =  input.length();  pos  =  input.length();  this.char[]  c  =  Character.toChars(Character.codePointCount(input,  0,  input.length());  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  <  1)  {  pos  =  input.length();  pos  =  input.length();  this.char[]  c  =  Character.toChars(Character.codePointCount(input,  0,  input.length());  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  <  1)  {  pos  =  input.length();  pos  =  input.length();  this.char[]  c  =  Character.toChars(Character.codePointCount(input,  0,  input.length());  }	          pos    =    input.length();    pos    =    input.length();    this.char[]    c    =    Character.toChars(Character.codePointCount(input,    0,    input.length());    	non-compiled	[CE]  <identifier>  expected	149	None	replace
602	[BUG]  [BUGGY]  if(len  <  2)  {  out.write(input.charAt(pos));  char[]  input  =  input.getChars(pos,  input.length());  out.write(input.charAt(pos));  }  [CE]  class,  interface,  or  enum  expected  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  <  2)  {  out.write(input.charAt(pos));  char[]  input  =  input.getChars(pos,  input.length());  out.write(input.charAt(pos));  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  <  2)  {  out.write(input.charAt(pos));  char[]  input  =  input.getChars(pos,  input.length());  out.write(input.charAt(pos));  }	          out.write(input.charAt(pos));    char[]    input    =    input.getChars(pos,    input.length());    out.write(input.charAt(pos));    	non-compiled	[CE]  class,  interface,  or  enum  expected	101	None	replace
603	[BUG]  [BUGGY]  if(len  >  0)  {  out.write(input.charAt(0));  char[]  input  =  input.getChars(pos,  input.length());  out.write(input.charAt(pos));  }  [CE]  class,  interface,  or  enum  expected  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  >  0)  {  out.write(input.charAt(0));  char[]  input  =  input.getChars(pos,  input.length());  out.write(input.charAt(pos));  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  >  0)  {  out.write(input.charAt(0));  char[]  input  =  input.getChars(pos,  input.length());  out.write(input.charAt(pos));  }	          out.write(input.charAt(pos));    char[]    input    =    input.getChars(pos,    input.length());    out.write(input.charAt(pos));    	non-compiled	[CE]  class,  interface,  or  enum  expected	101	None	replace
604	[BUG]  [BUGGY]  if(len  >  0)  {  out.write(input.charAt(pos));  char[]  input  =  input.getChars(pos,  input.length());  out.write(input.charAt(pos));  }  else  {  out.write(input.charAt  [CE]  ')'  expected  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  >  0)  {  out.write(input.charAt(pos));  char[]  input  =  input.getChars(pos,  input.length());  out.write(input.charAt(pos));  }  else  {  out.write(input.charAt  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  >  0)  {  out.write(input.charAt(pos));  char[]  input  =  input.getChars(pos,  input.length());  out.write(input.charAt(pos));  }  else  {  out.write(input.charAt	          out.write(input.charAt(pos));    char[]    input    =    input.getChars(pos,    input.length());    out.write(input.charAt(pos));    	non-compiled	[CE]  ')'  expected	101	None	replace
605	[BUG]  [BUGGY]  if(pos  <  len)  {  for(int  c  =  0;  pos  <  in.length();  pos++)  {  out.write(c);  }  [CE]  cannot  find  symbol  in  [FE]                  ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  <  len)  {  for(int  c  =  0;  pos  <  in.length();  pos++)  {  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  <  len)  {  for(int  c  =  0;  pos  <  in.length();  pos++)  {  out.write(c);  }	  if(pos    <    len)    {    for(int    pos    =    0;    pos    <    in.length();    pos++)    {    out.write(c);    }    	non-compiled	[CE]  cannot  find  symbol  in	3	None	replace
606	[BUG]  [BUGGY]  if(len  <  2)  {  out.write(input.charAt(0));  out.write(input.charAt(1));  }  [CE]  class,  interface,  or  enum  expected  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  <  2)  {  out.write(input.charAt(0));  out.write(input.charAt(1));  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  <  2)  {  out.write(input.charAt(0));  out.write(input.charAt(1));  }	          out.write(input.charAt(0));    out.write(input.charAt(1));    	non-compiled	[CE]  class,  interface,  or  enum  expected	58	None	replace
607	[BUG]  [BUGGY]  while(pos  <  len)  {  int  pos  =  input.length();  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  while(pos  <  len)  {  int  pos  =  input.length();  [BUGGY]      int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	while(pos  <  len)  {  int  pos  =  input.length();	  while    (pos    <    len    -    2)    {    int    pos    =    input.length();    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	131	None	replace
608	[BUG]  [BUGGY]  if(pos  <  len)  {  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                    ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  <  len)  {  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  <  len)  {  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  }	  if(pos    >    0)    {    if(pos    <    len)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	14	None	replace
609	[BUG]  [BUGGY]  while(pos  >  len  -  1)  {  int  len  =  Character.codePointCount(input);  while(pos  >  len  -  1)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  while(pos  >  len  -  1)  {  int  len  =  Character.codePointCount(input);  while(pos  >  len  -  1)  {  [BUGGY]      int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	while(pos    >    len    -    1)    {    int  len  =  Character.codePointCount(input);  while(pos  >  len  -  1)  {	  	non-compiled	[CE]  illegal  start  of  expression	139	None	add
610	[BUG]  [BUGGY]  while(pos  >  len  -  1)  {  int  len  =  Character.codePointCount(input,  0,  input.length());  out.write(len);  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  while(pos  >  len  -  1)  {  int  len  =  Character.codePointCount(input,  0,  input.length());  out.write(len);  [BUGGY]      int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	while(pos    >    len    -    1)    {    int  len  =  Character.codePointCount(input,  0,  input.length());  out.write(len);	  	non-compiled	[CE]  illegal  start  of  expression	139	None	add
611	[BUG]  [BUGGY]  if(pos  <  2)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c  =  input.toChars(pos);  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  <  2)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c  =  input.toChars(pos);  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  <  2)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c  =  input.toChars(pos);  out.write(c);  }	  if(pos    <    len)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	16	None	replace
612	[BUG]  [BUGGY]  if(pos  <  len)  {  for(int  pos  =  0;  pos  <  c;  pos++)  {  c  =  input.toChars(pos);  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  <  len)  {  for(int  pos  =  0;  pos  <  c;  pos++)  {  c  =  input.toChars(pos);  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  <  len)  {  for(int  pos  =  0;  pos  <  c;  pos++)  {  c  =  input.toChars(pos);  out.write(c);  }	  if(pos    <    len)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	16	None	replace
613	[BUG]  [BUGGY]  if(pos  <  len)  {  for(int  pos  =  0;  pos  <  c.length;  pos++)  {  c  =  input.toChars(pos);  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  <  len)  {  for(int  pos  =  0;  pos  <  c.length;  pos++)  {  c  =  input.toChars(pos);  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  <  len)  {  for(int  pos  =  0;  pos  <  c.length;  pos++)  {  c  =  input.toChars(pos);  out.write(c);  }	  if(pos    <    len)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	16	None	replace
614	[BUG]  [BUGGY]  int  len  =  Character.codePointCount(input,  pos,  input.length()  -  2);  [CE]  class,  interface,  or  enum  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  int  len  =  Character.codePointCount(input,  pos,  input.length()  -  2);  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	int  len  =  Character.codePointCount(input,  pos,  input.length()  -  2);	  int    len    =    Character.codePointCount(input,    pos,    input.length());    	non-compiled	[CE]  class,  interface,  or  enum  expected	69	None	replace
615	[BUG]  [BUGGY]  out.write(input.charAt(pos  -  1),  input.charAt(pos  -  1));  [CE]  class,  interface,  or  enum  expected  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  out.write(input.charAt(pos  -  1),  input.charAt(pos  -  1));  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	out.write(input.charAt(pos  -  1),  input.charAt(pos  -  1));	  out.write(input.charAt(pos    -    1));    	non-compiled	[CE]  class,  interface,  or  enum  expected	32	None	replace
616	[BUG]  [BUGGY]  while  (pos  <  len  -  1  &&  input.length()  >  0)  {  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len  -  1  &&  input.length()  >  0)  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  while  (pos  <  len  -  1  &&  input.length()  >  0)  {  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len  -  1  &&  input.length()  >  0)  {  [BUGGY]      int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	while    (pos    <    len    -    1    &&    input.length()    >    0)    {    int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len  -  1  &&  input.length()  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	94	None	add
617	[BUG]  [BUGGY]  while  (pos  <  len  -  1  &&  input.length()  >  0)  {  int  len  =  Character.codePointCount(input,  0,  input.length()  -  1);  while  (pos  <  len  -  1  &&  input.length()  >  0)  {  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  while  (pos  <  len  -  1  &&  input.length()  >  0)  {  int  len  =  Character.codePointCount(input,  0,  input.length()  -  1);  while  (pos  <  len  -  1  &&  input.length()  >  0)  {  [BUGGY]      int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	while    (pos    <    len    -    1    &&    input.length()    >    0)    {    int  len  =  Character.codePointCount(input,  0,  input.length()  -  1);  while  (pos  <  len  -  1  &&  input.length()  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	94	None	add
618	[BUG]  [BUGGY]          out.write(len);    out.write(len);  out.write(Character.toChars(input,  0,  input.length()));  [CE]  no  suitable  method  found  for  toChars(CharSequence,int,int)  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]          out.write(len);    out.write(len);  out.write(Character.toChars(input,  0,  input.length()));  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	                out.write(len);        out.write(len);    out.write(Character.toChars(input,  0,  input.length()));	  	non-compiled	[CE]  no  suitable  method  found  for  toChars(CharSequence,int,int)	8	None	add
619	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]          out.write(len);    out.write(len);  out.write(Character.codePointCount(input,  0,  input.length()));  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	add	                out.write(len);        out.write(len);    out.write(Character.codePointCount(input,  0,  input.length()));	  	compilable	  [FE]  ComparisonFailure  	8	19	add
620	[BUG]  [BUGGY]          out.write(len);    out.write(len);  out.write(Character.codePointCount(input,  0,  input.length()));  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]          out.write(len);    out.write(len);  out.write(Character.codePointCount(input,  0,  input.length()));  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	                out.write(len);        out.write(len);    out.write(Character.codePointCount(input,  0,  input.length()));	  	compilable	  [FE]  ComparisonFailure  	8	19	add
621	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]        ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]          out.write(len);    out.write(len);  out.write(Character.toChars(input.charAt(pos)));  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	add	                out.write(len);        out.write(len);    out.write(Character.toChars(input.charAt(pos)));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	8	19	add
622	[BUG]  [BUGGY]          out.write(len);    out.write(len);  out.write(Character.toChars(input.charAt(pos)));  [FE]  StringIndexOutOfBoundsException  [FE]        ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]          out.write(len);    out.write(len);  out.write(Character.toChars(input.charAt(pos)));  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	                out.write(len);        out.write(len);    out.write(Character.toChars(input.charAt(pos)));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	8	19	add
623	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]          ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]          out.write(len);    out.write(len);  out.write(Character.toChars(input.charAt(0)));  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	add	                out.write(len);        out.write(len);    out.write(Character.toChars(input.charAt(0)));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	8	19	add
624	[BUG]  [BUGGY]          out.write(len);    out.write(len);  out.write(Character.toChars(input.charAt(0)));  [FE]  StringIndexOutOfBoundsException  [FE]          ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]          out.write(len);    out.write(len);  out.write(Character.toChars(input.charAt(0)));  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	                out.write(len);        out.write(len);    out.write(Character.toChars(input.charAt(0)));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	8	19	add
625	[BUG]  [BUGGY]  int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  [CE]  >  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }	  if(pos    <    2)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    out.write(c);    }    	non-compiled	[CE]  >  expected	142	None	replace
626	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]                    ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  <  2)  {  for(int  c  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	add	if(pos  <  2)  {  for(int  c  =  0;  pos  <  len;  pos++)  {  out.write(c);  }	  if(pos    <    2)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    out.write(c);    }    	compilable	  [FE]  StringIndexOutOfBoundsException  	142	19	replace
627	[BUG]  [BUGGY]  if(pos  <  2)  {  for(int  c  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  [FE]  StringIndexOutOfBoundsException  [FE]                    ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  <  2)  {  for(int  c  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  <  2)  {  for(int  c  =  0;  pos  <  len;  pos++)  {  out.write(c);  }	  if(pos    <    2)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    out.write(c);    }    	compilable	  [FE]  StringIndexOutOfBoundsException  	142	19	replace
628	[BUG]  [BUGGY]  if(input.length()  >  0)  {  pos  =  input.length();  pos  =  input.length();  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(input.length()  >  0)  {  pos  =  input.length();  pos  =  input.length();  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(input.length()  >  0)  {  pos  =  input.length();  pos  =  input.length();  }	          pos    =    input.length();    pos    =    input.length());    	non-compiled	[CE]  class,  interface,  or  enum  expected	45	None	replace
629	[BUG]  [BUGGY]  out.write(input.charAt(0));  pos[]  input  =  input.toChars(pos);  [CE]  class,  interface,  or  enum  expected  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  out.write(input.charAt(0));  pos[]  input  =  input.toChars(pos);  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	out.write(input.charAt(0));  pos[]  input  =  input.toChars(pos);	          out.write(input.charAt(0));    char[]    input    =    input.toChars(pos);    	non-compiled	[CE]  class,  interface,  or  enum  expected	61	None	replace
630	[BUG]  [BUGGY]  out.write(input.charAt(0));  int  pos  =  input.length();  [CE]  class,  interface,  or  enum  expected  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  out.write(input.charAt(0));  int  pos  =  input.length();  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	out.write(input.charAt(0));  int  pos  =  input.length();	          out.write(input.charAt(pos));    int    pos    =    input.length();    	non-compiled	[CE]  class,  interface,  or  enum  expected	81	None	replace
631	[BUG]  [BUGGY]  out.write(len  +  3);  [CE]  class,  interface,  or  enum  expected  [FE]        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  out.write(len  +  3);  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	out.write(len  +  3);	  out.write(len    +    1);    	non-compiled	[CE]  class,  interface,  or  enum  expected	123	None	replace
632	[BUG]  [BUGGY]  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  chars.length;  pos++)  {  char[]  c  =  input.getChars(pos);  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                      ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  chars.length;  pos++)  {  char[]  c  =  input.getChars(pos);  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  >  0)  {  for(int  pos  =  0;  pos  <  chars.length;  pos++)  {  char[]  c  =  input.getChars(pos);  out.write(c);  }	  if(pos    <    len)    {    for(int    pos    =    0;    pos    <    chars.length;    pos++)    {    char[]    c    =    input.getChars(pos);    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	134	None	replace
633	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(0));  out.write(input.charAt(1));  out.write(input.charAt(0));  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	add	                out.write(input.charAt(0));        out.write(input.charAt(0));    out.write(input.charAt(1));  out.write(input.charAt(0));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	55	19	add
634	[BUG]  [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(0));  out.write(input.charAt(1));  out.write(input.charAt(0));  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(0));  out.write(input.charAt(1));  out.write(input.charAt(0));  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	                out.write(input.charAt(0));        out.write(input.charAt(0));    out.write(input.charAt(1));  out.write(input.charAt(0));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	55	19	add
635	[BUG]  [BUGGY]  if(pos  <  len)  {  out.write(input.charAt(0));  out.write(input.charAt(pos));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  class,  interface,  or  enum  expected  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  <  len)  {  out.write(input.charAt(0));  out.write(input.charAt(pos));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  <  len)  {  out.write(input.charAt(0));  out.write(input.charAt(pos));  }  else  {  throw  new  IllegalArgumentException( " ");  }	          out.write(input.charAt(0));    out.write(input.charAt(    pos));    	non-compiled	[CE]  class,  interface,  or  enum  expected	112	None	replace
636	[BUG]  [BUGGY]  out.write('n');  char[]  c  =  input.toChars('[',  pos);  [CE]  class,  interface,  or  enum  expected  [FE]          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  out.write('n');  char[]  c  =  input.toChars('[',  pos);  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	out.write('n');  char[]  c  =  input.toChars('[',  pos);	          out.write('n');    char[]    c    =    input.toChars('[');    out.write('n');    	non-compiled	[CE]  class,  interface,  or  enum  expected	164	None	replace
637	[BUG]  [BUGGY]  if(pos  >  0)  {  out.write(len);  out.write(len);  }  else  {  break;  }  [CE]  class,  interface,  or  enum  expected  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  >  0)  {  out.write(len);  out.write(len);  }  else  {  break;  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  >  0)  {  out.write(len);  out.write(len);  }  else  {  break;  }	          out.write(len);    out.write(len);    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
638	[BUG]  [BUGGY]  out.write('n');  OutputStream  out  =  input.getOutputStream();  [CE]  class,  interface,  or  enum  expected  [FE]          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  out.write('n');  OutputStream  out  =  input.getOutputStream();  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	out.write('n');  OutputStream  out  =  input.getOutputStream();	          out.write(len);    OutputStream    out    =    input.getOutputStream();    	non-compiled	[CE]  class,  interface,  or  enum  expected	90	None	replace
639	[BUG]  [BUGGY]  out.write( "n ");  OutputStream  out  =  input.getOutputStream();  [CE]  class,  interface,  or  enum  expected  [FE]            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  out.write( "n ");  OutputStream  out  =  input.getOutputStream();  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	out.write( "n ");  OutputStream  out  =  input.getOutputStream();	          out.write(len);    OutputStream    out    =    input.getOutputStream();    	non-compiled	[CE]  class,  interface,  or  enum  expected	90	None	replace
640	[BUG]  [BUGGY]  while(pos  <  len)  {  int  len  =  Character.codePointCount(input);  [CE]  variable  len  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  while(pos  <  len)  {  int  len  =  Character.codePointCount(input);  [BUGGY]      int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	while(pos  <  len)  {  int  len  =  Character.codePointCount(input);	  while    (pos    <    len    -    2)    {    int    len    =    Character.codePointCount(input);    	non-compiled	[CE]  variable  len  is  already  defined  in  method  translate(CharSequence,Writer)	26	None	replace
641	[BUG]  [BUGGY]  if(pos  <  len)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c  =  Character.toChars(Character.codePointAt(pos,  pos  +  1));  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                  ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  <  len)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c  =  Character.toChars(Character.codePointAt(pos,  pos  +  1));  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  <  len)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c  =  Character.toChars(Character.codePointAt(pos,  pos  +  1));  out.write(c);  }	  if(pos    <    len)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    c    =    Character.toChars(Character.codePointAt(pos,    pos));    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	65	None	replace
642	[BUG]  [BUGGY]  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  input.length;  pos++)  {  char[]  c  =  input.getChars(pos);  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                    ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  input.length;  pos++)  {  char[]  c  =  input.getChars(pos);  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  >  0)  {  for(int  pos  =  0;  pos  <  input.length;  pos++)  {  char[]  c  =  input.getChars(pos);  out.write(c);  }	  if(pos    <    len)    {    for(int    pos    =    0;    pos    <    input.length;    pos++)    {    char[]    c    =    input.getChars(pos);    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	92	None	replace
643	[BUG]  [BUGGY]  if(pos  >  -1)  {  for(int  pos  =  0;  pos  <  input.length;  pos++)  {  char[]  c  =  input.getChars(pos);  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                      ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  >  -1)  {  for(int  pos  =  0;  pos  <  input.length;  pos++)  {  char[]  c  =  input.getChars(pos);  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  >  -1)  {  for(int  pos  =  0;  pos  <  input.length;  pos++)  {  char[]  c  =  input.getChars(pos);  out.write(c);  }	  if(pos    <    len)    {    for(int    pos    =    0;    pos    <    input.length;    pos++)    {    char[]    c    =    input.getChars(pos);    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	92	None	replace
644	[BUG]  [BUGGY]  CharSequence  input  =  input.getChars();  [CE]  class,  interface,  or  enum  expected  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  CharSequence  input  =  input.getChars();  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	CharSequence  input  =  input.getChars();	          out.write(input.charAt(0));    char[]    input    =    input.getChars();    	non-compiled	[CE]  class,  interface,  or  enum  expected	62	None	replace
645	[BUG]  [BUGGY]  while(pos  <  len)  {  int  pos  =  len  -  1;  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  while(pos  <  len)  {  int  pos  =  len  -  1;  [BUGGY]      int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	while(pos  <  len)  {  int  pos  =  len  -  1;	  while    (pos    <    len    -    1)    {    int    pos    =    len    -    1;    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	38	None	replace
646	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  >  0)  {  for(int  c  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	add	if(pos  >  0)  {  for(int  c  =  0;  pos  <  len;  pos++)  {  out.write(c);  }	  if(pos    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    out.write(c);    }    	compilable	  [FE]  AssertionFailedError  	141	19	replace
647	[BUG]  [BUGGY]  if(pos  >  0)  {  for(int  c  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  [FE]  AssertionFailedError  [FE]                ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  >  0)  {  for(int  c  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  >  0)  {  for(int  c  =  0;  pos  <  len;  pos++)  {  out.write(c);  }	  if(pos    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    out.write(c);    }    	compilable	  [FE]  AssertionFailedError  	141	19	replace
648	[BUG]  [BUGGY]  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write('n');  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                  ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write('n');  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write('n');  }	  if(pos    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	141	None	replace
649	[BUG]  [BUGGY]  if(pos  <  len)  {  out.write(input.charAt(pos);  char[]  input  =  input.toChars(pos);  out.write(input.charAt(pos));  }  [CE]  ')'  expected  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  <  len)  {  out.write(input.charAt(pos);  char[]  input  =  input.toChars(pos);  out.write(input.charAt(pos));  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  <  len)  {  out.write(input.charAt(pos);  char[]  input  =  input.toChars(pos);  out.write(input.charAt(pos));  }	          out.write(input.charAt(pos));    char[]    input    =    input.toChars(pos);    out.write(input.charAt(pos));    	non-compiled	[CE]  ')'  expected	100	None	replace
650	[BUG]  [BUGGY]  if(pos  <  len)  {  out.write(input.charAt(pos));  char[]  input  =  input.toChars(pos);  out.write(input.charAt(pos  +  1));  }  [CE]  class,  interface,  or  enum  expected  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  <  len)  {  out.write(input.charAt(pos));  char[]  input  =  input.toChars(pos);  out.write(input.charAt(pos  +  1));  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  <  len)  {  out.write(input.charAt(pos));  char[]  input  =  input.toChars(pos);  out.write(input.charAt(pos  +  1));  }	          out.write(input.charAt(pos));    char[]    input    =    input.toChars(pos);    out.write(input.charAt(pos));    	non-compiled	[CE]  class,  interface,  or  enum  expected	100	None	replace
651	[BUG]  [BUGGY]  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos  +  1));  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]              ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos  +  1));  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos  +  1));  out.write(c);  }	  if(pos    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    Character.toChars(Character.codePointAt(pos,    pos));    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	157	None	replace
652	[BUG]  [BUGGY]  if(pos  >  0)  {  out.write('n');  out.write('n');  }  [CE]  class,  interface,  or  enum  expected  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  >  0)  {  out.write('n');  out.write('n');  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  >  0)  {  out.write('n');  out.write('n');  }	          out.write('n');    out.write('n');    	non-compiled	[CE]  class,  interface,  or  enum  expected	71	None	replace
653	[BUG]  [BUGGY]  while(pos  <  len)  {  int  len  =  input.length();  [CE]  variable  len  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  while(pos  <  len)  {  int  len  =  input.length();  [BUGGY]      int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	while(pos  <  len)  {  int  len  =  input.length();	  while    (pos    <    len    -    1)    {    int    len    =    input.length();    	non-compiled	[CE]  variable  len  is  already  defined  in  method  translate(CharSequence,Writer)	87	None	replace
654	[BUG]  [BUGGY]  if(len  <  =  0)  {  out.write(input.charAt(pos));  out.write(input.charAt(pos));  }  [CE]  illegal  start  of  expression  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  <  =  0)  {  out.write(input.charAt(pos));  out.write(input.charAt(pos));  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  <  =  0)  {  out.write(input.charAt(pos));  out.write(input.charAt(pos));  }	          out.write(input.charAt(pos));    out.write(input.charAt(pos));    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
655	[BUG]  [BUGGY]  if(len  <  =  0)  {  out.write(input.charAt(pos));  out.write(input.charAt(pos  +  len));  }  [CE]  illegal  start  of  expression  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  <  =  0)  {  out.write(input.charAt(pos));  out.write(input.charAt(pos  +  len));  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  <  =  0)  {  out.write(input.charAt(pos));  out.write(input.charAt(pos  +  len));  }	          out.write(input.charAt(pos));    out.write(input.charAt(pos));    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
656	[BUG]  [BUGGY]  if(len  >  0)  {  out.write(input.charAt(pos));  out.write(input.charAt(pos));  }  [CE]  class,  interface,  or  enum  expected  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  >  0)  {  out.write(input.charAt(pos));  out.write(input.charAt(pos));  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  >  0)  {  out.write(input.charAt(pos));  out.write(input.charAt(pos));  }	          out.write(input.charAt(pos));    out.write(input.charAt(pos));    	non-compiled	[CE]  class,  interface,  or  enum  expected	77	None	replace
657	[BUG]  [BUGGY]  out.write(input.charAt(pos  +  len));  char[]  input  =  input.getChars(pos);  [CE]  class,  interface,  or  enum  expected  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  out.write(input.charAt(pos  +  len));  char[]  input  =  input.getChars(pos);  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	out.write(input.charAt(pos  +  len));  char[]  input  =  input.getChars(pos);	          out.write(input.charAt(pos));    char[]    input    =    input.getChars(pos);    	non-compiled	[CE]  class,  interface,  or  enum  expected	80	None	replace
658	[BUG]  [BUGGY]  int  len  =  output.length();  [CE]  class,  interface,  or  enum  expected  [FE]                ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  int  len  =  output.length();  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	int  len  =  output.length();	  int    len    =    input.length()    -    2;    	non-compiled	[CE]  class,  interface,  or  enum  expected	6	None	replace
659	[BUG]  [BUGGY]  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c  =  input.toChars(pos);  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                      ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c  =  input.toChars(pos);  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c  =  input.toChars(pos);  out.write(c);  }	  if(pos    >    0)    {    if(pos    <    len)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	15	None	replace
660	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c  =  input.toChars(pos);  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c  =  input.toChars(pos);  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(c  ==  'n'  ||  c  ==  'r')  {  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c  =  input.toChars(pos);  out.write(c);  }	  if(pos    >    0)    {    if(pos    <    len)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
661	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  't')  {  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c  =  input.toChars(pos);  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(c  ==  'n'  ||  c  ==  't')  {  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c  =  input.toChars(pos);  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(c  ==  'n'  ||  c  ==  't')  {  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c  =  input.toChars(pos);  out.write(c);  }	  if(pos    >    0)    {    if(pos    <    len)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
662	[BUG]  [BUGGY]  if(len  <  =  0)  {  pos  =  input.length();  pos  =  input.length();  this.char[]  c  =  Character.toChars(Character.codePointAt(input,  pos),  c);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  <  =  0)  {  pos  =  input.length();  pos  =  input.length();  this.char[]  c  =  Character.toChars(Character.codePointAt(input,  pos),  c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  <  =  0)  {  pos  =  input.length();  pos  =  input.length();  this.char[]  c  =  Character.toChars(Character.codePointAt(input,  pos),  c);  }	          pos    =    input.length();    pos    =    input.length();    this.char[]    c    =    Character.toChars(Character.codePointAt(input,    pos),    c);    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
663	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  while(pos  >  0)  {  [BUGGY]      int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	add	while(pos  >  0)  {	  while(pos    >    len    -    1)    {    	compilable	  [FE]  AssertionFailedError  	140	19	replace
664	[BUG]  [BUGGY]  while(pos  >  0)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  while(pos  >  0)  {  [BUGGY]      int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	while(pos  >  0)  {	  while(pos    >    len    -    1)    {    	compilable	  [FE]  AssertionFailedError  	140	19	replace
665	[BUG]  [BUGGY]  while  (pos  <  len  ||  input.length()  >  0)  {  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len  ||  input.length()  >  0)  {  [CE]  illegal  start  of  expression  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  while  (pos  <  len  ||  input.length()  >  0)  {  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len  ||  input.length()  >  0)  {  [BUGGY]      int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	while    (pos    <    len    ||    input.length()    >    0)    {    int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len  ||  input.length()  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	28	None	add
666	[BUG]  [BUGGY]  while  (pos  <  len  ||  input.length()  >  0)  {  int  len  =  Character.codePointCount(input);  while  (pos  <  len  ||  input.length()  >  0)  {  [CE]  illegal  start  of  expression  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  while  (pos  <  len  ||  input.length()  >  0)  {  int  len  =  Character.codePointCount(input);  while  (pos  <  len  ||  input.length()  >  0)  {  [BUGGY]      int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	while    (pos    <    len    ||    input.length()    >    0)    {    int  len  =  Character.codePointCount(input);  while  (pos  <  len  ||  input.length()  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	28	None	add
667	[BUG]  [BUGGY]  while(pos  <  len)  {  int  len  =  Character.codePointCount(input,  0,  input.length());  [CE]  variable  len  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  while(pos  <  len)  {  int  len  =  Character.codePointCount(input,  0,  input.length());  [BUGGY]      int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	while(pos  <  len)  {  int  len  =  Character.codePointCount(input,  0,  input.length());	  while    (pos    <    len    -    2)    {    int    len    =    Character.codePointCount(input,    0,    input.length());    	non-compiled	[CE]  variable  len  is  already  defined  in  method  translate(CharSequence,Writer)	25	None	replace
668	[BUG]  [BUGGY]  if(len  >  0)  {  out.write(input.charAt(pos));  char[]  input  =  input.getChars(pos,  input.length()  -  1);  out.write(input.charAt(pos  +  1));  }  [CE]  class,  interface,  or  enum  expected  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  >  0)  {  out.write(input.charAt(pos));  char[]  input  =  input.getChars(pos,  input.length()  -  1);  out.write(input.charAt(pos  +  1));  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  >  0)  {  out.write(input.charAt(pos));  char[]  input  =  input.getChars(pos,  input.length()  -  1);  out.write(input.charAt(pos  +  1));  }	          out.write(input.charAt(pos));    char[]    input    =    input.getChars(pos,    input.length()    -    1);    out.write(input.charAt(pos));    	non-compiled	[CE]  class,  interface,  or  enum  expected	103	None	replace
669	[BUG]  [BUGGY]  if(pos  <  len)  {  out.write(input.charAt(pos));  char[]  input  =  input.toChars(pos,  input.charAt(pos));  out.write(input.charAt(pos));  }  [CE]  class,  interface,  or  enum  expected  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  <  len)  {  out.write(input.charAt(pos));  char[]  input  =  input.toChars(pos,  input.charAt(pos));  out.write(input.charAt(pos));  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  <  len)  {  out.write(input.charAt(pos));  char[]  input  =  input.toChars(pos,  input.charAt(pos));  out.write(input.charAt(pos));  }	          out.write(input.charAt(pos));    char[]    input    =    input.toChars(pos,    input.charAt(pos));    out.write(input.charAt(pos));    	non-compiled	[CE]  class,  interface,  or  enum  expected	102	None	replace
670	[BUG]  [BUGGY]  if(len  <  2)  {  out.write(input.charAt(pos));  char[]  input  =  input.toChars(pos,  input.charAt(pos));  out.write(input.charAt(pos));  }  [CE]  class,  interface,  or  enum  expected  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  <  2)  {  out.write(input.charAt(pos));  char[]  input  =  input.toChars(pos,  input.charAt(pos));  out.write(input.charAt(pos));  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  <  2)  {  out.write(input.charAt(pos));  char[]  input  =  input.toChars(pos,  input.charAt(pos));  out.write(input.charAt(pos));  }	          out.write(input.charAt(pos));    char[]    input    =    input.toChars(pos,    input.charAt(pos));    out.write(input.charAt(pos));    	non-compiled	[CE]  class,  interface,  or  enum  expected	102	None	replace
671	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  while(pos  <  len  -  1)  {  out.write(Character.codePointCount(input,  0,  input.length()));  [BUGGY]      int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	add	while(pos  <  len  -  1)  {  out.write(Character.codePointCount(input,  0,  input.length()));	  while    (pos    <    len    -    1)    {    int    len    =    Character.codePointCount(input,    0,    input.length());    out.write(len);    	compilable	  [FE]  ComparisonFailure  	155	19	replace
672	[BUG]  [BUGGY]  while(pos  <  len  -  1)  {  out.write(Character.codePointCount(input,  0,  input.length()));  [FE]  ComparisonFailure  [FE]            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  while(pos  <  len  -  1)  {  out.write(Character.codePointCount(input,  0,  input.length()));  [BUGGY]      int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	while(pos  <  len  -  1)  {  out.write(Character.codePointCount(input,  0,  input.length()));	  while    (pos    <    len    -    1)    {    int    len    =    Character.codePointCount(input,    0,    input.length());    out.write(len);    	compilable	  [FE]  ComparisonFailure  	155	19	replace
673	[BUG]  [BUGGY]  while(pos  <  len  -  1)  {  out.write(Character.codePointCount(input,  0,  input.length());  [CE]  ')'  expected  [FE]              ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  while(pos  <  len  -  1)  {  out.write(Character.codePointCount(input,  0,  input.length());  [BUGGY]      int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	while(pos  <  len  -  1)  {  out.write(Character.codePointCount(input,  0,  input.length());	  while    (pos    <    len    -    1)    {    int    len    =    Character.codePointCount(input,    0,    input.length());    out.write(len);    	non-compiled	[CE]  ')'  expected	155	None	replace
674	[BUG]  [BUGGY]  out.write(input.charAt(pos  +  1),  input.charAt(pos  +  len));  [CE]  class,  interface,  or  enum  expected  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  out.write(input.charAt(pos  +  1),  input.charAt(pos  +  len));  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	out.write(input.charAt(pos  +  1),  input.charAt(pos  +  len));	  out.write(input.charAt(pos    +    1));    	non-compiled	[CE]  class,  interface,  or  enum  expected	19	None	replace
675	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]          out.write('n');    out.write('n');  if(len  >  0)  {  out.write('n');  out.write('n');  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	add	                out.write('n');        out.write('n');    if(len  >  0)  {  out.write('n');  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	70	19	add
676	[BUG]  [BUGGY]          out.write('n');    out.write('n');  if(len  >  0)  {  out.write('n');  out.write('n');  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]          out.write('n');    out.write('n');  if(len  >  0)  {  out.write('n');  out.write('n');  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	                out.write('n');        out.write('n');    if(len  >  0)  {  out.write('n');  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	70	19	add
677	[BUG]  [BUGGY]          out.write('n');    out.write('n');  if(len  <  =  0)  {  out.write('n');  out.write('n');  }  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]          out.write('n');    out.write('n');  if(len  <  =  0)  {  out.write('n');  out.write('n');  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	                out.write('n');        out.write('n');    if(len  <  =  0)  {  out.write('n');  out.write('n');  }	  	non-compiled	[CE]  illegal  start  of  expression	70	None	add
678	[BUG]  [BUGGY]          out.write('n');    out.write('n');  if(len  >  0)  {  out.write('n');  out.write('n');  }  else  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write('[');  }  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]          out.write('n');    out.write('n');  if(len  >  0)  {  out.write('n');  out.write('n');  }  else  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write('[');  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	                out.write('n');        out.write('n');    if(len  >  0)  {  out.write('n');  out.write('n');  }  else  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write('[');  }	  	non-compiled	[CE]  illegal  start  of  expression	70	None	add
679	[BUG]  [BUGGY]  out.write(input.charAt(pos,  pos++));  [CE]  class,  interface,  or  enum  expected  [FE]          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  out.write(input.charAt(pos,  pos++));  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	out.write(input.charAt(pos,  pos++));	  out.write(input.charAt(pos,    len));    	non-compiled	[CE]  class,  interface,  or  enum  expected	18	None	replace
680	[BUG]  [BUGGY]  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  c.length;  pos++)  {  char[]  c  =  input.getChars(pos);  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                    ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  c.length;  pos++)  {  char[]  c  =  input.getChars(pos);  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  >  0)  {  for(int  pos  =  0;  pos  <  c.length;  pos++)  {  char[]  c  =  input.getChars(pos);  out.write(c);  }	  if(pos    <    len)    {    for(int    pos    =    0;    pos    <    c.length;    pos++)    {    char[]    c    =    input.getChars(pos);    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	133	None	replace
681	[BUG]  [BUGGY]  out.write(input.charAt(pos  +  len)+  1);  [CE]  class,  interface,  or  enum  expected  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  out.write(input.charAt(pos  +  len)+  1);  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	out.write(input.charAt(pos  +  len)+  1);	  out.write(input.charAt(pos    +    len));    	non-compiled	[CE]  class,  interface,  or  enum  expected	110	None	replace
682	[BUG]  [BUGGY]  if(len  >  0)  {  for(int  pos  =  0;  pos  <  c.length;  pos++)  {  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                    ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(len  >  0)  {  for(int  pos  =  0;  pos  <  c.length;  pos++)  {  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(len  >  0)  {  for(int  pos  =  0;  pos  <  c.length;  pos++)  {  out.write(c);  }	  if(len    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	122	None	replace
683	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  <  2)  {  for(int  c  =  0;  c  <  len;  c++)  {  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	add	if(pos  <  2)  {  for(int  c  =  0;  c  <  len;  c++)  {  out.write(c);  }	  if(pos    <    len)    {    for(int    c    =    0;    c    <    len;    c++)    {    out.write(c);    }    	compilable	  [FE]  StringIndexOutOfBoundsException  	2	19	replace
684	[BUG]  [BUGGY]  if(pos  <  2)  {  for(int  c  =  0;  c  <  len;  c++)  {  out.write(c);  }  [FE]  StringIndexOutOfBoundsException  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  <  2)  {  for(int  c  =  0;  c  <  len;  c++)  {  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  <  2)  {  for(int  c  =  0;  c  <  len;  c++)  {  out.write(c);  }	  if(pos    <    len)    {    for(int    c    =    0;    c    <    len;    c++)    {    out.write(c);    }    	compilable	  [FE]  StringIndexOutOfBoundsException  	2	19	replace
685	[BUG]  [BUGGY]  if(pos  <  len)  {  for(int  c  =  0;  c  <  chars.length;  c++)  {  out.write(c);  }  [CE]  cannot  find  symbol  chars  [FE]      ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  <  len)  {  for(int  c  =  0;  c  <  chars.length;  c++)  {  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  <  len)  {  for(int  c  =  0;  c  <  chars.length;  c++)  {  out.write(c);  }	  if(pos    <    len)    {    for(int    c    =    0;    c    <    len;    c++)    {    out.write(c);    }    	non-compiled	[CE]  cannot  find  symbol  chars	2	None	replace
686	[BUG]  [BUGGY]  if(pos  <  len)  {  for(int  c  =  0;  c  <  char.length;  c++)  {  out.write(c);  }  [CE]  class  expected  [FE]        ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  <  len)  {  for(int  c  =  0;  c  <  char.length;  c++)  {  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  <  len)  {  for(int  c  =  0;  c  <  char.length;  c++)  {  out.write(c);  }	  if(pos    <    len)    {    for(int    c    =    0;    c    <    len;    c++)    {    out.write(c);    }    	non-compiled	[CE]  class  expected	2	None	replace
687	[BUG]  [BUGGY]  out.write('n');  c  =  input.toChars(0,  pos);  [CE]  class,  interface,  or  enum  expected  [FE]              ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  out.write('n');  c  =  input.toChars(0,  pos);  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	out.write('n');  c  =  input.toChars(0,  pos);	          out.write('n');    char[]    c    =    input.toChars(0,    pos);    out.write('n');    	non-compiled	[CE]  class,  interface,  or  enum  expected	74	None	replace
688	[BUG]  [BUGGY]  out.write(input.getChars());  [CE]  class,  interface,  or  enum  expected  [FE]                ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  out.write(input.getChars());  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	out.write(input.getChars());	          out.write(len);    int    len    =    Character.codePointCount(input,    0,    input.length()    -    1);    out.write(len);    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
689	[BUG]  [BUGGY]  out.write(input.toString());  [CE]  class,  interface,  or  enum  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  out.write(input.toString());  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	out.write(input.toString());	          out.write(len);    int    len    =    Character.codePointCount(input,    0,    input.length()    -    1);    out.write(len);    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
690	[BUG]  [BUGGY]  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  input.length;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  input.length;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  >  0)  {  for(int  pos  =  0;  pos  <  input.length;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }	  if(pos    <    len)    {    for(int    pos    =    0;    pos    <    c.length;    pos++)    {    char[]    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	162	None	replace
691	[BUG]  [BUGGY]  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  c.length;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());      [BUGGY]  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  c.length;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	84	84	1	replace	if(pos  >  0)  {  for(int  pos  =  0;  pos  <  c.length;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }	  if(pos    <    len)    {    for(int    pos    =    0;    pos    <    c.length;    pos++)    {    char[]    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	162	None	replace
