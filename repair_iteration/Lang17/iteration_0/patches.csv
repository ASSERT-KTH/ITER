bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number
this_action2	[BUG]  [BUGGY]  int  pos  =(input  ==  null)?  0  :  input.length;  [CE]  cannot  find  symbol  length  [CONTEXT]  public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (input  ==  null)  {  return;  }  [BUGGY]  int  pos  =(input  ==  null)?  0  :  input.length;  [BUGGY]  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	int  pos  =(input  ==  null)?  0  :  input.length;	int  pos  =  0;  	non-compiled	[CE]  cannot  find  symbol  length	19	None	replace
3	[BUG]  [BUGGY]  int  pos  =  input.length;  [CE]  cannot  find  symbol  length  [CONTEXT]  public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (input  ==  null)  {  return;  }  [BUGGY]  int  pos  =  input.length;  [BUGGY]  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	int  pos  =  input.length;	int  pos  =  0;  	non-compiled	[CE]  cannot  find  symbol  length	19	None	replace
4	[BUG]  [BUGGY]  int  pos  =(input!=  null)?  0  :  input.length;  [CE]  cannot  find  symbol  length  [CONTEXT]  public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (input  ==  null)  {  return;  }  [BUGGY]  int  pos  =(input!=  null)?  0  :  input.length;  [BUGGY]  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	int  pos  =(input!=  null)?  0  :  input.length;	int  pos  =  0;  	non-compiled	[CE]  cannot  find  symbol  length	19	None	replace
5	[BUG]  [BUGGY]    [CE]  cannot  find  symbol  pos  [CONTEXT]  public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (input  ==  null)  {  return;  }  [BUGGY]    [BUGGY]  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	  	int  pos  =  0;  	non-compiled	[CE]  cannot  find  symbol  pos	19	None	replace
11	[BUG]  [BUGGY]    int  pt  =  input.length();  [CE]  variable  pt  is  already  defined  in  method  translate(CharSequence,Writer)  [CONTEXT]  public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (input  ==  null)  {  return;  }  [BUGGY]    int  pt  =  input.length();  [BUGGY]  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	    int  pt  =  input.length();		non-compiled	[CE]  variable  pt  is  already  defined  in  method  translate(CharSequence,Writer)	20	None	add
12	[BUG]  [BUGGY]    char[]  pt  =  input.getCharacterIndex();  [CE]  cannot  find  symbol  [CONTEXT]  public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (input  ==  null)  {  return;  }  [BUGGY]    char[]  pt  =  input.getCharacterIndex();  [BUGGY]  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	    char[]  pt  =  input.getCharacterIndex();		non-compiled	[CE]  cannot  find  symbol	20	None	add
13	[BUG]  [BUGGY]    char[]  pt  =  input.toCharArray();  [CE]  cannot  find  symbol  [CONTEXT]  public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (input  ==  null)  {  return;  }  [BUGGY]    char[]  pt  =  input.toCharArray();  [BUGGY]  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	    char[]  pt  =  input.toCharArray();		non-compiled	[CE]  cannot  find  symbol	20	None	add
14	[BUG]  [BUGGY]    char[]  pt  =  input.getCharacterIndex();  out.write(c);  [CE]  cannot  find  symbol  [CONTEXT]  public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (input  ==  null)  {  return;  }  [BUGGY]    char[]  pt  =  input.getCharacterIndex();  out.write(c);  [BUGGY]  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	    char[]  pt  =  input.getCharacterIndex();  out.write(c);		non-compiled	[CE]  cannot  find  symbol	20	None	add
15	[BUG]  [BUGGY]    char[]  pt  =  input.getCharacterCount();  [CE]  cannot  find  symbol  [CONTEXT]  public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (input  ==  null)  {  return;  }  [BUGGY]    char[]  pt  =  input.getCharacterCount();  [BUGGY]  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	    char[]  pt  =  input.getCharacterCount();		non-compiled	[CE]  cannot  find  symbol	20	None	add
21	[BUG]  [BUGGY]    int  pt  =  input.length();  [CE]  variable  pt  is  already  defined  in  method  translate(CharSequence,Writer)  [CONTEXT]  public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  [BUGGY]    int  pt  =  input.length();  [BUGGY]  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	    int  pt  =  input.length();		non-compiled	[CE]  variable  pt  is  already  defined  in  method  translate(CharSequence,Writer)	18	None	add
22	[BUG]  [BUGGY]    input  =  input.getSequence();  [CE]  cannot  find  symbol  [CONTEXT]  public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  [BUGGY]    input  =  input.getSequence();  [BUGGY]  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	    input  =  input.getSequence();		non-compiled	[CE]  cannot  find  symbol	18	None	add
25	[BUG]  [BUGGY]    input  =  input.getSequenceCount();  [CE]  cannot  find  symbol  [CONTEXT]  public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  [BUGGY]    input  =  input.getSequenceCount();  [BUGGY]  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	    input  =  input.getSequenceCount();		non-compiled	[CE]  cannot  find  symbol	18	None	add
31	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testLang720  [CONTEXT]  public  final  String  translate(CharSequence  input)  {  if  (input  ==  null)  {  return  null;  }  try  {  [BUGGY]  StringWriter  writer  =  new  StringWriter(input.length());  [BUGGY]  translate(input,  writer);  return  writer.toString();  }  catch  (IOException  ioe)  {  throw  new  RuntimeException(ioe);  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  String  CharSequence  input  [VARIABLES]  boolean  StringWriter  writer  CharSequence  input  IOException  ioe  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.24253562503633297	58	58	1	add	StringWriter  writer  =  new  StringWriter(input.length());	StringWriter  writer  =  new  StringWriter(input.length()  *  2);  	compilable	  [FE]  ComparisonFailure  testLang720	9	1
32	[BUG]  [BUGGY]  StringWriter  writer  =  new  StringWriter(input.length());  [FE]  ComparisonFailure  testLang720  [CONTEXT]  public  final  String  translate(CharSequence  input)  {  if  (input  ==  null)  {  return  null;  }  try  {  [BUGGY]  StringWriter  writer  =  new  StringWriter(input.length());  [BUGGY]  translate(input,  writer);  return  writer.toString();  }  catch  (IOException  ioe)  {  throw  new  RuntimeException(ioe);  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  String  CharSequence  input  [VARIABLES]  boolean  StringWriter  writer  CharSequence  input  IOException  ioe  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.24253562503633297	58	58	1	replace	StringWriter  writer  =  new  StringWriter(input.length());	StringWriter  writer  =  new  StringWriter(input.length()  *  2);  	compilable	  [FE]  ComparisonFailure  testLang720	9	1	replace
33	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testLang720  [CONTEXT]  public  final  String  translate(CharSequence  input)  {  if  (input  ==  null)  {  return  null;  }  try  {  [BUGGY]  StringWriter  writer  =  new  StringWriter(input.length()  +  2);  [BUGGY]  translate(input,  writer);  return  writer.toString();  }  catch  (IOException  ioe)  {  throw  new  RuntimeException(ioe);  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  String  CharSequence  input  [VARIABLES]  boolean  StringWriter  writer  CharSequence  input  IOException  ioe  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.24253562503633297	58	58	1	add	StringWriter  writer  =  new  StringWriter(input.length()  +  2);	StringWriter  writer  =  new  StringWriter(input.length()  *  2);  	compilable	  [FE]  ComparisonFailure  testLang720	9	1
34	[BUG]  [BUGGY]  StringWriter  writer  =  new  StringWriter(input.length()  +  2);  [FE]  ComparisonFailure  testLang720  [CONTEXT]  public  final  String  translate(CharSequence  input)  {  if  (input  ==  null)  {  return  null;  }  try  {  [BUGGY]  StringWriter  writer  =  new  StringWriter(input.length()  +  2);  [BUGGY]  translate(input,  writer);  return  writer.toString();  }  catch  (IOException  ioe)  {  throw  new  RuntimeException(ioe);  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  String  CharSequence  input  [VARIABLES]  boolean  StringWriter  writer  CharSequence  input  IOException  ioe  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.24253562503633297	58	58	1	replace	StringWriter  writer  =  new  StringWriter(input.length()  +  2);	StringWriter  writer  =  new  StringWriter(input.length()  *  2);  	compilable	  [FE]  ComparisonFailure  testLang720	9	1	replace
35	[BUG]  [BUGGY]    [CE]  cannot  find  symbol  writer  [CONTEXT]  public  final  String  translate(CharSequence  input)  {  if  (input  ==  null)  {  return  null;  }  try  {  [BUGGY]    [BUGGY]  translate(input,  writer);  return  writer.toString();  }  catch  (IOException  ioe)  {  throw  new  RuntimeException(ioe);  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  String  CharSequence  input  [VARIABLES]  boolean  StringWriter  writer  CharSequence  input  IOException  ioe  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.24253562503633297	58	58	1	replace	  	StringWriter  writer  =  new  StringWriter(input.length()  *  2);  	non-compiled	[CE]  cannot  find  symbol  writer	9	None	replace
41	[BUG]  [BUGGY]    if(writer!=  null)  {  if(!Writer.isEmpty())  {  writer  =  new  StringWriter(input.length()  *  2);  }  [CE]  'catch'  without  'try'  [CONTEXT]  public  final  String  translate(CharSequence  input)  {  if  (input  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(input.length()  *  2);  [BUGGY]    if(writer!=  null)  {  if(!Writer.isEmpty())  {  writer  =  new  StringWriter(input.length()  *  2);  }  [BUGGY]  translate(input,  writer);  return  writer.toString();  }  catch  (IOException  ioe)  {  throw  new  RuntimeException(ioe);  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  String  CharSequence  input  [VARIABLES]  boolean  StringWriter  writer  CharSequence  input  IOException  ioe  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.24253562503633297	59	59	1	replace	    if(writer!=  null)  {  if(!Writer.isEmpty())  {  writer  =  new  StringWriter(input.length()  *  2);  }		non-compiled	[CE]  'catch'  without  'try'	12	None	add
42	[BUG]  [BUGGY]    if(writer!=  null)  {  if(!writer.isEmpty())  {  writer  =  new  StringWriter(input.length()  *  2);  }  [CE]  'catch'  without  'try'  [CONTEXT]  public  final  String  translate(CharSequence  input)  {  if  (input  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(input.length()  *  2);  [BUGGY]    if(writer!=  null)  {  if(!writer.isEmpty())  {  writer  =  new  StringWriter(input.length()  *  2);  }  [BUGGY]  translate(input,  writer);  return  writer.toString();  }  catch  (IOException  ioe)  {  throw  new  RuntimeException(ioe);  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  String  CharSequence  input  [VARIABLES]  boolean  StringWriter  writer  CharSequence  input  IOException  ioe  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.24253562503633297	59	59	1	replace	    if(writer!=  null)  {  if(!writer.isEmpty())  {  writer  =  new  StringWriter(input.length()  *  2);  }		non-compiled	[CE]  'catch'  without  'try'	12	None	add
43	[BUG]  [BUGGY]    if(writer!=  null)  {  if(input.length()  >  0)  {  writer  =  new  StringWriter(input.charAt(input.length()  -  1));  }  [CE]  'catch'  without  'try'  [CONTEXT]  public  final  String  translate(CharSequence  input)  {  if  (input  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(input.length()  *  2);  [BUGGY]    if(writer!=  null)  {  if(input.length()  >  0)  {  writer  =  new  StringWriter(input.charAt(input.length()  -  1));  }  [BUGGY]  translate(input,  writer);  return  writer.toString();  }  catch  (IOException  ioe)  {  throw  new  RuntimeException(ioe);  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  String  CharSequence  input  [VARIABLES]  boolean  StringWriter  writer  CharSequence  input  IOException  ioe  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.24253562503633297	59	59	1	replace	    if(writer!=  null)  {  if(input.length()  >  0)  {  writer  =  new  StringWriter(input.charAt(input.length()  -  1));  }		non-compiled	[CE]  'catch'  without  'try'	12	None	add
44	[BUG]  [BUGGY]    if(writer!=  null)  {  if(input.length()  >  0)  {  writer  =  new  StringWriter(input.charAt(input.length()  -  2));  }  [CE]  'catch'  without  'try'  [CONTEXT]  public  final  String  translate(CharSequence  input)  {  if  (input  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(input.length()  *  2);  [BUGGY]    if(writer!=  null)  {  if(input.length()  >  0)  {  writer  =  new  StringWriter(input.charAt(input.length()  -  2));  }  [BUGGY]  translate(input,  writer);  return  writer.toString();  }  catch  (IOException  ioe)  {  throw  new  RuntimeException(ioe);  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  String  CharSequence  input  [VARIABLES]  boolean  StringWriter  writer  CharSequence  input  IOException  ioe  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.24253562503633297	59	59	1	replace	    if(writer!=  null)  {  if(input.length()  >  0)  {  writer  =  new  StringWriter(input.charAt(input.length()  -  2));  }		non-compiled	[CE]  'catch'  without  'try'	12	None	add
45	[BUG]  [BUGGY]    if(writer!=  null)  {  if(!writer.isEmpty())  {  writer  =  new  StringWriter(input.toString());  }  [CE]  'catch'  without  'try'  [CONTEXT]  public  final  String  translate(CharSequence  input)  {  if  (input  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(input.length()  *  2);  [BUGGY]    if(writer!=  null)  {  if(!writer.isEmpty())  {  writer  =  new  StringWriter(input.toString());  }  [BUGGY]  translate(input,  writer);  return  writer.toString();  }  catch  (IOException  ioe)  {  throw  new  RuntimeException(ioe);  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  String  CharSequence  input  [VARIABLES]  boolean  StringWriter  writer  CharSequence  input  IOException  ioe  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.24253562503633297	59	59	1	replace	    if(writer!=  null)  {  if(!writer.isEmpty())  {  writer  =  new  StringWriter(input.toString());  }		non-compiled	[CE]  'catch'  without  'try'	12	None	add
62	[BUG]  [BUGGY]    input  =  input.next();  [CE]  cannot  find  symbol  [CONTEXT]  public  final  String  translate(CharSequence  input)  {  [BUGGY]    input  =  input.next();  [BUGGY]  if  (input  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(input.length()  *  2);  translate(input,  writer);  return  writer.toString();  }  catch  (IOException  ioe)  {  throw  new  RuntimeException(ioe);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  String  CharSequence  input  [VARIABLES]  boolean  StringWriter  writer  CharSequence  input  IOException  ioe  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.24253562503633297	54	54	1	replace	    input  =  input.next();		non-compiled	[CE]  cannot  find  symbol	8	None	add
63	[BUG]  [BUGGY]    input  =  input.getSequence();  [CE]  cannot  find  symbol  [CONTEXT]  public  final  String  translate(CharSequence  input)  {  [BUGGY]    input  =  input.getSequence();  [BUGGY]  if  (input  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(input.length()  *  2);  translate(input,  writer);  return  writer.toString();  }  catch  (IOException  ioe)  {  throw  new  RuntimeException(ioe);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  String  CharSequence  input  [VARIABLES]  boolean  StringWriter  writer  CharSequence  input  IOException  ioe  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.24253562503633297	54	54	1	replace	    input  =  input.getSequence();		non-compiled	[CE]  cannot  find  symbol	8	None	add
64	[BUG]  [BUGGY]    input  =  input.getValue();  [CE]  cannot  find  symbol  [CONTEXT]  public  final  String  translate(CharSequence  input)  {  [BUGGY]    input  =  input.getValue();  [BUGGY]  if  (input  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(input.length()  *  2);  translate(input,  writer);  return  writer.toString();  }  catch  (IOException  ioe)  {  throw  new  RuntimeException(ioe);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  String  CharSequence  input  [VARIABLES]  boolean  StringWriter  writer  CharSequence  input  IOException  ioe  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.24253562503633297	54	54	1	replace	    input  =  input.getValue();		non-compiled	[CE]  cannot  find  symbol	8	None	add
65	[BUG]  [BUGGY]    input  =  input.getSequenceCount();  [CE]  cannot  find  symbol  [CONTEXT]  public  final  String  translate(CharSequence  input)  {  [BUGGY]    input  =  input.getSequenceCount();  [BUGGY]  if  (input  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(input.length()  *  2);  translate(input,  writer);  return  writer.toString();  }  catch  (IOException  ioe)  {  throw  new  RuntimeException(ioe);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  String  CharSequence  input  [VARIABLES]  boolean  StringWriter  writer  CharSequence  input  IOException  ioe  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.24253562503633297	54	54	1	replace	    input  =  input.getSequenceCount();		non-compiled	[CE]  cannot  find  symbol	8	None	add
71	[BUG]  [BUGGY]    if(input!=  null)  {  if(out  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  [BUGGY]    if(input!=  null)  {  if(out  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	    if(input!=  null)  {  if(out  ==  null)  {  throw  new  IllegalArgumentException( " ");  }		non-compiled	[CE]  illegal  start  of  expression	16	None	add
72	[BUG]  [BUGGY]    if(input!=  null)  {  if(out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  [BUGGY]    if(input!=  null)  {  if(out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }  [BUGGY]  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	    if(input!=  null)  {  if(out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }		non-compiled	[CE]  illegal  start  of  expression	16	None	add
73	[BUG]  [BUGGY]    if(input!=  null)  {  if(out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  [BUGGY]    if(input!=  null)  {  if(out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  [BUGGY]  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	    if(input!=  null)  {  if(out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }		non-compiled	[CE]  illegal  start  of  expression	16	None	add
74	[BUG]  [BUGGY]    if(input  ==  null)  {  if(out  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  [BUGGY]    if(input  ==  null)  {  if(out  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	    if(input  ==  null)  {  if(out  ==  null)  {  throw  new  IllegalArgumentException( " ");  }		non-compiled	[CE]  illegal  start  of  expression	16	None	add
75	[BUG]  [BUGGY]    if(input  ==  null)  {  if(out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  [BUGGY]    if(input  ==  null)  {  if(out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }  [BUGGY]  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	    if(input  ==  null)  {  if(out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }		non-compiled	[CE]  illegal  start  of  expression	16	None	add
81	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testLang720  [CONTEXT]  public  final  String  translate(CharSequence  input)  {  if  (input  ==  null)  {  return  null;  }  try  {  [BUGGY]    input  =  input.toString();  [BUGGY]  StringWriter  writer  =  new  StringWriter(input.length()  *  2);  translate(input,  writer);  return  writer.toString();  }  catch  (IOException  ioe)  {  throw  new  RuntimeException(ioe);  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  String  CharSequence  input  [VARIABLES]  boolean  StringWriter  writer  CharSequence  input  IOException  ioe  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.24253562503633297	58	58	1	add	    input  =  input.toString();		compilable	  [FE]  ComparisonFailure  testLang720	10	1
82	[BUG]  [BUGGY]    input  =  input.toString();  [FE]  ComparisonFailure  testLang720  [CONTEXT]  public  final  String  translate(CharSequence  input)  {  if  (input  ==  null)  {  return  null;  }  try  {  [BUGGY]    input  =  input.toString();  [BUGGY]  StringWriter  writer  =  new  StringWriter(input.length()  *  2);  translate(input,  writer);  return  writer.toString();  }  catch  (IOException  ioe)  {  throw  new  RuntimeException(ioe);  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  String  CharSequence  input  [VARIABLES]  boolean  StringWriter  writer  CharSequence  input  IOException  ioe  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.24253562503633297	58	58	1	replace	    input  =  input.toString();		compilable	  [FE]  ComparisonFailure  testLang720	10	1	add
82	[BUG]  [BUGGY]    input  =  input.substring(0,  input.length()  -  2);  [CE]  cannot  find  symbol  [CONTEXT]  public  final  String  translate(CharSequence  input)  {  if  (input  ==  null)  {  return  null;  }  try  {  [BUGGY]    input  =  input.substring(0,  input.length()  -  2);  [BUGGY]  StringWriter  writer  =  new  StringWriter(input.length()  *  2);  translate(input,  writer);  return  writer.toString();  }  catch  (IOException  ioe)  {  throw  new  RuntimeException(ioe);  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  String  CharSequence  input  [VARIABLES]  boolean  StringWriter  writer  CharSequence  input  IOException  ioe  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.24253562503633297	58	58	1	replace	    input  =  input.substring(0,  input.length()  -  2);		non-compiled	[CE]  cannot  find  symbol	10	None	add
83	[BUG]  [BUGGY]    input  =  input.next();  [CE]  cannot  find  symbol  [CONTEXT]  public  final  String  translate(CharSequence  input)  {  if  (input  ==  null)  {  return  null;  }  try  {  [BUGGY]    input  =  input.next();  [BUGGY]  StringWriter  writer  =  new  StringWriter(input.length()  *  2);  translate(input,  writer);  return  writer.toString();  }  catch  (IOException  ioe)  {  throw  new  RuntimeException(ioe);  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  String  CharSequence  input  [VARIABLES]  boolean  StringWriter  writer  CharSequence  input  IOException  ioe  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.24253562503633297	58	58	1	replace	    input  =  input.next();		non-compiled	[CE]  cannot  find  symbol	10	None	add
84	[BUG]  [BUGGY]    input  =  input.getSequence();  [CE]  cannot  find  symbol  [CONTEXT]  public  final  String  translate(CharSequence  input)  {  if  (input  ==  null)  {  return  null;  }  try  {  [BUGGY]    input  =  input.getSequence();  [BUGGY]  StringWriter  writer  =  new  StringWriter(input.length()  *  2);  translate(input,  writer);  return  writer.toString();  }  catch  (IOException  ioe)  {  throw  new  RuntimeException(ioe);  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  String  CharSequence  input  [VARIABLES]  boolean  StringWriter  writer  CharSequence  input  IOException  ioe  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.24253562503633297	58	58	1	replace	    input  =  input.getSequence();		non-compiled	[CE]  cannot  find  symbol	10	None	add
85	[BUG]  [BUGGY]    input  =  input.trim();  [CE]  cannot  find  symbol  [CONTEXT]  public  final  String  translate(CharSequence  input)  {  if  (input  ==  null)  {  return  null;  }  try  {  [BUGGY]    input  =  input.trim();  [BUGGY]  StringWriter  writer  =  new  StringWriter(input.length()  *  2);  translate(input,  writer);  return  writer.toString();  }  catch  (IOException  ioe)  {  throw  new  RuntimeException(ioe);  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  String  CharSequence  input  [VARIABLES]  boolean  StringWriter  writer  CharSequence  input  IOException  ioe  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.24253562503633297	58	58	1	replace	    input  =  input.trim();		non-compiled	[CE]  cannot  find  symbol	10	None	add
92	[BUG]  [BUGGY]  return  writer.substring(0,  input.length()  -  2);  [CE]  cannot  find  symbol  [CONTEXT]  public  final  String  translate(CharSequence  input)  {  if  (input  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(input.length()  *  2);  translate(input,  writer);  [BUGGY]  return  writer.substring(0,  input.length()  -  2);  [BUGGY]  }  catch  (IOException  ioe)  {  throw  new  RuntimeException(ioe);  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  String  CharSequence  input  [VARIABLES]  boolean  StringWriter  writer  CharSequence  input  IOException  ioe  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.24253562503633297	60	60	1	replace	return  writer.substring(0,  input.length()  -  2);	return  writer.toString();  	non-compiled	[CE]  cannot  find  symbol	13	None	replace
94	[BUG]  [BUGGY]  return  writer.substring(0,  input.length()  -  1);  [CE]  cannot  find  symbol  [CONTEXT]  public  final  String  translate(CharSequence  input)  {  if  (input  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(input.length()  *  2);  translate(input,  writer);  [BUGGY]  return  writer.substring(0,  input.length()  -  1);  [BUGGY]  }  catch  (IOException  ioe)  {  throw  new  RuntimeException(ioe);  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  String  CharSequence  input  [VARIABLES]  boolean  StringWriter  writer  CharSequence  input  IOException  ioe  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.24253562503633297	60	60	1	replace	return  writer.substring(0,  input.length()  -  1);	return  writer.toString();  	non-compiled	[CE]  cannot  find  symbol	13	None	replace
95	[BUG]  [BUGGY]    [CE]  missing  return  statement  [CONTEXT]  public  final  String  translate(CharSequence  input)  {  if  (input  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(input.length()  *  2);  translate(input,  writer);  [BUGGY]    [BUGGY]  }  catch  (IOException  ioe)  {  throw  new  RuntimeException(ioe);  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  String  CharSequence  input  [VARIABLES]  boolean  StringWriter  writer  CharSequence  input  IOException  ioe  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.24253562503633297	60	60	1	replace	  	return  writer.toString();  	non-compiled	[CE]  missing  return  statement	13	None	replace
102	[BUG]  [BUGGY]  if(out  ==  null  ||  input.length  <  0)  {  [CE]  cannot  find  symbol  length  [CONTEXT]  public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  [BUGGY]  if(out  ==  null  ||  input.length  <  0)  {  [BUGGY]  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(out  ==  null  ||  input.length  <  0)  {	if  (out  ==  null)  {  	non-compiled	[CE]  cannot  find  symbol  length	15	None	replace
103	[BUG]  [BUGGY]  if(out  ==  null  ||  input.length  ==  0)  {  [CE]  cannot  find  symbol  length  [CONTEXT]  public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  [BUGGY]  if(out  ==  null  ||  input.length  ==  0)  {  [BUGGY]  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(out  ==  null  ||  input.length  ==  0)  {	if  (out  ==  null)  {  	non-compiled	[CE]  cannot  find  symbol  length	15	None	replace
104	[BUG]  [BUGGY]  if(out  ==  null  ||  out.length  <  0)  {  [CE]  cannot  find  symbol  length  [CONTEXT]  public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  [BUGGY]  if(out  ==  null  ||  out.length  <  0)  {  [BUGGY]  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(out  ==  null  ||  out.length  <  0)  {	if  (out  ==  null)  {  	non-compiled	[CE]  cannot  find  symbol  length	15	None	replace
122	[BUG]  [BUGGY]    pos  +=  Character.charCount(c);  [CE]  method  charCount  in  class  Character  cannot  be  applied  to  given  types;  [CONTEXT]  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  [BUGGY]    pos  +=  Character.charCount(c);  [BUGGY]  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	    pos  +=  Character.charCount(c);		non-compiled	[CE]  method  charCount  in  class  Character  cannot  be  applied  to  given  types;	4	None	add
123	[BUG]  [BUGGY]    pos  +=  Character.charCount(c,  Consumed.MAX_VALUE);  [CE]  cannot  find  symbol  Consumed  [CONTEXT]  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  [BUGGY]    pos  +=  Character.charCount(c,  Consumed.MAX_VALUE);  [BUGGY]  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	    pos  +=  Character.charCount(c,  Consumed.MAX_VALUE);		non-compiled	[CE]  cannot  find  symbol  Consumed	4	None	add
124	[BUG]  [BUGGY]    pos  +=  Character.charCount(c,  Consumed.POSITIVE_INFINITY);  [CE]  cannot  find  symbol  Consumed  [CONTEXT]  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  [BUGGY]    pos  +=  Character.charCount(c,  Consumed.POSITIVE_INFINITY);  [BUGGY]  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	    pos  +=  Character.charCount(c,  Consumed.POSITIVE_INFINITY);		non-compiled	[CE]  cannot  find  symbol  Consumed	4	None	add
125	[BUG]  [BUGGY]    pos  +=  Character.charCount(Character.codePointAt(input,  pos));  consume  =  pos;  [CE]  cannot  find  symbol  consume  [CONTEXT]  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  [BUGGY]    pos  +=  Character.charCount(Character.codePointAt(input,  pos));  consume  =  pos;  [BUGGY]  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	88	88	1	replace	    pos  +=  Character.charCount(Character.codePointAt(input,  pos));  consume  =  pos;		non-compiled	[CE]  cannot  find  symbol  consume	4	None	add
131	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testLang720  [CONTEXT]  public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  [BUGGY]  if(input  ==  null  ||  out  ==  null)  {  [BUGGY]  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	add	if(input  ==  null  ||  out  ==  null)  {	if  (input  ==  null)  {  	compilable	  [FE]  ComparisonFailure  testLang720	17	1
132	[BUG]  [BUGGY]  if(input  ==  null  ||  out  ==  null)  {  [FE]  ComparisonFailure  testLang720  [CONTEXT]  public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  [BUGGY]  if(input  ==  null  ||  out  ==  null)  {  [BUGGY]  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(input  ==  null  ||  out  ==  null)  {	if  (input  ==  null)  {  	compilable	  [FE]  ComparisonFailure  testLang720	17	1	replace
133	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length  ==  0)  {  [CE]  cannot  find  symbol  length  [CONTEXT]  public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  [BUGGY]  if(input  ==  null  ||  input.length  ==  0)  {  [BUGGY]  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(input  ==  null  ||  input.length  ==  0)  {	if  (input  ==  null)  {  	non-compiled	[CE]  cannot  find  symbol  length	17	None	replace
134	[BUG]  [BUGGY]  if(input  ==  null  ||  output.length  ==  0)  {  [CE]  cannot  find  symbol  output  [CONTEXT]  public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  [BUGGY]  if(input  ==  null  ||  output.length  ==  0)  {  [BUGGY]  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	79	79	1	replace	if(input  ==  null  ||  output.length  ==  0)  {	if  (input  ==  null)  {  	non-compiled	[CE]  cannot  find  symbol  output	17	None	replace
141	[BUG]  [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  [CE]  'else'  without  'if'  [CONTEXT]  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  [BUGGY]  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	pos  +=  Character.charCount(Character.codePointAt(input,  pos));	}  	non-compiled	[CE]  'else'  without  'if'	5	None	replace
142	[BUG]  [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  out.write(c);  [CE]  'else'  without  'if'  [CONTEXT]  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  out.write(c);  [BUGGY]  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	pos  +=  Character.charCount(Character.codePointAt(input,  pos));  out.write(c);	}  	non-compiled	[CE]  'else'  without  'if'	5	None	replace
143	[BUG]  [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  consume++;  [CE]  'else'  without  'if'  [CONTEXT]  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  consume++;  [BUGGY]  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	pos  +=  Character.charCount(Character.codePointAt(input,  pos));  consume++;	}  	non-compiled	[CE]  'else'  without  'if'	5	None	replace
144	[BUG]  [BUGGY]  pos  +=  Character.charCount(c);  [CE]  'else'  without  'if'  [CONTEXT]  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  [BUGGY]  pos  +=  Character.charCount(c);  [BUGGY]  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	pos  +=  Character.charCount(c);	}  	non-compiled	[CE]  'else'  without  'if'	5	None	replace
145	[BUG]  [BUGGY]    [CE]  'else'  without  'if'  [CONTEXT]  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  [BUGGY]    [BUGGY]  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	  	}  	non-compiled	[CE]  'else'  without  'if'	5	None	replace
152	[BUG]  [BUGGY]    pos  +=  Character.charCount(Input.toLowerCase(pos));  [CE]  cannot  find  symbol  Input  [CONTEXT]  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [BUGGY]    pos  +=  Character.charCount(Input.toLowerCase(pos));  [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	    pos  +=  Character.charCount(Input.toLowerCase(pos));		non-compiled	[CE]  cannot  find  symbol  Input	2	None	add
153	[BUG]  [BUGGY]    pos  +=  Character.charCount(Input.toLowerCase(pos));  consume++;  [CE]  cannot  find  symbol  Input  [CONTEXT]  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [BUGGY]    pos  +=  Character.charCount(Input.toLowerCase(pos));  consume++;  [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	    pos  +=  Character.charCount(Input.toLowerCase(pos));  consume++;		non-compiled	[CE]  cannot  find  symbol  Input	2	None	add
155	[BUG]  [BUGGY]    pos  +=  Character.charCount(Input.toLowerCase(input));  [CE]  cannot  find  symbol  Input  [CONTEXT]  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [BUGGY]    pos  +=  Character.charCount(Input.toLowerCase(input));  [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	    pos  +=  Character.charCount(Input.toLowerCase(input));		non-compiled	[CE]  cannot  find  symbol  Input	2	None	add
161	[BUG]  [BUGGY]    if(writer!=  null)  {  if(!writer.isEmpty())  {  throw  new  RuntimeException( " ");  }  [CE]  'catch'  without  'try'  [CONTEXT]  public  final  String  translate(CharSequence  input)  {  if  (input  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(input.length()  *  2);  translate(input,  writer);  [BUGGY]    if(writer!=  null)  {  if(!writer.isEmpty())  {  throw  new  RuntimeException( " ");  }  [BUGGY]  return  writer.toString();  }  catch  (IOException  ioe)  {  throw  new  RuntimeException(ioe);  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  String  CharSequence  input  [VARIABLES]  boolean  StringWriter  writer  CharSequence  input  IOException  ioe  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.24253562503633297	60	60	1	replace	    if(writer!=  null)  {  if(!writer.isEmpty())  {  throw  new  RuntimeException( " ");  }		non-compiled	[CE]  'catch'  without  'try'	14	None	add
162	[BUG]  [BUGGY]    if(writer!=  null)  {  if(!writer.isEmpty())  {  writer  =  new  StringWriter(input.length()  *  2);  }  [CE]  'catch'  without  'try'  [CONTEXT]  public  final  String  translate(CharSequence  input)  {  if  (input  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(input.length()  *  2);  translate(input,  writer);  [BUGGY]    if(writer!=  null)  {  if(!writer.isEmpty())  {  writer  =  new  StringWriter(input.length()  *  2);  }  [BUGGY]  return  writer.toString();  }  catch  (IOException  ioe)  {  throw  new  RuntimeException(ioe);  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  String  CharSequence  input  [VARIABLES]  boolean  StringWriter  writer  CharSequence  input  IOException  ioe  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.24253562503633297	60	60	1	replace	    if(writer!=  null)  {  if(!writer.isEmpty())  {  writer  =  new  StringWriter(input.length()  *  2);  }		non-compiled	[CE]  'catch'  without  'try'	14	None	add
163	[BUG]  [BUGGY]    if(writer!=  null)  {  if(!writer.isEmpty())  {  writer  =  new  StringWriter(input.toString());  }  [CE]  'catch'  without  'try'  [CONTEXT]  public  final  String  translate(CharSequence  input)  {  if  (input  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(input.length()  *  2);  translate(input,  writer);  [BUGGY]    if(writer!=  null)  {  if(!writer.isEmpty())  {  writer  =  new  StringWriter(input.toString());  }  [BUGGY]  return  writer.toString();  }  catch  (IOException  ioe)  {  throw  new  RuntimeException(ioe);  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  String  CharSequence  input  [VARIABLES]  boolean  StringWriter  writer  CharSequence  input  IOException  ioe  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.24253562503633297	60	60	1	replace	    if(writer!=  null)  {  if(!writer.isEmpty())  {  writer  =  new  StringWriter(input.toString());  }		non-compiled	[CE]  'catch'  without  'try'	14	None	add
164	[BUG]  [BUGGY]    if(writer!=  null)  {  if(input.length()  >  0)  {  writer  =  new  StringWriter(input.toString());  }  [CE]  'catch'  without  'try'  [CONTEXT]  public  final  String  translate(CharSequence  input)  {  if  (input  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(input.length()  *  2);  translate(input,  writer);  [BUGGY]    if(writer!=  null)  {  if(input.length()  >  0)  {  writer  =  new  StringWriter(input.toString());  }  [BUGGY]  return  writer.toString();  }  catch  (IOException  ioe)  {  throw  new  RuntimeException(ioe);  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  String  CharSequence  input  [VARIABLES]  boolean  StringWriter  writer  CharSequence  input  IOException  ioe  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.24253562503633297	60	60	1	replace	    if(writer!=  null)  {  if(input.length()  >  0)  {  writer  =  new  StringWriter(input.toString());  }		non-compiled	[CE]  'catch'  without  'try'	14	None	add
165	[BUG]  [BUGGY]    if(writer!=  null)  {  if(!writer.isEmpty())  {  writer  =  new  StringWriter(input.length());  }  [CE]  'catch'  without  'try'  [CONTEXT]  public  final  String  translate(CharSequence  input)  {  if  (input  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(input.length()  *  2);  translate(input,  writer);  [BUGGY]    if(writer!=  null)  {  if(!writer.isEmpty())  {  writer  =  new  StringWriter(input.length());  }  [BUGGY]  return  writer.toString();  }  catch  (IOException  ioe)  {  throw  new  RuntimeException(ioe);  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  String  CharSequence  input  [VARIABLES]  boolean  StringWriter  writer  CharSequence  input  IOException  ioe  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.24253562503633297	60	60	1	replace	    if(writer!=  null)  {  if(!writer.isEmpty())  {  writer  =  new  StringWriter(input.length());  }		non-compiled	[CE]  'catch'  without  'try'	14	None	add
174	[BUG]  [BUGGY]    pos  +=  Character.charCount(Character.codePointAt(input,  pos));  consume  =  pos;  [CE]  cannot  find  symbol  consume  [CONTEXT]  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  [BUGGY]    pos  +=  Character.charCount(Character.codePointAt(input,  pos));  consume  =  pos;  [BUGGY]  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	    pos  +=  Character.charCount(Character.codePointAt(input,  pos));  consume  =  pos;		non-compiled	[CE]  cannot  find  symbol  consume	6	None	add
