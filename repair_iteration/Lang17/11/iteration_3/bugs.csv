bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Char[]  input  =  input.getValues();  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  Char[]  input  =  input.getValues();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	Char[]  input  =  input.getValues();	  char[]    input    =    input.getValues();    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
2	[BUG]  [BUGGY]  CharSequence  input  =  input.getValues();  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                    ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  CharSequence  input  =  input.getValues();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	CharSequence  input  =  input.getValues();	  char[]    input    =    input.getValues();    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	92	None	replace
3	[BUG]  [BUGGY]  String  input  =  input.getValues();  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                      ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  String  input  =  input.getValues();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	String  input  =  input.getValues();	  char[]    input    =    input.getValues();    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	92	None	replace
4	[BUG]  [BUGGY]  String  inputLength  =  input.length();  [CE]  incompatible  types  [FE]        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  String  inputLength  =  input.length();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	String  inputLength  =  input.length();	  char    inputLength    =    input.length();    	non-compiled	[CE]  incompatible  types	79	None	replace
5	[BUG]  [BUGGY]  Char  inputLength  =  input.length();  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  Char  inputLength  =  input.length();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	Char  inputLength  =  input.length();	  char    inputLength    =    input.length();    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
6	[BUG]  [BUGGY]  Character  inputLength  =  input.length();  [CE]  incompatible  types  [FE]            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  Character  inputLength  =  input.length();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	Character  inputLength  =  input.length();	  char    inputLength    =    input.length();    	non-compiled	[CE]  incompatible  types	79	None	replace
7	[BUG]  [BUGGY]  Integer  pos  =  input.intValue()  +  1;  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  Integer  pos  =  input.intValue()  +  1;  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	Integer  pos  =  input.intValue()  +  1;	  Integer    pos    =    input.intValue();    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	25	None	replace
8	[BUG]  [BUGGY]  Integer  pos  =  input.intValue()  -  1;  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  Integer  pos  =  input.intValue()  -  1;  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	Integer  pos  =  input.intValue()  -  1;	  Integer    pos    =    input.intValue();    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	25	None	replace
9	[BUG]  [BUGGY]  Integer  pos  =  input.intValue()  *  2;  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  Integer  pos  =  input.intValue()  *  2;  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	Integer  pos  =  input.intValue()  *  2;	  Integer    pos    =    input.intValue();    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	25	None	replace
10	[BUG]  [BUGGY]  int  len  =  Character.codePointCount(input,  0,  input.length  -  3);  [CE]  cannot  find  symbol  length  [FE]            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  int  len  =  Character.codePointCount(input,  0,  input.length  -  3);  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	int  len  =  Character.codePointCount(input,  0,  input.length  -  3);	  int    len    =    Character.codePointCount(input,    0,    input.length    -    2);    	non-compiled	[CE]  cannot  find  symbol  length	37	None	replace
11	[BUG]  [BUGGY]  int  len  =  Character.codePointCount(input,  0,  input.length  -  4);  [CE]  cannot  find  symbol  length  [FE]              ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  int  len  =  Character.codePointCount(input,  0,  input.length  -  4);  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	int  len  =  Character.codePointCount(input,  0,  input.length  -  4);	  int    len    =    Character.codePointCount(input,    0,    input.length    -    2);    	non-compiled	[CE]  cannot  find  symbol  length	37	None	replace
12	[BUG]  [BUGGY]  Integer  len  =  Character.codePointCount(input,  0,  input.length());  int  len  =  Character.codePointCount(input,  0,  input.length());  [CE]  variable  len  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]        IndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  Integer  len  =  Character.codePointCount(input,  0,  input.length());  int  len  =  Character.codePointCount(input,  0,  input.length());  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	Integer  len  =  Character.codePointCount(input,  0,  input.length());  int  len  =  Character.codePointCount(input,  0,  input.length());	  int    len    =    Character.codePointCount(input,    0,    input.length()    -    2);    int    len    =    Character.codePointCount(input,    0,    input.length()    -    2);    	non-compiled	[CE]  variable  len  is  already  defined  in  method  translate(CharSequence,Writer)	42	None	replace
13	[BUG]  [BUGGY]  int  input  =  this.input.length()  -  input.length();  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]              ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  int  input  =  this.input.length()  -  input.length();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	int  input  =  this.input.length()  -  input.length();	  int    input    =    input.length()    -    this.input.length();    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	88	None	replace
14	[BUG]  [BUGGY]  char  input  =  input.length()  -  this.input.length();  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  char  input  =  input.length()  -  this.input.length();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	char  input  =  input.length()  -  this.input.length();	  int    input    =    input.length()    -    this.input.length();    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	88	None	replace
15	[BUG]  [BUGGY]  int  input  =  output.length()  -  this.input.length();  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                  ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  int  input  =  output.length()  -  this.input.length();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	int  input  =  output.length()  -  this.input.length();	  int    input    =    input.length()    -    this.input.length();    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	88	None	replace
16	[BUG]  [BUGGY]  [FE]  IndexOutOfBoundsException  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  Integer  len  =  Character.codePointCount(input,  0,  input.length()  -  1);  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	add	Integer  len  =  Character.codePointCount(input,  0,  input.length()  -  1);	  Integer    len    =    Character.codePointCount(input,    0,    input.length());    	compilable	  [FE]  IndexOutOfBoundsException  	35	15	replace
17	[BUG]  [BUGGY]  Integer  len  =  Character.codePointCount(input,  0,  input.length()  -  1);  [FE]  IndexOutOfBoundsException  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  Integer  len  =  Character.codePointCount(input,  0,  input.length()  -  1);  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	Integer  len  =  Character.codePointCount(input,  0,  input.length()  -  1);	  Integer    len    =    Character.codePointCount(input,    0,    input.length());    	compilable	  [FE]  IndexOutOfBoundsException  	35	15	replace
18	[BUG]  [BUGGY]  [FE]  IndexOutOfBoundsException  [FE]      ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  Integer  len  =  Character.codePointCount(input,  0,  input.length()  -  2);  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	add	Integer  len  =  Character.codePointCount(input,  0,  input.length()  -  2);	  Integer    len    =    Character.codePointCount(input,    0,    input.length());    	compilable	  [FE]  IndexOutOfBoundsException  	35	16	replace
19	[BUG]  [BUGGY]  Integer  len  =  Character.codePointCount(input,  0,  input.length()  -  2);  [FE]  IndexOutOfBoundsException  [FE]      ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  Integer  len  =  Character.codePointCount(input,  0,  input.length()  -  2);  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	Integer  len  =  Character.codePointCount(input,  0,  input.length()  -  2);	  Integer    len    =    Character.codePointCount(input,    0,    input.length());    	compilable	  [FE]  IndexOutOfBoundsException  	35	16	replace
20	[BUG]  [BUGGY]  [FE]  IndexOutOfBoundsException  [FE]        ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  Integer  len  =  Character.codePointCount(input,  0,  input.length()  +  1);  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	add	Integer  len  =  Character.codePointCount(input,  0,  input.length()  +  1);	  Integer    len    =    Character.codePointCount(input,    0,    input.length());    	compilable	  [FE]  IndexOutOfBoundsException  	35	19	replace
21	[BUG]  [BUGGY]  Integer  len  =  Character.codePointCount(input,  0,  input.length()  +  1);  [FE]  IndexOutOfBoundsException  [FE]        ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  Integer  len  =  Character.codePointCount(input,  0,  input.length()  +  1);  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	Integer  len  =  Character.codePointCount(input,  0,  input.length()  +  1);	  Integer    len    =    Character.codePointCount(input,    0,    input.length());    	compilable	  [FE]  IndexOutOfBoundsException  	35	19	replace
22	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  Integer  len  =  Character.codePointCount(input,  pos,  input.length());  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	add	Integer  len  =  Character.codePointCount(input,  pos,  input.length());	  Integer    len    =    Character.codePointCount(input,    0,    input.length());    	compilable	  [FE]  ComparisonFailure  	35	1	replace
23	[BUG]  [BUGGY]  Integer  len  =  Character.codePointCount(input,  pos,  input.length());  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  Integer  len  =  Character.codePointCount(input,  pos,  input.length());  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	Integer  len  =  Character.codePointCount(input,  pos,  input.length());	  Integer    len    =    Character.codePointCount(input,    0,    input.length());    	compilable	  [FE]  ComparisonFailure  	35	1	replace
24	[BUG]  [BUGGY]  out.write(Input.charAt(pos));  [CE]  cannot  find  symbol  Input  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  out.write(Input.charAt(pos));  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	out.write(Input.charAt(pos));	          out.write(input.charAt(pos));    out.write(Input.charAt(pos));    	non-compiled	[CE]  cannot  find  symbol  Input	73	None	replace
25	[BUG]  [BUGGY]  if(pos  <  input.length())  {  out.write(input.charAt(pos));  out.write(Input.charAt(pos));  }  [CE]  cannot  find  symbol  Input  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  if(pos  <  input.length())  {  out.write(input.charAt(pos));  out.write(Input.charAt(pos));  }  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	if(pos  <  input.length())  {  out.write(input.charAt(pos));  out.write(Input.charAt(pos));  }	          out.write(input.charAt(pos));    out.write(Input.charAt(pos));    	non-compiled	[CE]  cannot  find  symbol  Input	73	None	replace
26	[BUG]  [BUGGY]  if(pos  <  input.length())  {  out.write(input.charAt(pos));  out.write(Input.charAt(pos));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  Input  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  if(pos  <  input.length())  {  out.write(input.charAt(pos));  out.write(Input.charAt(pos));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	if(pos  <  input.length())  {  out.write(input.charAt(pos));  out.write(Input.charAt(pos));  }  else  {  throw  new  IllegalArgumentException( " ");  }	          out.write(input.charAt(pos));    out.write(Input.charAt(pos));    	non-compiled	[CE]  cannot  find  symbol  Input	73	None	replace
27	[BUG]  [BUGGY]  int  len  =  Character.codePointCount(input,  pos,  input.length()  -  1);  int  len  =  Character.codePointCount(input,  pos,  input.length()  -  1);  [CE]  variable  len  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]    IndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  int  len  =  Character.codePointCount(input,  pos,  input.length()  -  1);  int  len  =  Character.codePointCount(input,  pos,  input.length()  -  1);  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	int    len    =    Character.codePointCount(input,    pos,    input.length()    -    1);    int  len  =  Character.codePointCount(input,  pos,  input.length()  -  1);	  	non-compiled	[CE]  variable  len  is  already  defined  in  method  translate(CharSequence,Writer)	32	None	add
28	[BUG]  [BUGGY]  int  len  =  Character.codePointCount(input,  pos,  input.length()  -  1);  int  len  =  Character.codePointCount(input,  pos,  output.length()  -  1);  [CE]  variable  len  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]      IndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  int  len  =  Character.codePointCount(input,  pos,  input.length()  -  1);  int  len  =  Character.codePointCount(input,  pos,  output.length()  -  1);  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	int    len    =    Character.codePointCount(input,    pos,    input.length()    -    1);    int  len  =  Character.codePointCount(input,  pos,  output.length()  -  1);	  	non-compiled	[CE]  variable  len  is  already  defined  in  method  translate(CharSequence,Writer)	32	None	add
29	[BUG]  [BUGGY]  int  len  =  Character.codePointCount(input,  pos,  input.length()  -  1);  Int  len  =  Character.codePointCount(input,  pos,  input.length()  -  1);  [CE]  cannot  find  symbol  [FE]        IndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  int  len  =  Character.codePointCount(input,  pos,  input.length()  -  1);  Int  len  =  Character.codePointCount(input,  pos,  input.length()  -  1);  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	int    len    =    Character.codePointCount(input,    pos,    input.length()    -    1);    Int  len  =  Character.codePointCount(input,  pos,  input.length()  -  1);	  	non-compiled	[CE]  cannot  find  symbol	32	None	add
30	[BUG]  [BUGGY]  int  len  =  Character.codePointCount(input,  pos,  input.length()  -  1);  Integer  len  =  Character.codePointCount(input,  pos,  input.length()  -  1);  [CE]  variable  len  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]          IndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  int  len  =  Character.codePointCount(input,  pos,  input.length()  -  1);  Integer  len  =  Character.codePointCount(input,  pos,  input.length()  -  1);  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	int    len    =    Character.codePointCount(input,    pos,    input.length()    -    1);    Integer  len  =  Character.codePointCount(input,  pos,  input.length()  -  1);	  	non-compiled	[CE]  variable  len  is  already  defined  in  method  translate(CharSequence,Writer)	32	None	add
31	[BUG]  [BUGGY]  pos  =  input.length()  /  2;  [CE]  cannot  find  symbol  len  [FE]            AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  pos  =  input.length()  /  2;  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	pos  =  input.length()  /  2;	  pos    =    input.length()    *    2;    	non-compiled	[CE]  cannot  find  symbol  len	11	None	replace
32	[BUG]  [BUGGY]  pos  =  input.length()  +  2;  [CE]  cannot  find  symbol  len  [FE]              AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  pos  =  input.length()  +  2;  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	pos  =  input.length()  +  2;	  pos    =    input.length()    *    2;    	non-compiled	[CE]  cannot  find  symbol  len	11	None	replace
33	[BUG]  [BUGGY]  Input  input  =  this.input.getKey();  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  Input  input  =  this.input.getKey();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	Input  input  =  this.input.getKey();	  Input    input    =    input.getKey();    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
34	[BUG]  [BUGGY]  Input  input  =  output.getKey();  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  Input  input  =  output.getKey();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	Input  input  =  output.getKey();	  Input    input    =    input.getKey();    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
35	[BUG]  [BUGGY]  char  input  =  input.length()  -  out.length();  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  char  input  =  input.length()  -  out.length();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	char  input  =  input.length()  -  out.length();	  int    input    =    input.length()    -    out.length();    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	87	None	replace
36	[BUG]  [BUGGY]  int  input  =  input.length()  *  out.length();  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]              ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  int  input  =  input.length()  *  out.length();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	int  input  =  input.length()  *  out.length();	  int    input    =    input.length()    -    out.length();    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	87	None	replace
37	[BUG]  [BUGGY]  pos  =  input.length()  +  charAt(pos);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  pos  =  input.length()  +  charAt(pos);  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	pos  =  input.length()  +  charAt(pos);	  pos    =    input.length()    +    out.charAt(pos);    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
38	[BUG]  [BUGGY]  pos  =  input.length()  +  in.charAt(pos);  [CE]  cannot  find  symbol  in  [FE]          AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  pos  =  input.length()  +  in.charAt(pos);  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	pos  =  input.length()  +  in.charAt(pos);	  pos    =    input.length()    +    out.charAt(pos);    	non-compiled	[CE]  cannot  find  symbol  in	82	None	replace
39	[BUG]  [BUGGY]  pos  =  input.length()  +  output.charAt(pos);  [CE]  cannot  find  symbol  output  [FE]            AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  pos  =  input.length()  +  output.charAt(pos);  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	pos  =  input.length()  +  output.charAt(pos);	  pos    =    input.length()    +    out.charAt(pos);    	non-compiled	[CE]  cannot  find  symbol  output	82	None	replace
40	[BUG]  [BUGGY]  int  pos  =  input.getLength()  +  1;  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                    ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  int  pos  =  input.getLength()  +  1;  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	int  pos  =  input.getLength()  +  1;	  int    pos    =    input.getLength();    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	93	None	replace
41	[BUG]  [BUGGY]  int  pos  =  input.getLength()  -  1;  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                      ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  int  pos  =  input.getLength()  -  1;  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	int  pos  =  input.getLength()  -  1;	  int    pos    =    input.getLength();    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	93	None	replace
42	[BUG]  [BUGGY]  int  pos  =  input.getCharSequenceLength();  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  int  pos  =  input.getCharSequenceLength();  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	int  pos  =  input.getCharSequenceLength();	  int    pos    =    input.getLength();    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	93	None	replace
43	[BUG]  [BUGGY]  int  len  =  Character.codePointCount(input,  pos,  input.length  -  2);  [CE]  cannot  find  symbol  length  [FE]              ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  int  len  =  Character.codePointCount(input,  pos,  input.length  -  2);  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	int  len  =  Character.codePointCount(input,  pos,  input.length  -  2);	  int    len    =    Character.codePointCount(input,    pos,    input.length    -    1);    	non-compiled	[CE]  cannot  find  symbol  length	38	None	replace
44	[BUG]  [BUGGY]  int  len  =  Character.codePointCount(input,  pos,  out.length  -  1);  [CE]  cannot  find  symbol  length  [FE]                ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  int  len  =  Character.codePointCount(input,  pos,  out.length  -  1);  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	int  len  =  Character.codePointCount(input,  pos,  out.length  -  1);	  int    len    =    Character.codePointCount(input,    pos,    input.length    -    1);    	non-compiled	[CE]  cannot  find  symbol  length	38	None	replace
45	[BUG]  [BUGGY]  Input  output  =  input.getValue();  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  Input  output  =  input.getValue();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	Input  output  =  input.getValue();	  Input    input    =    output.getValue();    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
46	[BUG]  [BUGGY]  Char[]  input  =  output.getChars();  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  Char[]  input  =  output.getChars();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	Char[]  input  =  output.getChars();	  Char[]    input    =    input.getChars();    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
47	[BUG]  [BUGGY]  Char[]  input  =  this.input.getChars();  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  Char[]  input  =  this.input.getChars();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	Char[]  input  =  this.input.getChars();	  Char[]    input    =    input.getChars();    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
48	[BUG]  [BUGGY]  char[]  input  =  input.toChars(pos,  out);  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                    ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  char[]  input  =  input.toChars(pos,  out);  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	char[]  input  =  input.toChars(pos,  out);	  char[]    input    =    input.toChars(pos);    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	39	None	replace
49	[BUG]  [BUGGY]  char[]  input  =  input.toChars(pos  +  1);  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                      ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  char[]  input  =  input.toChars(pos  +  1);  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	char[]  input  =  input.toChars(pos  +  1);	  char[]    input    =    input.toChars(pos);    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	39	None	replace
50	[BUG]  [BUGGY]  char[]  input  =  input.toChars(pos)+  1;  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  char[]  input  =  input.toChars(pos)+  1;  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	char[]  input  =  input.toChars(pos)+  1;	  char[]    input    =    input.toChars(pos);    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	39	None	replace
51	[BUG]  [BUGGY]  out.write(input.charAt(pos  +  1));  char[]  input  =  input.getChars();  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  out.write(input.charAt(pos  +  1));  char[]  input  =  input.getChars();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	out.write(input.charAt(pos  +  1));  char[]  input  =  input.getChars();	          out.write(input.charAt(pos));    char[]    input    =    input.getChars();    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	19	None	replace
52	[BUG]  [BUGGY]  if(pos  >  0)  {  out.write(input.charAt(0));  out.write(input.charAt(0));  }  [CE]  cannot  find  symbol  len  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  if(pos  >  0)  {  out.write(input.charAt(0));  out.write(input.charAt(0));  }  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	if(pos  >  0)  {  out.write(input.charAt(0));  out.write(input.charAt(0));  }	          out.write(input.charAt(pos));    out.write(input.charAt(pos));    	non-compiled	[CE]  cannot  find  symbol  len	17	None	replace
53	[BUG]  [BUGGY]  if(pos  <  input.length())  {  out.write(input.charAt(0));  out.write(input.charAt(0));  }  [CE]  cannot  find  symbol  len  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  if(pos  <  input.length())  {  out.write(input.charAt(0));  out.write(input.charAt(0));  }  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	if(pos  <  input.length())  {  out.write(input.charAt(0));  out.write(input.charAt(0));  }	          out.write(input.charAt(pos));    out.write(input.charAt(pos));    	non-compiled	[CE]  cannot  find  symbol  len	17	None	replace
54	[BUG]  [BUGGY]  if(pos  >  0)  {  out.write(input.charAt(pos));  out.write(input.charAt(pos));  }  [CE]  cannot  find  symbol  len  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  if(pos  >  0)  {  out.write(input.charAt(pos));  out.write(input.charAt(pos));  }  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	if(pos  >  0)  {  out.write(input.charAt(pos));  out.write(input.charAt(pos));  }	          out.write(input.charAt(pos));    out.write(input.charAt(pos));    	non-compiled	[CE]  cannot  find  symbol  len	17	None	replace
55	[BUG]  [BUGGY]  out.write(input.charAt(pos  +  1)+  1);  [CE]  cannot  find  symbol  len  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  out.write(input.charAt(pos  +  1)+  1);  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	out.write(input.charAt(pos  +  1)+  1);	  out.write(input.charAt(pos)+    1);    	non-compiled	[CE]  cannot  find  symbol  len	31	None	replace
56	[BUG]  [BUGGY]  out.write(input.charAt(pos)+  2);  [CE]  cannot  find  symbol  len  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  out.write(input.charAt(pos)+  2);  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	out.write(input.charAt(pos)+  2);	  out.write(input.charAt(pos)+    1);    	non-compiled	[CE]  cannot  find  symbol  len	31	None	replace
57	[BUG]  [BUGGY]  Char  len  =  Character.codePointCount(input,  0,  input.length()  -  1);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  Char  len  =  Character.codePointCount(input,  0,  input.length()  -  1);  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	Char  len  =  Character.codePointCount(input,  0,  input.length()  -  1);	  Char    len    =    Character.codePointCount(input,    0,    input.length());    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
58	[BUG]  [BUGGY]  Char  len  =  Character.codePointCount(input,  0,  input.length()  -  2);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  Char  len  =  Character.codePointCount(input,  0,  input.length()  -  2);  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	Char  len  =  Character.codePointCount(input,  0,  input.length()  -  2);	  Char    len    =    Character.codePointCount(input,    0,    input.length());    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
59	[BUG]  [BUGGY]  char[]  inputLength  =  input.length();  [CE]  incompatible  types  [FE]            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  char[]  inputLength  =  input.length();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	char[]  inputLength  =  input.length();	          int    inputLength    =    input.length();    char[]    inputLength    =    input.length();    	non-compiled	[CE]  incompatible  types	3	None	replace
60	[BUG]  [BUGGY]  Integer  inputLength  =  input.length();  char[]  inputLength  =  input.length();  [CE]  variable  inputLength  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]              ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  Integer  inputLength  =  input.length();  char[]  inputLength  =  input.length();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	Integer  inputLength  =  input.length();  char[]  inputLength  =  input.length();	          int    inputLength    =    input.length();    char[]    inputLength    =    input.length();    	non-compiled	[CE]  variable  inputLength  is  already  defined  in  method  translate(CharSequence,Writer)	3	None	replace
61	[BUG]  [BUGGY]  Input  input  =  this.inputStream.getValue();  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  Input  input  =  this.inputStream.getValue();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	Input  input  =  this.inputStream.getValue();	  Input    input    =    inputStream.getValue();    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
62	[BUG]  [BUGGY]  Input  input  =  outputStream.getValue();  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  Input  input  =  outputStream.getValue();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	Input  input  =  outputStream.getValue();	  Input    input    =    inputStream.getValue();    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
63	[BUG]  [BUGGY]  InputStream  input  =  input.length();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  InputStream  input  =  input.length();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	InputStream  input  =  input.length();	          pos    =    input.length();    InputStream    input    =    input.length();    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
64	[BUG]  [BUGGY]  pos  =  input.length();  InputStream  input  =  input.input.length();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  pos  =  input.length();  InputStream  input  =  input.input.length();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	pos  =  input.length();  InputStream  input  =  input.input.length();	          pos    =    input.length();    InputStream    input    =    input.length();    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
65	[BUG]  [BUGGY]  int  pos  =  input.length();  InputStream  input  =  input.length();  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]            AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  int  pos  =  input.length();  InputStream  input  =  input.length();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	int  pos  =  input.length();  InputStream  input  =  input.length();	          pos    =    input.length();    InputStream    input    =    input.length();    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	74	None	replace
66	[BUG]  [BUGGY]  pos  =  input.length();  InputStream  input  =  input.read();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  pos  =  input.length();  InputStream  input  =  input.read();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	pos  =  input.length();  InputStream  input  =  input.read();	          pos    =    input.length();    InputStream    input    =    input.length();    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
67	[BUG]  [BUGGY]  int  outputLength  =  input.length();  [CE]  cannot  find  symbol  len  [FE]            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  int  outputLength  =  input.length();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	int  outputLength  =  input.length();	  int    inputLength    =    input.length()    -    2;    	non-compiled	[CE]  cannot  find  symbol  len	8	None	replace
68	[BUG]  [BUGGY]  int  inputLength  =  output.length();  [CE]  cannot  find  symbol  output  [FE]              ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  int  inputLength  =  output.length();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	int  inputLength  =  output.length();	  int    inputLength    =    input.length()    -    2;    	non-compiled	[CE]  cannot  find  symbol  output	8	None	replace
69	[BUG]  [BUGGY]  Integer  inputLength  =  input.length();  [CE]  cannot  find  symbol  len  [FE]        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  Integer  inputLength  =  input.length();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	Integer  inputLength  =  input.length();	          int    inputLength    =    input.length();    int    inputLength    =    input.length();    	non-compiled	[CE]  cannot  find  symbol  len	1	None	replace
70	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    IndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  int  len  =  Character.codePointCount(input,  pos,  input.length());  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	add	int  len  =  Character.codePointCount(input,  pos,  input.length());	  int    len    =    Character.codePointCount(input,    pos,    input.length()    -    1);    	compilable	  [FE]  ComparisonFailure  	33	1	replace
71	[BUG]  [BUGGY]  int  len  =  Character.codePointCount(input,  pos,  input.length());  [FE]  ComparisonFailure  [FE]    IndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  int  len  =  Character.codePointCount(input,  pos,  input.length());  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	int  len  =  Character.codePointCount(input,  pos,  input.length());	  int    len    =    Character.codePointCount(input,    pos,    input.length()    -    1);    	compilable	  [FE]  ComparisonFailure  	33	1	replace
72	[BUG]  [BUGGY]  int  len  =  Character.codePointCount(input,  pos,  output.length());  [CE]  cannot  find  symbol  output  [FE]      IndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  int  len  =  Character.codePointCount(input,  pos,  output.length());  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	int  len  =  Character.codePointCount(input,  pos,  output.length());	  int    len    =    Character.codePointCount(input,    pos,    input.length()    -    1);    	non-compiled	[CE]  cannot  find  symbol  output	33	None	replace
73	[BUG]  [BUGGY]  Integer  len  =  Character.codePointCount(input,  0,  output.length());  [CE]  cannot  find  symbol  output  [FE]            IndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  Integer  len  =  Character.codePointCount(input,  0,  output.length());  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	Integer  len  =  Character.codePointCount(input,  0,  output.length());	  int    len    =    Character.codePointCount(input,    0,    input.length()    -    2);    int    len    =    Character.codePointCount(input,    0,    output.length()    -    2);    	non-compiled	[CE]  cannot  find  symbol  output	44	None	replace
74	[BUG]  [BUGGY]  Integer  len  =  Character.codePointCount(input,  0,  input.length());  int  len  =  Character.codePointCount(input,  1,  input.length());  [CE]  variable  len  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]              IndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  Integer  len  =  Character.codePointCount(input,  0,  input.length());  int  len  =  Character.codePointCount(input,  1,  input.length());  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	Integer  len  =  Character.codePointCount(input,  0,  input.length());  int  len  =  Character.codePointCount(input,  1,  input.length());	  int    len    =    Character.codePointCount(input,    0,    input.length()    -    3);    int    len    =    Character.codePointCount(input,    1,    input.length()    -    3);    	non-compiled	[CE]  variable  len  is  already  defined  in  method  translate(CharSequence,Writer)	62	None	replace
75	[BUG]  [BUGGY]  int  len  =  Character.codePointCount(input,  0,  input.length());  int  len  =  Character.codePointCount(input,  1,  input.length());  [CE]  variable  len  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                IndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  int  len  =  Character.codePointCount(input,  0,  input.length());  int  len  =  Character.codePointCount(input,  1,  input.length());  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	int  len  =  Character.codePointCount(input,  0,  input.length());  int  len  =  Character.codePointCount(input,  1,  input.length());	  int    len    =    Character.codePointCount(input,    0,    input.length()    -    3);    int    len    =    Character.codePointCount(input,    1,    input.length()    -    3);    	non-compiled	[CE]  variable  len  is  already  defined  in  method  translate(CharSequence,Writer)	62	None	replace
76	[BUG]  [BUGGY]  char  len  =  Character.codePointCount(input,  0,  input.length());  int  len  =  Character.codePointCount(input,  1,  input.length());  [CE]  possible  loss  of  precision  [FE]                  IndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  char  len  =  Character.codePointCount(input,  0,  input.length());  int  len  =  Character.codePointCount(input,  1,  input.length());  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	char  len  =  Character.codePointCount(input,  0,  input.length());  int  len  =  Character.codePointCount(input,  1,  input.length());	  int    len    =    Character.codePointCount(input,    0,    input.length()    -    3);    int    len    =    Character.codePointCount(input,    1,    input.length()    -    3);    	non-compiled	[CE]  possible  loss  of  precision	62	None	replace
77	[BUG]  [BUGGY]  Integer  input  =  input.length();  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                  ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  Integer  input  =  input.length();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	Integer  input  =  input.length();	  int    input    =    input.length()    -    1;    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	26	None	replace
78	[BUG]  [BUGGY]  Integer  len  =  Character.codePointCount(input,  0,  input.length());  Integer  len  =  Character.codePointCount(input,  0,  input.length());  [CE]  variable  len  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  Integer  len  =  Character.codePointCount(input,  0,  input.length());  Integer  len  =  Character.codePointCount(input,  0,  input.length());  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	Integer    len    =    Character.codePointCount(input,    0,    input.length());    Integer  len  =  Character.codePointCount(input,  0,  input.length());	  	non-compiled	[CE]  variable  len  is  already  defined  in  method  translate(CharSequence,Writer)	34	None	add
79	[BUG]  [BUGGY]  Integer  len  =  Character.codePointCount(input,  0,  input.length());  Integer  len  =  Character.codePointCount(input,  0,  input.length());  pos  =  0;  [CE]  variable  len  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]      ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  Integer  len  =  Character.codePointCount(input,  0,  input.length());  Integer  len  =  Character.codePointCount(input,  0,  input.length());  pos  =  0;  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	Integer    len    =    Character.codePointCount(input,    0,    input.length());    Integer  len  =  Character.codePointCount(input,  0,  input.length());  pos  =  0;	  	non-compiled	[CE]  variable  len  is  already  defined  in  method  translate(CharSequence,Writer)	34	None	add
80	[BUG]  [BUGGY]  Integer  len  =  Character.codePointCount(input,  0,  input.length());  Integer  len  =  Character.codePointCount(input,  0,  output.length());  [CE]  variable  len  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]        ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  Integer  len  =  Character.codePointCount(input,  0,  input.length());  Integer  len  =  Character.codePointCount(input,  0,  output.length());  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	Integer    len    =    Character.codePointCount(input,    0,    input.length());    Integer  len  =  Character.codePointCount(input,  0,  output.length());	  	non-compiled	[CE]  variable  len  is  already  defined  in  method  translate(CharSequence,Writer)	34	None	add
81	[BUG]  [BUGGY]  String  input  =  input.length();  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                    ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  String  input  =  input.length();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	String  input  =  input.length();	  char    input    =    input.length();    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	27	None	replace
82	[BUG]  [BUGGY]  Char  input  =  input.length();  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  Char  input  =  input.length();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	Char  input  =  input.length();	  char    input    =    input.length();    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
83	[BUG]  [BUGGY]  [FE]  IndexOutOfBoundsException  [FE]        IndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  int  len  =  Character.codePointCount(input,  1,  input.length());  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	add	int  len  =  Character.codePointCount(input,  1,  input.length());	  int    len    =    Character.codePointCount(input,    0,    input.length()    -    2);    int    len    =    Character.codePointCount(input,    1,    input.length()    -    2);    	compilable	  [FE]  IndexOutOfBoundsException  	90	15	replace
84	[BUG]  [BUGGY]  int  len  =  Character.codePointCount(input,  1,  input.length());  [FE]  IndexOutOfBoundsException  [FE]        IndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  int  len  =  Character.codePointCount(input,  1,  input.length());  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	int  len  =  Character.codePointCount(input,  1,  input.length());	  int    len    =    Character.codePointCount(input,    0,    input.length()    -    2);    int    len    =    Character.codePointCount(input,    1,    input.length()    -    2);    	compilable	  [FE]  IndexOutOfBoundsException  	90	15	replace
85	[BUG]  [BUGGY]  Input  pos  =  input.length();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  Input  pos  =  input.length();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	Input  pos  =  input.length();	          pos    =    input.length();    Input    pos    =    input.length();    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
86	[BUG]  [BUGGY]  int  pos  =  input.length();  Input  pos  =  input.length();  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  int  pos  =  input.length();  Input  pos  =  input.length();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	int  pos  =  input.length();  Input  pos  =  input.length();	          pos    =    input.length();    Input    pos    =    input.length();    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	57	None	replace
87	[BUG]  [BUGGY]  int  len  =  Character.codePointCount(input,  0,  input.length());  Int  len  =  Character.codePointCount(input,  0,  input.length());  [CE]  cannot  find  symbol  [FE]          IndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  int  len  =  Character.codePointCount(input,  0,  input.length());  Int  len  =  Character.codePointCount(input,  0,  input.length());  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	int  len  =  Character.codePointCount(input,  0,  input.length());  Int  len  =  Character.codePointCount(input,  0,  input.length());	  int    len    =    Character.codePointCount(input,    0,    input.length()    -    3);    Int    len    =    Character.codePointCount(input,    0,    input.length()    -    3);    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
88	[BUG]  [BUGGY]  Int  len  =  Character.codePointCount(input,  0,  input.length());  [CE]  cannot  find  symbol  [FE]            IndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  Int  len  =  Character.codePointCount(input,  0,  input.length());  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	Int  len  =  Character.codePointCount(input,  0,  input.length());	  int    len    =    Character.codePointCount(input,    0,    input.length()    -    3);    Int    len    =    Character.codePointCount(input,    0,    input.length()    -    3);    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
89	[BUG]  [BUGGY]  Int  len  =  Character.codePointCount(input,  0,  input.length());  Int  len  =  Character.codePointCount(input,  0,  input.length());  [CE]  cannot  find  symbol  [FE]              IndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  Int  len  =  Character.codePointCount(input,  0,  input.length());  Int  len  =  Character.codePointCount(input,  0,  input.length());  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	Int  len  =  Character.codePointCount(input,  0,  input.length());  Int  len  =  Character.codePointCount(input,  0,  input.length());	  int    len    =    Character.codePointCount(input,    0,    input.length()    -    3);    Int    len    =    Character.codePointCount(input,    0,    input.length()    -    3);    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
90	[BUG]  [BUGGY]  if(input!=  null)  {  pos  =  input.length();  pos  =  input.length();  }  [CE]  cannot  find  symbol  len  [FE]    AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  if(input!=  null)  {  pos  =  input.length();  pos  =  input.length();  }  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	if(input!=  null)  {  pos  =  input.length();  pos  =  input.length();  }	          pos    =    input.length();    pos    =    input.length();    	non-compiled	[CE]  cannot  find  symbol  len	54	None	replace
91	[BUG]  [BUGGY]  if(input.length()  >  0)  {  pos  =  input.length();  pos  =  input.length();  }  [CE]  cannot  find  symbol  len  [FE]      AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  if(input.length()  >  0)  {  pos  =  input.length();  pos  =  input.length();  }  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	if(input.length()  >  0)  {  pos  =  input.length();  pos  =  input.length();  }	          pos    =    input.length();    pos    =    input.length();    	non-compiled	[CE]  cannot  find  symbol  len	54	None	replace
92	[BUG]  [BUGGY]  if(input.length()  >  0)  {  pos  =  input.length();  pos  =  input.length();  }  else  {  out.write('n');  }  [CE]  cannot  find  symbol  len  [FE]        AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  if(input.length()  >  0)  {  pos  =  input.length();  pos  =  input.length();  }  else  {  out.write('n');  }  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	if(input.length()  >  0)  {  pos  =  input.length();  pos  =  input.length();  }  else  {  out.write('n');  }	          pos    =    input.length();    pos    =    input.length();    	non-compiled	[CE]  cannot  find  symbol  len	54	None	replace
93	[BUG]  [BUGGY]  Character  len  =  Character.codePointCount(input,  pos,  0,  input.length()  -  1);  [CE]  no  suitable  method  found  for  codePointCount(CharSequence,int,int,int)  [FE]                        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  Character  len  =  Character.codePointCount(input,  pos,  0,  input.length()  -  1);  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	Character  len  =  Character.codePointCount(input,  pos,  0,  input.length()  -  1);	  Character    len    =    Character.codePointCount(input,    0,    input.length()    -    1);    	non-compiled	[CE]  no  suitable  method  found  for  codePointCount(CharSequence,int,int,int)	70	None	replace
94	[BUG]  [BUGGY]  Character  len  =  Character.codePointCount(input,  pos,  input.length()  -  1);  [CE]  incompatible  types  [FE]                          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  Character  len  =  Character.codePointCount(input,  pos,  input.length()  -  1);  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	Character  len  =  Character.codePointCount(input,  pos,  input.length()  -  1);	  Character    len    =    Character.codePointCount(input,    0,    input.length()    -    1);    	non-compiled	[CE]  incompatible  types	70	None	replace
95	[BUG]  [BUGGY]  Char[]  input  =  input.toCharsArray();  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  Char[]  input  =  input.toCharsArray();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	Char[]  input  =  input.toCharsArray();	  char[]    input    =    input.toCharsArray();    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
96	[BUG]  [BUGGY]  char[]  input  =  output.toCharsArray();  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  char[]  input  =  output.toCharsArray();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	char[]  input  =  output.toCharsArray();	  char[]    input    =    input.toCharsArray();    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	40	None	replace
97	[BUG]  [BUGGY]  out.write(Integer.toString(input.charAt(pos  -  1));  [CE]  ')'  expected  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  out.write(Integer.toString(input.charAt(pos  -  1));  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	out.write(Integer.toString(input.charAt(pos  -  1));	  out.write(input.charAt(pos    -    1));    	non-compiled	[CE]  ')'  expected	29	None	replace
98	[BUG]  [BUGGY]  out.write(Integer.toString(input.charAt(pos  -  1)));  [CE]  cannot  find  symbol  len  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  out.write(Integer.toString(input.charAt(pos  -  1)));  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	out.write(Integer.toString(input.charAt(pos  -  1)));	  out.write(input.charAt(pos    -    1));    	non-compiled	[CE]  cannot  find  symbol  len	29	None	replace
99	[BUG]  [BUGGY]  out.write(input.charAt(pos  -  1),  input.length());  [CE]  no  suitable  method  found  for  write(char,int)  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  out.write(input.charAt(pos  -  1),  input.length());  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	out.write(input.charAt(pos  -  1),  input.length());	  out.write(input.charAt(pos    -    1));    	non-compiled	[CE]  no  suitable  method  found  for  write(char,int)	29	None	replace
100	[BUG]  [BUGGY]  int  len  =  Character.codePointCount(input,  0,  input.length());  char  len  =  Character.codePointCount(input,  0,  input.length());  [CE]  variable  len  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]        IndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  int  len  =  Character.codePointCount(input,  0,  input.length());  char  len  =  Character.codePointCount(input,  0,  input.length());  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	int  len  =  Character.codePointCount(input,  0,  input.length());  char  len  =  Character.codePointCount(input,  0,  input.length());	  int    len    =    Character.codePointCount(input,    0,    input.length()    -    1);    char    len    =    Character.codePointCount(input,    0,    input.length()    -    1);    	non-compiled	[CE]  variable  len  is  already  defined  in  method  translate(CharSequence,Writer)	84	None	replace
101	[BUG]  [BUGGY]  Input  input  =  input,  out.getValue();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  Input  input  =  input,  out.getValue();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	Input  input  =  input,  out.getValue();	  Input    input    =    out.getValue();    	non-compiled	[CE]  ';'  expected	48	None	replace
102	[BUG]  [BUGGY]  char  input  =  input.length()  -  output.length();  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  char  input  =  input.length()  -  output.length();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	char  input  =  input.length()  -  output.length();	  int    input    =    input.length()    -    output.length();    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	63	None	replace
103	[BUG]  [BUGGY]  Character  len  =  Character.codePointCount(input,  0,  pos.length());  [CE]  int  cannot  be  dereferenced  [FE]                      ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  Character  len  =  Character.codePointCount(input,  0,  pos.length());  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	Character  len  =  Character.codePointCount(input,  0,  pos.length());	  Character    len    =    Character.codePointCount(input,    0,    input.length());    	non-compiled	[CE]  int  cannot  be  dereferenced	69	None	replace
104	[BUG]  [BUGGY]  Character  len  =  Character.codePointCount(input,  pos,  0,  input.length());  [CE]  no  suitable  method  found  for  codePointCount(CharSequence,int,int,int)  [FE]                        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  Character  len  =  Character.codePointCount(input,  pos,  0,  input.length());  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	Character  len  =  Character.codePointCount(input,  pos,  0,  input.length());	  Character    len    =    Character.codePointCount(input,    0,    input.length());    	non-compiled	[CE]  no  suitable  method  found  for  codePointCount(CharSequence,int,int,int)	69	None	replace
105	[BUG]  [BUGGY]  Character  len  =  Character.codePointCount(input,  0,  input.length()  -  2);  [CE]  incompatible  types  [FE]                          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  Character  len  =  Character.codePointCount(input,  0,  input.length()  -  2);  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	Character  len  =  Character.codePointCount(input,  0,  input.length()  -  2);	  Character    len    =    Character.codePointCount(input,    0,    input.length());    	non-compiled	[CE]  incompatible  types	69	None	replace
106	[BUG]  [BUGGY]  char[]  input  =  input.toCharArray();  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                    ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  char[]  input  =  input.toCharArray();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	char[]  input  =  input.toCharArray();	  char[]    input    =    input.toString();    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	80	None	replace
107	[BUG]  [BUGGY]  int  pos  =  input.length()  -  1;  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                    ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  int  pos  =  input.length()  -  1;  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	int  pos  =  input.length()  -  1;	  int    pos    =    input.length();    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	22	None	replace
108	[BUG]  [BUGGY]  int  pos  =  input.length()  +  1;  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                      ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  int  pos  =  input.length()  +  1;  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	int  pos  =  input.length()  +  1;	  int    pos    =    input.length();    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	22	None	replace
109	[BUG]  [BUGGY]  int  pos  =  input.length()  -  2;  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  int  pos  =  input.length()  -  2;  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	int  pos  =  input.length()  -  2;	  int    pos    =    input.length();    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	22	None	replace
110	[BUG]  [BUGGY]  out.write(Integer.toString(input.charAt(pos  +  1));  [CE]  ')'  expected  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  out.write(Integer.toString(input.charAt(pos  +  1));  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	out.write(Integer.toString(input.charAt(pos  +  1));	  out.write(input.charAt(pos    +    1));    	non-compiled	[CE]  ')'  expected	28	None	replace
111	[BUG]  [BUGGY]  out.write(input.charAt(pos  +  1),  input.length());  [CE]  no  suitable  method  found  for  write(char,int)  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  out.write(input.charAt(pos  +  1),  input.length());  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	out.write(input.charAt(pos  +  1),  input.length());	  out.write(input.charAt(pos    +    1));    	non-compiled	[CE]  no  suitable  method  found  for  write(char,int)	28	None	replace
112	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  int  len  =  input.length()  -  1;  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	add	int  len  =  input.length()  -  1;	  int    len    =    input.length();    	compilable	  [FE]  ComparisonFailure  	24	11	replace
113	[BUG]  [BUGGY]  int  len  =  input.length()  -  1;  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  int  len  =  input.length()  -  1;  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	int  len  =  input.length()  -  1;	  int    len    =    input.length();    	compilable	  [FE]  ComparisonFailure  	24	11	replace
114	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]      ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  int  len  =  input.length()  +  1;  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	add	int  len  =  input.length()  +  1;	  int    len    =    input.length();    	compilable	  [FE]  StringIndexOutOfBoundsException  	24	19	replace
115	[BUG]  [BUGGY]  int  len  =  input.length()  +  1;  [FE]  StringIndexOutOfBoundsException  [FE]      ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  int  len  =  input.length()  +  1;  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	int  len  =  input.length()  +  1;	  int    len    =    input.length();    	compilable	  [FE]  StringIndexOutOfBoundsException  	24	19	replace
116	[BUG]  [BUGGY]  char  len  =  input.length();  [CE]  possible  loss  of  precision  [FE]        ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  char  len  =  input.length();  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	char  len  =  input.length();	  int    len    =    input.length();    	non-compiled	[CE]  possible  loss  of  precision	24	None	replace
117	[BUG]  [BUGGY]  int  input  =  output.length()  -  1;  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                  ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  int  input  =  output.length()  -  1;  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	int  input  =  output.length()  -  1;	  int    input    =    output.length();    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	75	None	replace
118	[BUG]  [BUGGY]  int  output  =  input.length();  [CE]  cannot  find  symbol  len  [FE]                    ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  int  output  =  input.length();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	int  output  =  input.length();	  int    input    =    output.length();    	non-compiled	[CE]  cannot  find  symbol  len	75	None	replace
119	[BUG]  [BUGGY]  out.write(input.charAt(pos  +  1));  char[]  input  =  input.toChars();  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  out.write(input.charAt(pos  +  1));  char[]  input  =  input.toChars();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	out.write(input.charAt(pos  +  1));  char[]  input  =  input.toChars();	          out.write(input.charAt(pos));    char[]    input    =    input.toChars();    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	21	None	replace
120	[BUG]  [BUGGY]  int  pos  =  input.read(out);  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                    ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  int  pos  =  input.read(out);  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	int  pos  =  input.read(out);	  int    pos    =    input.read();    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	78	None	replace
121	[BUG]  [BUGGY]  int  pos  =  input.read(input);  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                      ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  int  pos  =  input.read(input);  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	int  pos  =  input.read(input);	  int    pos    =    input.read();    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	78	None	replace
122	[BUG]  [BUGGY]  int  pos  =  input.readInt();  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  int  pos  =  input.readInt();  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	int  pos  =  input.readInt();	  int    pos    =    input.read();    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	78	None	replace
123	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]          out.write(input.charAt(pos));    out.write(input.charAt(pos));  out.write(input.charAt(pos));  out.write(input.charAt(pos));  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	add	                out.write(input.charAt(pos));        out.write(input.charAt(pos));    out.write(input.charAt(pos));  out.write(input.charAt(pos));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	16	19	add
124	[BUG]  [BUGGY]          out.write(input.charAt(pos));    out.write(input.charAt(pos));  out.write(input.charAt(pos));  out.write(input.charAt(pos));  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]          out.write(input.charAt(pos));    out.write(input.charAt(pos));  out.write(input.charAt(pos));  out.write(input.charAt(pos));  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	                out.write(input.charAt(pos));        out.write(input.charAt(pos));    out.write(input.charAt(pos));  out.write(input.charAt(pos));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	16	19	add
125	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]          out.write(input.charAt(pos));    out.write(input.charAt(pos));  if(pos  <  input.length())  {  out.write(input.charAt(pos));  out.write(input.charAt(pos));  }  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	add	                out.write(input.charAt(pos));        out.write(input.charAt(pos));    if(pos  <  input.length())  {  out.write(input.charAt(pos));  out.write(input.charAt(pos));  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	16	19	add
126	[BUG]  [BUGGY]          out.write(input.charAt(pos));    out.write(input.charAt(pos));  if(pos  <  input.length())  {  out.write(input.charAt(pos));  out.write(input.charAt(pos));  }  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]          out.write(input.charAt(pos));    out.write(input.charAt(pos));  if(pos  <  input.length())  {  out.write(input.charAt(pos));  out.write(input.charAt(pos));  }  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	                out.write(input.charAt(pos));        out.write(input.charAt(pos));    if(pos  <  input.length())  {  out.write(input.charAt(pos));  out.write(input.charAt(pos));  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	16	19	add
127	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]          out.write(input.charAt(pos));    out.write(input.charAt(pos));  if(pos  <  input.length())  {  out.write(input.charAt(pos));  out.write(input.charAt(pos));  }  else  {  out.write(input.charAt(pos));  }  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	add	                out.write(input.charAt(pos));        out.write(input.charAt(pos));    if(pos  <  input.length())  {  out.write(input.charAt(pos));  out.write(input.charAt(pos));  }  else  {  out.write(input.charAt(pos));  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	16	19	add
128	[BUG]  [BUGGY]          out.write(input.charAt(pos));    out.write(input.charAt(pos));  if(pos  <  input.length())  {  out.write(input.charAt(pos));  out.write(input.charAt(pos));  }  else  {  out.write(input.charAt(pos));  }  [FE]  StringIndexOutOfBoundsException  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]          out.write(input.charAt(pos));    out.write(input.charAt(pos));  if(pos  <  input.length())  {  out.write(input.charAt(pos));  out.write(input.charAt(pos));  }  else  {  out.write(input.charAt(pos));  }  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	                out.write(input.charAt(pos));        out.write(input.charAt(pos));    if(pos  <  input.length())  {  out.write(input.charAt(pos));  out.write(input.charAt(pos));  }  else  {  out.write(input.charAt(pos));  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	16	19	add
129	[BUG]  [BUGGY]          out.write(input.charAt(pos));    out.write(input.charAt(pos));  if(pos  <  input.length())  {  out.write(input.charAt(pos));  out.write(input.charAt(pos));  }  else  {  for(int  pos  =  0;  pos  <  input.length();  pos++)  {  [CE]  illegal  start  of  expression  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]          out.write(input.charAt(pos));    out.write(input.charAt(pos));  if(pos  <  input.length())  {  out.write(input.charAt(pos));  out.write(input.charAt(pos));  }  else  {  for(int  pos  =  0;  pos  <  input.length();  pos++)  {  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	                out.write(input.charAt(pos));        out.write(input.charAt(pos));    if(pos  <  input.length())  {  out.write(input.charAt(pos));  out.write(input.charAt(pos));  }  else  {  for(int  pos  =  0;  pos  <  input.length();  pos++)  {	  	non-compiled	[CE]  illegal  start  of  expression	16	None	add
130	[BUG]  [BUGGY]  String  len  =  Character.codePointCount(input,  0,  input.length()  -  1);  [CE]  incompatible  types  [FE]                    ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  String  len  =  Character.codePointCount(input,  0,  input.length()  -  1);  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	String  len  =  Character.codePointCount(input,  0,  input.length()  -  1);	  String    len    =    Character.codePointCount(input,    0,    input.length());    	non-compiled	[CE]  incompatible  types	68	None	replace
131	[BUG]  [BUGGY]  String  len  =  Character.codePointCount(input,  pos,  0,  input.length());  [CE]  no  suitable  method  found  for  codePointCount(CharSequence,int,int,int)  [FE]                      ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  String  len  =  Character.codePointCount(input,  pos,  0,  input.length());  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	String  len  =  Character.codePointCount(input,  pos,  0,  input.length());	  String    len    =    Character.codePointCount(input,    0,    input.length());    	non-compiled	[CE]  no  suitable  method  found  for  codePointCount(CharSequence,int,int,int)	68	None	replace
132	[BUG]  [BUGGY]  Char[]  input  =  input.toString();  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  Char[]  input  =  input.toString();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	Char[]  input  =  input.toString();	  Char[]    input    =    input.toChars();    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
133	[BUG]  [BUGGY]  Char[]  input  =  output.toChars();  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  Char[]  input  =  output.toChars();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	Char[]  input  =  output.toChars();	  Char[]    input    =    input.toChars();    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
134	[BUG]  [BUGGY]  int  inputLen  =  input.length();  [CE]  cannot  find  symbol  len  [FE]          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  int  inputLen  =  input.length();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	int  inputLen  =  input.length();	  int    inputLength    =    input.length()    +    1;    	non-compiled	[CE]  cannot  find  symbol  len	7	None	replace
135	[BUG]  [BUGGY]  CharSequence  input  =  input.getChars(pos);  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                  ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  CharSequence  input  =  input.getChars(pos);  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	CharSequence  input  =  input.getChars(pos);	  CharSequence    input    =    input.getChars();    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	66	None	replace
136	[BUG]  [BUGGY]  CharSequence  input  =  input.getValue();  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                    ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  CharSequence  input  =  input.getValue();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	CharSequence  input  =  input.getValue();	  CharSequence    input    =    input.getChars();    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	66	None	replace
137	[BUG]  [BUGGY]  CharSequence  input  =  input.getChars(),  out);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  CharSequence  input  =  input.getChars(),  out);  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	CharSequence  input  =  input.getChars(),  out);	  CharSequence    input    =    input.getChars();    	non-compiled	[CE]  ';'  expected	66	None	replace
138	[BUG]  [BUGGY]  int  pos  =  input.length();  pos  =  input.length();  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  int  pos  =  input.length();  pos  =  input.length();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	int  pos  =  input.length();  pos  =  input.length();	          pos    =    input.length();    pos    =    output.length();    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	58	None	replace
139	[BUG]  [BUGGY]  int  pos  =  input.length();  pos  =  output.length();  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                  AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  int  pos  =  input.length();  pos  =  output.length();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	int  pos  =  input.length();  pos  =  output.length();	          pos    =    input.length();    pos    =    output.length();    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	58	None	replace
140	[BUG]  [BUGGY]  pos  =  output.length();  [CE]  cannot  find  symbol  output  [FE]                    AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  pos  =  output.length();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	pos  =  output.length();	          pos    =    input.length();    pos    =    output.length();    	non-compiled	[CE]  cannot  find  symbol  output	58	None	replace
141	[BUG]  [BUGGY]  out.write(input.charAt(pos  +  1));  char[]  input  =  input.toChars(pos);  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  out.write(input.charAt(pos  +  1));  char[]  input  =  input.toChars(pos);  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	out.write(input.charAt(pos  +  1));  char[]  input  =  input.toChars(pos);	          out.write(input.charAt(pos));    char[]    input    =    input.toChars(pos);    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	18	None	replace
142	[BUG]  [BUGGY]  int  len  =  Character.codePointCount(input,  0,  pos.length());  [CE]  int  cannot  be  dereferenced  [FE]          IndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  int  len  =  Character.codePointCount(input,  0,  pos.length());  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	int  len  =  Character.codePointCount(input,  0,  pos.length());	  int    len    =    Character.codePointCount(input,    0,    output.length());    	non-compiled	[CE]  int  cannot  be  dereferenced	36	None	replace
143	[BUG]  [BUGGY]  int  len  =  input.length();  int  len  =  input.length();  [CE]  variable  len  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  int  len  =  input.length();  int  len  =  input.length();  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	int    len    =    input.length();    int  len  =  input.length();	  	non-compiled	[CE]  variable  len  is  already  defined  in  method  translate(CharSequence,Writer)	23	None	add
144	[BUG]  [BUGGY]  int  len  =  input.length();  Int  len  =  input.length();  [CE]  cannot  find  symbol  [FE]      ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  int  len  =  input.length();  Int  len  =  input.length();  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	int    len    =    input.length();    Int  len  =  input.length();	  	non-compiled	[CE]  cannot  find  symbol	23	None	add
145	[BUG]  [BUGGY]  int  len  =  input.length();  char[]  input  =  input.getChars();  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]        ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  int  len  =  input.length();  char[]  input  =  input.getChars();  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	int    len    =    input.length();    char[]  input  =  input.getChars();	  	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	23	None	add
146	[BUG]  [BUGGY]  int  len  =  input.length();  char[]  input  =  input.getChars(pos);  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]          ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  int  len  =  input.length();  char[]  input  =  input.getChars(pos);  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	int    len    =    input.length();    char[]  input  =  input.getChars(pos);	  	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	23	None	add
147	[BUG]  [BUGGY]  Integer  pos  =  input.length();  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]          AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  Integer  pos  =  input.length();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	Integer  pos  =  input.length();	          pos    =    input.length();    int    pos    =    input.length();    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	55	None	replace
148	[BUG]  [BUGGY]  if(input.length()  >  0)  {  pos  =  input.length();  int  pos  =  input.length();  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]            AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  if(input.length()  >  0)  {  pos  =  input.length();  int  pos  =  input.length();  }  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	if(input.length()  >  0)  {  pos  =  input.length();  int  pos  =  input.length();  }	          pos    =    input.length();    int    pos    =    input.length();    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	55	None	replace
149	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]          pos    =    input.length();    pos  =  input.length();  pos  =  input.length();  pos  =  input.length();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	add	                pos        =        input.length();        pos    =    input.length();    pos  =  input.length();  pos  =  input.length();	  	compilable	  [FE]  AssertionFailedError  	53	19	add
150	[BUG]  [BUGGY]          pos    =    input.length();    pos  =  input.length();  pos  =  input.length();  pos  =  input.length();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]          pos    =    input.length();    pos  =  input.length();  pos  =  input.length();  pos  =  input.length();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	                pos        =        input.length();        pos    =    input.length();    pos  =  input.length();  pos  =  input.length();	  	compilable	  [FE]  AssertionFailedError  	53	19	add
151	[BUG]  [BUGGY]          pos    =    input.length();    pos  =  input.length();  int  pos  =  input.length();  pos  =  input.length();  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]      AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]          pos    =    input.length();    pos  =  input.length();  int  pos  =  input.length();  pos  =  input.length();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	                pos        =        input.length();        pos    =    input.length();    int  pos  =  input.length();  pos  =  input.length();	  	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	53	None	add
152	[BUG]  [BUGGY]          pos    =    input.length();    pos  =  input.length();  pos  =  input.length();  pos  =  output.length();  [CE]  cannot  find  symbol  output  [FE]        AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]          pos    =    input.length();    pos  =  input.length();  pos  =  input.length();  pos  =  output.length();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	                pos        =        input.length();        pos    =    input.length();    pos  =  input.length();  pos  =  output.length();	  	non-compiled	[CE]  cannot  find  symbol  output	53	None	add
153	[BUG]  [BUGGY]          pos    =    input.length();    pos  =  input.length();  pos  =  output.length();  pos  =  input.length();  [CE]  cannot  find  symbol  output  [FE]          AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]          pos    =    input.length();    pos  =  input.length();  pos  =  output.length();  pos  =  input.length();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	                pos        =        input.length();        pos    =    input.length();    pos  =  output.length();  pos  =  input.length();	  	non-compiled	[CE]  cannot  find  symbol  output	53	None	add
154	[BUG]  [BUGGY]          pos    =    input.length();    pos  =  input.length();  pos  =  in.length();  pos  =  input.length();  [CE]  cannot  find  symbol  in  [FE]            AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]          pos    =    input.length();    pos  =  input.length();  pos  =  in.length();  pos  =  input.length();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	                pos        =        input.length();        pos    =    input.length();    pos  =  in.length();  pos  =  input.length();	  	non-compiled	[CE]  cannot  find  symbol  in	53	None	add
155	[BUG]  [BUGGY]  char  input  =  input.charAt(pos);  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  char  input  =  input.charAt(pos);  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	char  input  =  input.charAt(pos);	          out.write(input.charAt(pos));    int    input    =    input.charAt(pos);    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	20	None	replace
156	[BUG]  [BUGGY]  out.write(input.charAt(0));  int  input  =  input.charAt(0);  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  out.write(input.charAt(0));  int  input  =  input.charAt(0);  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	out.write(input.charAt(0));  int  input  =  input.charAt(0);	          out.write(input.charAt(pos));    int    input    =    input.charAt(pos);    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	20	None	replace
157	[BUG]  [BUGGY]  int  input  =  input.charAt(pos);  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  int  input  =  input.charAt(pos);  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	int  input  =  input.charAt(pos);	          out.write(input.charAt(pos));    int    input    =    input.charAt(pos);    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	20	None	replace
158	[BUG]  [BUGGY]  pos  =  input.lastIndexOf('.',  pos);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  pos  =  input.lastIndexOf('.',  pos);  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	pos  =  input.lastIndexOf('.',  pos);	  pos    =    input.lastIndexOf('.');    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
159	[BUG]  [BUGGY]  pos  =  input.indexOf('.');  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  pos  =  input.indexOf('.');  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	pos  =  input.indexOf('.');	  pos    =    input.lastIndexOf('.');    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
160	[BUG]  [BUGGY]  pos  =  input.lastIndexOf('.')+  1;  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  pos  =  input.lastIndexOf('.')+  1;  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	pos  =  input.lastIndexOf('.')+  1;	  pos    =    input.lastIndexOf('.');    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
161	[BUG]  [BUGGY]          int    inputLength    =    input.length();    int  outputLength  =  input.length();  int  inputLength  =  input.length();  int  outputLength  =  input.length();  [CE]  variable  inputLength  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]          int    inputLength    =    input.length();    int  outputLength  =  input.length();  int  inputLength  =  input.length();  int  outputLength  =  input.length();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	                int        inputLength        =        input.length();        int    outputLength    =    input.length();    int  inputLength  =  input.length();  int  outputLength  =  input.length();	  	non-compiled	[CE]  variable  inputLength  is  already  defined  in  method  translate(CharSequence,Writer)	4	None	add
162	[BUG]  [BUGGY]          int    inputLength    =    input.length();    int  outputLength  =  input.length();  Integer  inputLength  =  input.length();  int  outputLength  =  input.length();  [CE]  variable  inputLength  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]      ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]          int    inputLength    =    input.length();    int  outputLength  =  input.length();  Integer  inputLength  =  input.length();  int  outputLength  =  input.length();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	                int        inputLength        =        input.length();        int    outputLength    =    input.length();    Integer  inputLength  =  input.length();  int  outputLength  =  input.length();	  	non-compiled	[CE]  variable  inputLength  is  already  defined  in  method  translate(CharSequence,Writer)	4	None	add
163	[BUG]  [BUGGY]          int    inputLength    =    input.length();    int  outputLength  =  input.length();  int  outputLength  =  input.length();  int  outputLength  =  input.length();  [CE]  variable  outputLength  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]        ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]          int    inputLength    =    input.length();    int  outputLength  =  input.length();  int  outputLength  =  input.length();  int  outputLength  =  input.length();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	                int        inputLength        =        input.length();        int    outputLength    =    input.length();    int  outputLength  =  input.length();  int  outputLength  =  input.length();	  	non-compiled	[CE]  variable  outputLength  is  already  defined  in  method  translate(CharSequence,Writer)	4	None	add
164	[BUG]  [BUGGY]          int    inputLength    =    input.length();    int  outputLength  =  input.length();  int  inputLength  =  outputLength.length();  int  outputLength  =  input.length();  [CE]  variable  inputLength  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]          ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]          int    inputLength    =    input.length();    int  outputLength  =  input.length();  int  inputLength  =  outputLength.length();  int  outputLength  =  input.length();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	                int        inputLength        =        input.length();        int    outputLength    =    input.length();    int  inputLength  =  outputLength.length();  int  outputLength  =  input.length();	  	non-compiled	[CE]  variable  inputLength  is  already  defined  in  method  translate(CharSequence,Writer)	4	None	add
165	[BUG]  [BUGGY]  char  len  =  Character.codePointCount(input,  0,  input.length());  int  len  =  Character.codePointCount(input,  0,  input.length());  [CE]  possible  loss  of  precision  [FE]        IndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  char  len  =  Character.codePointCount(input,  0,  input.length());  int  len  =  Character.codePointCount(input,  0,  input.length());  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	char  len  =  Character.codePointCount(input,  0,  input.length());  int  len  =  Character.codePointCount(input,  0,  input.length());	  int    len    =    Character.codePointCount(input,    0,    input.length()    +    1);    int    len    =    Character.codePointCount(input,    0,    input.length()    +    1);    	non-compiled	[CE]  possible  loss  of  precision	12	None	replace
166	[BUG]  [BUGGY]  out.write(input.charAt(0),  pos);  [CE]  no  suitable  method  found  for  write(char,int)  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  out.write(input.charAt(0),  pos);  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	out.write(input.charAt(0),  pos);	  out.write(input.charAt(0));    	non-compiled	[CE]  no  suitable  method  found  for  write(char,int)	30	None	replace
167	[BUG]  [BUGGY]  out.write(Integer.toString(input.charAt(0)));  [CE]  cannot  find  symbol  len  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  out.write(Integer.toString(input.charAt(0)));  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	out.write(Integer.toString(input.charAt(0)));	  out.write(input.charAt(0));    	non-compiled	[CE]  cannot  find  symbol  len	30	None	replace
168	[BUG]  [BUGGY]  out.write(input.substring(pos,  input.length()));  [CE]  cannot  find  symbol  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  out.write(input.substring(pos,  input.length()));  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	out.write(input.substring(pos,  input.length()));	  out.write(input.charAt(0));    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
169	[BUG]  [BUGGY]  pos  =  input.length()  +  pos.length();  [CE]  int  cannot  be  dereferenced  [FE]          AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  pos  =  input.length()  +  pos.length();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	pos  =  input.length()  +  pos.length();	  pos    =    input.length()    +    out.length();    	non-compiled	[CE]  int  cannot  be  dereferenced	83	None	replace
170	[BUG]  [BUGGY]  pos  =  input.length()  +  in.length();  [CE]  cannot  find  symbol  in  [FE]            AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  pos  =  input.length()  +  in.length();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	pos  =  input.length()  +  in.length();	  pos    =    input.length()    +    out.length();    	non-compiled	[CE]  cannot  find  symbol  in	83	None	replace
171	[BUG]  [BUGGY]  pos  =  input.length()  +  output.length();  [CE]  cannot  find  symbol  output  [FE]              AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  pos  =  input.length()  +  output.length();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	pos  =  input.length()  +  output.length();	  pos    =    input.length()    +    out.length();    	non-compiled	[CE]  cannot  find  symbol  output	83	None	replace
172	[BUG]  [BUGGY]  pos  =  input.lastIndexOf('n',  pos);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  pos  =  input.lastIndexOf('n',  pos);  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	pos  =  input.lastIndexOf('n',  pos);	  pos    =    input.lastIndexOf('n');    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
173	[BUG]  [BUGGY]  pos  =  input.indexOf('n');  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  pos  =  input.indexOf('n');  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	pos  =  input.indexOf('n');	  pos    =    input.lastIndexOf('n');    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
174	[BUG]  [BUGGY]  pos  =  input.lastIndexOf('n')+  1;  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  pos  =  input.lastIndexOf('n')+  1;  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	pos  =  input.lastIndexOf('n')+  1;	  pos    =    input.lastIndexOf('n');    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
175	[BUG]  [BUGGY]  char[]  input  =  input.getInputChars();  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  char[]  input  =  input.getInputChars();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	char[]  input  =  input.getInputChars();	  char[]    input    =    input.getOutputChars();    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	81	None	replace
176	[BUG]  [BUGGY]  Char[]  input  =  input.getOutputChars();  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  Char[]  input  =  input.getOutputChars();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	Char[]  input  =  input.getOutputChars();	  char[]    input    =    input.getOutputChars();    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
177	[BUG]  [BUGGY]  CharSequence  input  =  input.getOutputChars();  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                    ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  CharSequence  input  =  input.getOutputChars();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	CharSequence  input  =  input.getOutputChars();	  char[]    input    =    input.getOutputChars();    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	81	None	replace
178	[BUG]  [BUGGY]  Int  inputLength  =  input.length();  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  Int  inputLength  =  input.length();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	Int  inputLength  =  input.length();	          int    inputLength    =    input.length();    Int    inputLength    =    input.length();    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
179	[BUG]  [BUGGY]  char[]  input  =  input.getChars(pos,  out);  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  char[]  input  =  input.getChars(pos,  out);  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	char[]  input  =  input.getChars(pos,  out);	  char[]    input    =    input.getChars(pos);    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	91	None	replace
180	[BUG]  [BUGGY]  String  input  =  input.length()  -  input.length();  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]              ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  String  input  =  input.length()  -  input.length();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	String  input  =  input.length()  -  input.length();	  char    input    =    input.length()    -    input.length();    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	64	None	replace
181	[BUG]  [BUGGY]  Char  input  =  input.length()  -  input.length();  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  Char  input  =  input.length()  -  input.length();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	Char  input  =  input.length()  -  input.length();	  char    input    =    input.length()    -    input.length();    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
182	[BUG]  [BUGGY]  Character  input  =  input.length()  -  input.length();  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                  ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  Character  input  =  input.length()  -  input.length();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	Character  input  =  input.length()  -  input.length();	  char    input    =    input.length()    -    input.length();    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	64	None	replace
183	[BUG]  [BUGGY]          int    inputLength    =    input.length();    int  outputLength  =  input.length();  int  inputLength  =  outputLength();  int  outputLength  =  input.length();  [CE]  variable  inputLength  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]          int    inputLength    =    input.length();    int  outputLength  =  input.length();  int  inputLength  =  outputLength();  int  outputLength  =  input.length();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	                int        inputLength        =        input.length();        int    outputLength    =    input.length();    int  inputLength  =  outputLength();  int  outputLength  =  input.length();	  	non-compiled	[CE]  variable  inputLength  is  already  defined  in  method  translate(CharSequence,Writer)	4	None	add
184	[BUG]  [BUGGY]  int  len  =  input.length();  char  len  =  input.length();  [CE]  variable  len  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  int  len  =  input.length();  char  len  =  input.length();  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	int    len    =    input.length();    char  len  =  input.length();	  	non-compiled	[CE]  variable  len  is  already  defined  in  method  translate(CharSequence,Writer)	23	None	add
185	[BUG]  [BUGGY]  int  len  =  input.length();  int  len  =  output.length();  [CE]  variable  len  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]      ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  int  len  =  input.length();  int  len  =  output.length();  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	int    len    =    input.length();    int  len  =  output.length();	  	non-compiled	[CE]  variable  len  is  already  defined  in  method  translate(CharSequence,Writer)	23	None	add
186	[BUG]  [BUGGY]  pos  =  input.lastIndexOf('.',  out);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  pos  =  input.lastIndexOf('.',  out);  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	pos  =  input.lastIndexOf('.',  out);	  pos    =    input.lastIndexOf('.');    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
187	[BUG]  [BUGGY]  CharSequence  input  =  input.toCharsArray();  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                      ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  CharSequence  input  =  input.toCharsArray();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	CharSequence  input  =  input.toCharsArray();	  char[]    input    =    input.toCharsArray();    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	40	None	replace
188	[BUG]  [BUGGY]  int  pos  =  input.length()  +  out.length();  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                    ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  int  pos  =  input.length()  +  out.length();  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	int  pos  =  input.length()  +  out.length();	  int    pos    =    input.length();    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	22	None	replace
189	[BUG]  [BUGGY]  int  pos  =  out.length();  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                      ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  int  pos  =  out.length();  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	int  pos  =  out.length();	  int    pos    =    input.length();    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	22	None	replace
190	[BUG]  [BUGGY]  Char  len  =  Character.codePointCount(input,  pos,  input.length());  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  Char  len  =  Character.codePointCount(input,  pos,  input.length());  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	Char  len  =  Character.codePointCount(input,  pos,  input.length());	  Char    len    =    Character.codePointCount(input,    0,    input.length());    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
191	[BUG]  [BUGGY]  CharSequence  input  =  output.getChars();  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                  ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  CharSequence  input  =  output.getChars();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	CharSequence  input  =  output.getChars();	  CharSequence    input    =    input.getChars();    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	66	None	replace
192	[BUG]  [BUGGY]  Integer  len  =  Character.codePointCount(input,  0,  input.length());  Int  len  =  Character.codePointCount(input,  0,  input.length());  [CE]  cannot  find  symbol  [FE]            IndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  Integer  len  =  Character.codePointCount(input,  0,  input.length());  Int  len  =  Character.codePointCount(input,  0,  input.length());  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	Integer  len  =  Character.codePointCount(input,  0,  input.length());  Int  len  =  Character.codePointCount(input,  0,  input.length());	  int    len    =    Character.codePointCount(input,    0,    input.length()    +    1);    Int    len    =    Character.codePointCount(input,    0,    input.length()    +    1);    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
193	[BUG]  [BUGGY]  if(input!=  null)  {  int  len  =  Character.codePointCount(input,  0,  input.length());  int  len  =  Character.codePointCount(input,  0,  input.length());  }  [CE]  variable  len  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]        IndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  if(input!=  null)  {  int  len  =  Character.codePointCount(input,  0,  input.length());  int  len  =  Character.codePointCount(input,  0,  input.length());  }  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	if(input!=  null)  {  int  len  =  Character.codePointCount(input,  0,  input.length());  int  len  =  Character.codePointCount(input,  0,  input.length());  }	  int    len    =    Character.codePointCount(input,    0,    input.length()    +    1);    int    len    =    Character.codePointCount(input,    0,    input.length()    +    1);    	non-compiled	[CE]  variable  len  is  already  defined  in  method  translate(CharSequence,Writer)	12	None	replace
194	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]              IndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  float  len  =  Character.codePointCount(input,  0,  input.length());  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	add	float  len  =  Character.codePointCount(input,  0,  input.length());	  int    len    =    Character.codePointCount(input,    0,    input.length()    -    2);    int    len    =    Character.codePointCount(input,    0,    input.length()    -    1);    	compilable	  [FE]  ComparisonFailure  	45	1	replace
195	[BUG]  [BUGGY]  float  len  =  Character.codePointCount(input,  0,  input.length());  [FE]  ComparisonFailure  [FE]              IndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  float  len  =  Character.codePointCount(input,  0,  input.length());  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	float  len  =  Character.codePointCount(input,  0,  input.length());	  int    len    =    Character.codePointCount(input,    0,    input.length()    -    2);    int    len    =    Character.codePointCount(input,    0,    input.length()    -    1);    	compilable	  [FE]  ComparisonFailure  	45	1	replace
196	[BUG]  [BUGGY]  char[]  input  =  output.getValues();  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                  ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  char[]  input  =  output.getValues();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	char[]  input  =  output.getValues();	  char[]    input    =    input.getValues();    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	92	None	replace
197	[BUG]  [BUGGY]  Character  input  =  input.length();  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                    ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  Character  input  =  input.length();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	Character  input  =  input.length();	  char    input    =    input.length();    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	27	None	replace
198	[BUG]  [BUGGY]  pos  =  input.length()  +  decodeChars(input.charAt(pos));  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  pos  =  input.length()  +  decodeChars(input.charAt(pos));  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	pos  =  input.length()  +  decodeChars(input.charAt(pos));	  pos    =    input.length()    +    out.charAt(pos);    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
199	[BUG]  [BUGGY]  pos  =  input.lastIndexOf('n',  out);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  pos  =  input.lastIndexOf('n',  out);  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	pos  =  input.lastIndexOf('n',  out);	  pos    =    input.lastIndexOf('n');    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
200	[BUG]  [BUGGY]  int  len  =  Character.codePointCount(input,  0,  out.length());  [CE]  cannot  find  symbol  [FE]          IndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  int  len  =  Character.codePointCount(input,  0,  out.length());  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	int  len  =  Character.codePointCount(input,  0,  out.length());	  int    len    =    Character.codePointCount(input,    0,    output.length());    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
201	[BUG]  [BUGGY]  if(inputLength  >  0)  {  int  inputLength  =  input.length();  int  outputLength  =  input.length();  }  [CE]  cannot  find  symbol  inputLength  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  if(inputLength  >  0)  {  int  inputLength  =  input.length();  int  outputLength  =  input.length();  }  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	if(inputLength  >  0)  {  int  inputLength  =  input.length();  int  outputLength  =  input.length();  }	          int    inputLength    =    input.length();    int    outputLength    =    input.length();    	non-compiled	[CE]  cannot  find  symbol  inputLength	5	None	replace
202	[BUG]  [BUGGY]  char  inputLength  =  input.length();  int  outputLength  =  input.length();  [CE]  possible  loss  of  precision  [FE]      ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  char  inputLength  =  input.length();  int  outputLength  =  input.length();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	char  inputLength  =  input.length();  int  outputLength  =  input.length();	          int    inputLength    =    input.length();    int    outputLength    =    input.length();    	non-compiled	[CE]  possible  loss  of  precision	5	None	replace
203	[BUG]  [BUGGY]  if(inputLength  >  0)  {  int  inputLength  =  input.length();  int  outputLength  =  input.length();  }  else  {  out.write(inputLength);  return;  }  [CE]  cannot  find  symbol  inputLength  [FE]        ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  if(inputLength  >  0)  {  int  inputLength  =  input.length();  int  outputLength  =  input.length();  }  else  {  out.write(inputLength);  return;  }  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	if(inputLength  >  0)  {  int  inputLength  =  input.length();  int  outputLength  =  input.length();  }  else  {  out.write(inputLength);  return;  }	          int    inputLength    =    input.length();    int    outputLength    =    input.length();    	non-compiled	[CE]  cannot  find  symbol  inputLength	5	None	replace
204	[BUG]  [BUGGY]  pos  =  input.length();  InputStream  input  =  input.charAt(pos);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  pos  =  input.length();  InputStream  input  =  input.charAt(pos);  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	pos  =  input.length();  InputStream  input  =  input.charAt(pos);	          pos    =    input.length();    InputStream    input    =    input.length();    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
205	[BUG]  [BUGGY]  pos  =  out.length()  -  1;  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  pos  =  out.length()  -  1;  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	pos  =  out.length()  -  1;	  pos    =    input.length()    -    1;    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
206	[BUG]  [BUGGY]  Char[]  input  =  input.getString();  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  Char[]  input  =  input.getString();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	Char[]  input  =  input.getString();	  Char[]    input    =    input.getChars();    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
207	[BUG]  [BUGGY]  out.write(Integer.toHexString(input.charAt(pos  +  1));  [CE]  ')'  expected  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  out.write(Integer.toHexString(input.charAt(pos  +  1));  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	out.write(Integer.toHexString(input.charAt(pos  +  1));	  out.write(input.charAt(pos    +    1));    	non-compiled	[CE]  ')'  expected	28	None	replace
208	[BUG]  [BUGGY]  out.write(Integer.toHexString(input.charAt(pos  +  1)));  [CE]  cannot  find  symbol  len  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  out.write(Integer.toHexString(input.charAt(pos  +  1)));  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	out.write(Integer.toHexString(input.charAt(pos  +  1)));	  out.write(input.charAt(pos    +    1));    	non-compiled	[CE]  cannot  find  symbol  len	28	None	replace
209	[BUG]  [BUGGY]  int  pos  =  input.getCharSequencePosition();  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                    ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  int  pos  =  input.getCharSequencePosition();  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	int  pos  =  input.getCharSequencePosition();	  int    pos    =    input.getLength();    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	93	None	replace
210	[BUG]  [BUGGY]  int  pos  =  input.getPosition();  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                      ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  int  pos  =  input.getPosition();  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	int  pos  =  input.getPosition();	  int    pos    =    input.getLength();    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	93	None	replace
211	[BUG]  [BUGGY]  int  pos  =  out.read();  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                    ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  int  pos  =  out.read();  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	int  pos  =  out.read();	  int    pos    =    input.read();    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	78	None	replace
212	[BUG]  [BUGGY]  int  pos  =  output.read();  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                      ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  int  pos  =  output.read();  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	int  pos  =  output.read();	  int    pos    =    input.read();    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	78	None	replace
213	[BUG]  [BUGGY]  int  len  =  Character.codePointCount(input,  0,  input.length()  -  1);  Int  len  =  Character.codePointCount(input,  0,  input.length());  [CE]  cannot  find  symbol  [FE]          IndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  int  len  =  Character.codePointCount(input,  0,  input.length()  -  1);  Int  len  =  Character.codePointCount(input,  0,  input.length());  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	int  len  =  Character.codePointCount(input,  0,  input.length()  -  1);  Int  len  =  Character.codePointCount(input,  0,  input.length());	  int    len    =    Character.codePointCount(input,    0,    input.length()    -    1);    Int    len    =    Character.codePointCount(input,    0,    input.length()    -    1);    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
214	[BUG]  [BUGGY]  int  inputLength  =  input.length();  Int  outputLength  =  input.length();  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  int  inputLength  =  input.length();  Int  outputLength  =  input.length();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	int  inputLength  =  input.length();  Int  outputLength  =  input.length();	          int    inputLength    =    input.length();    Int    inputLength    =    input.length();    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
215	[BUG]  [BUGGY]  out.write(Integer.toString(pos));  [CE]  cannot  find  symbol  len  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  out.write(Integer.toString(pos));  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	out.write(Integer.toString(pos));	          out.write(input.charAt(pos));    out.write(input.charAt(pos));    	non-compiled	[CE]  cannot  find  symbol  len	17	None	replace
216	[BUG]  [BUGGY]  char[]  input  =  input.toCharSequence();  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                    ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  char[]  input  =  input.toCharSequence();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	char[]  input  =  input.toCharSequence();	  char[]    input    =    input.toString();    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	80	None	replace
217	[BUG]  [BUGGY]  CharSequence  input  =  input.toChars(pos);  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                    ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  CharSequence  input  =  input.toChars(pos);  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	CharSequence  input  =  input.toChars(pos);	  char[]    input    =    input.toChars(pos);    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	39	None	replace
218	[BUG]  [BUGGY]  out.write(input.charAt(1));  [CE]  cannot  find  symbol  len  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  out.write(input.charAt(1));  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	out.write(input.charAt(1));	  out.write(input.charAt(0));    	non-compiled	[CE]  cannot  find  symbol  len	30	None	replace
219	[BUG]  [BUGGY]  out.write(Integer.toString(pos),  input.charAt(0));  [CE]  no  suitable  method  found  for  write(String,char)  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  out.write(Integer.toString(pos),  input.charAt(0));  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	out.write(Integer.toString(pos),  input.charAt(0));	  out.write(input.charAt(0));    	non-compiled	[CE]  no  suitable  method  found  for  write(String,char)	30	None	replace
220	[BUG]  [BUGGY]  int  len  =  Character.codePointCount(input,  pos,  output.length  -  1);  [CE]  cannot  find  symbol  output  [FE]              ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  int  len  =  Character.codePointCount(input,  pos,  output.length  -  1);  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	int  len  =  Character.codePointCount(input,  pos,  output.length  -  1);	  int    len    =    Character.codePointCount(input,    pos,    input.length    -    1);    	non-compiled	[CE]  cannot  find  symbol  output	38	None	replace
221	[BUG]  [BUGGY]  out.write(input.charAt(pos  -  1)+  1);  [CE]  cannot  find  symbol  len  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  out.write(input.charAt(pos  -  1)+  1);  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	out.write(input.charAt(pos  -  1)+  1);	  out.write(input.charAt(pos    -    1));    	non-compiled	[CE]  cannot  find  symbol  len	29	None	replace
222	[BUG]  [BUGGY]  out.write(Integer.toString(input.charAt(pos)+  1));  [CE]  cannot  find  symbol  len  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  out.write(Integer.toString(input.charAt(pos)+  1));  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	out.write(Integer.toString(input.charAt(pos)+  1));	  out.write(input.charAt(pos)+    1);    	non-compiled	[CE]  cannot  find  symbol  len	31	None	replace
223	[BUG]  [BUGGY]  out.write(Integer.toString(input.charAt(pos)+  1);  [CE]  ')'  expected  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  out.write(Integer.toString(input.charAt(pos)+  1);  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	out.write(Integer.toString(input.charAt(pos)+  1);	  out.write(input.charAt(pos)+    1);    	non-compiled	[CE]  ')'  expected	31	None	replace
224	[BUG]  [BUGGY]  if(input!=  null)  {  pos  =  input.length();  int  pos  =  input.length();  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]          AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  if(input!=  null)  {  pos  =  input.length();  int  pos  =  input.length();  }  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	if(input!=  null)  {  pos  =  input.length();  int  pos  =  input.length();  }	          pos    =    input.length();    int    pos    =    input.length();    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	55	None	replace
225	[BUG]  [BUGGY]  if(input!=  null  ||  input.length()  ==  0)  {  pos  =  input.length();  int  pos  =  input.length();  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]            AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  if(input!=  null  ||  input.length()  ==  0)  {  pos  =  input.length();  int  pos  =  input.length();  }  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	if(input!=  null  ||  input.length()  ==  0)  {  pos  =  input.length();  int  pos  =  input.length();  }	          pos    =    input.length();    int    pos    =    input.length();    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	55	None	replace
226	[BUG]  [BUGGY]  if(input  ==  null)  {  pos  =  input.length();  pos  =  input.length();  }  [CE]  cannot  find  symbol  len  [FE]    AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  if(input  ==  null)  {  pos  =  input.length();  pos  =  input.length();  }  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	if(input  ==  null)  {  pos  =  input.length();  pos  =  input.length();  }	          pos    =    input.length();    pos    =    input.length();    	non-compiled	[CE]  cannot  find  symbol  len	54	None	replace
227	[BUG]  [BUGGY]  if(out  ==  null)  {  pos  =  input.length();  pos  =  input.length();  }  [CE]  cannot  find  symbol  len  [FE]      AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  if(out  ==  null)  {  pos  =  input.length();  pos  =  input.length();  }  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	if(out  ==  null)  {  pos  =  input.length();  pos  =  input.length();  }	          pos    =    input.length();    pos    =    input.length();    	non-compiled	[CE]  cannot  find  symbol  len	54	None	replace
228	[BUG]  [BUGGY]          pos    =    input.length();    pos  =  input.length();  Integer  pos  =  input.length();  pos  =  input.length();  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]    AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]          pos    =    input.length();    pos  =  input.length();  Integer  pos  =  input.length();  pos  =  input.length();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	                pos        =        input.length();        pos    =    input.length();    Integer  pos  =  input.length();  pos  =  input.length();	  	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	53	None	add
229	[BUG]  [BUGGY]  Integer  len  =  Character.codePointCount(input,  0,  input.length());  Float  len  =  Character.codePointCount(input,  0,  input.length());  [CE]  variable  len  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  Integer  len  =  Character.codePointCount(input,  0,  input.length());  Float  len  =  Character.codePointCount(input,  0,  input.length());  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	Integer    len    =    Character.codePointCount(input,    0,    input.length());    Float  len  =  Character.codePointCount(input,  0,  input.length());	  	non-compiled	[CE]  variable  len  is  already  defined  in  method  translate(CharSequence,Writer)	34	None	add
230	[BUG]  [BUGGY]  Input  input  =  inputStream.getValue(pos);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  Input  input  =  inputStream.getValue(pos);  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	Input  input  =  inputStream.getValue(pos);	  Input    input    =    inputStream.getValue();    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
231	[BUG]  [BUGGY]  pos  =  input.length()  +  input.length();  [CE]  cannot  find  symbol  len  [FE]          AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  pos  =  input.length()  +  input.length();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	pos  =  input.length()  +  input.length();	  pos    =    input.length()    +    out.length();    	non-compiled	[CE]  cannot  find  symbol  len	83	None	replace
232	[BUG]  [BUGGY]  int  len  =  Character.codePointCount(input,  pos,  out.length());  [CE]  cannot  find  symbol  [FE]    IndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  int  len  =  Character.codePointCount(input,  pos,  out.length());  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	int  len  =  Character.codePointCount(input,  pos,  out.length());	  int    len    =    Character.codePointCount(input,    pos,    input.length()    -    1);    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
233	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]          out.write(input.charAt(pos));    out.write(input.charAt(pos));  out.write(input.charAt(pos));  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	add	                out.write(input.charAt(pos));        out.write(input.charAt(pos));    out.write(input.charAt(pos));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	16	19	add
234	[BUG]  [BUGGY]          out.write(input.charAt(pos));    out.write(input.charAt(pos));  out.write(input.charAt(pos));  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]          out.write(input.charAt(pos));    out.write(input.charAt(pos));  out.write(input.charAt(pos));  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	                out.write(input.charAt(pos));        out.write(input.charAt(pos));    out.write(input.charAt(pos));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	16	19	add
235	[BUG]  [BUGGY]          out.write(input.charAt(pos));    out.write(input.charAt(pos));  out.write(input.charAt(pos));  out.write(Input.charAt(pos));  [CE]  cannot  find  symbol  Input  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]          out.write(input.charAt(pos));    out.write(input.charAt(pos));  out.write(input.charAt(pos));  out.write(Input.charAt(pos));  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	                out.write(input.charAt(pos));        out.write(input.charAt(pos));    out.write(input.charAt(pos));  out.write(Input.charAt(pos));	  	non-compiled	[CE]  cannot  find  symbol  Input	16	None	add
236	[BUG]  [BUGGY]          out.write(input.charAt(pos));    out.write(input.charAt(pos));  out.write(Input.charAt(pos));  out.write(input.charAt(pos));  [CE]  cannot  find  symbol  Input  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]          out.write(input.charAt(pos));    out.write(input.charAt(pos));  out.write(Input.charAt(pos));  out.write(input.charAt(pos));  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	                out.write(input.charAt(pos));        out.write(input.charAt(pos));    out.write(Input.charAt(pos));  out.write(input.charAt(pos));	  	non-compiled	[CE]  cannot  find  symbol  Input	16	None	add
237	[BUG]  [BUGGY]  Integer  len  =  Character.codePointCount(input,  0,  pos.length());  [CE]  int  cannot  be  dereferenced  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  Integer  len  =  Character.codePointCount(input,  0,  pos.length());  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	Integer  len  =  Character.codePointCount(input,  0,  pos.length());	  Integer    len    =    Character.codePointCount(input,    0,    input.length());    	non-compiled	[CE]  int  cannot  be  dereferenced	35	None	replace
238	[BUG]  [BUGGY]  Input  input  =  inputStream.getKey();  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  Input  input  =  inputStream.getKey();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	Input  input  =  inputStream.getKey();	  Input    input    =    input.getKey();    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
239	[BUG]  [BUGGY]  Integer  pos  =  input.intValue()  +  len;  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  Integer  pos  =  input.intValue()  +  len;  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	Integer  pos  =  input.intValue()  +  len;	  Integer    pos    =    input.intValue();    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	25	None	replace
240	[BUG]  [BUGGY]  char[]  input  =  input.getOutputBuffer();  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  char[]  input  =  input.getOutputBuffer();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	char[]  input  =  input.getOutputBuffer();	  char[]    input    =    input.getOutputChars();    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	81	None	replace
241	[BUG]  [BUGGY]  Character  len  =  Character.codePointCount(input,  pos,  input.length());  [CE]  incompatible  types  [FE]                      ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  Character  len  =  Character.codePointCount(input,  pos,  input.length());  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	Character  len  =  Character.codePointCount(input,  pos,  input.length());	  Character    len    =    Character.codePointCount(input,    0,    input.length());    	non-compiled	[CE]  incompatible  types	69	None	replace
242	[BUG]  [BUGGY]  Char  input  =  input.charAt(pos);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  Char  input  =  input.charAt(pos);  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	Char  input  =  input.charAt(pos);	  char    input    =    input.length();    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
243	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  int  len  =  input.length()  -  2;  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	add	int  len  =  input.length()  -  2;	  int    len    =    input.length();    	compilable	  [FE]  ComparisonFailure  	24	12	replace
244	[BUG]  [BUGGY]  int  len  =  input.length()  -  2;  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  int  len  =  input.length()  -  2;  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	int  len  =  input.length()  -  2;	  int    len    =    input.length();    	compilable	  [FE]  ComparisonFailure  	24	12	replace
245	[BUG]  [BUGGY]  CharSequence  len  =  Character.codePointCount(input,  0,  input.length());  [CE]  incompatible  types  [FE]                    ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  CharSequence  len  =  Character.codePointCount(input,  0,  input.length());  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	CharSequence  len  =  Character.codePointCount(input,  0,  input.length());	  String    len    =    Character.codePointCount(input,    0,    input.length());    	non-compiled	[CE]  incompatible  types	68	None	replace
246	[BUG]  [BUGGY]  CharSequence  input  =  input.getInput();  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                  ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  CharSequence  input  =  input.getInput();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	CharSequence  input  =  input.getInput();	  CharSequence    input    =    input.getChars();    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	66	None	replace
247	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]          out.write(input.charAt(pos));    out.write(input.charAt(pos));  if(pos  >  0)  {  out.write(input.charAt(pos));  out.write(input.charAt(pos));  }  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	add	                out.write(input.charAt(pos));        out.write(input.charAt(pos));    if(pos  >  0)  {  out.write(input.charAt(pos));  out.write(input.charAt(pos));  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	16	19	add
248	[BUG]  [BUGGY]          out.write(input.charAt(pos));    out.write(input.charAt(pos));  if(pos  >  0)  {  out.write(input.charAt(pos));  out.write(input.charAt(pos));  }  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]          out.write(input.charAt(pos));    out.write(input.charAt(pos));  if(pos  >  0)  {  out.write(input.charAt(pos));  out.write(input.charAt(pos));  }  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	                out.write(input.charAt(pos));        out.write(input.charAt(pos));    if(pos  >  0)  {  out.write(input.charAt(pos));  out.write(input.charAt(pos));  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	16	19	add
249	[BUG]  [BUGGY]          out.write(input.charAt(pos));    out.write(input.charAt(pos));  if(pos  >  0)  {  out.write(input.charAt(pos));  out.write(input.charAt(pos));  }  else  {  out.write(input.charAt(pos);  }  [CE]  ')'  expected  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]          out.write(input.charAt(pos));    out.write(input.charAt(pos));  if(pos  >  0)  {  out.write(input.charAt(pos));  out.write(input.charAt(pos));  }  else  {  out.write(input.charAt(pos);  }  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	                out.write(input.charAt(pos));        out.write(input.charAt(pos));    if(pos  >  0)  {  out.write(input.charAt(pos));  out.write(input.charAt(pos));  }  else  {  out.write(input.charAt(pos);  }	  	non-compiled	[CE]  ')'  expected	16	None	add
250	[BUG]  [BUGGY]  int  len  =  Character.codePointCount(input,  pos,  input.length()  -  1);  int  len  =  Character.codePointCount(input,  pos,  input.length())  -  1);  [CE]  ';'  expected  [FE]    IndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  int  len  =  Character.codePointCount(input,  pos,  input.length()  -  1);  int  len  =  Character.codePointCount(input,  pos,  input.length())  -  1);  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	int    len    =    Character.codePointCount(input,    pos,    input.length()    -    1);    int  len  =  Character.codePointCount(input,  pos,  input.length())  -  1);	  	non-compiled	[CE]  ';'  expected	32	None	add
251	[BUG]  [BUGGY]  pos  =  input.length();  InputStream  input  =  input.getInputStream();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  pos  =  input.length();  InputStream  input  =  input.getInputStream();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	pos  =  input.length();  InputStream  input  =  input.getInputStream();	          pos    =    input.length();    InputStream    input    =    input.length();    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
252	[BUG]  [BUGGY]  Integer  len  =  Character.codePointCount(input,  0,  input.length());  int  len  =  Character.codePointCount(input,  0,  output.length());  [CE]  variable  len  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]          IndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  Integer  len  =  Character.codePointCount(input,  0,  input.length());  int  len  =  Character.codePointCount(input,  0,  output.length());  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	Integer  len  =  Character.codePointCount(input,  0,  input.length());  int  len  =  Character.codePointCount(input,  0,  output.length());	  int    len    =    Character.codePointCount(input,    0,    input.length()    +    1);    int    len    =    Character.codePointCount(input,    0,    output.length()    +    1);    	non-compiled	[CE]  variable  len  is  already  defined  in  method  translate(CharSequence,Writer)	13	None	replace
253	[BUG]  [BUGGY]  Char[]  input  =  input.toChars(pos);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  Char[]  input  =  input.toChars(pos);  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	Char[]  input  =  input.toChars(pos);	  Char[]    input    =    input.toChars();    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
254	[BUG]  [BUGGY]  int  pos  =  input.getPos();  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                    ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  int  pos  =  input.getPos();  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	int  pos  =  input.getPos();	  int    pos    =    input.getLength();    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	93	None	replace
255	[BUG]  [BUGGY]  Input  input  =  inputStream.readLine();  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  Input  input  =  inputStream.readLine();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	Input  input  =  inputStream.readLine();	  Input    input    =    inputStream.getValue();    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
256	[BUG]  [BUGGY]  Char[]  input  =  input.getInputChars();  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  Char[]  input  =  input.getInputChars();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	Char[]  input  =  input.getInputChars();	  Char[]    input    =    input.getChars();    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
257	[BUG]  [BUGGY]  pos  =  input.length()  *  2  +  1;  [CE]  cannot  find  symbol  len  [FE]            AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  pos  =  input.length()  *  2  +  1;  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	pos  =  input.length()  *  2  +  1;	  pos    =    input.length()    *    2;    	non-compiled	[CE]  cannot  find  symbol  len	11	None	replace
258	[BUG]  [BUGGY]  pos  =  input.length()  +  input.charAt(pos);  [CE]  cannot  find  symbol  len  [FE]        AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  pos  =  input.length()  +  input.charAt(pos);  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	pos  =  input.length()  +  input.charAt(pos);	  pos    =    input.length()    +    out.charAt(pos);    	non-compiled	[CE]  cannot  find  symbol  len	82	None	replace
259	[BUG]  [BUGGY]  if(pos  >  0)  {  out.write(input.charAt(pos));  out.write(input.charAt(pos  +  1));  }  [CE]  cannot  find  symbol  len  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  if(pos  >  0)  {  out.write(input.charAt(pos));  out.write(input.charAt(pos  +  1));  }  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	if(pos  >  0)  {  out.write(input.charAt(pos));  out.write(input.charAt(pos  +  1));  }	          out.write(input.charAt(pos));    out.write(input.charAt(pos));    	non-compiled	[CE]  cannot  find  symbol  len	17	None	replace
260	[BUG]  [BUGGY]  int  input  =  input.length()  -  this.output.length();  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  int  input  =  input.length()  -  this.output.length();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	int  input  =  input.length()  -  this.output.length();	  int    input    =    input.length()    -    output.length();    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	63	None	replace
261	[BUG]  [BUGGY]  out.write(input.charAt(pos)/  1);  [CE]  cannot  find  symbol  len  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  out.write(input.charAt(pos)/  1);  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	out.write(input.charAt(pos)/  1);	  out.write(input.charAt(pos)+    1);    	non-compiled	[CE]  cannot  find  symbol  len	31	None	replace
262	[BUG]  [BUGGY]  out.write(input.charAt(pos)+  1));  [CE]  ';'  expected  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  out.write(input.charAt(pos)+  1));  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	out.write(input.charAt(pos)+  1));	  out.write(input.charAt(pos)+    1);    	non-compiled	[CE]  ';'  expected	31	None	replace
263	[BUG]  [BUGGY]  int  pos  =  input.lastIndexOf('.');  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                    ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  int  pos  =  input.lastIndexOf('.');  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	int  pos  =  input.lastIndexOf('.');	  int    pos    =    input.length();    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	22	None	replace
264	[BUG]  [BUGGY]  int  inputLength  =  input.length();  char[]  inputLength  =  input.toChars();  [CE]  variable  inputLength  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  int  inputLength  =  input.length();  char[]  inputLength  =  input.toChars();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	int  inputLength  =  input.length();  char[]  inputLength  =  input.toChars();	          int    inputLength    =    input.length();    char[]    inputLength    =    input.length();    	non-compiled	[CE]  variable  inputLength  is  already  defined  in  method  translate(CharSequence,Writer)	3	None	replace
265	[BUG]  [BUGGY]  int  input  =  input.length()  -  this.out.length();  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  int  input  =  input.length()  -  this.out.length();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	int  input  =  input.length()  -  this.out.length();	  int    input    =    input.length()    -    out.length();    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	87	None	replace
266	[BUG]  [BUGGY]  pos  =  out.length();  pos  =  input.length();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  pos  =  out.length();  pos  =  input.length();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	pos  =  out.length();  pos  =  input.length();	          pos    =    input.length();    pos    =    output.length();    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
267	[BUG]  [BUGGY]  pos  =  input.length();  this.pos  =  input.length();  [CE]  cannot  find  symbol  pos  [FE]                  AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  pos  =  input.length();  this.pos  =  input.length();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	pos  =  input.length();  this.pos  =  input.length();	          pos    =    input.length();    pos    =    output.length();    	non-compiled	[CE]  cannot  find  symbol  pos	58	None	replace
268	[BUG]  [BUGGY]          int    inputLength    =    input.length();    int  outputLength  =  input.length();  Int  inputLength  =  input.length();  int  outputLength  =  input.length();  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]          int    inputLength    =    input.length();    int  outputLength  =  input.length();  Int  inputLength  =  input.length();  int  outputLength  =  input.length();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	                int        inputLength        =        input.length();        int    outputLength    =    input.length();    Int  inputLength  =  input.length();  int  outputLength  =  input.length();	  	non-compiled	[CE]  cannot  find  symbol	4	None	add
269	[BUG]  [BUGGY]          int    inputLength    =    input.length();    int  outputLength  =  input.length();  int  inputLength  =  output.length();  int  outputLength  =  input.length();  [CE]  variable  inputLength  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]      ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]          int    inputLength    =    input.length();    int  outputLength  =  input.length();  int  inputLength  =  output.length();  int  outputLength  =  input.length();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	                int        inputLength        =        input.length();        int    outputLength    =    input.length();    int  inputLength  =  output.length();  int  outputLength  =  input.length();	  	non-compiled	[CE]  variable  inputLength  is  already  defined  in  method  translate(CharSequence,Writer)	4	None	add
270	[BUG]  [BUGGY]  Integer  len  =  Character.codePointCount(input,  0,  input.length());  integer  len  =  Character.codePointCount(input,  0,  input.length());  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  Integer  len  =  Character.codePointCount(input,  0,  input.length());  integer  len  =  Character.codePointCount(input,  0,  input.length());  [BUGGY]      while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	Integer    len    =    Character.codePointCount(input,    0,    input.length());    integer  len  =  Character.codePointCount(input,  0,  input.length());	  	non-compiled	[CE]  cannot  find  symbol	34	None	add
271	[BUG]  [BUGGY]  out.write(input.substring(pos,  input.length()  -  1));  [CE]  cannot  find  symbol  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;      [BUGGY]  out.write(input.substring(pos,  input.length()  -  1));  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	83	83	1	replace	out.write(input.substring(pos,  input.length()  -  1));	  out.write(input.charAt(0));    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
