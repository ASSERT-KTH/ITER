bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(consumed  <  0)  {  if(consumed  <  0)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);    [BUGGY]  if(consumed  <  0)  {  if(consumed  <  0)  {  [BUGGY]    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed    <    0)    {    if(consumed  <  0)  {	  timeout    	non-compiled	[CE]  illegal  start  of  expression	4	None	add
2	[BUG]  [BUGGY]  if(consumed  <  0)  {  If(consumed  <  0)  {  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);    [BUGGY]  if(consumed  <  0)  {  If(consumed  <  0)  {  [BUGGY]    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed    <    0)    {    If(consumed  <  0)  {	  timeout    	non-compiled	[CE]  ';'  expected	4	None	add
3	[BUG]  [BUGGY]  if(consumed  <  0)  {  if(consummed  <  0)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);    [BUGGY]  if(consumed  <  0)  {  if(consummed  <  0)  {  [BUGGY]    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed    <    0)    {    if(consummed  <  0)  {	  timeout    	non-compiled	[CE]  illegal  start  of  expression	4	None	add
4	[BUG]  [BUGGY]  if(consumed  <  0)  {  if(consumed  >=  0)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);    [BUGGY]  if(consumed  <  0)  {  if(consumed  >=  0)  {  [BUGGY]    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed    <    0)    {    if(consumed  >=  0)  {	  timeout    	non-compiled	[CE]  illegal  start  of  expression	4	None	add
5	[BUG]  [BUGGY]  if(consumed  <  =  0  ||  consumed  >  pos)  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);    [BUGGY]  if(consumed  <  =  0  ||  consumed  >  pos)  {  [BUGGY]    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  <  =  0  ||  consumed  >  pos)  {	  if(consumed    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
6	[BUG]  [BUGGY]  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [CE]  cannot  find  symbol  [FE]              ComparisonFailure    [CONTEXT]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);    [BUGGY]  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [BUGGY]    if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }	      if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
7	[BUG]  [BUGGY]  if(consumed  <  =  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);    [BUGGY]  if(consumed  <  =  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [BUGGY]    if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  <  =  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }	      if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
8	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  [CE]  'else'  without  'if'  [FE]              ComparisonFailure    [CONTEXT]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);    [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  [BUGGY]    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));	      	non-compiled	[CE]  'else'  without  'if'	6	None	replace
9	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  [CE]  'else'  without  'if'  [FE]                ComparisonFailure    [CONTEXT]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);    [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  [BUGGY]    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);	      	non-compiled	[CE]  'else'  without  'if'	6	None	replace
10	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(consumed,  pos));  [CE]  'else'  without  'if'  [FE]                  ComparisonFailure    [CONTEXT]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);    [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(consumed,  pos));  [BUGGY]    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	char[]  c  =  Character.toChars(Character.codePointAt(consumed,  pos));	      	non-compiled	[CE]  'else'  without  'if'	6	None	replace
11	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  [CE]  'else'  without  'if'  [FE]                    ComparisonFailure    [CONTEXT]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);    [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  [BUGGY]    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));	      	non-compiled	[CE]  'else'  without  'if'	6	None	replace
12	[BUG]  [BUGGY]  timeout  [FE]        ComparisonFailure    [CONTEXT]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);    [BUGGY]  if(consumed  >  0)  {  for(int  c  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  [BUGGY]    if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	add	if(consumed  >  0)  {  for(int  c  =  0;  pos  <  len;  pos++)  {  out.write(c);  }	      if(consumed    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    out.write(c);    }    	compilable	timeout	7	1	replace
13	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  c  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  timeout  [FE]        ComparisonFailure    [CONTEXT]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);    [BUGGY]  if(consumed  >  0)  {  for(int  c  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  [BUGGY]    if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  for(int  c  =  0;  pos  <  len;  pos++)  {  out.write(c);  }	      if(consumed    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    out.write(c);    }    	compilable	timeout	7	1	replace
14	[BUG]  [BUGGY]  timeout  [FE]          ComparisonFailure    [CONTEXT]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);    [BUGGY]  if(consumed  <  0)  {  for(int  c  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  [BUGGY]    if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	add	if(consumed  <  0)  {  for(int  c  =  0;  pos  <  len;  pos++)  {  out.write(c);  }	      if(consumed    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    out.write(c);    }    	compilable	timeout	7	1	replace
15	[BUG]  [BUGGY]  if(consumed  <  0)  {  for(int  c  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  timeout  [FE]          ComparisonFailure    [CONTEXT]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);    [BUGGY]  if(consumed  <  0)  {  for(int  c  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  [BUGGY]    if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  <  0)  {  for(int  c  =  0;  pos  <  len;  pos++)  {  out.write(c);  }	      if(consumed    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    out.write(c);    }    	compilable	timeout	7	1	replace
16	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);    [BUGGY]  if(consumed  >=  0)  {  [BUGGY]    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	add	if(consumed  >=  0)  {	  if(consumed    >    0)    {    timeout    	compilable	  [FE]  ComparisonFailure  	2	15	replace
17	[BUG]  [BUGGY]  if(consumed  >=  0)  {  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);    [BUGGY]  if(consumed  >=  0)  {  [BUGGY]    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >=  0)  {	  if(consumed    >    0)    {    timeout    	compilable	  [FE]  ComparisonFailure  	2	15	replace
18	[BUG]  [BUGGY]  timeout  [FE]          ComparisonFailure    [CONTEXT]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);    [BUGGY]  if(consumed  <  0)  {  for(int  c  =  0;  c  <  len;  pos++)  {  out.write(c);  }  [BUGGY]    if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	add	if(consumed  <  0)  {  for(int  c  =  0;  c  <  len;  pos++)  {  out.write(c);  }	      if(consumed    <    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    out.write(c);    }    	compilable	timeout	8	1	replace
19	[BUG]  [BUGGY]  if(consumed  <  0)  {  for(int  c  =  0;  c  <  len;  pos++)  {  out.write(c);  }  timeout  [FE]          ComparisonFailure    [CONTEXT]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);    [BUGGY]  if(consumed  <  0)  {  for(int  c  =  0;  c  <  len;  pos++)  {  out.write(c);  }  [BUGGY]    if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  <  0)  {  for(int  c  =  0;  c  <  len;  pos++)  {  out.write(c);  }	      if(consumed    <    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    out.write(c);    }    	compilable	timeout	8	1	replace
20	[BUG]  [BUGGY]  CharSequence  c  =  Character.toChars(Character.codePointAt(input,  pos));  [CE]  'else'  without  'if'  [FE]            ComparisonFailure    [CONTEXT]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);    [BUGGY]  CharSequence  c  =  Character.toChars(Character.codePointAt(input,  pos));  [BUGGY]    if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	CharSequence  c  =  Character.toChars(Character.codePointAt(input,  pos));	      if(consumed    <    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    out.write(c);    }    	non-compiled	[CE]  'else'  without  'if'	8	None	replace
21	[BUG]  [BUGGY]  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c);  }  [CE]  cannot  find  symbol  c  [FE]            ComparisonFailure    [CONTEXT]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);    [BUGGY]  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c);  }  [BUGGY]    if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c);  }	      if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    out.write(c);    }    	non-compiled	[CE]  cannot  find  symbol  c	9	None	replace
22	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  out.write(c);  }  [CE]  cannot  find  symbol  c  [FE]              ComparisonFailure    [CONTEXT]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);    [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  out.write(c);  }  [BUGGY]    if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  out.write(c);  }	      if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    out.write(c);    }    	non-compiled	[CE]  cannot  find  symbol  c	9	None	replace
23	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  c  =  0;  c  <  len;  pt++)  {  out.write(c);  }  [CE]  cannot  find  symbol  pt  [FE]                ComparisonFailure    [CONTEXT]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);    [BUGGY]  if(consumed  >  0)  {  for(int  c  =  0;  c  <  len;  pt++)  {  out.write(c);  }  [BUGGY]    if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  for(int  c  =  0;  c  <  len;  pt++)  {  out.write(c);  }	      if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    out.write(c);    }    	non-compiled	[CE]  cannot  find  symbol  pt	9	None	replace
24	[BUG]  [BUGGY]  timeout  [FE]            ComparisonFailure    [CONTEXT]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);    [BUGGY]  if(consumed  <  0  ||  consumed  >  pos)  {  [BUGGY]    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	add	if(consumed  <  0  ||  consumed  >  pos)  {	  if(consumed    <    0)    {    timeout    	compilable	timeout	5	1	replace
25	[BUG]  [BUGGY]  if(consumed  <  0  ||  consumed  >  pos)  {  timeout  [FE]            ComparisonFailure    [CONTEXT]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);    [BUGGY]  if(consumed  <  0  ||  consumed  >  pos)  {  [BUGGY]    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  <  0  ||  consumed  >  pos)  {	  if(consumed    <    0)    {    timeout    	compilable	timeout	5	1	replace
26	[BUG]  [BUGGY]  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  input.toChars();  out.write(c);  }  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);    [BUGGY]  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  input.toChars();  out.write(c);  }  [BUGGY]    if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  input.toChars();  out.write(c);  }	      if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    input.toChars();    out.write(c);    }    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
27	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pos  =  0;  pt  <  len;  pt++)  {  char[]  c  =  input.toChars();  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]              ComparisonFailure    [CONTEXT]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);    [BUGGY]  if(consumed  >  0)  {  for(int  pos  =  0;  pt  <  len;  pt++)  {  char[]  c  =  input.toChars();  out.write(c);  }  [BUGGY]    if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  for(int  pos  =  0;  pt  <  len;  pt++)  {  char[]  c  =  input.toChars();  out.write(c);  }	      if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    input.toChars();    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	16	None	replace
28	[BUG]  [BUGGY]  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pt));  out.write(c);  }  [CE]  no  suitable  method  found  for  codePointAt(int,int)  [FE]          ComparisonFailure    [CONTEXT]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);    [BUGGY]  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pt));  out.write(c);  }  [BUGGY]    if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pt));  out.write(c);  }	      if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    Character.toChars(Character.codePointAt(pos,    pt));    out.write(c);    }    	non-compiled	[CE]  no  suitable  method  found  for  codePointAt(int,int)	13	None	replace
29	[BUG]  [BUGGY]  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pt));  out.write(c);  }  [CE]  no  suitable  method  found  for  codePointAt(int,int)  [FE]            ComparisonFailure    [CONTEXT]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);    [BUGGY]  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pt));  out.write(c);  }  [BUGGY]    if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pt));  out.write(c);  }	      if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    Character.toChars(Character.codePointAt(pos,    pt));    out.write(c);    }    	non-compiled	[CE]  no  suitable  method  found  for  codePointAt(int,int)	13	None	replace
30	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pt));  out.write(  [CE]  '.class'  expected  [FE]              ComparisonFailure    [CONTEXT]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);    [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pt));  out.write(  [BUGGY]    if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pt));  out.write(	      if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    Character.toChars(Character.codePointAt(pos,    pt));    out.write(c);    }    	non-compiled	[CE]  '.class'  expected	13	None	replace
31	[BUG]  [BUGGY]  timeout  [FE]        ComparisonFailure    [CONTEXT]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);    [BUGGY]  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [BUGGY]    if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	add	if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }	      if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    out.write(c);    }    	compilable	timeout	12	1	replace
32	[BUG]  [BUGGY]  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  timeout  [FE]        ComparisonFailure    [CONTEXT]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);    [BUGGY]  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [BUGGY]    if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }	      if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    out.write(c);    }    	compilable	timeout	12	1	replace
33	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);    [BUGGY]  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [BUGGY]    if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	add	if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }	      if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    out.write(c);    }    	compilable	  [FE]  ComparisonFailure  	12	19	replace
34	[BUG]  [BUGGY]  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);    [BUGGY]  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [BUGGY]    if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }	      if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    out.write(c);    }    	compilable	  [FE]  ComparisonFailure  	12	19	replace
35	[BUG]  [BUGGY]  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }  [CE]  no  suitable  method  found  for  codePointAt(int,int)  [FE]        ComparisonFailure    [CONTEXT]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);    [BUGGY]  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }  [BUGGY]    if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }	      if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    Character.toChars(Character.codePointAt(pos,    pos));    out.write(c);    }    	non-compiled	[CE]  no  suitable  method  found  for  codePointAt(int,int)	14	None	replace
36	[BUG]  [BUGGY]  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }  [CE]  no  suitable  method  found  for  codePointAt(int,int)  [FE]          ComparisonFailure    [CONTEXT]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);    [BUGGY]  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }  [BUGGY]    if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }	      if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    Character.toChars(Character.codePointAt(pos,    pos));    out.write(c);    }    	non-compiled	[CE]  no  suitable  method  found  for  codePointAt(int,int)	14	None	replace
37	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  Character[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }  [CE]  no  suitable  method  found  for  codePointAt(int,int)  [FE]            ComparisonFailure    [CONTEXT]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);    [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  Character[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }  [BUGGY]    if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  Character[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }	      if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    Character.toChars(Character.codePointAt(pos,    pos));    out.write(c);    }    	non-compiled	[CE]  no  suitable  method  found  for  codePointAt(int,int)	14	None	replace
38	[BUG]  [BUGGY]  if(consumed  <  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                ComparisonFailure    [CONTEXT]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);    [BUGGY]  if(consumed  <  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [BUGGY]    if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  <  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }	      if(consumed    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	11	None	replace
39	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  output.toChars(pos);  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                  ComparisonFailure    [CONTEXT]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);    [BUGGY]  if(consumed  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  output.toChars(pos);  out.write(c);  }  [BUGGY]    if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  output.toChars(pos);  out.write(c);  }	      if(consumed    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	11	None	replace
40	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out[]  c  =  input.toChars(pos);  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                    ComparisonFailure    [CONTEXT]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);    [BUGGY]  if(consumed  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out[]  c  =  input.toChars(pos);  out.write(c);  }  [BUGGY]    if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out[]  c  =  input.toChars(pos);  out.write(c);  }	      if(consumed    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	11	None	replace
41	[BUG]  [BUGGY]  if(consumed  <  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]          ComparisonFailure    [CONTEXT]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);    [BUGGY]  if(consumed  <  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }  [BUGGY]    if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  <  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }	      if(consumed    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    Character.toChars(Character.codePointAt(pos,    pos));    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	15	None	replace
42	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }  [CE]  no  suitable  method  found  for  codePointAt(int,int)  [FE]            ComparisonFailure    [CONTEXT]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);    [BUGGY]  if(consumed  >  0)  {  for(pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }  [BUGGY]    if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  for(pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }	      if(consumed    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    Character.toChars(Character.codePointAt(pos,    pos));    out.write(c);    }    	non-compiled	[CE]  no  suitable  method  found  for  codePointAt(int,int)	15	None	replace
43	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  Character[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]              ComparisonFailure    [CONTEXT]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);    [BUGGY]  if(consumed  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  Character[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }  [BUGGY]    if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  Character[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }	      if(consumed    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    Character.toChars(Character.codePointAt(pos,    pos));    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	15	None	replace
44	[BUG]  [BUGGY]  if(consumed  >  0)  {  if(consumed  >  0)  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);    [BUGGY]  if(consumed  >  0)  {  if(consumed  >  0)  {  [BUGGY]    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed    >    0)    {    if(consumed  >  0)  {	  timeout    	non-compiled	[CE]  illegal  start  of  expression	1	None	add
45	[BUG]  [BUGGY]  if(consumed  >  0)  {  If(consumed  >  0)  {  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);    [BUGGY]  if(consumed  >  0)  {  If(consumed  >  0)  {  [BUGGY]    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed    >    0)    {    If(consumed  >  0)  {	  timeout    	non-compiled	[CE]  ';'  expected	1	None	add
46	[BUG]  [BUGGY]  if(consumed  >  0)  {  if(consummed  >  0)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);    [BUGGY]  if(consumed  >  0)  {  if(consummed  >  0)  {  [BUGGY]    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed    >    0)    {    if(consummed  >  0)  {	  timeout    	non-compiled	[CE]  illegal  start  of  expression	1	None	add
47	[BUG]  [BUGGY]  if(consumed  <  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars();  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]              ComparisonFailure    [CONTEXT]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);    [BUGGY]  if(consumed  <  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars();  out.write(c);  }  [BUGGY]    if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  <  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars();  out.write(c);  }	      if(consumed    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    input.toChars();    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	17	None	replace
48	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out[]  c  =  input.toChars();  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                ComparisonFailure    [CONTEXT]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);    [BUGGY]  if(consumed  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out[]  c  =  input.toChars();  out.write(c);  }  [BUGGY]    if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out[]  c  =  input.toChars();  out.write(c);  }	      if(consumed    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    input.toChars();    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	17	None	replace
49	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pos  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]        ComparisonFailure    [CONTEXT]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);    [BUGGY]  if(consumed  >  0)  {  for(int  pos  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [BUGGY]    if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  for(int  pos  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }	      if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	12	None	replace
50	[BUG]  [BUGGY]  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c);  }  [CE]  cannot  find  symbol  c  [FE]            ComparisonFailure    [CONTEXT]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);    [BUGGY]  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c);  }  [BUGGY]    if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c);  }	      if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    out.write(c);    }    	non-compiled	[CE]  cannot  find  symbol  c	9	None	replace
51	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  c  =  0;  pt  <  len;  pt++)  {  out.write(c);  }  [CE]  cannot  find  symbol  pt  [FE]              ComparisonFailure    [CONTEXT]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);    [BUGGY]  if(consumed  >  0)  {  for(int  c  =  0;  pt  <  len;  pt++)  {  out.write(c);  }  [BUGGY]    if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  for(int  c  =  0;  pt  <  len;  pt++)  {  out.write(c);  }	      if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    out.write(c);    }    	non-compiled	[CE]  cannot  find  symbol  pt	9	None	replace
52	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write(c);  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  input.toChars();  out.write(c);  }  [CE]  cannot  find  symbol  c  [FE]            ComparisonFailure    [CONTEXT]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);    [BUGGY]  if(consumed  >  0)  {  out.write(c);  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  input.toChars();  out.write(c);  }  [BUGGY]    if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  out.write(c);  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  input.toChars();  out.write(c);  }	      if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    input.toChars();    out.write(c);    }    	non-compiled	[CE]  cannot  find  symbol  c	16	None	replace
53	[BUG]  [BUGGY]  if(consumed  >=  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]          ComparisonFailure    [CONTEXT]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);    [BUGGY]  if(consumed  >=  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }  [BUGGY]    if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >=  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }	      if(consumed    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    Character.toChars(Character.codePointAt(pos,    pos));    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	15	None	replace
54	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pos  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]        ComparisonFailure    [CONTEXT]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);    [BUGGY]  if(consumed  >  0)  {  for(int  pos  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }  [BUGGY]    if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  for(int  pos  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }	      if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    Character.toChars(Character.codePointAt(pos,    pos));    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	14	None	replace
55	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write(c);  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [CE]  cannot  find  symbol  c  [FE]                ComparisonFailure    [CONTEXT]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);    [BUGGY]  if(consumed  >  0)  {  out.write(c);  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [BUGGY]    if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  out.write(c);  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }	      if(consumed    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  cannot  find  symbol  c	11	None	replace
56	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure    [CONTEXT]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);    [BUGGY]  if(consumed  >  0)  {  for(pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [BUGGY]    if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  for(pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }	      if(consumed    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
57	[BUG]  [BUGGY]  pos  +=  input.length();  [CE]  'else'  without  'if'  [FE]              ComparisonFailure    [CONTEXT]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);    [BUGGY]  pos  +=  input.length();  [BUGGY]    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	pos  +=  input.length();	      	non-compiled	[CE]  'else'  without  'if'	6	None	replace
58	[BUG]  [BUGGY]  if(consumed  ==  0)  {  out.write('else');  }  else  {  out.write('n');  }  [CE]  unclosed  character  literal  [FE]                ComparisonFailure    [CONTEXT]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);    [BUGGY]  if(consumed  ==  0)  {  out.write('else');  }  else  {  out.write('n');  }  [BUGGY]    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  ==  0)  {  out.write('else');  }  else  {  out.write('n');  }	      	non-compiled	[CE]  unclosed  character  literal	6	None	replace
59	[BUG]  [BUGGY]  if(consumed  <  =  0)  {  out.write('else');  }  else  {  out.write('n');  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);    [BUGGY]  if(consumed  <  =  0)  {  out.write('else');  }  else  {  out.write('n');  }  [BUGGY]    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  <  =  0)  {  out.write('else');  }  else  {  out.write('n');  }	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
60	[BUG]  [BUGGY]  if(consumed  ==  0)  {  out.write('n');  }  else  {  out.write('n');  }  [CE]  'else'  without  'if'  [FE]                    ComparisonFailure    [CONTEXT]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);    [BUGGY]  if(consumed  ==  0)  {  out.write('n');  }  else  {  out.write('n');  }  [BUGGY]    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  ==  0)  {  out.write('n');  }  else  {  out.write('n');  }	      	non-compiled	[CE]  'else'  without  'if'	6	None	replace
61	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write(c);  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [CE]  cannot  find  symbol  c  [FE]              ComparisonFailure    [CONTEXT]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);    [BUGGY]  if(consumed  >  0)  {  out.write(c);  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [BUGGY]    if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  out.write(c);  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }	      if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  cannot  find  symbol  c	10	None	replace
62	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pos  =  0;  pt  <  len;  pt++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                ComparisonFailure    [CONTEXT]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);    [BUGGY]  if(consumed  >  0)  {  for(int  pos  =  0;  pt  <  len;  pt++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [BUGGY]    if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  for(int  pos  =  0;  pt  <  len;  pt++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }	      if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	10	None	replace
63	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write(c);  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars();  out.write(c);  }  [CE]  cannot  find  symbol  c  [FE]              ComparisonFailure    [CONTEXT]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);    [BUGGY]  if(consumed  >  0)  {  out.write(c);  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars();  out.write(c);  }  [BUGGY]    if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  out.write(c);  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars();  out.write(c);  }	      if(consumed    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    input.toChars();    out.write(c);    }    	non-compiled	[CE]  cannot  find  symbol  c	17	None	replace
64	[BUG]  [BUGGY]  if(consumed  <  0)  {  for(int  pos  =  0;  pos  <  input.length();  pos++)  {  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]          ComparisonFailure    [CONTEXT]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);    [BUGGY]  if(consumed  <  0)  {  for(int  pos  =  0;  pos  <  input.length();  pos++)  {  out.write(c);  }  [BUGGY]    if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  <  0)  {  for(int  pos  =  0;  pos  <  input.length();  pos++)  {  out.write(c);  }	      if(consumed    <    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	8	None	replace
65	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [CE]  cannot  find  symbol  [FE]              ComparisonFailure    [CONTEXT]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);    [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [BUGGY]    if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }	      if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
66	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.charCount(input,  pos));  out.write(c);  }  [CE]  method  charCount  in  class  Character  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure    [CONTEXT]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);    [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.charCount(input,  pos));  out.write(c);  }  [BUGGY]    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.charCount(input,  pos));  out.write(c);  }	      	non-compiled	[CE]  method  charCount  in  class  Character  cannot  be  applied  to  given  types;	6	None	replace
67	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pos  =  0;  pos  <  chars.length;  pos++)  {  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]        ComparisonFailure    [CONTEXT]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);    [BUGGY]  if(consumed  >  0)  {  for(int  pos  =  0;  pos  <  chars.length;  pos++)  {  out.write(c);  }  [BUGGY]    if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  for(int  pos  =  0;  pos  <  chars.length;  pos++)  {  out.write(c);  }	      if(consumed    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	7	None	replace
68	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pos  =  0;  pos  <  consumed;  pos++)  {  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]          ComparisonFailure    [CONTEXT]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);    [BUGGY]  if(consumed  >  0)  {  for(int  pos  =  0;  pos  <  consumed;  pos++)  {  out.write(c);  }  [BUGGY]    if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  for(int  pos  =  0;  pos  <  consumed;  pos++)  {  out.write(c);  }	      if(consumed    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	7	None	replace
69	[BUG]  [BUGGY]  if(consumed  <  =  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);    [BUGGY]  if(consumed  <  =  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [BUGGY]    if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  <  =  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }	      if(consumed    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
70	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure    [CONTEXT]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);    [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [BUGGY]    if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  for(int  pt  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }	      if(consumed    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
71	[BUG]  [BUGGY]  if(consumed  >  0  ||  consumed  <  =  pos)  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);    [BUGGY]  if(consumed  >  0  ||  consumed  <  =  pos)  {  [BUGGY]    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0  ||  consumed  <  =  pos)  {	  if(consumed    >    0)    {    timeout    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
72	[BUG]  [BUGGY]  timeout  [FE]        ComparisonFailure    [CONTEXT]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);    [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [BUGGY]    if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	add	if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }	      if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    out.write(c);    }    	compilable	timeout	12	1	replace
73	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  timeout  [FE]        ComparisonFailure    [CONTEXT]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);    [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [BUGGY]    if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }	      if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    out.write(c);    }    	compilable	timeout	12	1	replace
74	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  pos;  pt++)  {  out.write(c);  }  [CE]  cannot  find  symbol  c  [FE]            ComparisonFailure    [CONTEXT]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);    [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  pos;  pt++)  {  out.write(c);  }  [BUGGY]    if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  pos;  pt++)  {  out.write(c);  }	      if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    out.write(c);    }    	non-compiled	[CE]  cannot  find  symbol  c	9	None	replace
75	[BUG]  [BUGGY]  if(pos  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  input.toChars();  out.write(c);  }  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);    [BUGGY]  if(pos  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  input.toChars();  out.write(c);  }  [BUGGY]    if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(pos  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  input.toChars();  out.write(c);  }	      if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    input.toChars();    out.write(c);    }    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
76	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }  [CE]  no  suitable  method  found  for  codePointAt(int,int)  [FE]        ComparisonFailure    [CONTEXT]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);    [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }  [BUGGY]    if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }	      if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    Character.toChars(Character.codePointAt(pos,    pos));    out.write(c);    }    	non-compiled	[CE]  no  suitable  method  found  for  codePointAt(int,int)	14	None	replace
77	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pt));  out.write(c);  }  [CE]  no  suitable  method  found  for  codePointAt(int,int)  [FE]          ComparisonFailure    [CONTEXT]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);    [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pt));  out.write(c);  }  [BUGGY]    if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pt));  out.write(c);  }	      if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    Character.toChars(Character.codePointAt(pos,    pt));    out.write(c);    }    	non-compiled	[CE]  no  suitable  method  found  for  codePointAt(int,int)	13	None	replace
78	[BUG]  [BUGGY]  if(consumed  <  =  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);    [BUGGY]  if(consumed  <  =  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  [BUGGY]    if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  <  =  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }	      if(consumed    <    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
79	[BUG]  [BUGGY]  if(consumed  <  0)  {  for(int  pos  =  0;  pos  <  chars.length;  pos++)  {  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]            ComparisonFailure    [CONTEXT]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);    [BUGGY]  if(consumed  <  0)  {  for(int  pos  =  0;  pos  <  chars.length;  pos++)  {  out.write(c);  }  [BUGGY]    if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  <  0)  {  for(int  pos  =  0;  pos  <  chars.length;  pos++)  {  out.write(c);  }	      if(consumed    <    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	8	None	replace
80	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars();  out.write(c);  }  [CE]  cannot  find  symbol  [FE]              ComparisonFailure    [CONTEXT]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);    [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars();  out.write(c);  }  [BUGGY]    if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  for(int  pt  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars();  out.write(c);  }	      if(consumed    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    input.toChars();    out.write(c);    }    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
81	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }  [CE]  no  suitable  method  found  for  codePointAt(int,int)  [FE]          ComparisonFailure    [CONTEXT]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);    [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }  [BUGGY]    if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  for(int  pt  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }	      if(consumed    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    Character.toChars(Character.codePointAt(pos,    pos));    out.write(c);    }    	non-compiled	[CE]  no  suitable  method  found  for  codePointAt(int,int)	15	None	replace
