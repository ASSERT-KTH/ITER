bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(consumed  <  =  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  <  =  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  <  =  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }	  if(consumed    <    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    out.write(c);    }    timeout    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
2	[BUG]  [BUGGY]  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  Character[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CE]  incompatible  types  [FE]              ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  Character[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  Character[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }	  if(consumed    <    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    out.write(c);    }    timeout    	non-compiled	[CE]  incompatible  types	32	None	replace
3	[BUG]  [BUGGY]  out.write(c);  [CE]  'else'  without  'if'  [FE]            ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  out.write(c);  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	out.write(c);	  if(consumed    <    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    Character.toChars(Character.codePointAt(pos,    pos));    out.write(c);    }    	non-compiled	[CE]  'else'  without  'if'	35	None	replace
4	[BUG]  [BUGGY]  pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars();  out.write(c);  }  [CE]  not  a  statement  [FE]                  ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars();  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars();  out.write(c);  }	  if(consumed    >    0)    {    for(int    pt    =    0;    pos    <    len;    pos++)    {    char[]    c    =    input.toChars();    out.write(c);    }    	non-compiled	[CE]  not  a  statement	80	None	replace
5	[BUG]  [BUGGY]  if(consumed  <  0  ||  consumed  >  pos)  {  if(consumed  <  0  ||  consumed  >  pos)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  <  0  ||  consumed  >  pos)  {  if(consumed  <  0  ||  consumed  >  pos)  {  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed    <    0    ||    consumed    >    pos)    {    if(consumed  <  0  ||  consumed  >  pos)  {	  timeout    	non-compiled	[CE]  illegal  start  of  expression	24	None	add
6	[BUG]  [BUGGY]  if(consumed  <  0  ||  consumed  >  pos)  {  If(consumed  <  0  ||  consumed  >  pos)  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  <  0  ||  consumed  >  pos)  {  If(consumed  <  0  ||  consumed  >  pos)  {  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed    <    0    ||    consumed    >    pos)    {    If(consumed  <  0  ||  consumed  >  pos)  {	  timeout    	non-compiled	[CE]  ';'  expected	24	None	add
7	[BUG]  [BUGGY]  if(consumed  <  0  ||  consumed  >  pos)  {  if(consumed  >=  0  ||  consumed  >  pos)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  <  0  ||  consumed  >  pos)  {  if(consumed  >=  0  ||  consumed  >  pos)  {  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed    <    0    ||    consumed    >    pos)    {    if(consumed  >=  0  ||  consumed  >  pos)  {	  timeout    	non-compiled	[CE]  illegal  start  of  expression	24	None	add
8	[BUG]  [BUGGY]  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }  [CE]  no  suitable  method  found  for  codePointAt(int,int)  [FE]            ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }	  if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    consumed;    pt++)    {    char[]    c    =    Character.toChars(Character.codePointAt(pos,    pos));    out.write(c);    }    	non-compiled	[CE]  no  suitable  method  found  for  codePointAt(int,int)	76	None	replace
9	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(pos,  consumed));  [CE]  'else'  without  'if'  [FE]                      ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(pos,  consumed));  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	char[]  c  =  Character.toChars(Character.codePointAt(pos,  consumed));	  char[]    c    =    Character.toChars(Character.codePointAt(consumed,    pos));    	non-compiled	[CE]  'else'  without  'if'	10	None	replace
10	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(consume,  pos));  [CE]  'else'  without  'if'  [FE]                        ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(consume,  pos));  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	char[]  c  =  Character.toChars(Character.codePointAt(consume,  pos));	  char[]    c    =    Character.toChars(Character.codePointAt(consumed,    pos));    	non-compiled	[CE]  'else'  without  'if'	10	None	replace
11	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(consumed,  pos  +  1));  [CE]  'else'  without  'if'  [FE]                          ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(consumed,  pos  +  1));  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	char[]  c  =  Character.toChars(Character.codePointAt(consumed,  pos  +  1));	  char[]    c    =    Character.toChars(Character.codePointAt(consumed,    pos));    	non-compiled	[CE]  'else'  without  'if'	10	None	replace
12	[BUG]  [BUGGY]  if(consumed  <  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out[]  c  =  input.toChars(pos);  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                        ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  <  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out[]  c  =  input.toChars(pos);  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  <  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out[]  c  =  input.toChars(pos);  out.write(c);  }	  if(consumed    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    out[]    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	40	None	replace
13	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  output[]  c  =  input.toChars(pos);  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                          ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  output[]  c  =  input.toChars(pos);  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  output[]  c  =  input.toChars(pos);  out.write(c);  }	  if(consumed    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    out[]    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	40	None	replace
14	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out[]  c  =  input.toChars(pos,  out);  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                            ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out[]  c  =  input.toChars(pos,  out);  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out[]  c  =  input.toChars(pos,  out);  out.write(c);  }	  if(consumed    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    out[]    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	40	None	replace
15	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  input.toString();  out.write(c);  }  [CE]  incompatible  types  [FE]                ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  input.toString();  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  input.toString();  out.write(c);  }	  if(pos    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    input.toChars();    out.write(c);    }    	non-compiled	[CE]  incompatible  types	75	None	replace
16	[BUG]  [BUGGY]  timeout  [FE]                ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(pos  <  0  ||  consumed  >  pos)  {  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	add	if(pos  <  0  ||  consumed  >  pos)  {	  if(consumed    <    0    ||    consumed    >    pos)    {    timeout    	compilable	timeout	25	1	replace
17	[BUG]  [BUGGY]  if(pos  <  0  ||  consumed  >  pos)  {  timeout  [FE]                ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(pos  <  0  ||  consumed  >  pos)  {  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(pos  <  0  ||  consumed  >  pos)  {	  if(consumed    <    0    ||    consumed    >    pos)    {    timeout    	compilable	timeout	25	1	replace
18	[BUG]  [BUGGY]  timeout  [FE]                  ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  <  0  ||  consumed  >  pos  +  1)  {  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	add	if(consumed  <  0  ||  consumed  >  pos  +  1)  {	  if(consumed    <    0    ||    consumed    >    pos)    {    timeout    	compilable	timeout	25	1	replace
19	[BUG]  [BUGGY]  if(consumed  <  0  ||  consumed  >  pos  +  1)  {  timeout  [FE]                  ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  <  0  ||  consumed  >  pos  +  1)  {  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  <  0  ||  consumed  >  pos  +  1)  {	  if(consumed    <    0    ||    consumed    >    pos)    {    timeout    	compilable	timeout	25	1	replace
20	[BUG]  [BUGGY]  timeout  [FE]                    ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  <  0  ||  consumed  >  pos  -  1)  {  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	add	if(consumed  <  0  ||  consumed  >  pos  -  1)  {	  if(consumed    <    0    ||    consumed    >    pos)    {    timeout    	compilable	timeout	25	1	replace
21	[BUG]  [BUGGY]  if(consumed  <  0  ||  consumed  >  pos  -  1)  {  timeout  [FE]                    ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  <  0  ||  consumed  >  pos  -  1)  {  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  <  0  ||  consumed  >  pos  -  1)  {	  if(consumed    <    0    ||    consumed    >    pos)    {    timeout    	compilable	timeout	25	1	replace
22	[BUG]  [BUGGY]  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed    <    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    out.write(c);    }    if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	31	None	add
23	[BUG]  [BUGGY]  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed    <    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    out.write(c);    }    if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	31	None	add
24	[BUG]  [BUGGY]  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed    <    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    out.write(c);    }    if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	31	None	add
25	[BUG]  [BUGGY]  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  c[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  c[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed    <    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    out.write(c);    }    if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  c[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	31	None	add
26	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  p  =  0;  pt  <  len;  pt++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [CE]  cannot  find  symbol  pt  [FE]                    ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >  0)  {  for(int  p  =  0;  pt  <  len;  pt++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  for(int  p  =  0;  pt  <  len;  pt++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }	  if(consumed    >    0)    {    for(int    pos    =    0;    pt    <    len;    pt++)    {    char[]    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  cannot  find  symbol  pt	62	None	replace
27	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out[]  c  =  input.toChars(pos);  out.write(c);  }  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out[]  c  =  input.toChars(pos);  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out[]  c  =  input.toChars(pos);  out.write(c);  }	  if(consumed    >    0)    {    for(int    pos    =    0;    pt    <    len;    pt++)    {    char[]    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
28	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    consumed;    pt++)    {    char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    out.write(c);    }    if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	72	None	add
29	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    consumed;    pt++)    {    char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    out.write(c);    }    if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	72	None	add
30	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    consumed;    pt++)    {    char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    out.write(c);    }    if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	72	None	add
31	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  c[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  c[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    consumed;    pt++)    {    char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    out.write(c);    }    if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  c[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	72	None	add
32	[BUG]  [BUGGY]  if(consumed!=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c);  }  [CE]  cannot  find  symbol  c  [FE]                ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed!=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed!=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c);  }	  if(consumed    >=    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    out.write(c);    }    	non-compiled	[CE]  cannot  find  symbol  c	50	None	replace
33	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  c  =  0;  pos  <  chars.length;  pos++)  {  out.write(c);  }  [CE]  cannot  find  symbol  chars  [FE]            ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >  0)  {  for(int  c  =  0;  pos  <  chars.length;  pos++)  {  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  for(int  c  =  0;  pos  <  chars.length;  pos++)  {  out.write(c);  }	  if(consumed    >    0)    {    for(int    pos    =    0;    pos    <    chars.length;    pos++)    {    out.write(c);    }    	non-compiled	[CE]  cannot  find  symbol  chars	67	None	replace
34	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  c  =  0;  c  <  chars.length;  c++)  {  out.write(c);  }  [CE]  cannot  find  symbol  chars  [FE]              ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >  0)  {  for(int  c  =  0;  c  <  chars.length;  c++)  {  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  for(int  c  =  0;  c  <  chars.length;  c++)  {  out.write(c);  }	  if(consumed    >    0)    {    for(int    pos    =    0;    pos    <    chars.length;    pos++)    {    out.write(c);    }    	non-compiled	[CE]  cannot  find  symbol  chars	67	None	replace
35	[BUG]  [BUGGY]  pos  +=  consumed.length();  [CE]  'else'  without  'if'  [FE]                  ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  pos  +=  consumed.length();  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	pos  +=  consumed.length();	  pos    +=    input.length();    	non-compiled	[CE]  'else'  without  'if'	57	None	replace
36	[BUG]  [BUGGY]  pos  +=  len.length();  [CE]  'else'  without  'if'  [FE]                    ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  pos  +=  len.length();  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	pos  +=  len.length();	  pos    +=    input.length();    	non-compiled	[CE]  'else'  without  'if'	57	None	replace
37	[BUG]  [BUGGY]  pos  +=  input.length()  +  1;  [CE]  'else'  without  'if'  [FE]                      ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  pos  +=  input.length()  +  1;  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	pos  +=  input.length()  +  1;	  pos    +=    input.length();    	non-compiled	[CE]  'else'  without  'if'	57	None	replace
38	[BUG]  [BUGGY]  if(consumed  <  0)  {  for(int  pos  =  0;  pt  <  len;  pt++)  {  char[]  c  =  input.toChars();  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  <  0)  {  for(int  pos  =  0;  pt  <  len;  pt++)  {  char[]  c  =  input.toChars();  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  <  0)  {  for(int  pos  =  0;  pt  <  len;  pt++)  {  char[]  c  =  input.toChars();  out.write(c);  }	  if(consumed    <    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    input.toChars();    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	26	None	replace
39	[BUG]  [BUGGY]  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  input.toChars();  out.write(c);  }  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  input.toChars();  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  input.toChars();  out.write(c);  }	  if(consumed    <    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    input.toChars();    out.write(c);    }    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
40	[BUG]  [BUGGY]  pos  >  0)  {  for(int  c  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  [CE]  not  a  statement  [FE]            ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  pos  >  0)  {  for(int  c  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	pos  >  0)  {  for(int  c  =  0;  pos  <  len;  pos++)  {  out.write(c);  }	  if(consumed    >    0)    {    for(int    c    =    0;    pos    <    len;    pos++)    {    out.write(c);    }    timeout    	non-compiled	[CE]  not  a  statement	13	None	replace
41	[BUG]  [BUGGY]  if(consumed  <  0)  {  for(int  pos  =  0;  pt  <  len;  pt++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                  ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  <  0)  {  for(int  pos  =  0;  pt  <  len;  pt++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  <  0)  {  for(int  pos  =  0;  pt  <  len;  pt++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }	  if(consumed    <    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	6	None	replace
42	[BUG]  [BUGGY]  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(input,  pos);  out.write(c);  }  [CE]  no  suitable  method  found  for  toChars(CharSequence,int)  [FE]                    ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(input,  pos);  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(input,  pos);  out.write(c);  }	  if(consumed    <    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  no  suitable  method  found  for  toChars(CharSequence,int)	6	None	replace
43	[BUG]  [BUGGY]  out.write(c);  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [CE]  'else'  without  'if'  [FE]                    ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  out.write(c);  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	out.write(c);  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }	  if(consumed    >    0)    {    out.write(c);    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  'else'  without  'if'	55	None	replace
44	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write(c);  for(pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [CE]  cannot  find  symbol  c  [FE]                      ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >  0)  {  out.write(c);  for(pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  out.write(c);  for(pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }	  if(consumed    >    0)    {    out.write(c);    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  cannot  find  symbol  c	55	None	replace
45	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write(c);  for(int  pos  =  0;  pos  <  len;  pos++)  {  String  c  =  input.toChars(pos);  out.write(c);  }  [CE]  cannot  find  symbol  c  [FE]                        ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >  0)  {  out.write(c);  for(int  pos  =  0;  pos  <  len;  pos++)  {  String  c  =  input.toChars(pos);  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  out.write(c);  for(int  pos  =  0;  pos  <  len;  pos++)  {  String  c  =  input.toChars(pos);  out.write(c);  }	  if(consumed    >    0)    {    out.write(c);    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  cannot  find  symbol  c	55	None	replace
46	[BUG]  [BUGGY]  timeout  [FE]              ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >  0)  {  for(int  c  =  0;  c  <  len;  pos++)  {  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	add	if(consumed  >  0)  {  for(int  c  =  0;  c  <  len;  pos++)  {  out.write(c);  }	  if(consumed    <    0)    {    for(int    c    =    0;    c    <    len;    pos++)    {    out.write(c);    }    timeout    	compilable	timeout	19	1	replace
47	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  c  =  0;  c  <  len;  pos++)  {  out.write(c);  }  timeout  [FE]              ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >  0)  {  for(int  c  =  0;  c  <  len;  pos++)  {  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  for(int  c  =  0;  c  <  len;  pos++)  {  out.write(c);  }	  if(consumed    <    0)    {    for(int    c    =    0;    c    <    len;    pos++)    {    out.write(c);    }    timeout    	compilable	timeout	19	1	replace
48	[BUG]  [BUGGY]  pos  <  len)  {  for(int  c  =  0;  c  <  len;  pos++)  {  out.write(c);  }  [CE]  >  expected  [FE]                ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  pos  <  len)  {  for(int  c  =  0;  c  <  len;  pos++)  {  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	pos  <  len)  {  for(int  c  =  0;  c  <  len;  pos++)  {  out.write(c);  }	  if(consumed    <    0)    {    for(int    c    =    0;    c    <    len;    pos++)    {    out.write(c);    }    timeout    	non-compiled	[CE]  >  expected	19	None	replace
49	[BUG]  [BUGGY]  if(consumed  <  0)  {  for(int  c  =  0;  c  <  left;  pos++)  {  out.write(c);  }  [CE]  cannot  find  symbol  left  [FE]                  ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  <  0)  {  for(int  c  =  0;  c  <  left;  pos++)  {  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  <  0)  {  for(int  c  =  0;  c  <  left;  pos++)  {  out.write(c);  }	  if(consumed    <    0)    {    for(int    c    =    0;    c    <    len;    pos++)    {    out.write(c);    }    timeout    	non-compiled	[CE]  cannot  find  symbol  left	19	None	replace
50	[BUG]  [BUGGY]  pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [CE]  not  a  statement  [FE]                      ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }	  if(consumed    >    0)    {    for(int    pt    =    0;    pos    <    len;    pos++)    {    char[]    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  not  a  statement	70	None	replace
51	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pos  =  0;  p  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                        ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >  0)  {  for(int  pos  =  0;  p  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  for(int  pos  =  0;  p  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }	  if(consumed    >    0)    {    for(int    pt    =    0;    pos    <    len;    pos++)    {    char[]    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	70	None	replace
52	[BUG]  [BUGGY]  CharSequence  c  =  Character.toChars(Character.codePointAt(pos,  consumed));  [CE]  'else'  without  'if'  [FE]                ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  CharSequence  c  =  Character.toChars(Character.codePointAt(pos,  consumed));  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	CharSequence  c  =  Character.toChars(Character.codePointAt(pos,  consumed));	  CharSequence    c    =    Character.toChars(Character.codePointAt(input,    pos));    	non-compiled	[CE]  'else'  without  'if'	20	None	replace
53	[BUG]  [BUGGY]  CharSequence  c  =  Character.toChars(Character.codePointAt(consume,  pos));  [CE]  'else'  without  'if'  [FE]                  ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  CharSequence  c  =  Character.toChars(Character.codePointAt(consume,  pos));  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	CharSequence  c  =  Character.toChars(Character.codePointAt(consume,  pos));	  CharSequence    c    =    Character.toChars(Character.codePointAt(input,    pos));    	non-compiled	[CE]  'else'  without  'if'	20	None	replace
54	[BUG]  [BUGGY]  CharSequence  c  =  Character.toChars(Character.codePointAt(consumed,  pos));  [CE]  'else'  without  'if'  [FE]                    ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  CharSequence  c  =  Character.toChars(Character.codePointAt(consumed,  pos));  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	CharSequence  c  =  Character.toChars(Character.codePointAt(consumed,  pos));	  CharSequence    c    =    Character.toChars(Character.codePointAt(input,    pos));    	non-compiled	[CE]  'else'  without  'if'	20	None	replace
55	[BUG]  [BUGGY]  char  c  =  Character.toChars(Character.codePointAt(pos,  consumed));  [CE]  'else'  without  'if'  [FE]                      ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  char  c  =  Character.toChars(Character.codePointAt(pos,  consumed));  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	char  c  =  Character.toChars(Character.codePointAt(pos,  consumed));	  CharSequence    c    =    Character.toChars(Character.codePointAt(input,    pos));    	non-compiled	[CE]  'else'  without  'if'	20	None	replace
56	[BUG]  [BUGGY]  if(consumed  >  0)  {  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write  [CE]  not  a  statement  [FE]    ComparisonFailure    [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >  0)  {  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write	  if(consumed    >=    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    out.write(c);    }    	non-compiled	[CE]  not  a  statement	34	None	replace
57	[BUG]  [BUGGY]  if(consumed  >  0)  {  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(  [CE]  '.class'  expected  [FE]      ComparisonFailure    [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >  0)  {  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(	  if(consumed    >=    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    out.write(c);    }    	non-compiled	[CE]  '.class'  expected	34	None	replace
58	[BUG]  [BUGGY]  if(consumed  >  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CE]  'else'  without  'if'  [FE]                    ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }	  char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    out.write(c);    	non-compiled	[CE]  'else'  without  'if'	9	None	replace
59	[BUG]  [BUGGY]  if(consumed  >  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  'else'  without  'if'  [FE]                      ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    out.write(c);    	non-compiled	[CE]  'else'  without  'if'	9	None	replace
60	[BUG]  [BUGGY]  if(consumed  >  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {  [CE]  'else'  without  'if'  [FE]                        ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {	  char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    out.write(c);    	non-compiled	[CE]  'else'  without  'if'	9	None	replace
61	[BUG]  [BUGGY]  Char[]  c  =  input.toChars(pos);  out.write(c);  [CE]  'else'  without  'if'  [FE]                  ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  Char[]  c  =  input.toChars(pos);  out.write(c);  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	Char[]  c  =  input.toChars(pos);  out.write(c);	  if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    consumed;    pt++)    {    char[]    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  'else'  without  'if'	65	None	replace
62	[BUG]  [BUGGY]  timeout  [FE]            ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(pos  >  0)  {  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	add	if(pos  >  0)  {	  if(consumed    >    0)    {    if(consumed    >    0)    {    	compilable	timeout	44	1	replace
63	[BUG]  [BUGGY]  if(pos  >  0)  {  timeout  [FE]            ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(pos  >  0)  {  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(pos  >  0)  {	  if(consumed    >    0)    {    if(consumed    >    0)    {    	compilable	timeout	44	1	replace
64	[BUG]  [BUGGY]  if(consume  >  0)  {  [CE]  cannot  find  symbol  consume  [FE]              ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consume  >  0)  {  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consume  >  0)  {	  if(consumed    >    0)    {    if(consumed    >    0)    {    	non-compiled	[CE]  cannot  find  symbol  consume	44	None	replace
65	[BUG]  [BUGGY]  if(consumed  <  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos,  out);  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                    ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  <  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos,  out);  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  <  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos,  out);  out.write(c);  }	  if(consumed    <    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	38	None	replace
66	[BUG]  [BUGGY]  out.write(c);  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [CE]  'else'  without  'if'  [FE]                  ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  out.write(c);  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	out.write(c);  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }	  if(consumed    >    0)    {    out.write(c);    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  'else'  without  'if'	61	None	replace
67	[BUG]  [BUGGY]  if(consumed  <  0)  {  out.write(c);  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [CE]  cannot  find  symbol  c  [FE]                    ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  <  0)  {  out.write(c);  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  <  0)  {  out.write(c);  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }	  if(consumed    >    0)    {    out.write(c);    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  cannot  find  symbol  c	61	None	replace
68	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write(c);  for(int  pos  =  0;  pt  <  len;  pt++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [CE]  cannot  find  symbol  c  [FE]                      ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >  0)  {  out.write(c);  for(int  pos  =  0;  pt  <  len;  pt++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  out.write(c);  for(int  pos  =  0;  pt  <  len;  pt++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }	  if(consumed    >    0)    {    out.write(c);    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  cannot  find  symbol  c	61	None	replace
69	[BUG]  [BUGGY]  if(consumed  <  =  0)  {  if(consummed  <  0)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  <  =  0)  {  if(consummed  <  0)  {  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  <  =  0)  {  if(consummed  <  0)  {	  if(consumed    <    0)    {    if(consummed    <    0)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
70	[BUG]  [BUGGY]  if(consumed  <  =  0)  {  if(consumed  <  0)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  <  =  0)  {  if(consumed  <  0)  {  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  <  =  0)  {  if(consumed  <  0)  {	  if(consumed    <    0)    {    if(consummed    <    0)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
71	[BUG]  [BUGGY]  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  Character[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }  [CE]  no  suitable  method  found  for  codePointAt(int,int)  [FE]                ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  Character[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  Character[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }	  if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    Character[]    c    =    Character.toChars(Character.codePointAt(pos,    pos));    out.write(c);    }    	non-compiled	[CE]  no  suitable  method  found  for  codePointAt(int,int)	37	None	replace
72	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pos  =  0;  pt  <  len;  pt++)  {  Character[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                  ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >  0)  {  for(int  pos  =  0;  pt  <  len;  pt++)  {  Character[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  for(int  pos  =  0;  pt  <  len;  pt++)  {  Character[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }	  if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    Character[]    c    =    Character.toChars(Character.codePointAt(pos,    pos));    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	37	None	replace
73	[BUG]  [BUGGY]  if(consumed  <  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  output.toChars(pos);  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                    ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  <  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  output.toChars(pos);  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  <  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  output.toChars(pos);  out.write(c);  }	  if(consumed    <    =    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	69	None	replace
74	[BUG]  [BUGGY]  timeout  [FE]                ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >  0)  {  for(int  c  =  0;  c  <  pos;  c++)  {  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	add	if(consumed  >  0)  {  for(int  c  =  0;  c  <  pos;  c++)  {  out.write(c);  }	  if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    pos;    pt++)    {    out.write(c);    }    	compilable	timeout	74	1	replace
75	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  c  =  0;  c  <  pos;  c++)  {  out.write(c);  }  timeout  [FE]                ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >  0)  {  for(int  c  =  0;  c  <  pos;  c++)  {  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  for(int  c  =  0;  c  <  pos;  c++)  {  out.write(c);  }	  if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    pos;    pt++)    {    out.write(c);    }    	compilable	timeout	74	1	replace
76	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pos  =  0;  pt  <  len;  pt++)  {  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                  ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >  0)  {  for(int  pos  =  0;  pt  <  len;  pt++)  {  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  for(int  pos  =  0;  pt  <  len;  pt++)  {  out.write(c);  }	  if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    pos;    pt++)    {    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	74	None	replace
77	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  output.toChars(pos);  out.write(c);  }  [CE]  cannot  find  symbol  output  [FE]                      ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >  0)  {  for(pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  output.toChars(pos);  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  for(pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  output.toChars(pos);  out.write(c);  }	  if(consumed    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    output.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  cannot  find  symbol  output	39	None	replace
78	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out[]  c  =  output.toChars(pos);  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                        ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out[]  c  =  output.toChars(pos);  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out[]  c  =  output.toChars(pos);  out.write(c);  }	  if(consumed    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    output.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	39	None	replace
79	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  p  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }  [CE]  cannot  find  symbol  pt  [FE]            ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >  0)  {  for(int  p  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  for(int  p  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }	  if(consumed    >    0)    {    for(int    pos    =    0;    pt    <    len;    pt++)    {    char[]    c    =    Character.toChars(Character.codePointAt(pos,    pos));    out.write(c);    }    	non-compiled	[CE]  cannot  find  symbol  pt	54	None	replace
80	[BUG]  [BUGGY]  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed    >=    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    out.write(c);    }    if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }	  	non-compiled	[CE]  illegal  start  of  expression	33	None	add
81	[BUG]  [BUGGY]  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed    >=    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    out.write(c);    }    if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }	  	non-compiled	[CE]  illegal  start  of  expression	33	None	add
82	[BUG]  [BUGGY]  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  if(consumed!=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  if(consumed!=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed    >=    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    out.write(c);    }    if(consumed!=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }	  	non-compiled	[CE]  illegal  start  of  expression	33	None	add
83	[BUG]  [BUGGY]  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  if(consumed  >>  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  if(consumed  >>  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed    >=    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    out.write(c);    }    if(consumed  >>  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }	  	non-compiled	[CE]  illegal  start  of  expression	33	None	add
84	[BUG]  [BUGGY]  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed    >=    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    out.write(c);    }    if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }	  	non-compiled	[CE]  illegal  start  of  expression	33	None	add
85	[BUG]  [BUGGY]  out.write(c);  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  input.toChars();  out.write(c);  }  [CE]  'else'  without  'if'  [FE]                ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  out.write(c);  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  input.toChars();  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	out.write(c);  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  input.toChars();  out.write(c);  }	  if(consumed    >    0)    {    out.write(c);    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    input.toChars();    out.write(c);    }    	non-compiled	[CE]  'else'  without  'if'	52	None	replace
86	[BUG]  [BUGGY]  if(consumed  <  0)  {  out.write(c);  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  input.toChars();  out.write(c);  }  [CE]  cannot  find  symbol  c  [FE]                  ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  <  0)  {  out.write(c);  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  input.toChars();  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  <  0)  {  out.write(c);  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  input.toChars();  out.write(c);  }	  if(consumed    >    0)    {    out.write(c);    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    input.toChars();    out.write(c);    }    	non-compiled	[CE]  cannot  find  symbol  c	52	None	replace
87	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write(c);  for(int  pos  =  0;  pt  <  len;  pt++)  {  char[]  c  =  input.toChars();  out.write(c);  }  [CE]  cannot  find  symbol  c  [FE]                    ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >  0)  {  out.write(c);  for(int  pos  =  0;  pt  <  len;  pt++)  {  char[]  c  =  input.toChars();  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  out.write(c);  for(int  pos  =  0;  pt  <  len;  pt++)  {  char[]  c  =  input.toChars();  out.write(c);  }	  if(consumed    >    0)    {    out.write(c);    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    input.toChars();    out.write(c);    }    	non-compiled	[CE]  cannot  find  symbol  c	52	None	replace
88	[BUG]  [BUGGY]  if(pos  >  0  ||  consumed  <  =  pos)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(pos  >  0  ||  consumed  <  =  pos)  {  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(pos  >  0  ||  consumed  <  =  pos)  {	  if(consumed    >    0    ||    consumed    <    =    pos)    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
89	[BUG]  [BUGGY]  if(consumed  <  0  ||  consumed  <  =  pos)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  <  0  ||  consumed  <  =  pos)  {  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  <  0  ||  consumed  <  =  pos)  {	  if(consumed    >    0    ||    consumed    <    =    pos)    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
90	[BUG]  [BUGGY]  timeout  [FE]                ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >  0  ||  consumed  <  pos)  {  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	add	if(consumed  >  0  ||  consumed  <  pos)  {	  if(consumed    >    0    ||    consumed    <    =    pos)    {    	compilable	timeout	71	1	replace
91	[BUG]  [BUGGY]  if(consumed  >  0  ||  consumed  <  pos)  {  timeout  [FE]                ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >  0  ||  consumed  <  pos)  {  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0  ||  consumed  <  pos)  {	  if(consumed    >    0    ||    consumed    <    =    pos)    {    	compilable	timeout	71	1	replace
92	[BUG]  [BUGGY]  if(consumed  >  0  &&  consumed  <  =  pos)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >  0  &&  consumed  <  =  pos)  {  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0  &&  consumed  <  =  pos)  {	  if(consumed    >    0    ||    consumed    <    =    pos)    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
93	[BUG]  [BUGGY]  if(consumed  <  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out[]  c  =  input.toChars();  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                    ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  <  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out[]  c  =  input.toChars();  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  <  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out[]  c  =  input.toChars();  out.write(c);  }	  if(consumed    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    out[]    c    =    input.toChars();    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	48	None	replace
94	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  output[]  c  =  input.toChars();  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                      ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  output[]  c  =  input.toChars();  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  output[]  c  =  input.toChars();  out.write(c);  }	  if(consumed    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    out[]    c    =    input.toChars();    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	48	None	replace
95	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out[]  c  =  output.toChars();  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                        ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out[]  c  =  output.toChars();  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out[]  c  =  output.toChars();  out.write(c);  }	  if(consumed    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    out[]    c    =    input.toChars();    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	48	None	replace
96	[BUG]  [BUGGY]  if(consumed  <  0)  {  for(int  c  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  if(consumed  <  0)  {  for(int  c  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  <  0)  {  for(int  c  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  if(consumed  <  0)  {  for(int  c  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed    <    0)    {    for(int    c    =    0;    pos    <    len;    pos++)    {    out.write(c);    }    if(consumed  <  0)  {  for(int  c  =  0;  pos  <  len;  pos++)  {  out.write(c);  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	14	None	add
97	[BUG]  [BUGGY]  if(consumed  <  0)  {  for(int  c  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  if(consumed  <  0)  {  for(int  pos  <  len;  pos++)  {  out.write(c);  }  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  <  0)  {  for(int  c  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  if(consumed  <  0)  {  for(int  pos  <  len;  pos++)  {  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed    <    0)    {    for(int    c    =    0;    pos    <    len;    pos++)    {    out.write(c);    }    if(consumed  <  0)  {  for(int  pos  <  len;  pos++)  {  out.write(c);  }	  timeout    	non-compiled	[CE]  ';'  expected	14	None	add
98	[BUG]  [BUGGY]  if(consumed  <  0)  {  for(int  c  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  if(consumed  <  0)  {  for(int  c  =  0;  pos  <  len;  p++)  {  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  <  0)  {  for(int  c  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  if(consumed  <  0)  {  for(int  c  =  0;  pos  <  len;  p++)  {  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed    <    0)    {    for(int    c    =    0;    pos    <    len;    pos++)    {    out.write(c);    }    if(consumed  <  0)  {  for(int  c  =  0;  pos  <  len;  p++)  {  out.write(c);  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	14	None	add
99	[BUG]  [BUGGY]  if(consumed  <  0)  {  for(int  c  =  0;  c  <  len;  pos++)  {  out.write(c);  }  if(consumed  <  0)  {  for(int  c  =  0;  c  <  len;  pos++)  {  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  <  0)  {  for(int  c  =  0;  c  <  len;  pos++)  {  out.write(c);  }  if(consumed  <  0)  {  for(int  c  =  0;  c  <  len;  pos++)  {  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed    <    0)    {    for(int    c    =    0;    c    <    len;    pos++)    {    out.write(c);    }    if(consumed  <  0)  {  for(int  c  =  0;  c  <  len;  pos++)  {  out.write(c);  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	18	None	add
100	[BUG]  [BUGGY]  if(consumed  <  0)  {  for(int  c  =  0;  c  <  len;  pos++)  {  out.write(c);  }  if(consumed  <  0)  {  for(int  c  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  <  0)  {  for(int  c  =  0;  c  <  len;  pos++)  {  out.write(c);  }  if(consumed  <  0)  {  for(int  c  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed    <    0)    {    for(int    c    =    0;    c    <    len;    pos++)    {    out.write(c);    }    if(consumed  <  0)  {  for(int  c  =  0;  pos  <  len;  pos++)  {  out.write(c);  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	18	None	add
101	[BUG]  [BUGGY]  if(consumed  <  0)  {  for(int  c  =  0;  c  <  len;  pos++)  {  out.write(c);  }  if(consumed  <  0)  {  for(int  c  =  0;  c  <  len;  p++)  {  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  <  0)  {  for(int  c  =  0;  c  <  len;  pos++)  {  out.write(c);  }  if(consumed  <  0)  {  for(int  c  =  0;  c  <  len;  p++)  {  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed    <    0)    {    for(int    c    =    0;    c    <    len;    pos++)    {    out.write(c);    }    if(consumed  <  0)  {  for(int  c  =  0;  c  <  len;  p++)  {  out.write(c);  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	18	None	add
102	[BUG]  [BUGGY]  if(consumed  <  0)  {  for(int  c  =  0;  c  <  len;  pos++)  {  out.write(c);  }  If(consumed  <  0)  {  for(int  c  =  0;  c  <  len;  pos++)  {  out.write(c);  }  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  <  0)  {  for(int  c  =  0;  c  <  len;  pos++)  {  out.write(c);  }  If(consumed  <  0)  {  for(int  c  =  0;  c  <  len;  pos++)  {  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed    <    0)    {    for(int    c    =    0;    c    <    len;    pos++)    {    out.write(c);    }    If(consumed  <  0)  {  for(int  c  =  0;  c  <  len;  pos++)  {  out.write(c);  }	  timeout    	non-compiled	[CE]  ';'  expected	18	None	add
103	[BUG]  [BUGGY]  pos  >  0)  {  for(pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [CE]  not  a  statement  [FE]                      ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  pos  >  0)  {  for(pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	pos  >  0)  {  for(pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }	  if(consumed    >    0)    {    for(pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  not  a  statement	56	None	replace
104	[BUG]  [BUGGY]  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [CE]  >  expected  [FE]                        ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }	  if(consumed    >    0)    {    for(pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  >  expected	56	None	replace
105	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(input,  pos);  out.write(c);  }  [CE]  no  suitable  method  found  for  toChars(CharSequence,int)  [FE]                          ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >  0)  {  for(pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(input,  pos);  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  for(pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(input,  pos);  out.write(c);  }	  if(consumed    >    0)    {    for(pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  no  suitable  method  found  for  toChars(CharSequence,int)	56	None	replace
106	[BUG]  [BUGGY]  if(consumed  >  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  }  [CE]  'else'  without  'if'  [FE]                        ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  }  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  }	  char[]    c    =    Character.toChars(Character.codePointAt(pos,    pos));    	non-compiled	[CE]  'else'  without  'if'	11	None	replace
107	[BUG]  [BUGGY]  if(consumed  >  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  }  else  {  out.write(c);  }  [CE]  'else'  without  'if'  [FE]                          ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  }  else  {  out.write(c);  }  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  }  else  {  out.write(c);  }	  char[]    c    =    Character.toChars(Character.codePointAt(pos,    pos));    	non-compiled	[CE]  'else'  without  'if'	11	None	replace
108	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  c  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  if(consumed  >  0)  {  for(int  c  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >  0)  {  for(int  c  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  if(consumed  >  0)  {  for(int  c  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed    >    0)    {    for(int    c    =    0;    pos    <    len;    pos++)    {    out.write(c);    }    if(consumed  >  0)  {  for(int  c  =  0;  pos  <  len;  pos++)  {  out.write(c);  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	12	None	add
109	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  c  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  if(consumed  >  0)  {  for(int  pos  <  len;  pos++)  {  out.write(c);  }  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >  0)  {  for(int  c  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  if(consumed  >  0)  {  for(int  pos  <  len;  pos++)  {  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed    >    0)    {    for(int    c    =    0;    pos    <    len;    pos++)    {    out.write(c);    }    if(consumed  >  0)  {  for(int  pos  <  len;  pos++)  {  out.write(c);  }	  timeout    	non-compiled	[CE]  ';'  expected	12	None	add
110	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  c  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  if(consumed  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >  0)  {  for(int  c  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  if(consumed  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed    >    0)    {    for(int    c    =    0;    pos    <    len;    pos++)    {    out.write(c);    }    if(consumed  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	12	None	add
111	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pos  =  0;  pos  <  input.length();  pos++)  {  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]              ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >  0)  {  for(int  pos  =  0;  pos  <  input.length();  pos++)  {  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  for(int  pos  =  0;  pos  <  input.length();  pos++)  {  out.write(c);  }	  if(consumed    <    0)    {    for(int    pos    =    0;    pos    <    input.length();    pos++)    {    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	64	None	replace
112	[BUG]  [BUGGY]  timeout  [FE]                ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  <  0)  {  for(int  c  =  0;  c  <  input.length();  pos++)  {  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	add	if(consumed  <  0)  {  for(int  c  =  0;  c  <  input.length();  pos++)  {  out.write(c);  }	  if(consumed    <    0)    {    for(int    pos    =    0;    pos    <    input.length();    pos++)    {    out.write(c);    }    	compilable	timeout	64	1	replace
113	[BUG]  [BUGGY]  if(consumed  <  0)  {  for(int  c  =  0;  c  <  input.length();  pos++)  {  out.write(c);  }  timeout  [FE]                ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  <  0)  {  for(int  c  =  0;  c  <  input.length();  pos++)  {  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  <  0)  {  for(int  c  =  0;  c  <  input.length();  pos++)  {  out.write(c);  }	  if(consumed    <    0)    {    for(int    pos    =    0;    pos    <    input.length();    pos++)    {    out.write(c);    }    	compilable	timeout	64	1	replace
114	[BUG]  [BUGGY]  if(consumed  <  =  0)  {  for(int  pos  =  0;  pos  <  input.length();  pos++)  {  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  <  =  0)  {  for(int  pos  =  0;  pos  <  input.length();  pos++)  {  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  <  =  0)  {  for(int  pos  =  0;  pos  <  input.length();  pos++)  {  out.write(c);  }	  if(consumed    <    0)    {    for(int    pos    =    0;    pos    <    input.length();    pos++)    {    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
115	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  c  =  Character.toChars(Character.codePointAt(pos,  pt));  out.write(  [CE]  '.class'  expected  [FE]                  ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  c  =  Character.toChars(Character.codePointAt(pos,  pt));  out.write(  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  c  =  Character.toChars(Character.codePointAt(pos,  pt));  out.write(	  if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    Character.toChars(Character.codePointAt(pos,    pt));    out.write(    	non-compiled	[CE]  '.class'  expected	30	None	replace
116	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pt));  out.write  [CE]  not  a  statement  [FE]                    ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pt));  out.write  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pt));  out.write	  if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    Character.toChars(Character.codePointAt(pos,    pt));    out.write(    	non-compiled	[CE]  not  a  statement	30	None	replace
117	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(pos,  input));  [CE]  'else'  without  'if'  [FE]                  ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(pos,  input));  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	char[]  c  =  Character.toChars(Character.codePointAt(pos,  input));	  char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    	non-compiled	[CE]  'else'  without  'if'	8	None	replace
118	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(pos,  len));  [CE]  'else'  without  'if'  [FE]                    ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(pos,  len));  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	char[]  c  =  Character.toChars(Character.codePointAt(pos,  len));	  char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    	non-compiled	[CE]  'else'  without  'if'	8	None	replace
119	[BUG]  [BUGGY]  if(consumed  <  =  0)  {  if(consumed  >  0)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  <  =  0)  {  if(consumed  >  0)  {  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  <  =  0)  {  if(consumed  >  0)  {	  if(consumed    >    0)    {    if(consummed    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
120	[BUG]  [BUGGY]  if(consumed  >  0)  {  if(consumed  <  =  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >  0)  {  if(consumed  <  =  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  if(consumed  <  =  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }	  if(consumed    <    =    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
121	[BUG]  [BUGGY]  if(pos  <  =  0  ||  consumed  >  pos)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(pos  <  =  0  ||  consumed  >  pos)  {  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(pos  <  =  0  ||  consumed  >  pos)  {	  if(consumed    <    =    0    ||    consumed    >    pos)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
122	[BUG]  [BUGGY]  if(consumed  <  =  0  ||  consumed  >  pos  +  1)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  <  =  0  ||  consumed  >  pos  +  1)  {  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  <  =  0  ||  consumed  >  pos  +  1)  {	  if(consumed    <    =    0    ||    consumed    >    pos)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
123	[BUG]  [BUGGY]  if(consume  <  0  ||  consumed  >  pos)  {  [CE]  cannot  find  symbol  consume  [FE]                  ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consume  <  0  ||  consumed  >  pos)  {  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consume  <  0  ||  consumed  >  pos)  {	  if(consumed    <    =    0    ||    consumed    >    pos)    {    	non-compiled	[CE]  cannot  find  symbol  consume	5	None	replace
124	[BUG]  [BUGGY]  if(consumed  <  0)  {  If(consumed  >  0)  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  <  0)  {  If(consumed  >  0)  {  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  <  0)  {  If(consumed  >  0)  {	  if(consumed    <    0)    {    If(consumed    <    0)    {    	non-compiled	[CE]  ';'  expected	2	None	replace
125	[BUG]  [BUGGY]  if(consumed  <  =  0)  {  If(consumed  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  <  =  0)  {  If(consumed  <  =  0)  {  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  <  =  0)  {  If(consumed  <  =  0)  {	  if(consumed    <    0)    {    If(consumed    <    0)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
126	[BUG]  [BUGGY]  if(consumed  >  0)  {  If(consumed  <  0)  {  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >  0)  {  If(consumed  <  0)  {  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  If(consumed  <  0)  {	  if(consumed    <    0)    {    If(consumed    <    0)    {    	non-compiled	[CE]  ';'  expected	2	None	replace
127	[BUG]  [BUGGY]  if(consumed  <  0)  {  for(int  c  =  0;  c  <  chars.length;  c++)  {  out.write(c);  }  [CE]  cannot  find  symbol  chars  [FE]                ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  <  0)  {  for(int  c  =  0;  c  <  chars.length;  c++)  {  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  <  0)  {  for(int  c  =  0;  c  <  chars.length;  c++)  {  out.write(c);  }	  if(consumed    <    0)    {    for(int    pos    =    0;    pos    <    chars.length;    pos++)    {    out.write(c);    }    	non-compiled	[CE]  cannot  find  symbol  chars	79	None	replace
128	[BUG]  [BUGGY]  if(consumed  <  0)  {  for(int  c  =  0;  c  <  chars.length;  pos++)  {  out.write(c);  }  [CE]  cannot  find  symbol  chars  [FE]                  ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  <  0)  {  for(int  c  =  0;  c  <  chars.length;  pos++)  {  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  <  0)  {  for(int  c  =  0;  c  <  chars.length;  pos++)  {  out.write(c);  }	  if(consumed    <    0)    {    for(int    pos    =    0;    pos    <    chars.length;    pos++)    {    out.write(c);    }    	non-compiled	[CE]  cannot  find  symbol  chars	79	None	replace
129	[BUG]  [BUGGY]  if(consumed  <  0)  {  for(int  c  =  0;  pos  <  chars.length;  pos++)  {  out.write(c);  }  [CE]  cannot  find  symbol  chars  [FE]                    ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  <  0)  {  for(int  c  =  0;  pos  <  chars.length;  pos++)  {  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  <  0)  {  for(int  c  =  0;  pos  <  chars.length;  pos++)  {  out.write(c);  }	  if(consumed    <    0)    {    for(int    pos    =    0;    pos    <    chars.length;    pos++)    {    out.write(c);    }    	non-compiled	[CE]  cannot  find  symbol  chars	79	None	replace
130	[BUG]  [BUGGY]  if(consumed  >=  0)  {  if(consumed  >=  0)  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >=  0)  {  if(consumed  >=  0)  {  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed    >=    0)    {    if(consumed  >=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	16	None	add
131	[BUG]  [BUGGY]  if(consumed  >=  0)  {  if(consumed!=  0)  {  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >=  0)  {  if(consumed!=  0)  {  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed    >=    0)    {    if(consumed!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	16	None	add
132	[BUG]  [BUGGY]  if(consumed  >=  0)  {  if(consumed  >>  0)  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >=  0)  {  if(consumed  >>  0)  {  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed    >=    0)    {    if(consumed  >>  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	16	None	add
133	[BUG]  [BUGGY]  if(consumed  >=  0)  {  if(consumed  ==  0)  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >=  0)  {  if(consumed  ==  0)  {  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed    >=    0)    {    if(consumed  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	16	None	add
134	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(p);  }  [CE]  cannot  find  symbol  p  [FE]                  ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(p);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(p);  }	  if(consumed    >    0)    {    for(int    c    =    0;    pt    <    len;    pt++)    {    out.write(c);    }    	non-compiled	[CE]  cannot  find  symbol  p	51	None	replace
135	[BUG]  [BUGGY]  pos  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c);  }  [CE]  not  a  statement  [FE]                    ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  pos  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	pos  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c);  }	  if(consumed    >    0)    {    for(int    c    =    0;    pt    <    len;    pt++)    {    out.write(c);    }    	non-compiled	[CE]  not  a  statement	51	None	replace
136	[BUG]  [BUGGY]  out.write('else');  [CE]  unclosed  character  literal  [FE]                    ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  out.write('else');  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	out.write('else');	  if(consumed    ==    0)    {    out.write('else');    }    else    {    out.write('n');    }    	non-compiled	[CE]  unclosed  character  literal	58	None	replace
137	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write('else');  }  else  {  out.write('n');  }  [CE]  unclosed  character  literal  [FE]                      ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >  0)  {  out.write('else');  }  else  {  out.write('n');  }  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  out.write('else');  }  else  {  out.write('n');  }	  if(consumed    ==    0)    {    out.write('else');    }    else    {    out.write('n');    }    	non-compiled	[CE]  unclosed  character  literal	58	None	replace
138	[BUG]  [BUGGY]  if(consumed  <  0)  {  out.write('else');  }  else  {  out.write('n');  }  [CE]  unclosed  character  literal  [FE]                        ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  <  0)  {  out.write('else');  }  else  {  out.write('n');  }  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  <  0)  {  out.write('else');  }  else  {  out.write('n');  }	  if(consumed    ==    0)    {    out.write('else');    }    else    {    out.write('n');    }    	non-compiled	[CE]  unclosed  character  literal	58	None	replace
139	[BUG]  [BUGGY]  if(consumed  <  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  Character[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                  ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  <  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  Character[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  <  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  Character[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }	  if(consumed    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    Character[]    c    =    Character.toChars(Character.codePointAt(pos,    pos));    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	43	None	replace
140	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(pos  =  0;  pos  <  len;  pos++)  {  Character[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }  [CE]  no  suitable  method  found  for  codePointAt(int,int)  [FE]                    ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >  0)  {  for(pos  =  0;  pos  <  len;  pos++)  {  Character[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  for(pos  =  0;  pos  <  len;  pos++)  {  Character[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }	  if(consumed    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    Character[]    c    =    Character.toChars(Character.codePointAt(pos,    pos));    out.write(c);    }    	non-compiled	[CE]  no  suitable  method  found  for  codePointAt(int,int)	43	None	replace
141	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  Character[]  c  =  Character.toChars(Character.codePointAt(pos,  p));  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                      ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  Character[]  c  =  Character.toChars(Character.codePointAt(pos,  p));  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  Character[]  c  =  Character.toChars(Character.codePointAt(pos,  p));  out.write(c);  }	  if(consumed    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    Character[]    c    =    Character.toChars(Character.codePointAt(pos,    pos));    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	43	None	replace
142	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  p  =  0;  pt  <  len;  pt++)  {  char[]  c  =  input.toChars();  out.write(c);  }  [CE]  cannot  find  symbol  pt  [FE]                  ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >  0)  {  for(int  p  =  0;  pt  <  len;  pt++)  {  char[]  c  =  input.toChars();  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  for(int  p  =  0;  pt  <  len;  pt++)  {  char[]  c  =  input.toChars();  out.write(c);  }	  if(consumed    >    0)    {    for(int    pos    =    0;    pt    <    len;    pt++)    {    char[]    c    =    input.toChars();    out.write(c);    }    	non-compiled	[CE]  cannot  find  symbol  pt	27	None	replace
143	[BUG]  [BUGGY]  if(consumed  <  =  0)  {  If(consumed  >  0)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  <  =  0)  {  If(consumed  >  0)  {  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  <  =  0)  {  If(consumed  >  0)  {	  if(consumed    >    0)    {    If(consumed    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
144	[BUG]  [BUGGY]  if(consumed  >  0)  {  If(consumed  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >  0)  {  If(consumed  <  =  0)  {  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  If(consumed  <  =  0)  {	  if(consumed    >    0)    {    If(consumed    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
145	[BUG]  [BUGGY]  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.charCount(input,  pos));  out.write(c);  }  [CE]  method  charCount  in  class  Character  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.charCount(input,  pos));  out.write(c);  }  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.charCount(input,  pos));  out.write(c);  }	  if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    Character.toChars(Character.charCount(input,    pos));    out.write(c);    }    	non-compiled	[CE]  method  charCount  in  class  Character  cannot  be  applied  to  given  types;	66	None	replace
146	[BUG]  [BUGGY]  Char[]  c  =  Character.toChars(Character.charCount(input,  pos));  out.write(c);  [CE]  'else'  without  'if'  [FE]                    ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  Char[]  c  =  Character.toChars(Character.charCount(input,  pos));  out.write(c);  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	Char[]  c  =  Character.toChars(Character.charCount(input,  pos));  out.write(c);	  if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    Character.toChars(Character.charCount(input,    pos));    out.write(c);    }    	non-compiled	[CE]  'else'  without  'if'	66	None	replace
147	[BUG]  [BUGGY]  out.write('n');  [CE]  'else'  without  'if'  [FE]                        ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  out.write('n');  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	out.write('n');	  if(consumed    ==    0)    {    out.write('n');    }    else    {    out.write('n');    }    	non-compiled	[CE]  'else'  without  'if'	60	None	replace
148	[BUG]  [BUGGY]  if(consumed  <  0)  {  out.write('n');  }  else  {  out.write('n');  }  [CE]  'else'  without  'if'  [FE]                          ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  <  0)  {  out.write('n');  }  else  {  out.write('n');  }  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  <  0)  {  out.write('n');  }  else  {  out.write('n');  }	  if(consumed    ==    0)    {    out.write('n');    }    else    {    out.write('n');    }    	non-compiled	[CE]  'else'  without  'if'	60	None	replace
149	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write('n');  }  else  {  out.write('n');  }  [CE]  'else'  without  'if'  [FE]                            ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >  0)  {  out.write('n');  }  else  {  out.write('n');  }  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  out.write('n');  }  else  {  out.write('n');  }	  if(consumed    ==    0)    {    out.write('n');    }    else    {    out.write('n');    }    	non-compiled	[CE]  'else'  without  'if'	60	None	replace
150	[BUG]  [BUGGY]  if(consumed  <  0)  {  for(pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }  [CE]  no  suitable  method  found  for  codePointAt(int,int)  [FE]                ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  <  0)  {  for(pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  <  0)  {  for(pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }	  if(consumed    >    0)    {    for(pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    Character.toChars(Character.codePointAt(pos,    pos));    out.write(c);    }    	non-compiled	[CE]  no  suitable  method  found  for  codePointAt(int,int)	42	None	replace
151	[BUG]  [BUGGY]  if(consumed  >=  0)  {  for(pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }  [CE]  no  suitable  method  found  for  codePointAt(int,int)  [FE]                  ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >=  0)  {  for(pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >=  0)  {  for(pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }	  if(consumed    >    0)    {    for(pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    Character.toChars(Character.codePointAt(pos,    pos));    out.write(c);    }    	non-compiled	[CE]  no  suitable  method  found  for  codePointAt(int,int)	42	None	replace
152	[BUG]  [BUGGY]  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  out.write(c);  }  [CE]  cannot  find  symbol  c  [FE]                ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  out.write(c);  }	  if(consumed    <    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    out.write(c);    }    	non-compiled	[CE]  cannot  find  symbol  c	21	None	replace
153	[BUG]  [BUGGY]  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  pos;  pt++)  {  out.write(c);  }  [CE]  cannot  find  symbol  c  [FE]                  ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  pos;  pt++)  {  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  pos;  pt++)  {  out.write(c);  }	  if(consumed    <    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    out.write(c);    }    	non-compiled	[CE]  cannot  find  symbol  c	21	None	replace
154	[BUG]  [BUGGY]  if(consumed  <  =  0)  {  for(int  c  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  <  =  0)  {  for(int  c  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  <  =  0)  {  for(int  c  =  0;  pos  <  len;  pos++)  {  out.write(c);  }	  if(consumed    <    =    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
155	[BUG]  [BUGGY]  while(pos  <  =  0)  {  out.write('else');  }  else  {  out.write('n');  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  while(pos  <  =  0)  {  out.write('else');  }  else  {  out.write('n');  }  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	while(pos  <  =  0)  {  out.write('else');  }  else  {  out.write('n');  }	  if(consumed    <    =    0)    {    out.write('else');    }    else    {    out.write('n');    }    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
156	[BUG]  [BUGGY]  out.write('else');  }  else  {  out.write('n');  }  [CE]  unclosed  character  literal  [FE]                        ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  out.write('else');  }  else  {  out.write('n');  }  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	out.write('else');  }  else  {  out.write('n');  }	  if(consumed    <    =    0)    {    out.write('else');    }    else    {    out.write('n');    }    	non-compiled	[CE]  unclosed  character  literal	59	None	replace
157	[BUG]  [BUGGY]  out.write(c);  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars();  out.write(c);  }  [CE]  'else'  without  'if'  [FE]                  ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  out.write(c);  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars();  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	out.write(c);  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars();  out.write(c);  }	  if(consumed    >    0)    {    out.write(c);    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    input.toChars();    out.write(c);    }    	non-compiled	[CE]  'else'  without  'if'	63	None	replace
158	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write(c);  for(pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars();  out.write(c);  }  [CE]  cannot  find  symbol  c  [FE]                    ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >  0)  {  out.write(c);  for(pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars();  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  out.write(c);  for(pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars();  out.write(c);  }	  if(consumed    >    0)    {    out.write(c);    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    input.toChars();    out.write(c);    }    	non-compiled	[CE]  cannot  find  symbol  c	63	None	replace
159	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write('n');  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars();  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                      ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >  0)  {  out.write('n');  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars();  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  out.write('n');  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars();  out.write(c);  }	  if(consumed    >    0)    {    out.write(c);    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    input.toChars();    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	63	None	replace
160	[BUG]  [BUGGY]  timeout  [FE]              ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >  0)  {  for(int  c  =  0;  pos  <  consumed;  pos++)  {  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	add	if(consumed  >  0)  {  for(int  c  =  0;  pos  <  consumed;  pos++)  {  out.write(c);  }	  if(consumed    >    0)    {    for(int    pos    =    0;    pos    <    consumed;    pos++)    {    out.write(c);    }    	compilable	timeout	68	1	replace
161	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  c  =  0;  pos  <  consumed;  pos++)  {  out.write(c);  }  timeout  [FE]              ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >  0)  {  for(int  c  =  0;  pos  <  consumed;  pos++)  {  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  for(int  c  =  0;  pos  <  consumed;  pos++)  {  out.write(c);  }	  if(consumed    >    0)    {    for(int    pos    =    0;    pos    <    consumed;    pos++)    {    out.write(c);    }    	compilable	timeout	68	1	replace
162	[BUG]  [BUGGY]  if(consumed  <  0)  {  for(int  c  =  0;  c  <  len;  pt++)  {  out.write(c);  }  [CE]  cannot  find  symbol  pt  [FE]                    ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  <  0)  {  for(int  c  =  0;  c  <  len;  pt++)  {  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  <  0)  {  for(int  c  =  0;  c  <  len;  pt++)  {  out.write(c);  }	  if(consumed    >    0)    {    for(int    c    =    0;    c    <    len;    pt++)    {    out.write(c);    }    	non-compiled	[CE]  cannot  find  symbol  pt	23	None	replace
163	[BUG]  [BUGGY]  timeout  [FE]            ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	add	if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }	  if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    consumed;    pt++)    {    char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    out.write(c);    }    timeout    	compilable	timeout	73	1	replace
164	[BUG]  [BUGGY]  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  timeout  [FE]            ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }	  if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    consumed;    pt++)    {    char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    out.write(c);    }    timeout    	compilable	timeout	73	1	replace
165	[BUG]  [BUGGY]  timeout  [FE]              ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(pos  >  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	add	if(pos  >  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }	  if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    consumed;    pt++)    {    char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    out.write(c);    }    timeout    	compilable	timeout	73	1	replace
166	[BUG]  [BUGGY]  if(pos  >  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  timeout  [FE]              ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(pos  >  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(pos  >  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }	  if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    consumed;    pt++)    {    char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    out.write(c);    }    timeout    	compilable	timeout	73	1	replace
167	[BUG]  [BUGGY]  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pt));  out.write(c);  }  [CE]  no  suitable  method  found  for  codePointAt(int,int)  [FE]              ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pt));  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pt));  out.write(c);  }	  if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    consumed;    pt++)    {    char[]    c    =    Character.toChars(Character.codePointAt(pos,    pt));    out.write(c);    }    	non-compiled	[CE]  no  suitable  method  found  for  codePointAt(int,int)	77	None	replace
168	[BUG]  [BUGGY]  if(consumed  <  =  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars();  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  <  =  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars();  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  <  =  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars();  out.write(c);  }	  if(consumed    <    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    input.toChars();    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
169	[BUG]  [BUGGY]  if(consumed  >=  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars();  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                    ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >=  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars();  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >=  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars();  out.write(c);  }	  if(consumed    <    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    input.toChars();    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	47	None	replace
170	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  ==  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	add	if(consumed  ==  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }	  if(consumed    >    0)    {    for(int    pos    =    0;    pt    <    len;    pt++)    {    char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    out.write(c);    }    	compilable	  [FE]  ComparisonFailure  	49	13	replace
171	[BUG]  [BUGGY]  if(consumed  ==  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [FE]  ComparisonFailure  [FE]            ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  ==  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  ==  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }	  if(consumed    >    0)    {    for(int    pos    =    0;    pt    <    len;    pt++)    {    char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    out.write(c);    }    	compilable	  [FE]  ComparisonFailure  	49	13	replace
172	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  c  =  0;  c  <  consumed;  pt++)  {  out.write(c);  }  [CE]  cannot  find  symbol  pt  [FE]                  ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >  0)  {  for(int  c  =  0;  c  <  consumed;  pt++)  {  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  for(int  c  =  0;  c  <  consumed;  pt++)  {  out.write(c);  }	  if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    consumed;    pt++)    {    out.write(c);    }    	non-compiled	[CE]  cannot  find  symbol  pt	22	None	replace
173	[BUG]  [BUGGY]  if(consumed  <  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  p));  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]              ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  <  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  p));  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  <  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  p));  out.write(c);  }	  if(consumed    <    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    Character.toChars(Character.codePointAt(pos,    pos));    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	41	None	replace
174	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  p  =  0;  p  <  len;  pt++)  {  char[]  c  =  input.toChars();  out.write(c);  }  [CE]  cannot  find  symbol  pt  [FE]                  ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >  0)  {  for(int  p  =  0;  p  <  len;  pt++)  {  char[]  c  =  input.toChars();  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  for(int  p  =  0;  p  <  len;  pt++)  {  char[]  c  =  input.toChars();  out.write(c);  }	  if(consumed    >    0)    {    for(int    pos    =    0;    pt    <    len;    pt++)    {    char[]    c    =    input.toChars();    out.write(c);    }    	non-compiled	[CE]  cannot  find  symbol  pt	27	None	replace
175	[BUG]  [BUGGY]  if(consumed  <  0)  {  for(int  c  =  0;  pt  <  len;  pt++)  {  out.write(c);  }  [CE]  cannot  find  symbol  pt  [FE]                ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  <  0)  {  for(int  c  =  0;  pt  <  len;  pt++)  {  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  <  0)  {  for(int  c  =  0;  pt  <  len;  pt++)  {  out.write(c);  }	  if(consumed    <    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    out.write(c);    }    	non-compiled	[CE]  cannot  find  symbol  pt	21	None	replace
176	[BUG]  [BUGGY]  timeout  [FE]                  ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(pos);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	add	if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(pos);  }	  if(consumed    <    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    out.write(c);    }    	compilable	timeout	21	1	replace
177	[BUG]  [BUGGY]  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(pos);  }  timeout  [FE]                  ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(pos);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(pos);  }	  if(consumed    <    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    out.write(c);    }    	compilable	timeout	21	1	replace
178	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write(c);  for(pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }  [CE]  cannot  find  symbol  c  [FE]                ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >  0)  {  out.write(c);  for(pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  out.write(c);  for(pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }	  if(consumed    >    0)    {    for(pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    Character.toChars(Character.codePointAt(pos,    pos));    out.write(c);    }    	non-compiled	[CE]  cannot  find  symbol  c	42	None	replace
179	[BUG]  [BUGGY]  if(consumed  >  0)  {  if(consummed  <  0)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >  0)  {  if(consummed  <  0)  {  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  if(consummed  <  0)  {	  if(consumed    <    0)    {    if(consummed    <    0)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
180	[BUG]  [BUGGY]  if(consume  <  0)  {  if(consumed  <  0)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consume  <  0)  {  if(consumed  <  0)  {  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consume  <  0)  {  if(consumed  <  0)  {	  if(consumed    <    0)    {    if(consummed    <    0)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
181	[BUG]  [BUGGY]  if(consumed  <  0)  {  if(consumed  >  0)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  <  0)  {  if(consumed  >  0)  {  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  <  0)  {  if(consumed  >  0)  {	  if(consumed    <    0)    {    if(consummed    <    0)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
182	[BUG]  [BUGGY]  int  pos  =  output.toChars(pos);  [CE]  'else'  without  'if'  [FE]                      ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  int  pos  =  output.toChars(pos);  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	int  pos  =  output.toChars(pos);	  if(consumed    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    output.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  'else'  without  'if'	39	None	replace
183	[BUG]  [BUGGY]  OutputStream  out  =  output.toChars(pos);  [CE]  'else'  without  'if'  [FE]                        ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  OutputStream  out  =  output.toChars(pos);  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	OutputStream  out  =  output.toChars(pos);	  if(consumed    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    output.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  'else'  without  'if'	39	None	replace
184	[BUG]  [BUGGY]  Integer  pt  =  input.length();  [CE]  'else'  without  'if'  [FE]                          ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  Integer  pt  =  input.length();  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	Integer  pt  =  input.length();	  if(consumed    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    output.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  'else'  without  'if'	39	None	replace
185	[BUG]  [BUGGY]  if(consumed  <  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  out));  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]              ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  <  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  out));  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  <  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  out));  out.write(c);  }	  if(consumed    <    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    Character.toChars(Character.codePointAt(pos,    pos));    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	41	None	replace
186	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  out));  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  out));  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  out));  out.write(c);  }	  if(consumed    <    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    Character.toChars(Character.codePointAt(pos,    pos));    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	41	None	replace
187	[BUG]  [BUGGY]  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed    <    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    out.write(c);    }    if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	31	None	add
188	[BUG]  [BUGGY]  if(consume  >  0)  {  if(consumed  >  0)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consume  >  0)  {  if(consumed  >  0)  {  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consume  >  0)  {  if(consumed  >  0)  {	  if(consumed    >    0)    {    if(consummed    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
189	[BUG]  [BUGGY]  if(consumed  <  =  0)  {  if(consummed  >  0)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  <  =  0)  {  if(consummed  >  0)  {  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  <  =  0)  {  if(consummed  >  0)  {	  if(consumed    >    0)    {    if(consummed    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
190	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  consume;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  consume;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    consumed;    pt++)    {    char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    out.write(c);    }    if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  consume;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	72	None	add
191	[BUG]  [BUGGY]  if(consumed  <  0)  {  out.write(c);  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [CE]  cannot  find  symbol  c  [FE]                    ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  <  0)  {  out.write(c);  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  <  0)  {  out.write(c);  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }	  if(consumed    >    0)    {    out.write(c);    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  cannot  find  symbol  c	55	None	replace
192	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write('n');  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                      ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >  0)  {  out.write('n');  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  out.write('n');  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }	  if(consumed    >    0)    {    out.write(c);    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	55	None	replace
193	[BUG]  [BUGGY]  if(consumed  <  0)  {  out.write(c);  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars();  out.write(c);  }  [CE]  cannot  find  symbol  c  [FE]                  ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  <  0)  {  out.write(c);  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars();  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  <  0)  {  out.write(c);  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars();  out.write(c);  }	  if(consumed    >    0)    {    out.write(c);    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    input.toChars();    out.write(c);    }    	non-compiled	[CE]  cannot  find  symbol  c	63	None	replace
194	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(input));  [CE]  'else'  without  'if'  [FE]                        ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(input));  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	char[]  c  =  Character.toChars(Character.charCount(input));	  char[]    c    =    Character.toChars(Character.codePointAt(pos,    pos));    	non-compiled	[CE]  'else'  without  'if'	11	None	replace
195	[BUG]  [BUGGY]  if(consumed  >=  0)  {  If(consumed  <  0)  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >=  0)  {  If(consumed  <  0)  {  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >=  0)  {  If(consumed  <  0)  {	  if(consumed    <    0)    {    If(consumed    <    0)    {    	non-compiled	[CE]  ';'  expected	2	None	replace
196	[BUG]  [BUGGY]  out.write(  [CE]  '.class'  expected  [FE]                  ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  out.write(  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	out.write(	  if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    Character.toChars(Character.codePointAt(pos,    pt));    out.write(    	non-compiled	[CE]  '.class'  expected	30	None	replace
197	[BUG]  [BUGGY]  out.write('.class'  expected);  [CE]  unclosed  character  literal  [FE]                    ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  out.write('.class'  expected);  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	out.write('.class'  expected);	  if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    Character.toChars(Character.codePointAt(pos,    pt));    out.write(    	non-compiled	[CE]  unclosed  character  literal	30	None	replace
198	[BUG]  [BUGGY]  OutputStream  out  =  input.readLine();  [CE]  'else'  without  'if'  [FE]                      ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  OutputStream  out  =  input.readLine();  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	OutputStream  out  =  input.readLine();	  if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    Character.toChars(Character.codePointAt(pos,    pt));    out.write(    	non-compiled	[CE]  'else'  without  'if'	30	None	replace
199	[BUG]  [BUGGY]  out.write(consume);  [CE]  'else'  without  'if'  [FE]                        ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  out.write(consume);  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	out.write(consume);	  if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    Character.toChars(Character.codePointAt(pos,    pt));    out.write(    	non-compiled	[CE]  'else'  without  'if'	30	None	replace
200	[BUG]  [BUGGY]  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  input.toChars();  out.write(c);  }  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  input.toChars();  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  input.toChars();  out.write(c);  }	  if(consumed    <    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    input.toChars();    out.write(c);    }    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
201	[BUG]  [BUGGY]  if(consumed  <  =  0)  {  for(int  pos  =  0;  pt  <  len;  pt++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  <  =  0)  {  for(int  pos  =  0;  pt  <  len;  pt++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  <  =  0)  {  for(int  pos  =  0;  pt  <  len;  pt++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }	  if(consumed    <    =    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
202	[BUG]  [BUGGY]  timeout  [FE]                ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  <  0  ||  pos  >  consumed)  {  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	add	if(consumed  <  0  ||  pos  >  consumed)  {	  if(consumed    <    0    ||    consumed    >    pos)    {    timeout    	compilable	timeout	25	1	replace
203	[BUG]  [BUGGY]  if(consumed  <  0  ||  pos  >  consumed)  {  timeout  [FE]                ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  <  0  ||  pos  >  consumed)  {  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  <  0  ||  pos  >  consumed)  {	  if(consumed    <    0    ||    consumed    >    pos)    {    timeout    	compilable	timeout	25	1	replace
204	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  c  =  0;  pt  <  pos;  pt++)  {  out.write(c);  }  [CE]  cannot  find  symbol  pt  [FE]                ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >  0)  {  for(int  c  =  0;  pt  <  pos;  pt++)  {  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  for(int  c  =  0;  pt  <  pos;  pt++)  {  out.write(c);  }	  if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    pos;    pt++)    {    out.write(c);    }    	non-compiled	[CE]  cannot  find  symbol  pt	74	None	replace
205	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  Character[]  c  =  Character.toChars(Character.codePointAt(pos,  out));  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                  ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  Character[]  c  =  Character.toChars(Character.codePointAt(pos,  out));  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  Character[]  c  =  Character.toChars(Character.codePointAt(pos,  out));  out.write(c);  }	  if(consumed    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    Character[]    c    =    Character.toChars(Character.codePointAt(pos,    pos));    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	43	None	replace
206	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(contraction,  pos));  [CE]  'else'  without  'if'  [FE]                  ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(contraction,  pos));  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	char[]  c  =  Character.toChars(Character.codePointAt(contraction,  pos));	  char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    	non-compiled	[CE]  'else'  without  'if'	8	None	replace
207	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pos  =  0;  p  <  len;  pos++)  {  char[]  c  =  input.toChars();  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                  ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >  0)  {  for(int  pos  =  0;  p  <  len;  pos++)  {  char[]  c  =  input.toChars();  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  for(int  pos  =  0;  p  <  len;  pos++)  {  char[]  c  =  input.toChars();  out.write(c);  }	  if(consumed    >    0)    {    for(int    pt    =    0;    pos    <    len;    pos++)    {    char[]    c    =    input.toChars();    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	80	None	replace
208	[BUG]  [BUGGY]  if(consumed  >  0)  {  if(consumed  <  0)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >  0)  {  if(consumed  <  0)  {  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  if(consumed  <  0)  {	  if(consumed    <    0)    {    if(consumed    <    0)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
209	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  String  c  =  input.toChars();  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                  ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  String  c  =  input.toChars();  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  String  c  =  input.toChars();  out.write(c);  }	  if(consumed    <    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    input.toChars();    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	47	None	replace
210	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  c  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  while(consumed  >  0)  {  for(int  c  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >  0)  {  for(int  c  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  while(consumed  >  0)  {  for(int  c  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed    >    0)    {    for(int    c    =    0;    pos    <    len;    pos++)    {    out.write(c);    }    while(consumed  >  0)  {  for(int  c  =  0;  pos  <  len;  pos++)  {  out.write(c);  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	12	None	add
211	[BUG]  [BUGGY]  timeout  [FE]              ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  <  0)  {  for(int  c  =  0;  pos  <  input.length();  pos++)  {  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	add	if(consumed  <  0)  {  for(int  c  =  0;  pos  <  input.length();  pos++)  {  out.write(c);  }	  if(consumed    <    0)    {    for(int    pos    =    0;    pos    <    input.length();    pos++)    {    out.write(c);    }    	compilable	timeout	64	1	replace
212	[BUG]  [BUGGY]  if(consumed  <  0)  {  for(int  c  =  0;  pos  <  input.length();  pos++)  {  out.write(c);  }  timeout  [FE]              ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  <  0)  {  for(int  c  =  0;  pos  <  input.length();  pos++)  {  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  <  0)  {  for(int  c  =  0;  pos  <  input.length();  pos++)  {  out.write(c);  }	  if(consumed    <    0)    {    for(int    pos    =    0;    pos    <    input.length();    pos++)    {    out.write(c);    }    	compilable	timeout	64	1	replace
213	[BUG]  [BUGGY]  timeout  [FE]                ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >  0)  {  for(int  c  =  0;  pos  <  input.length();  pos++)  {  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	add	if(consumed  >  0)  {  for(int  c  =  0;  pos  <  input.length();  pos++)  {  out.write(c);  }	  if(consumed    <    0)    {    for(int    pos    =    0;    pos    <    input.length();    pos++)    {    out.write(c);    }    	compilable	timeout	64	1	replace
214	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  c  =  0;  pos  <  input.length();  pos++)  {  out.write(c);  }  timeout  [FE]                ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >  0)  {  for(int  c  =  0;  pos  <  input.length();  pos++)  {  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  for(int  c  =  0;  pos  <  input.length();  pos++)  {  out.write(c);  }	  if(consumed    <    0)    {    for(int    pos    =    0;    pos    <    input.length();    pos++)    {    out.write(c);    }    	compilable	timeout	64	1	replace
215	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write('n');  }  [CE]  'else'  without  'if'  [FE]                        ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >  0)  {  out.write('n');  }  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  out.write('n');  }	  if(consumed    ==    0)    {    out.write('n');    }    else    {    out.write('n');    }    	non-compiled	[CE]  'else'  without  'if'	60	None	replace
216	[BUG]  [BUGGY]  if(consumed  >  0)  {  if(consumed  >=  0)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >  0)  {  if(consumed  >=  0)  {  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  if(consumed  >=  0)  {	  if(consumed    <    0)    {    if(consumed    >=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
217	[BUG]  [BUGGY]  if(consume  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c);  }  [CE]  cannot  find  symbol  consume  [FE]                  ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consume  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consume  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c);  }	  if(consumed    >    0)    {    for(int    c    =    0;    pt    <    len;    pt++)    {    out.write(c);    }    	non-compiled	[CE]  cannot  find  symbol  consume	51	None	replace
218	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pos  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.charCount(input,  pos));  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                  ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >  0)  {  for(int  pos  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.charCount(input,  pos));  out.write(c);  }  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  for(int  pos  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.charCount(input,  pos));  out.write(c);  }	  if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    Character.toChars(Character.charCount(input,    pos));    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	66	None	replace
219	[BUG]  [BUGGY]  if(consumed  >=  0)  {  If(consumed  >=  0)  {  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >=  0)  {  If(consumed  >=  0)  {  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed    >=    0)    {    If(consumed  >=  0)  {	  	non-compiled	[CE]  ';'  expected	16	None	add
220	[BUG]  [BUGGY]  pos  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [CE]  not  a  statement  [FE]                  ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  pos  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	pos  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }	  if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    consumed;    pt++)    {    char[]    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  not  a  statement	65	None	replace
221	[BUG]  [BUGGY]  pos  +=  input.length()  *  2;  [CE]  'else'  without  'if'  [FE]                  ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  pos  +=  input.length()  *  2;  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	pos  +=  input.length()  *  2;	  pos    +=    input.length();    	non-compiled	[CE]  'else'  without  'if'	57	None	replace
222	[BUG]  [BUGGY]  CharSequence  c  =  Character.toChars(Character.codePointAt(pos,  input));  [CE]  'else'  without  'if'  [FE]                ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  CharSequence  c  =  Character.toChars(Character.codePointAt(pos,  input));  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	CharSequence  c  =  Character.toChars(Character.codePointAt(pos,  input));	  CharSequence    c    =    Character.toChars(Character.codePointAt(input,    pos));    	non-compiled	[CE]  'else'  without  'if'	20	None	replace
223	[BUG]  [BUGGY]  CharSequence  c  =  Character.toChars(Character.charCount(input,  pos));  [CE]  'else'  without  'if'  [FE]                  ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  CharSequence  c  =  Character.toChars(Character.charCount(input,  pos));  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	CharSequence  c  =  Character.toChars(Character.charCount(input,  pos));	  CharSequence    c    =    Character.toChars(Character.codePointAt(input,    pos));    	non-compiled	[CE]  'else'  without  'if'	20	None	replace
224	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write('else');  }  [CE]  unclosed  character  literal  [FE]                    ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >  0)  {  out.write('else');  }  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  out.write('else');  }	  if(consumed    ==    0)    {    out.write('else');    }    else    {    out.write('n');    }    	non-compiled	[CE]  unclosed  character  literal	58	None	replace
225	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write('else',  pos);  }  else  {  out.write('n');  }  [CE]  unclosed  character  literal  [FE]                      ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >  0)  {  out.write('else',  pos);  }  else  {  out.write('n');  }  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  out.write('else',  pos);  }  else  {  out.write('n');  }	  if(consumed    ==    0)    {    out.write('else');    }    else    {    out.write('n');    }    	non-compiled	[CE]  unclosed  character  literal	58	None	replace
226	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(  [CE]  '.class'  expected  [FE]            ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(	  if(consumed    <    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    out.write(c);    }    timeout    	non-compiled	[CE]  '.class'  expected	32	None	replace
227	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  c  =  0;  pt  <  consumed;  pt++)  {  out.write(c);  }  [CE]  cannot  find  symbol  pt  [FE]                  ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >  0)  {  for(int  c  =  0;  pt  <  consumed;  pt++)  {  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  for(int  c  =  0;  pt  <  consumed;  pt++)  {  out.write(c);  }	  if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    consumed;    pt++)    {    out.write(c);    }    	non-compiled	[CE]  cannot  find  symbol  pt	22	None	replace
228	[BUG]  [BUGGY]  pos  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  input.toChars();  out.write(c);  }  [CE]  not  a  statement  [FE]                ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  pos  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  input.toChars();  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	pos  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  input.toChars();  out.write(c);  }	  if(pos    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    input.toChars();    out.write(c);    }    	non-compiled	[CE]  not  a  statement	75	None	replace
229	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  p  =  0;  p  <  len;  pt++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [CE]  cannot  find  symbol  pt  [FE]                    ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >  0)  {  for(int  p  =  0;  p  <  len;  pt++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  for(int  p  =  0;  p  <  len;  pt++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }	  if(consumed    >    0)    {    for(int    pos    =    0;    pt    <    len;    pt++)    {    char[]    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  cannot  find  symbol  pt	62	None	replace
230	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  p  =  0;  p  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }  [CE]  cannot  find  symbol  pt  [FE]            ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >  0)  {  for(int  p  =  0;  p  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  for(int  p  =  0;  p  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }	  if(consumed    >    0)    {    for(int    pos    =    0;    pt    <    len;    pt++)    {    char[]    c    =    Character.toChars(Character.codePointAt(pos,    pos));    out.write(c);    }    	non-compiled	[CE]  cannot  find  symbol  pt	54	None	replace
231	[BUG]  [BUGGY]  if(consumed  <  0)  {  for(int  p  =  0;  p  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }  [CE]  cannot  find  symbol  pt  [FE]              ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  <  0)  {  for(int  p  =  0;  p  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  <  0)  {  for(int  p  =  0;  p  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }	  if(consumed    >    0)    {    for(int    pos    =    0;    pt    <    len;    pt++)    {    char[]    c    =    Character.toChars(Character.codePointAt(pos,    pos));    out.write(c);    }    	non-compiled	[CE]  cannot  find  symbol  pt	54	None	replace
232	[BUG]  [BUGGY]  if(consumed  <  0)  {  for(int  c  =  0;  c  <  len;  pos++)  {  out.write(c);  }  while(consumed  <  0)  {  for(int  c  =  0;  c  <  len;  pos++)  {  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  <  0)  {  for(int  c  =  0;  c  <  len;  pos++)  {  out.write(c);  }  while(consumed  <  0)  {  for(int  c  =  0;  c  <  len;  pos++)  {  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed    <    0)    {    for(int    c    =    0;    c    <    len;    pos++)    {    out.write(c);    }    while(consumed  <  0)  {  for(int  c  =  0;  c  <  len;  pos++)  {  out.write(c);  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	18	None	add
233	[BUG]  [BUGGY]  if(consumed  >=  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]              ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >=  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >=  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }	  if(consumed    <    0)    {    for(int    c    =    0;    pos    <    len;    pos++)    {    out.write(c);    }    timeout    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	15	None	replace
234	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write  [CE]  not  a  statement  [FE]    ComparisonFailure    [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write	  if(consumed    >=    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    out.write(c);    }    	non-compiled	[CE]  not  a  statement	34	None	replace
235	[BUG]  [BUGGY]  if(consume  >  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CE]  'else'  without  'if'  [FE]                    ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consume  >  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consume  >  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }	  char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    out.write(c);    	non-compiled	[CE]  'else'  without  'if'	9	None	replace
236	[BUG]  [BUGGY]  if(consume  >  0.0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CE]  'else'  without  'if'  [FE]                      ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consume  >  0.0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consume  >  0.0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }	  char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    out.write(c);    	non-compiled	[CE]  'else'  without  'if'	9	None	replace
237	[BUG]  [BUGGY]  if(consumed  >  0.0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CE]  'else'  without  'if'  [FE]                        ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >  0.0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0.0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }	  char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    out.write(c);    	non-compiled	[CE]  'else'  without  'if'	9	None	replace
238	[BUG]  [BUGGY]  pos  >  0)  {  out.write(c);  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [CE]  not  a  statement  [FE]                  ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  pos  >  0)  {  out.write(c);  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	pos  >  0)  {  out.write(c);  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }	  if(consumed    >    0)    {    out.write(c);    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  not  a  statement	61	None	replace
239	[BUG]  [BUGGY]  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }	  if(consumed    <    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
240	[BUG]  [BUGGY]  int  pos  =  input.length();  [CE]  'else'  without  'if'  [FE]                        ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  int  pos  =  input.length();  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	int  pos  =  input.length();	  if(consumed    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    out[]    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  'else'  without  'if'	40	None	replace
241	[BUG]  [BUGGY]  OutputStream  out  =  input.getOutputStream();  [CE]  'else'  without  'if'  [FE]                          ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  OutputStream  out  =  input.getOutputStream();  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	OutputStream  out  =  input.getOutputStream();	  if(consumed    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    out[]    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  'else'  without  'if'	40	None	replace
242	[BUG]  [BUGGY]  OutputStream  out  =  input.toOutputStream();  [CE]  'else'  without  'if'  [FE]                            ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  OutputStream  out  =  input.toOutputStream();  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	OutputStream  out  =  input.toOutputStream();	  if(consumed    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    out[]    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  'else'  without  'if'	40	None	replace
243	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  p  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  [CE]  cannot  find  symbol  c  [FE]              ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >  0)  {  for(int  p  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  for(int  p  =  0;  pos  <  len;  pos++)  {  out.write(c);  }	  if(consumed    >    0)    {    for(int    pos    =    0;    pos    <    consumed;    pos++)    {    out.write(c);    }    	non-compiled	[CE]  cannot  find  symbol  c	68	None	replace
244	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  p  =  0;  p  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CE]  cannot  find  symbol  pt  [FE]            ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >  0)  {  for(int  p  =  0;  p  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  for(int  p  =  0;  p  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }	  if(consumed    >    0)    {    for(int    pos    =    0;    pt    <    len;    pt++)    {    char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    out.write(c);    }    	non-compiled	[CE]  cannot  find  symbol  pt	49	None	replace
245	[BUG]  [BUGGY]  if(consumed  <  0)  {  for(int  p  =  0;  p  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CE]  cannot  find  symbol  pt  [FE]              ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  <  0)  {  for(int  p  =  0;  p  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  <  0)  {  for(int  p  =  0;  p  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }	  if(consumed    >    0)    {    for(int    pos    =    0;    pt    <    len;    pt++)    {    char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    out.write(c);    }    	non-compiled	[CE]  cannot  find  symbol  pt	49	None	replace
246	[BUG]  [BUGGY]  if(consumed  >=  0)  {  if(consumed  >  0)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >=  0)  {  if(consumed  >  0)  {  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >=  0)  {  if(consumed  >  0)  {	  if(consumed    >    0)    {    if(consumed    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
247	[BUG]  [BUGGY]  if(consumed  <  0)  {  for(pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  <  0)  {  for(pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  <  0)  {  for(pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }	  if(consumed    <    =    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
248	[BUG]  [BUGGY]  OutputFactory  outputFactory  =  input.getOutputFactory();  [CE]  'else'  without  'if'  [FE]                    ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  OutputFactory  outputFactory  =  input.getOutputFactory();  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	OutputFactory  outputFactory  =  input.getOutputFactory();	  if(consumed    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    out[]    c    =    input.toChars();    out.write(c);    }    	non-compiled	[CE]  'else'  without  'if'	48	None	replace
249	[BUG]  [BUGGY]  OutputStream  out  =  input.toChars();  [CE]  'else'  without  'if'  [FE]                      ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  OutputStream  out  =  input.toChars();  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	OutputStream  out  =  input.toChars();	  if(consumed    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    out[]    c    =    input.toChars();    out.write(c);    }    	non-compiled	[CE]  'else'  without  'if'	48	None	replace
250	[BUG]  [BUGGY]  if(consumed  <  0)  {  out.write('else',  pos);  }  else  {  out.write('n');  }  [CE]  unclosed  character  literal  [FE]                      ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  <  0)  {  out.write('else',  pos);  }  else  {  out.write('n');  }  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  <  0)  {  out.write('else',  pos);  }  else  {  out.write('n');  }	  if(consumed    <    =    0)    {    out.write('else');    }    else    {    out.write('n');    }    	non-compiled	[CE]  unclosed  character  literal	59	None	replace
251	[BUG]  [BUGGY]  if(consumed  <  0)  {  out.write('else');  }  [CE]  unclosed  character  literal  [FE]                        ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  <  0)  {  out.write('else');  }  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  <  0)  {  out.write('else');  }	  if(consumed    <    =    0)    {    out.write('else');    }    else    {    out.write('n');    }    	non-compiled	[CE]  unclosed  character  literal	59	None	replace
252	[BUG]  [BUGGY]  if(consumed  <  0)  {  for(int  c  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  if(consumed  <  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  <  0)  {  for(int  c  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  if(consumed  <  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed    <    0)    {    for(int    c    =    0;    pos    <    len;    pos++)    {    out.write(c);    }    if(consumed  <  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	14	None	add
253	[BUG]  [BUGGY]  if(consumed  <  0)  {  for(int  c  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  while(consumed  <  0)  {  for(int  c  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  <  0)  {  for(int  c  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  while(consumed  <  0)  {  for(int  c  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed    <    0)    {    for(int    c    =    0;    pos    <    len;    pos++)    {    out.write(c);    }    while(consumed  <  0)  {  for(int  c  =  0;  pos  <  len;  pos++)  {  out.write(c);  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	14	None	add
254	[BUG]  [BUGGY]  timeout  [FE]              ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >=  0)  {  for(int  c  =  0;  c  <  len;  pos++)  {  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	add	if(consumed  >=  0)  {  for(int  c  =  0;  c  <  len;  pos++)  {  out.write(c);  }	  if(consumed    <    0)    {    for(int    c    =    0;    c    <    len;    pos++)    {    out.write(c);    }    timeout    	compilable	timeout	19	1	replace
255	[BUG]  [BUGGY]  if(consumed  >=  0)  {  for(int  c  =  0;  c  <  len;  pos++)  {  out.write(c);  }  timeout  [FE]              ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >=  0)  {  for(int  c  =  0;  c  <  len;  pos++)  {  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >=  0)  {  for(int  c  =  0;  c  <  len;  pos++)  {  out.write(c);  }	  if(consumed    <    0)    {    for(int    c    =    0;    c    <    len;    pos++)    {    out.write(c);    }    timeout    	compilable	timeout	19	1	replace
256	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(input,  pos);  out.write(c);  }  [CE]  no  suitable  method  found  for  toChars(CharSequence,int)  [FE]                  ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(input,  pos);  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(input,  pos);  out.write(c);  }	  if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    consumed;    pt++)    {    char[]    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  no  suitable  method  found  for  toChars(CharSequence,int)	65	None	replace
257	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos,  out);  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                    ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos,  out);  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos,  out);  out.write(c);  }	  if(consumed    <    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	38	None	replace
258	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars();  out.write(c);  }  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >  0)  {  for(pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars();  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  for(pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars();  out.write(c);  }	  if(consumed    <    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    input.toChars();    out.write(c);    }    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
259	[BUG]  [BUGGY]  timeout  [FE]                  ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(pt);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	add	if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(pt);  }	  if(consumed    >    0)    {    for(int    c    =    0;    pt    <    len;    pt++)    {    out.write(c);    }    	compilable	timeout	51	1	replace
260	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(pt);  }  timeout  [FE]                  ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(pt);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(pt);  }	  if(consumed    >    0)    {    for(int    c    =    0;    pt    <    len;    pt++)    {    out.write(c);    }    	compilable	timeout	51	1	replace
261	[BUG]  [BUGGY]  out.write(consumed);  [CE]  'else'  without  'if'  [FE]                      ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  out.write(consumed);  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	out.write(consumed);	  if(consumed    <    =    0)    {    out.write('else');    }    else    {    out.write('n');    }    	non-compiled	[CE]  'else'  without  'if'	59	None	replace
262	[BUG]  [BUGGY]  OutputStream  input  =  input.outputStream();  [CE]  'else'  without  'if'  [FE]                        ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  OutputStream  input  =  input.outputStream();  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	OutputStream  input  =  input.outputStream();	  if(consumed    <    =    0)    {    out.write('else');    }    else    {    out.write('n');    }    	non-compiled	[CE]  'else'  without  'if'	59	None	replace
263	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  output.toChars(pos,  out);  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                      ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  output.toChars(pos,  out);  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  output.toChars(pos,  out);  out.write(c);  }	  if(consumed    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    output.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	39	None	replace
264	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pos  <  len;  pos++)  {  char[]  c  =  output.toChars(pos);  out.write(c);  }  [CE]  cannot  find  symbol  output  [FE]                        ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pos  <  len;  pos++)  {  char[]  c  =  output.toChars(pos);  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  for(int  pt  =  0;  pos  <  len;  pos++)  {  char[]  c  =  output.toChars(pos);  out.write(c);  }	  if(consumed    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    output.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  cannot  find  symbol  output	39	None	replace
265	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write('n');  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  input.toChars();  out.write(c);  }  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >  0)  {  out.write('n');  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  input.toChars();  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  out.write('n');  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  input.toChars();  out.write(c);  }	  if(consumed    >    0)    {    out.write(c);    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    input.toChars();    out.write(c);    }    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
266	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write(c,  0,  pt);  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  input.toChars();  out.write(c);  }  [CE]  cannot  find  symbol  c  [FE]                  ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >  0)  {  out.write(c,  0,  pt);  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  input.toChars();  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  out.write(c,  0,  pt);  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  input.toChars();  out.write(c);  }	  if(consumed    >    0)    {    out.write(c);    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    input.toChars();    out.write(c);    }    	non-compiled	[CE]  cannot  find  symbol  c	52	None	replace
267	[BUG]  [BUGGY]  if(consumed  <  =  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pt));  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  <  =  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pt));  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  <  =  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pt));  out.write(c);  }	  if(consumed    <    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    Character.toChars(Character.codePointAt(pos,    pt));    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
268	[BUG]  [BUGGY]  if(consumed  <  0)  {  for(int  c  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  if(consumed  <  0)  {  for(int  c  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  <  0)  {  for(int  c  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  if(consumed  <  0)  {  for(int  c  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed    <    0)    {    for(int    c    =    0;    pos    <    len;    pos++)    {    out.write(c);    }    if(consumed  <  0)  {  for(int  c  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	14	None	add
269	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(pos,  consume));  [CE]  'else'  without  'if'  [FE]                        ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(pos,  consume));  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	char[]  c  =  Character.toChars(Character.codePointAt(pos,  consume));	  char[]    c    =    Character.toChars(Character.codePointAt(pos,    pos));    	non-compiled	[CE]  'else'  without  'if'	11	None	replace
270	[BUG]  [BUGGY]  if(consumed  >=  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                    ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >=  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >=  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }	  if(consumed    <    =    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	69	None	replace
271	[BUG]  [BUGGY]  CharSequence  c  =  Character.toChars(Character.codePointAt(pos,  len));  [CE]  'else'  without  'if'  [FE]                ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  CharSequence  c  =  Character.toChars(Character.codePointAt(pos,  len));  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	CharSequence  c  =  Character.toChars(Character.codePointAt(pos,  len));	  CharSequence    c    =    Character.toChars(Character.codePointAt(input,    pos));    	non-compiled	[CE]  'else'  without  'if'	20	None	replace
272	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(char);  }  [CE]  '.class'  expected  [FE]                ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(char);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(char);  }	  if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    pos;    pt++)    {    out.write(c);    }    	non-compiled	[CE]  '.class'  expected	74	None	replace
273	[BUG]  [BUGGY]  if(consumed  <  =  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  input.toChars();  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  <  =  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  input.toChars();  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  <  =  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  input.toChars();  out.write(c);  }	  if(consumed    <    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    input.toChars();    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
274	[BUG]  [BUGGY]  if(pos  <  len)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  input.toChars();  out.write(c);  }  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(pos  <  len)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  input.toChars();  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(pos  <  len)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  input.toChars();  out.write(c);  }	  if(consumed    <    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    input.toChars();    out.write(c);    }    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
275	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pt));  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]              ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pt));  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pt));  out.write(c);  }	  if(consumed    >=    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    Character.toChars(Character.codePointAt(pos,    pos));    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	53	None	replace
276	[BUG]  [BUGGY]  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  }  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed    >=    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    out.write(c);    }    if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  }	  	non-compiled	[CE]  illegal  start  of  expression	33	None	add
277	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  Character.toChars(Character.charCount(input,  pos));  out.write(c);  }  [CE]  method  charCount  in  class  Character  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  Character.toChars(Character.charCount(input,  pos));  out.write(c);  }  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  Character.toChars(Character.charCount(input,  pos));  out.write(c);  }	  if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    Character.toChars(Character.charCount(input,    pos));    out.write(c);    }    	non-compiled	[CE]  method  charCount  in  class  Character  cannot  be  applied  to  given  types;	66	None	replace
278	[BUG]  [BUGGY]  if(consumed  <  0)  {  for(int  c  =  0;  c  <  len;  pos++)  {  out.write(c);  }  if(consumed  <  0)  {  for(int  c  =  0;  p  <  len;  pos++)  {  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  <  0)  {  for(int  c  =  0;  c  <  len;  pos++)  {  out.write(c);  }  if(consumed  <  0)  {  for(int  c  =  0;  p  <  len;  pos++)  {  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed    <    0)    {    for(int    c    =    0;    c    <    len;    pos++)    {    out.write(c);    }    if(consumed  <  0)  {  for(int  c  =  0;  p  <  len;  pos++)  {  out.write(c);  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	18	None	add
279	[BUG]  [BUGGY]  timeout  [FE]                ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >  0  ||  consumed  >  pos)  {  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	add	if(consumed  >  0  ||  consumed  >  pos)  {	  if(consumed    <    0    ||    consumed    >    pos)    {    timeout    	compilable	timeout	25	1	replace
280	[BUG]  [BUGGY]  if(consumed  >  0  ||  consumed  >  pos)  {  timeout  [FE]                ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >  0  ||  consumed  >  pos)  {  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0  ||  consumed  >  pos)  {	  if(consumed    <    0    ||    consumed    >    pos)    {    timeout    	compilable	timeout	25	1	replace
281	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(pos,  out));  [CE]  'else'  without  'if'  [FE]                  ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(pos,  out));  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	char[]  c  =  Character.toChars(Character.codePointAt(pos,  out));	  char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    	non-compiled	[CE]  'else'  without  'if'	8	None	replace
282	[BUG]  [BUGGY]  pos  +=  raw.length();  [CE]  'else'  without  'if'  [FE]                  ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  pos  +=  raw.length();  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	pos  +=  raw.length();	  pos    +=    input.length();    	non-compiled	[CE]  'else'  without  'if'	57	None	replace
283	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write('n');  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >  0)  {  out.write('n');  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  out.write('n');  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }	  if(consumed    >    0)    {    out.write(c);    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
284	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  [CE]  cannot  find  symbol  c  [FE]              ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  for(int  pt  =  0;  pos  <  len;  pos++)  {  out.write(c);  }	  if(consumed    >    0)    {    for(int    pos    =    0;    pos    <    consumed;    pos++)    {    out.write(c);    }    	non-compiled	[CE]  cannot  find  symbol  c	68	None	replace
285	[BUG]  [BUGGY]  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  out.write(c);  }  [CE]  cannot  find  symbol  c  [FE]                ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  out.write(c);  }	  if(consumed    >=    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    out.write(c);    }    	non-compiled	[CE]  cannot  find  symbol  c	50	None	replace
286	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  unescape(String)  failed:  expected  '    test'  actual  '\u0000                     \u0000 \u0000 \u0000 t\u0001\u0001\u0001\u0001 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	e\u0002                    \u0002\u0002\u0002  [FE]                  ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(pos);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	add	if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(pos);  }	  if(consumed    >=    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    out.write(c);    }    	compilable	  [FE]  junit.framework.ComparisonFailure:  unescape(String)  failed:  expected  '    test'  actual  '\u0000                     \u0000 \u0000 \u0000 t\u0001\u0001\u0001\u0001 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	e\u0002                                        \u0002\u0002\u0002  	50	19	replace
287	[BUG]  [BUGGY]  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(pos);  }  [FE]  junit.framework.ComparisonFailure:  unescape(String)  failed:  expected  '    test'  actual  '\u0000                     \u0000 \u0000 \u0000 t\u0001\u0001\u0001\u0001 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	e\u0002                    \u0002\u0002\u0002  [FE]                  ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(pos);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(pos);  }	  if(consumed    >=    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    out.write(c);    }    	compilable	  [FE]  junit.framework.ComparisonFailure:  unescape(String)  failed:  expected  '    test'  actual  '\u0000                     \u0000 \u0000 \u0000 t\u0001\u0001\u0001\u0001 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	e\u0002                                        \u0002\u0002\u0002  	50	19	replace
288	[BUG]  [BUGGY]  if(consumed  >=  0)  {  for(int  c  =  0;  pt  <  len;  pt++)  {  out.write(c);  }  [CE]  cannot  find  symbol  pt  [FE]                    ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >=  0)  {  for(int  c  =  0;  pt  <  len;  pt++)  {  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >=  0)  {  for(int  c  =  0;  pt  <  len;  pt++)  {  out.write(c);  }	  if(consumed    >=    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    out.write(c);    }    	non-compiled	[CE]  cannot  find  symbol  pt	50	None	replace
289	[BUG]  [BUGGY]  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars();  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                  ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars();  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars();  out.write(c);  }	  if(consumed    >    0)    {    for(int    pt    =    0;    pos    <    len;    pos++)    {    char[]    c    =    input.toChars();    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	80	None	replace
290	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pos  <  len;  p++)  {  char[]  c  =  input.toChars();  out.write(c);  }  [CE]  cannot  find  symbol  p  [FE]                    ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pos  <  len;  p++)  {  char[]  c  =  input.toChars();  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  for(int  pt  =  0;  pos  <  len;  p++)  {  char[]  c  =  input.toChars();  out.write(c);  }	  if(consumed    >    0)    {    for(int    pt    =    0;    pos    <    len;    pos++)    {    char[]    c    =    input.toChars();    out.write(c);    }    	non-compiled	[CE]  cannot  find  symbol  p	80	None	replace
291	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    consumed;    pt++)    {    char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    out.write(c);    }    if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	72	None	add
292	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    consumed;    pt++)    {    char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    out.write(c);    }    if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	72	None	add
293	[BUG]  [BUGGY]  if(consumed  <  =  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  <  =  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  <  =  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }	  char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    out.write(c);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
294	[BUG]  [BUGGY]  if(consumed  >  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {  break;  }  [CE]  'else'  without  'if'  [FE]                      ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {  break;  }  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {  break;  }	  char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    out.write(c);    	non-compiled	[CE]  'else'  without  'if'	9	None	replace
295	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pos  <  len;  pos++)  {  out[pt]  =  input.toChars(pos);  out.write(c);  }  [CE]  array  required,  but  Writer  found  [FE]                        ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pos  <  len;  pos++)  {  out[pt]  =  input.toChars(pos);  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  for(int  pt  =  0;  pos  <  len;  pos++)  {  out[pt]  =  input.toChars(pos);  out.write(c);  }	  if(consumed    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    out[]    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  array  required,  but  Writer  found	40	None	replace
296	[BUG]  [BUGGY]  if(consumed  >=  0)  {  If(consumed  >  0)  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >=  0)  {  If(consumed  >  0)  {  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >=  0)  {  If(consumed  >  0)  {	  if(consumed    >    0)    {    If(consumed    >    0)    {    	non-compiled	[CE]  ';'  expected	45	None	replace
297	[BUG]  [BUGGY]  while(consumed  <  0)  {  out.write('else');  }  else  {  out.write('n');  }  [CE]  unclosed  character  literal  [FE]                    ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  while(consumed  <  0)  {  out.write('else');  }  else  {  out.write('n');  }  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	while(consumed  <  0)  {  out.write('else');  }  else  {  out.write('n');  }	  if(consumed    ==    0)    {    out.write('else');    }    else    {    out.write('n');    }    	non-compiled	[CE]  unclosed  character  literal	58	None	replace
298	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(input,  pos);  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                      ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(input,  pos);  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(input,  pos);  out.write(c);  }	  if(consumed    >    0)    {    for(int    pt    =    0;    pos    <    len;    pos++)    {    char[]    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	70	None	replace
299	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out[pt]  =  input.toChars();  out.write(c);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                    ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out[pt]  =  input.toChars();  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out[pt]  =  input.toChars();  out.write(c);  }	  if(consumed    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    out[]    c    =    input.toChars();    out.write(c);    }    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	48	None	replace
300	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pos  <  len;  pos++)  {  out[pt]  =  input.toChars();  out.write(c);  }  [CE]  array  required,  but  Writer  found  [FE]                      ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pos  <  len;  pos++)  {  out[pt]  =  input.toChars();  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  for(int  pt  =  0;  pos  <  len;  pos++)  {  out[pt]  =  input.toChars();  out.write(c);  }	  if(consumed    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    out[]    c    =    input.toChars();    out.write(c);    }    	non-compiled	[CE]  array  required,  but  Writer  found	48	None	replace
301	[BUG]  [BUGGY]  if(pos  >  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  input.toChars();  out.write(c);  }  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(pos  >  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  input.toChars();  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(pos  >  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  char[]  c  =  input.toChars();  out.write(c);  }	  if(pos    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    input.toChars();    out.write(c);    }    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
302	[BUG]  [BUGGY]  if(pos  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  output.toChars();  out.write(c);  }  [CE]  cannot  find  symbol  output  [FE]                  ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(pos  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  output.toChars();  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(pos  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  output.toChars();  out.write(c);  }	  if(pos    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    input.toChars();    out.write(c);    }    	non-compiled	[CE]  cannot  find  symbol  output	75	None	replace
303	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pos  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pt));  out.write(  [CE]  '.class'  expected  [FE]                  ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >  0)  {  for(int  pos  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pt));  out.write(  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  for(int  pos  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pt));  out.write(	  if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    Character.toChars(Character.codePointAt(pos,    pt));    out.write(    	non-compiled	[CE]  '.class'  expected	30	None	replace
304	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write('n');  for(pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars();  out.write(c);  }  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >  0)  {  out.write('n');  for(pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars();  out.write(c);  }  [BUGGY]      if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  out.write('n');  for(pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars();  out.write(c);  }	  if(consumed    >    0)    {    out.write(c);    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    input.toChars();    out.write(c);    }    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
305	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write('n');  }  else  {  out.write( "n');  }  [CE]  unclosed  string  literal  [FE]                        ComparisonFailure      [CONTEXT]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);      [BUGGY]  if(consumed  >  0)  {  out.write('n');  }  else  {  out.write( "n');  }  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {  out.write('n');  }  else  {  out.write( "n');  }	  if(consumed    ==    0)    {    out.write('n');    }    else    {    out.write('n');    }    	non-compiled	[CE]  unclosed  string  literal	60	None	replace
