bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  timeout  [FE]    ComparisonFailure  [CONTEXT]  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  [BUGGY]  if(consumed  >  0)  {  [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	add	if(consumed  >  0)  {	if  (consumed  ==  0)  {  	compilable	timeout	27	1	replace
2	[BUG]  [BUGGY]  if(consumed  >  0)  {  timeout  [FE]    ComparisonFailure  [CONTEXT]  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  [BUGGY]  if(consumed  >  0)  {  [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  >  0)  {	if  (consumed  ==  0)  {  	compilable	timeout	27	1	replace
3	[BUG]  [BUGGY]  if(consumed  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure  [CONTEXT]  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  [BUGGY]  if(consumed  <  =  0)  {  [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  <  =  0)  {	if  (consumed  ==  0)  {  	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
4	[BUG]  [BUGGY]  timeout  [FE]        ComparisonFailure  [CONTEXT]  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  [BUGGY]  if(consumed  <  0)  {  [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	add	if(consumed  <  0)  {	if  (consumed  ==  0)  {  	compilable	timeout	27	1	replace
5	[BUG]  [BUGGY]  if(consumed  <  0)  {  timeout  [FE]        ComparisonFailure  [CONTEXT]  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  [BUGGY]  if(consumed  <  0)  {  [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	if(consumed  <  0)  {	if  (consumed  ==  0)  {  	compilable	timeout	27	1	replace
6	[BUG]  [BUGGY]    [CE]  'else'  without  'if'  [FE]          ComparisonFailure  [CONTEXT]  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  [BUGGY]    [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	  	if  (consumed  ==  0)  {  	non-compiled	[CE]  'else'  without  'if'	27	None	replace
7	[BUG]  [BUGGY]    if(consumed  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure  [CONTEXT]  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  [BUGGY]    if(consumed  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  [BUGGY]  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	    if(consumed  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }		non-compiled	[CE]  illegal  start  of  expression	28	None	add
8	[BUG]  [BUGGY]    if(consumed  <  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure  [CONTEXT]  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  [BUGGY]    if(consumed  <  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  [BUGGY]  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	    if(consumed  <  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }		non-compiled	[CE]  illegal  start  of  expression	28	None	add
9	[BUG]  [BUGGY]    if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure  [CONTEXT]  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  [BUGGY]    if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c);  }  [BUGGY]  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	    if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  out.write(c);  }		non-compiled	[CE]  illegal  start  of  expression	28	None	add
10	[BUG]  [BUGGY]    if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure  [CONTEXT]  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  [BUGGY]    if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [BUGGY]  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	    if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }		non-compiled	[CE]  illegal  start  of  expression	28	None	add
11	[BUG]  [BUGGY]    if(consumed  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure  [CONTEXT]  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  [BUGGY]    if(consumed  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [BUGGY]  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	    if(consumed  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }		non-compiled	[CE]  illegal  start  of  expression	28	None	add
12	[BUG]  [BUGGY]    if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure  [CONTEXT]  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  [BUGGY]    if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [BUGGY]  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	    if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }		non-compiled	[CE]  illegal  start  of  expression	28	None	add
13	[BUG]  [BUGGY]    if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pt));  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure  [CONTEXT]  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  [BUGGY]    if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pt));  out.write(c);  }  [BUGGY]  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	    if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pt));  out.write(c);  }		non-compiled	[CE]  illegal  start  of  expression	28	None	add
14	[BUG]  [BUGGY]    if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure  [CONTEXT]  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  [BUGGY]    if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }  [BUGGY]  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	    if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }		non-compiled	[CE]  illegal  start  of  expression	28	None	add
15	[BUG]  [BUGGY]    if(consumed  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure  [CONTEXT]  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  [BUGGY]    if(consumed  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }  [BUGGY]  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	    if(consumed  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }		non-compiled	[CE]  illegal  start  of  expression	28	None	add
16	[BUG]  [BUGGY]    if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  input.toChars();  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure  [CONTEXT]  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  [BUGGY]    if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  input.toChars();  out.write(c);  }  [BUGGY]  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	    if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  input.toChars();  out.write(c);  }		non-compiled	[CE]  illegal  start  of  expression	28	None	add
17	[BUG]  [BUGGY]    if(consumed  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars();  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure  [CONTEXT]  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  [BUGGY]    if(consumed  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars();  out.write(c);  }  [BUGGY]  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	    if(consumed  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars();  out.write(c);  }		non-compiled	[CE]  illegal  start  of  expression	28	None	add
