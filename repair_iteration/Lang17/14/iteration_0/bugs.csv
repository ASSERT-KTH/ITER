bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
27	[BUG] [BUGGY] if (consumed == 0) { [FE] ComparisonFailure [CONTEXT] if (out == null) { throw new IllegalArgumentException("The Writer must not be null"); } if (input == null) { return; } int pos = 0; int len = Character.codePointCount(input, 0, input.length()); while (pos < len) { int consumed = translate(input, pos, out); [BUGGY] if (consumed == 0) { [BUGGY] char[] c = Character.toChars(Character.codePointAt(input, pos)); out.write(c); } else {   for (int pt = 0; pt < consumed; pt++) { if (pos < len - 2) { pos += Character.charCount(Character.codePointAt(input, pos)); } else { [CLASS] CharSequenceTranslator [METHOD] translate [RETURN_TYPE] void  CharSequence input Writer out [VARIABLES] boolean CharSequence input Writer out int consumed len pos pt char[] c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	replace	
28	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] if (out == null) { throw new IllegalArgumentException("The Writer must not be null"); } if (input == null) { return; } int pos = 0; int len = Character.codePointCount(input, 0, input.length()); while (pos < len) { int consumed = translate(input, pos, out); [BUGGY] [BUGGY] if (consumed == 0) { char[] c = Character.toChars(Character.codePointAt(input, pos)); out.write(c); } else {   for (int pt = 0; pt < consumed; pt++) { if (pos < len - 2) { pos += Character.charCount(Character.codePointAt(input, pos)); } else { [CLASS] CharSequenceTranslator [METHOD] translate [RETURN_TYPE] void  CharSequence input Writer out [VARIABLES] boolean CharSequence input Writer out int consumed len pos pt char[] c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	86	86	1	add	
