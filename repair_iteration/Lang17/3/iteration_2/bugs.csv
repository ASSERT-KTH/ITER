bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars();  out.write(c);  }  [CE]  'else'  without  'if'  [FE]        ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars();  out.write(c);  }  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars();  out.write(c);  }	      if(consumed    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    input.toChars();    out.write(c);    }    	non-compiled	[CE]  'else'  without  'if'	21	None	replace
2	[BUG]  [BUGGY]  if(consumed  <  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars();  out.write(c);  }  [CE]  'else'  without  'if'  [FE]          ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]  if(consumed  <  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars();  out.write(c);  }  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  <  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars();  out.write(c);  }	      if(consumed    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    input.toChars();    out.write(c);    }    	non-compiled	[CE]  'else'  without  'if'	21	None	replace
3	[BUG]  [BUGGY]  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len  -  2;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  [CE]  'else'  without  'if'  [FE]            ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len  -  2;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  [BUGGY]    else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len  -  2;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }	  if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len    -    2;    pt++)    {    pos    +=    Character.charCount(Character.codePointAt(input,    pos));    }    	non-compiled	[CE]  'else'  without  'if'	20	None	replace
4	[BUG]  [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  [CE]  'else'  without  'if'  [FE]              ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  [BUGGY]    else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	pos  +=  Character.charCount(Character.codePointAt(input,  pos));	  if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len    -    2;    pt++)    {    pos    +=    Character.charCount(Character.codePointAt(input,    pos));    }    	non-compiled	[CE]  'else'  without  'if'	20	None	replace
5	[BUG]  [BUGGY]  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }  [CE]  'else'  without  'if'  [FE]          ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }  [BUGGY]    else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }	  if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    Character.toChars(Character.codePointAt(pos,    pos));    out.write(c);    }    	non-compiled	[CE]  'else'  without  'if'	19	None	replace
6	[BUG]  [BUGGY]  if(pos  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }  [CE]  'else'  without  'if'  [FE]            ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]  if(pos  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }  [BUGGY]    else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(pos  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }	  if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    Character.toChars(Character.codePointAt(pos,    pos));    out.write(c);    }    	non-compiled	[CE]  'else'  without  'if'	19	None	replace
7	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]      if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(c);  }  if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(c);  }  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	add	        if(consumed    >    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	14	13	add
8	[BUG]  [BUGGY]      if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(c);  }  if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(c);  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]      if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(c);  }  if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(c);  }  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	        if(consumed    >    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	14	13	add
9	[BUG]  [BUGGY]      if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(c);  }  If(consumed  >  0)  {  out.write(c);  }  else  {  out.write(c);  }  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]      if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(c);  }  If(consumed  >  0)  {  out.write(c);  }  else  {  out.write(c);  }  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	        if(consumed    >    0)    {    out.write(c);    }    else    {    out.write(c);    }    If(consumed  >  0)  {  out.write(c);  }  else  {  out.write(c);  }	  	non-compiled	[CE]  ';'  expected	14	None	add
10	[BUG]  [BUGGY]      if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(c);  }  if(consumed  >  0)  {  out.write(c);  }  else  {  [CE]  'else'  without  'if'  [FE]        ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]      if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(c);  }  if(consumed  >  0)  {  out.write(c);  }  else  {  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	        if(consumed    >    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed  >  0)  {  out.write(c);  }  else  {	  	non-compiled	[CE]  'else'  without  'if'	14	None	add
11	[BUG]  [BUGGY]      if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(c);  }  if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(C);  }  [CE]  cannot  find  symbol  C  [FE]          ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]      if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(c);  }  if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(C);  }  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	        if(consumed    >    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(C);  }	  	non-compiled	[CE]  cannot  find  symbol  C	14	None	add
12	[BUG]  [BUGGY]  if(consumed  <  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }  [CE]  'else'  without  'if'  [FE]          ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]  if(consumed  <  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  <  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }	      if(consumed    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    Character.toChars(Character.codePointAt(pos,    pos));    out.write(c);    }    	non-compiled	[CE]  'else'  without  'if'	3	None	replace
13	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }  [CE]  'else'  without  'if'  [FE]            ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]  if(consumed  >  0)  {  for(pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  >  0)  {  for(pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }	      if(consumed    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    Character.toChars(Character.codePointAt(pos,    pos));    out.write(c);    }    	non-compiled	[CE]  'else'  without  'if'	3	None	replace
14	[BUG]  [BUGGY]  if(pos  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(c[pos]);  }  [CE]  'else'  without  'if'  [FE]                ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]  if(pos  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(c[pos]);  }  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(pos  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(c[pos]);  }	      if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    pos    +=    Character.charCount(c[pos]);    }    	non-compiled	[CE]  'else'  without  'if'	6	None	replace
15	[BUG]  [BUGGY]  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(c[pos]);  }  [CE]  'else'  without  'if'  [FE]                  ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(c[pos]);  }  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(c[pos]);  }	      if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    pos    +=    Character.charCount(c[pos]);    }    	non-compiled	[CE]  'else'  without  'if'	6	None	replace
16	[BUG]  [BUGGY]  if(consumed  <  =  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(c[pos]);  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]  if(consumed  <  =  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(c[pos]);  }  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  <  =  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(c[pos]);  }	      if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    pos    +=    Character.charCount(c[pos]);    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
17	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]  if(consumed  >  0)  {  out.write(c);  }  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  >  0)  {  out.write(c);  }	      if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
18	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]      if(consumed  >  0)  {  out.write(c);  }  else  {  out.write('n');  }  if(consumed  >  0)  {  out.write(c);  }  else  {  out.write('n');  }  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	add	        if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write(c);  }  else  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	12	13	add
19	[BUG]  [BUGGY]      if(consumed  >  0)  {  out.write(c);  }  else  {  out.write('n');  }  if(consumed  >  0)  {  out.write(c);  }  else  {  out.write('n');  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]      if(consumed  >  0)  {  out.write(c);  }  else  {  out.write('n');  }  if(consumed  >  0)  {  out.write(c);  }  else  {  out.write('n');  }  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	        if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write(c);  }  else  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	12	13	add
20	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]      if(consumed  >  0)  {  out.write(c);  }  else  {  out.write('n');  }  if(consumed  >  0)  {  out.write('n');  }  else  {  out.write('n');  }  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	add	        if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write('n');  }  else  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	12	13	add
21	[BUG]  [BUGGY]      if(consumed  >  0)  {  out.write(c);  }  else  {  out.write('n');  }  if(consumed  >  0)  {  out.write('n');  }  else  {  out.write('n');  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]      if(consumed  >  0)  {  out.write(c);  }  else  {  out.write('n');  }  if(consumed  >  0)  {  out.write('n');  }  else  {  out.write('n');  }  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	        if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write('n');  }  else  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	12	13	add
22	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]      if(consumed  >  0)  {  out.write(c);  }  else  {  out.write('n');  }  if(consumed  >  0)  {  out.write('n');  }  else  {  out.write(c);  }  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	add	        if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write('n');  }  else  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	12	13	add
23	[BUG]  [BUGGY]      if(consumed  >  0)  {  out.write(c);  }  else  {  out.write('n');  }  if(consumed  >  0)  {  out.write('n');  }  else  {  out.write(c);  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]      if(consumed  >  0)  {  out.write(c);  }  else  {  out.write('n');  }  if(consumed  >  0)  {  out.write('n');  }  else  {  out.write(c);  }  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	        if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write('n');  }  else  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	12	13	add
24	[BUG]  [BUGGY]      if(consumed  >  0)  {  out.write(c);  }  else  {  out.write('n');  }  If(consumed  >  0)  {  out.write(c);  }  else  {  out.write('n');  }  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]      if(consumed  >  0)  {  out.write(c);  }  else  {  out.write('n');  }  If(consumed  >  0)  {  out.write(c);  }  else  {  out.write('n');  }  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	        if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    If(consumed  >  0)  {  out.write(c);  }  else  {  out.write('n');  }	  	non-compiled	[CE]  ';'  expected	12	None	add
25	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]      if(consumed  <  0)  {  out.write(c);  }  else  {  out.write('n');  }  if(consumed  <  0)  {  out.write(c);  }  else  {  out.write('n');  }  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	add	        if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write(c);  }  else  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	16	13	add
26	[BUG]  [BUGGY]      if(consumed  <  0)  {  out.write(c);  }  else  {  out.write('n');  }  if(consumed  <  0)  {  out.write(c);  }  else  {  out.write('n');  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]      if(consumed  <  0)  {  out.write(c);  }  else  {  out.write('n');  }  if(consumed  <  0)  {  out.write(c);  }  else  {  out.write('n');  }  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	        if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write(c);  }  else  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	16	13	add
27	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]      if(consumed  <  0)  {  out.write(c);  }  else  {  out.write('n');  }  if(consumed  <  0)  {  out.write('n');  }  else  {  out.write('n');  }  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	add	        if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write('n');  }  else  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	16	13	add
28	[BUG]  [BUGGY]      if(consumed  <  0)  {  out.write(c);  }  else  {  out.write('n');  }  if(consumed  <  0)  {  out.write('n');  }  else  {  out.write('n');  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]      if(consumed  <  0)  {  out.write(c);  }  else  {  out.write('n');  }  if(consumed  <  0)  {  out.write('n');  }  else  {  out.write('n');  }  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	        if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write('n');  }  else  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	16	13	add
29	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]      if(consumed  <  0)  {  out.write(c);  }  else  {  out.write('n');  }  if(consumed  <  0)  {  out.write('n');  }  else  {  out.write(c);  }  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	add	        if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write('n');  }  else  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	16	13	add
30	[BUG]  [BUGGY]      if(consumed  <  0)  {  out.write(c);  }  else  {  out.write('n');  }  if(consumed  <  0)  {  out.write('n');  }  else  {  out.write(c);  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]      if(consumed  <  0)  {  out.write(c);  }  else  {  out.write('n');  }  if(consumed  <  0)  {  out.write('n');  }  else  {  out.write(c);  }  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	        if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write('n');  }  else  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	16	13	add
31	[BUG]  [BUGGY]      if(consumed  <  0)  {  out.write(c);  }  else  {  out.write('n');  }  If(consumed  <  0)  {  out.write(c);  }  else  {  out.write('n');  }  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]      if(consumed  <  0)  {  out.write(c);  }  else  {  out.write('n');  }  If(consumed  <  0)  {  out.write(c);  }  else  {  out.write('n');  }  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	        if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    If(consumed  <  0)  {  out.write(c);  }  else  {  out.write('n');  }	  	non-compiled	[CE]  ';'  expected	16	None	add
32	[BUG]  [BUGGY]  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pt,  pos));  }  [CE]  'else'  without  'if'  [FE]          ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pt,  pos));  }  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pt,  pos));  }	      if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    pos    +=    Character.charCount(Character.codePointAt(pt,    pos));    }    	non-compiled	[CE]  'else'  without  'if'	22	None	replace
33	[BUG]  [BUGGY]  if(pos  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pt,  pos));  }  [CE]  'else'  without  'if'  [FE]            ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]  if(pos  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pt,  pos));  }  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(pos  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pt,  pos));  }	      if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    pos    +=    Character.charCount(Character.codePointAt(pt,    pos));    }    	non-compiled	[CE]  'else'  without  'if'	22	None	replace
34	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pt,  pos));  }  [CE]  'else'  without  'if'  [FE]              ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pt,  pos));  }  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pt,  pos));  }	      if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    pos    +=    Character.charCount(Character.codePointAt(pt,    pos));    }    	non-compiled	[CE]  'else'  without  'if'	22	None	replace
35	[BUG]  [BUGGY]  if(consumed  <  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  [CE]  'else'  without  'if'  [FE]              ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]  if(consumed  <  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  <  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }	      if(consumed    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    out.write(c);    }    	non-compiled	[CE]  'else'  without  'if'	5	None	replace
36	[BUG]  [BUGGY]  while(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  [CE]  'else'  without  'if'  [FE]                ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]  while(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	while(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }	      if(consumed    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    out.write(c);    }    	non-compiled	[CE]  'else'  without  'if'	5	None	replace
37	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  c  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  [CE]  'else'  without  'if'  [FE]                  ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]  if(consumed  >  0)  {  for(int  c  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  >  0)  {  for(int  c  =  0;  pos  <  len;  pos++)  {  out.write(c);  }	      if(consumed    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    out.write(c);    }    	non-compiled	[CE]  'else'  without  'if'	5	None	replace
38	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]      if(consumed  <  0)  {  out.write(c);  }  else  {  out.write(c);  }  if(consumed  <  0)  {  out.write(c);  }  else  {  out.write(c);  }  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	add	        if(consumed    <    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed  <  0)  {  out.write(c);  }  else  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	10	13	add
39	[BUG]  [BUGGY]      if(consumed  <  0)  {  out.write(c);  }  else  {  out.write(c);  }  if(consumed  <  0)  {  out.write(c);  }  else  {  out.write(c);  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]      if(consumed  <  0)  {  out.write(c);  }  else  {  out.write(c);  }  if(consumed  <  0)  {  out.write(c);  }  else  {  out.write(c);  }  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	        if(consumed    <    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed  <  0)  {  out.write(c);  }  else  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	10	13	add
40	[BUG]  [BUGGY]      if(consumed  <  0)  {  out.write(c);  }  else  {  out.write(c);  }  if(consumed  <  =  0)  {  out.write(c);  }  else  {  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]      if(consumed  <  0)  {  out.write(c);  }  else  {  out.write(c);  }  if(consumed  <  =  0)  {  out.write(c);  }  else  {  out.write(c);  }  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	        if(consumed    <    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed  <  =  0)  {  out.write(c);  }  else  {  out.write(c);  }	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
41	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]      if(consumed  <  0)  {  out.write(c);  }  else  {  out.write(c);  }  if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(c);  }  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	add	        if(consumed    <    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	10	13	add
42	[BUG]  [BUGGY]      if(consumed  <  0)  {  out.write(c);  }  else  {  out.write(c);  }  if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(c);  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]      if(consumed  <  0)  {  out.write(c);  }  else  {  out.write(c);  }  if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(c);  }  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	        if(consumed    <    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	10	13	add
43	[BUG]  [BUGGY]      if(consumed  <  0)  {  out.write(c);  }  else  {  out.write(c);  }  while(consumed  <  0)  {  out.write(c);  }  else  {  out.write(c);  }  [CE]  'else'  without  'if'  [FE]          ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]      if(consumed  <  0)  {  out.write(c);  }  else  {  out.write(c);  }  while(consumed  <  0)  {  out.write(c);  }  else  {  out.write(c);  }  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	        if(consumed    <    0)    {    out.write(c);    }    else    {    out.write(c);    }    while(consumed  <  0)  {  out.write(c);  }  else  {  out.write(c);  }	  	non-compiled	[CE]  'else'  without  'if'	10	None	add
44	[BUG]  [BUGGY]  if(consumed  <  0)  {  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]  if(consumed  <  0)  {  out.write(c);  }  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  <  0)  {  out.write(c);  }	      if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
45	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]      out.write(c);  out.write(c);  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	add	        out.write(c);    out.write(c);	  	compilable	  [FE]  ComparisonFailure  	1	13	add
46	[BUG]  [BUGGY]      out.write(c);  out.write(c);  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]      out.write(c);  out.write(c);  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	        out.write(c);    out.write(c);	  	compilable	  [FE]  ComparisonFailure  	1	13	add
47	[BUG]  [BUGGY]      out.write(c);  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]      ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]      out.write(c);  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	        out.write(c);    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	1	None	add
48	[BUG]  [BUGGY]      out.write(c);  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]        ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]      out.write(c);  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	        out.write(c);    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	1	None	add
49	[BUG]  [BUGGY]      out.write(c);  char[]  c  =  Character.toChars(Character.toChars(input,  pos));  out.write(c);  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]          ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]      out.write(c);  char[]  c  =  Character.toChars(Character.toChars(input,  pos));  out.write(c);  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	        out.write(c);    char[]  c  =  Character.toChars(Character.toChars(input,  pos));  out.write(c);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	1	None	add
50	[BUG]  [BUGGY]      out.write(c);  char[]  c  =  Character.toChars(Character.toChars(input,  pos));  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]            ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]      out.write(c);  char[]  c  =  Character.toChars(Character.toChars(input,  pos));  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	        out.write(c);    char[]  c  =  Character.toChars(Character.toChars(input,  pos));	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	1	None	add
51	[BUG]  [BUGGY]  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(c);  }  [CE]  'else'  without  'if'  [FE]        ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(c);  }  [BUGGY]    else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(c);  }	  if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    pos    +=    Character.charCount(c);    }    	non-compiled	[CE]  'else'  without  'if'	7	None	replace
52	[BUG]  [BUGGY]  if(c!=  null)  {  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(c);  }  [CE]  'else'  without  'if'  [FE]          ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]  if(c!=  null)  {  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(c);  }  [BUGGY]    else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(c!=  null)  {  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(c);  }	  if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    pos    +=    Character.charCount(c);    }    	non-compiled	[CE]  'else'  without  'if'	7	None	replace
53	[BUG]  [BUGGY]  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CE]  'else'  without  'if'  [FE]        ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [BUGGY]    else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }	  if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    out.write(c);    }    	non-compiled	[CE]  'else'  without  'if'	18	None	replace
54	[BUG]  [BUGGY]  if(pos  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CE]  'else'  without  'if'  [FE]          ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]  if(pos  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [BUGGY]    else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(pos  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }	  if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    out.write(c);    }    	non-compiled	[CE]  'else'  without  'if'	18	None	replace
55	[BUG]  [BUGGY]  if(consumed  <  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [CE]  'else'  without  'if'  [FE]        ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]  if(consumed  <  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [BUGGY]    else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  <  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }	  if(consumed    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  'else'  without  'if'	8	None	replace
56	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [CE]  'else'  without  'if'  [FE]          ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]  if(consumed  >  0)  {  for(pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [BUGGY]    else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  >  0)  {  for(pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }	  if(consumed    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  'else'  without  'if'	8	None	replace
57	[BUG]  [BUGGY]  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pos,  pos));  }  [CE]  'else'  without  'if'  [FE]            ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pos,  pos));  }  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pos,  pos));  }	      if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    pos    +=    Character.charCount(Character.codePointAt(pos,    pos));    }    	non-compiled	[CE]  'else'  without  'if'	4	None	replace
58	[BUG]  [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(pos,  pos));  [CE]  'else'  without  'if'  [FE]              ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(pos,  pos));  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	pos  +=  Character.charCount(Character.codePointAt(pos,  pos));	      if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    pos    +=    Character.charCount(Character.codePointAt(pos,    pos));    }    	non-compiled	[CE]  'else'  without  'if'	4	None	replace
59	[BUG]  [BUGGY]  out.write(c,  consumed);  [CE]  'else'  without  'if'  [FE]    ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]  out.write(c,  consumed);  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	out.write(c,  consumed);	      out.write(c);    	non-compiled	[CE]  'else'  without  'if'	2	None	replace
60	[BUG]  [BUGGY]  out.write(c,  pos);  [CE]  'else'  without  'if'  [FE]      ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]  out.write(c,  pos);  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	out.write(c,  pos);	      out.write(c);    	non-compiled	[CE]  'else'  without  'if'	2	None	replace
61	[BUG]  [BUGGY]  out.write(c,  0,  len);  [CE]  'else'  without  'if'  [FE]        ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]  out.write(c,  0,  len);  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	out.write(c,  0,  len);	      out.write(c);    	non-compiled	[CE]  'else'  without  'if'	2	None	replace
62	[BUG]  [BUGGY]  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(pt);  }  [CE]  'else'  without  'if'  [FE]          ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(pt);  }  [BUGGY]    else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(pt);  }	  if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    pos    +=    Character.charCount(pt);    }    	non-compiled	[CE]  'else'  without  'if'	9	None	replace
63	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  pos  +=  Character.charCount(pt);  }  [CE]  'else'  without  'if'  [FE]            ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  pos  +=  Character.charCount(pt);  }  [BUGGY]    else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  pos  +=  Character.charCount(pt);  }	  if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    pos    +=    Character.charCount(pt);    }    	non-compiled	[CE]  'else'  without  'if'	9	None	replace
64	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pos,  p));  }  [CE]  'else'  without  'if'  [FE]            ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pos,  p));  }  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pos,  p));  }	      if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    pos    +=    Character.charCount(Character.codePointAt(pos,    pos));    }    	non-compiled	[CE]  'else'  without  'if'	4	None	replace
65	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  c.length;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pos,  pos));  }  [CE]  'else'  without  'if'  [FE]              ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  c.length;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pos,  pos));  }  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  c.length;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pos,  pos));  }	      if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    pos    +=    Character.charCount(Character.codePointAt(pos,    pos));    }    	non-compiled	[CE]  'else'  without  'if'	4	None	replace
66	[BUG]  [BUGGY]      out.write(c);  if(consumed  >  0)  {  out.write(c);  }  else  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  pos  +=  Character.charCount(Character.codePointAt(pos,  pos));  }  [CE]  'else'  without  'if'  [FE]    ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]      out.write(c);  if(consumed  >  0)  {  out.write(c);  }  else  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  pos  +=  Character.charCount(Character.codePointAt(pos,  pos));  }  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	        out.write(c);    if(consumed  >  0)  {  out.write(c);  }  else  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  pos  +=  Character.charCount(Character.codePointAt(pos,  pos));  }	  	non-compiled	[CE]  'else'  without  'if'	1	None	add
67	[BUG]  [BUGGY]      out.write(c);  if(consumed  >  0)  {  out.write(c);  }  else  {  for(int  pt  =  0;  pt  <  len  -  2;  pt++)  {  pos  +=  Character.charCount(Character.charCount(input,  pos));  }  [CE]  'else'  without  'if'  [FE]      ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]      out.write(c);  if(consumed  >  0)  {  out.write(c);  }  else  {  for(int  pt  =  0;  pt  <  len  -  2;  pt++)  {  pos  +=  Character.charCount(Character.charCount(input,  pos));  }  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	        out.write(c);    if(consumed  >  0)  {  out.write(c);  }  else  {  for(int  pt  =  0;  pt  <  len  -  2;  pt++)  {  pos  +=  Character.charCount(Character.charCount(input,  pos));  }	  	non-compiled	[CE]  'else'  without  'if'	1	None	add
68	[BUG]  [BUGGY]      out.write(c);  if(consumed  >  0)  {  out.write(c);  }  else  {  for(int  pt  =  0;  pt  <  len  -  2;  pt++)  {  pos  +=  Character.charCount(pt);  }  [CE]  'else'  without  'if'  [FE]        ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]      out.write(c);  if(consumed  >  0)  {  out.write(c);  }  else  {  for(int  pt  =  0;  pt  <  len  -  2;  pt++)  {  pos  +=  Character.charCount(pt);  }  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	        out.write(c);    if(consumed  >  0)  {  out.write(c);  }  else  {  for(int  pt  =  0;  pt  <  len  -  2;  pt++)  {  pos  +=  Character.charCount(pt);  }	  	non-compiled	[CE]  'else'  without  'if'	1	None	add
69	[BUG]  [BUGGY]      out.write(c);  if(consumed  >  0)  {  out.write(c);  }  else  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pt,  pos));  }  [CE]  'else'  without  'if'  [FE]          ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]      out.write(c);  if(consumed  >  0)  {  out.write(c);  }  else  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pt,  pos));  }  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	        out.write(c);    if(consumed  >  0)  {  out.write(c);  }  else  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pt,  pos));  }	  	non-compiled	[CE]  'else'  without  'if'	1	None	add
70	[BUG]  [BUGGY]  if(consumed  <  0  ||  c.charAt(consumed  -  1)!=  'n')  {  out.write(c);  }  else  {  out.write('n');  }  [CE]  'else'  without  'if'  [FE]    ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]  if(consumed  <  0  ||  c.charAt(consumed  -  1)!=  'n')  {  out.write(c);  }  else  {  out.write('n');  }  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  <  0  ||  c.charAt(consumed  -  1)!=  'n')  {  out.write(c);  }  else  {  out.write('n');  }	      if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    	non-compiled	[CE]  'else'  without  'if'	17	None	replace
71	[BUG]  [BUGGY]  out.write(c  +  1);  [CE]  'else'  without  'if'  [FE]    ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]  out.write(c  +  1);  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	out.write(c  +  1);	      out.write(c);    	non-compiled	[CE]  'else'  without  'if'	2	None	replace
72	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]      if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(c);  }  if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(len);  }  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	add	        if(consumed    >    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(len);  }	  	compilable	  [FE]  ComparisonFailure  	14	13	add
73	[BUG]  [BUGGY]      if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(c);  }  if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(len);  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]      if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(c);  }  if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(len);  }  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	        if(consumed    >    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(len);  }	  	compilable	  [FE]  ComparisonFailure  	14	13	add
74	[BUG]  [BUGGY]      if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(c);  }  if(consumed  >  0)  {  out.write(c;  }  else  {  out.write(c);  }  [CE]  ')'  expected  [FE]      ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]      if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(c);  }  if(consumed  >  0)  {  out.write(c;  }  else  {  out.write(c);  }  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	        if(consumed    >    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed  >  0)  {  out.write(c;  }  else  {  out.write(c);  }	  	non-compiled	[CE]  ')'  expected	14	None	add
75	[BUG]  [BUGGY]      if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(c);  }  if(consumed  >  0)  {  out.write(C);  }  else  {  out.write(c);  }  [CE]  cannot  find  symbol  C  [FE]        ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]      if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(c);  }  if(consumed  >  0)  {  out.write(C);  }  else  {  out.write(c);  }  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	        if(consumed    >    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed  >  0)  {  out.write(C);  }  else  {  out.write(c);  }	  	non-compiled	[CE]  cannot  find  symbol  C	14	None	add
76	[BUG]  [BUGGY]  if(consume  >  0)  {  for(int  pt  =  0;  pt  <  len  -  2;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  [CE]  'else'  without  'if'  [FE]            ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]  if(consume  >  0)  {  for(int  pt  =  0;  pt  <  len  -  2;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  [BUGGY]    else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consume  >  0)  {  for(int  pt  =  0;  pt  <  len  -  2;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }	  if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len    -    2;    pt++)    {    pos    +=    Character.charCount(Character.codePointAt(input,    pos));    }    	non-compiled	[CE]  'else'  without  'if'	20	None	replace
77	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write(c);  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(c);  }  [CE]  'else'  without  'if'  [FE]        ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]  if(consumed  >  0)  {  out.write(c);  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(c);  }  [BUGGY]    else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  >  0)  {  out.write(c);  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(c);  }	  if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    pos    +=    Character.charCount(c);    }    	non-compiled	[CE]  'else'  without  'if'	7	None	replace
78	[BUG]  [BUGGY]  pos  +=  Character.charCount(c[pos]);  [CE]  'else'  without  'if'  [FE]                ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]  pos  +=  Character.charCount(c[pos]);  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	pos  +=  Character.charCount(c[pos]);	      if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    pos    +=    Character.charCount(c[pos]);    }    	non-compiled	[CE]  'else'  without  'if'	6	None	replace
79	[BUG]  [BUGGY]  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(c[pos]);  }  [CE]  'else'  without  'if'  [FE]                  ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(c[pos]);  }  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(c[pos]);  }	      if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    pos    +=    Character.charCount(c[pos]);    }    	non-compiled	[CE]  'else'  without  'if'	6	None	replace
80	[BUG]  [BUGGY]  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }  [CE]  'else'  without  'if'  [FE]          ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }  [BUGGY]    else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }	  if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    Character.toChars(Character.codePointAt(pos,    pos));    out.write(c);    }    	non-compiled	[CE]  'else'  without  'if'	19	None	replace
81	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  out.length();  pt++)  {  pos  +=  Character.charCount(pt);  }  [CE]  'else'  without  'if'  [FE]          ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  out.length();  pt++)  {  pos  +=  Character.charCount(pt);  }  [BUGGY]    else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  out.length();  pt++)  {  pos  +=  Character.charCount(pt);  }	  if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    pos    +=    Character.charCount(pt);    }    	non-compiled	[CE]  'else'  without  'if'	9	None	replace
82	[BUG]  [BUGGY]  if(consume  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [CE]  'else'  without  'if'  [FE]        ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]  if(consume  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [BUGGY]    else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consume  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }	  if(consumed    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  'else'  without  'if'	8	None	replace
83	[BUG]  [BUGGY]  pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  [CE]  not  a  statement  [FE]              ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]  pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }	      if(consumed    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    out.write(c);    }    	non-compiled	[CE]  not  a  statement	5	None	replace
84	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pos  =  0;  pos  <  consumed;  pos++)  {  out.write(c);  }  [CE]  'else'  without  'if'  [FE]                ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]  if(consumed  >  0)  {  for(int  pos  =  0;  pos  <  consumed;  pos++)  {  out.write(c);  }  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  >  0)  {  for(int  pos  =  0;  pos  <  consumed;  pos++)  {  out.write(c);  }	      if(consumed    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    out.write(c);    }    	non-compiled	[CE]  'else'  without  'if'	5	None	replace
85	[BUG]  [BUGGY]  if(consume  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CE]  'else'  without  'if'  [FE]        ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]  if(consume  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [BUGGY]    else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consume  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }	  if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    out.write(c);    }    	non-compiled	[CE]  'else'  without  'if'	18	None	replace
86	[BUG]  [BUGGY]  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CE]  'else'  without  'if'  [FE]          ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [BUGGY]    else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }	  if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    out.write(c);    }    	non-compiled	[CE]  'else'  without  'if'	18	None	replace
87	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  c.length;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pt,  pos));  }  [CE]  'else'  without  'if'  [FE]          ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  c.length;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pt,  pos));  }  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  c.length;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pt,  pos));  }	      if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    pos    +=    Character.charCount(Character.codePointAt(pt,    pos));    }    	non-compiled	[CE]  'else'  without  'if'	22	None	replace
88	[BUG]  [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(pt,  out));  [CE]  'else'  without  'if'  [FE]            ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(pt,  out));  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	pos  +=  Character.charCount(Character.codePointAt(pt,  out));	      if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    pos    +=    Character.charCount(Character.codePointAt(pt,    pos));    }    	non-compiled	[CE]  'else'  without  'if'	22	None	replace
89	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]      if(consumed  >  0)  {  out.write(c);  }  else  {  out.write('n');  }  if(consumed  >  0)  {  out.write('n');  }  else  {  out.write('t');  }  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	add	        if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write('n');  }  else  {  out.write('t');  }	  	compilable	  [FE]  ComparisonFailure  	12	13	add
90	[BUG]  [BUGGY]      if(consumed  >  0)  {  out.write(c);  }  else  {  out.write('n');  }  if(consumed  >  0)  {  out.write('n');  }  else  {  out.write('t');  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]      if(consumed  >  0)  {  out.write(c);  }  else  {  out.write('n');  }  if(consumed  >  0)  {  out.write('n');  }  else  {  out.write('t');  }  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	        if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write('n');  }  else  {  out.write('t');  }	  	compilable	  [FE]  ComparisonFailure  	12	13	add
91	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]      if(consumed  >  0)  {  out.write(c);  }  else  {  out.write('n');  }  if(consumed  >  0)  {  out.write('n');  }  else  {  out.write('m');  }  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	add	        if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write('n');  }  else  {  out.write('m');  }	  	compilable	  [FE]  ComparisonFailure  	12	13	add
92	[BUG]  [BUGGY]      if(consumed  >  0)  {  out.write(c);  }  else  {  out.write('n');  }  if(consumed  >  0)  {  out.write('n');  }  else  {  out.write('m');  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]      if(consumed  >  0)  {  out.write(c);  }  else  {  out.write('n');  }  if(consumed  >  0)  {  out.write('n');  }  else  {  out.write('m');  }  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	        if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write('n');  }  else  {  out.write('m');  }	  	compilable	  [FE]  ComparisonFailure  	12	13	add
93	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]      if(consumed  <  0)  {  out.write(c);  }  else  {  out.write('n');  }  if(consumed  <  0)  {  out.write('n');  }  else  {  out.write('t');  }  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	add	        if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write('n');  }  else  {  out.write('t');  }	  	compilable	  [FE]  ComparisonFailure  	16	13	add
94	[BUG]  [BUGGY]      if(consumed  <  0)  {  out.write(c);  }  else  {  out.write('n');  }  if(consumed  <  0)  {  out.write('n');  }  else  {  out.write('t');  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]      if(consumed  <  0)  {  out.write(c);  }  else  {  out.write('n');  }  if(consumed  <  0)  {  out.write('n');  }  else  {  out.write('t');  }  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	        if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write('n');  }  else  {  out.write('t');  }	  	compilable	  [FE]  ComparisonFailure  	16	13	add
95	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]      if(consumed  <  0)  {  out.write(c);  }  else  {  out.write('n');  }  if(consumed  <  0)  {  out.write('n');  }  else  {  out.write('m');  }  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	add	        if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write('n');  }  else  {  out.write('m');  }	  	compilable	  [FE]  ComparisonFailure  	16	13	add
96	[BUG]  [BUGGY]      if(consumed  <  0)  {  out.write(c);  }  else  {  out.write('n');  }  if(consumed  <  0)  {  out.write('n');  }  else  {  out.write('m');  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]      if(consumed  <  0)  {  out.write(c);  }  else  {  out.write('n');  }  if(consumed  <  0)  {  out.write('n');  }  else  {  out.write('m');  }  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	        if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write('n');  }  else  {  out.write('m');  }	  	compilable	  [FE]  ComparisonFailure  	16	13	add
97	[BUG]  [BUGGY]      if(consumed  <  0)  {  out.write(c);  }  else  {  out.write(c);  }  if(consumed  <  0)  {  out.write(c;  }  else  {  out.write(c);  }  [CE]  ')'  expected  [FE]    ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]      if(consumed  <  0)  {  out.write(c);  }  else  {  out.write(c);  }  if(consumed  <  0)  {  out.write(c;  }  else  {  out.write(c);  }  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	        if(consumed    <    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed  <  0)  {  out.write(c;  }  else  {  out.write(c);  }	  	non-compiled	[CE]  ')'  expected	10	None	add
98	[BUG]  [BUGGY]      if(consumed  <  0)  {  out.write(c);  }  else  {  out.write(c);  }  if(consumed  <  0)  {  out.write(c,  out);  }  else  {  out.write(c);  }  [CE]  no  suitable  method  found  for  write(char[],Writer)  [FE]      ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]      if(consumed  <  0)  {  out.write(c);  }  else  {  out.write(c);  }  if(consumed  <  0)  {  out.write(c,  out);  }  else  {  out.write(c);  }  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	        if(consumed    <    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed  <  0)  {  out.write(c,  out);  }  else  {  out.write(c);  }	  	non-compiled	[CE]  no  suitable  method  found  for  write(char[],Writer)	10	None	add
99	[BUG]  [BUGGY]  if(consumed  <  =  0)  {  out.write(c);  }  else  {  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]  if(consumed  <  =  0)  {  out.write(c);  }  else  {  out.write(c);  }  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  <  =  0)  {  out.write(c);  }  else  {  out.write(c);  }	      if(consumed    <    0)    {    out.write(c);    }    else    {    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
100	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write(c);  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars();  out.write(c);  }  [CE]  'else'  without  'if'  [FE]        ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]  if(consumed  >  0)  {  out.write(c);  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars();  out.write(c);  }  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  >  0)  {  out.write(c);  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars();  out.write(c);  }	      if(consumed    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    input.toChars();    out.write(c);    }    	non-compiled	[CE]  'else'  without  'if'	21	None	replace
101	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars();  out.write(c);  }  [CE]  'else'  without  'if'  [FE]          ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]  if(consumed  >  0)  {  for(pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars();  out.write(c);  }  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  >  0)  {  for(pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars();  out.write(c);  }	      if(consumed    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    input.toChars();    out.write(c);    }    	non-compiled	[CE]  'else'  without  'if'	21	None	replace
102	[BUG]  [BUGGY]  if(consumed  <  =  0)  {  out.write(c);  }  else  {  out.write('n');  }  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]  if(consumed  <  =  0)  {  out.write(c);  }  else  {  out.write('n');  }  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  <  =  0)  {  out.write(c);  }  else  {  out.write('n');  }	      if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
103	[BUG]  [BUGGY]  if(consumed  <  =  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]  if(consumed  <  =  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [BUGGY]    else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  <  =  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }	  if(consumed    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
104	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write(c,  0,  consumed);  }  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]  if(consumed  >  0)  {  out.write(c,  0,  consumed);  }  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  >  0)  {  out.write(c,  0,  consumed);  }	      if(consumed    >    0)    {    out.write(c);    }    else    {    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
105	[BUG]  [BUGGY]  if(consumed  <  =  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]  if(consumed  <  =  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [BUGGY]    else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  <  =  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }	  if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
106	[BUG]  [BUGGY]      if(consumed  <  0)  {  out.write(c);  }  else  {  out.write('n');  }  if(consumed  <  =  0)  {  out.write(c);  }  else  {  out.write('n');  }  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]      if(consumed  <  0)  {  out.write(c);  }  else  {  out.write('n');  }  if(consumed  <  =  0)  {  out.write(c);  }  else  {  out.write('n');  }  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	        if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  <  =  0)  {  out.write(c);  }  else  {  out.write('n');  }	  	non-compiled	[CE]  illegal  start  of  expression	16	None	add
107	[BUG]  [BUGGY]      if(consumed  <  0)  {  out.write(c);  }  else  {  out.write('n');  }  while(consumed  <  0)  {  out.write(c);  }  else  {  out.write('n');  }  [CE]  'else'  without  'if'  [FE]      ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]      if(consumed  <  0)  {  out.write(c);  }  else  {  out.write('n');  }  while(consumed  <  0)  {  out.write(c);  }  else  {  out.write('n');  }  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	        if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    while(consumed  <  0)  {  out.write(c);  }  else  {  out.write('n');  }	  	non-compiled	[CE]  'else'  without  'if'	16	None	add
108	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  pos  +=  Character.charCount(c);  }  [CE]  'else'  without  'if'  [FE]        ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  pos  +=  Character.charCount(c);  }  [BUGGY]    else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  pos  +=  Character.charCount(c);  }	  if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    pos    +=    Character.charCount(c);    }    	non-compiled	[CE]  'else'  without  'if'	7	None	replace
109	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write(c);  }  else  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]  if(consumed  >  0)  {  out.write(c);  }  else  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  >  0)  {  out.write(c);  }  else  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(	      out.write(c);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
110	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write(c);  }  else  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.charCount(input,  pos));  out.write(  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]  if(consumed  >  0)  {  out.write(c);  }  else  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.charCount(input,  pos));  out.write(  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  >  0)  {  out.write(c);  }  else  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.charCount(input,  pos));  out.write(	      out.write(c);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
111	[BUG]  [BUGGY]      if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(c);  }  while(consumed  >  0)  {  out.write(c);  }  else  {  out.write(c);  }  [CE]  'else'  without  'if'  [FE]    ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]      if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(c);  }  while(consumed  >  0)  {  out.write(c);  }  else  {  out.write(c);  }  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	        if(consumed    >    0)    {    out.write(c);    }    else    {    out.write(c);    }    while(consumed  >  0)  {  out.write(c);  }  else  {  out.write(c);  }	  	non-compiled	[CE]  'else'  without  'if'	14	None	add
112	[BUG]  [BUGGY]      if(consumed  <  0)  {  out.write(c);  }  else  {  out.write(c);  }  if(consumed  <  0)  {  out.write(C);  }  else  {  out.write(c);  }  [CE]  cannot  find  symbol  C  [FE]    ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]      if(consumed  <  0)  {  out.write(c);  }  else  {  out.write(c);  }  if(consumed  <  0)  {  out.write(C);  }  else  {  out.write(c);  }  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	        if(consumed    <    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed  <  0)  {  out.write(C);  }  else  {  out.write(c);  }	  	non-compiled	[CE]  cannot  find  symbol  C	10	None	add
113	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write(c,  0,  len);  }  else  {  out.write('n');  }  [CE]  'else'  without  'if'  [FE]    ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]  if(consumed  >  0)  {  out.write(c,  0,  len);  }  else  {  out.write('n');  }  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  >  0)  {  out.write(c,  0,  len);  }  else  {  out.write('n');  }	      if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    	non-compiled	[CE]  'else'  without  'if'	13	None	replace
114	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars();  out.write(c);  }  [CE]  'else'  without  'if'  [FE]        ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars();  out.write(c);  }  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  >  0)  {  for(int  pt  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars();  out.write(c);  }	      if(consumed    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    input.toChars();    out.write(c);    }    	non-compiled	[CE]  'else'  without  'if'	21	None	replace
115	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }  [CE]  'else'  without  'if'  [FE]          ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  >  0)  {  for(int  pt  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }	      if(consumed    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    Character.toChars(Character.codePointAt(pos,    pos));    out.write(c);    }    	non-compiled	[CE]  'else'  without  'if'	3	None	replace
116	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pos  =  0;  pos  <  c.length;  pos++)  {  out.write(c);  }  [CE]  'else'  without  'if'  [FE]              ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]  if(consumed  >  0)  {  for(int  pos  =  0;  pos  <  c.length;  pos++)  {  out.write(c);  }  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  >  0)  {  for(int  pos  =  0;  pos  <  c.length;  pos++)  {  out.write(c);  }	      if(consumed    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    out.write(c);    }    	non-compiled	[CE]  'else'  without  'if'	5	None	replace
117	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  c.length;  pt++)  {  pos  +=  Character.charCount(c[pos]);  }  [CE]  'else'  without  'if'  [FE]                ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  c.length;  pt++)  {  pos  +=  Character.charCount(c[pos]);  }  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  c.length;  pt++)  {  pos  +=  Character.charCount(c[pos]);  }	      if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    pos    +=    Character.charCount(c[pos]);    }    	non-compiled	[CE]  'else'  without  'if'	6	None	replace
118	[BUG]  [BUGGY]      if(consumed  >  0)  {  out.write(c);  }  else  {  out.write('n');  }  while(consumed  >  0)  {  out.write(c);  }  else  {  out.write('n');  }  [CE]  'else'  without  'if'  [FE]    ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]      if(consumed  >  0)  {  out.write(c);  }  else  {  out.write('n');  }  while(consumed  >  0)  {  out.write(c);  }  else  {  out.write('n');  }  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	        if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    while(consumed  >  0)  {  out.write(c);  }  else  {  out.write('n');  }	  	non-compiled	[CE]  'else'  without  'if'	12	None	add
119	[BUG]  [BUGGY]  if(consumed  <  =  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]  if(consumed  <  =  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }  [BUGGY]    else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  <  =  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }	  if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    Character.toChars(Character.codePointAt(pos,    pos));    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
120	[BUG]  [BUGGY]      out.write(c);  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]      out.write(c);  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	        out.write(c);    if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
121	[BUG]  [BUGGY]      out.write(c);  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  input.toChars();  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]      out.write(c);  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  input.toChars();  out.write(c);  }  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	        out.write(c);    if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  input.toChars();  out.write(c);  }	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
122	[BUG]  [BUGGY]      out.write(c);  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.charCount(input,  pos));  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);    [BUGGY]      out.write(c);  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.charCount(input,  pos));  out.write(c);  }  [BUGGY]    }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	        out.write(c);    if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.charCount(input,  pos));  out.write(c);  }	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
