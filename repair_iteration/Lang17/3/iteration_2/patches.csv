bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(consumed  <  =  0)  {  if(consumed  >  0)  {  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  <  =  0)  {  if(consumed  >  0)  {  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  <  =  0)  {  if(consumed  >  0)  {  out.write(c);  }	          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    while(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
2	[BUG]  [BUGGY]  if(consumed  <  0)  {  if(consumed  >  0)  {  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  <  0)  {  if(consumed  >  0)  {  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  <  0)  {  if(consumed  >  0)  {  out.write(c);  }	          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    while(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
3	[BUG]  [BUGGY]  while(consumed  >  0)  {  out.write(c);  [CE]  'else'  without  'if'  [FE]            ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  while(consumed  >  0)  {  out.write(c);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	while(consumed  >  0)  {  out.write(c);	          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    while(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    	non-compiled	[CE]  'else'  without  'if'	118	None	replace
4	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write('n');  }  else  {  out.write('t');  }  if(consumed  <  0)  {  out.write(c);  }  else  {  out.write('t');  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	add	                if(consumed        <        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    <    0)    {    out.write('n');    }    else    {    out.write('t');    }    if(consumed  <  0)  {  out.write(c);  }  else  {  out.write('t');  }	  	compilable	  [FE]  ComparisonFailure  	93	13	add
5	[BUG]  [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write('n');  }  else  {  out.write('t');  }  if(consumed  <  0)  {  out.write(c);  }  else  {  out.write('t');  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write('n');  }  else  {  out.write('t');  }  if(consumed  <  0)  {  out.write(c);  }  else  {  out.write('t');  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	                if(consumed        <        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    <    0)    {    out.write('n');    }    else    {    out.write('t');    }    if(consumed  <  0)  {  out.write(c);  }  else  {  out.write('t');  }	  	compilable	  [FE]  ComparisonFailure  	93	13	add
6	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write('n');  }  else  {  out.write('t');  }  if(consumed  <  0)  {  out.write('t');  }  else  {  out.write('t');  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	add	                if(consumed        <        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    <    0)    {    out.write('n');    }    else    {    out.write('t');    }    if(consumed  <  0)  {  out.write('t');  }  else  {  out.write('t');  }	  	compilable	  [FE]  ComparisonFailure  	93	13	add
7	[BUG]  [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write('n');  }  else  {  out.write('t');  }  if(consumed  <  0)  {  out.write('t');  }  else  {  out.write('t');  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write('n');  }  else  {  out.write('t');  }  if(consumed  <  0)  {  out.write('t');  }  else  {  out.write('t');  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	                if(consumed        <        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    <    0)    {    out.write('n');    }    else    {    out.write('t');    }    if(consumed  <  0)  {  out.write('t');  }  else  {  out.write('t');  }	  	compilable	  [FE]  ComparisonFailure  	93	13	add
8	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write('n');  }  else  {  out.write('t');  }  if(consumed  <  0)  {  out.write('n');  }  else  {  out.write('t');  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	add	                if(consumed        <        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    <    0)    {    out.write('n');    }    else    {    out.write('t');    }    if(consumed  <  0)  {  out.write('n');  }  else  {  out.write('t');  }	  	compilable	  [FE]  ComparisonFailure  	93	13	add
9	[BUG]  [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write('n');  }  else  {  out.write('t');  }  if(consumed  <  0)  {  out.write('n');  }  else  {  out.write('t');  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write('n');  }  else  {  out.write('t');  }  if(consumed  <  0)  {  out.write('n');  }  else  {  out.write('t');  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	                if(consumed        <        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    <    0)    {    out.write('n');    }    else    {    out.write('t');    }    if(consumed  <  0)  {  out.write('n');  }  else  {  out.write('t');  }	  	compilable	  [FE]  ComparisonFailure  	93	13	add
10	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write('n');  }  else  {  out.write('t');  }  if(consumed  <  0)  {  out.write('t');  }  else  {  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	add	                if(consumed        <        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    <    0)    {    out.write('n');    }    else    {    out.write('t');    }    if(consumed  <  0)  {  out.write('t');  }  else  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	93	13	add
11	[BUG]  [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write('n');  }  else  {  out.write('t');  }  if(consumed  <  0)  {  out.write('t');  }  else  {  out.write(c);  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write('n');  }  else  {  out.write('t');  }  if(consumed  <  0)  {  out.write('t');  }  else  {  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	                if(consumed        <        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    <    0)    {    out.write('n');    }    else    {    out.write('t');    }    if(consumed  <  0)  {  out.write('t');  }  else  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	93	13	add
12	[BUG]  [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write('n');  }  else  {  out.write('t');  }  if(consumed  <  0)  {  out.write(c);  }  else  {  [CE]  'else'  without  'if'  [FE]            ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write('n');  }  else  {  out.write('t');  }  if(consumed  <  0)  {  out.write(c);  }  else  {  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	                if(consumed        <        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    <    0)    {    out.write('n');    }    else    {    out.write('t');    }    if(consumed  <  0)  {  out.write(c);  }  else  {	  	non-compiled	[CE]  'else'  without  'if'	93	None	add
13	[BUG]  [BUGGY]  if(c!=  null)  {  if(consumed  >  0)  {  for(int  pos  =  0;  pos  <  consumed;  pos++)  {  out.write(c);  }  [CE]  'else'  without  'if'  [FE]                    ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(c!=  null)  {  if(consumed  >  0)  {  for(int  pos  =  0;  pos  <  consumed;  pos++)  {  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(c!=  null)  {  if(consumed  >  0)  {  for(int  pos  =  0;  pos  <  consumed;  pos++)  {  out.write(c);  }	  if(consumed    >    0)    {    for(int    pos    =    0;    pos    <    consumed;    pos++)    {    out.write(c);    }    	non-compiled	[CE]  'else'  without  'if'	84	None	replace
14	[BUG]  [BUGGY]  while(pos  >  0)  {  for(int  pos  =  0;  pos  <  consumed;  pos++)  {  out.write(c);  }  [CE]  'else'  without  'if'  [FE]                      ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  while(pos  >  0)  {  for(int  pos  =  0;  pos  <  consumed;  pos++)  {  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	while(pos  >  0)  {  for(int  pos  =  0;  pos  <  consumed;  pos++)  {  out.write(c);  }	  if(consumed    >    0)    {    for(int    pos    =    0;    pos    <    consumed;    pos++)    {    out.write(c);    }    	non-compiled	[CE]  'else'  without  'if'	84	None	replace
15	[BUG]  [BUGGY]  if(consumed  <  0)  {  for(int  pos  =  0;  pos  <  consumed;  pos++)  {  out.write(c);  }  [CE]  'else'  without  'if'  [FE]                        ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  <  0)  {  for(int  pos  =  0;  pos  <  consumed;  pos++)  {  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  <  0)  {  for(int  pos  =  0;  pos  <  consumed;  pos++)  {  out.write(c);  }	  if(consumed    >    0)    {    for(int    pos    =    0;    pos    <    consumed;    pos++)    {    out.write(c);    }    	non-compiled	[CE]  'else'  without  'if'	84	None	replace
16	[BUG]  [BUGGY]  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  c.length;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pos,  pos));  }  [CE]  'else'  without  'if'  [FE]                  ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  c.length;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pos,  pos));  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  c.length;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pos,  pos));  }	  if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    c.length;    pt++)    {    pos    +=    Character.charCount(Character.codePointAt(pos,    pos));    }    	non-compiled	[CE]  'else'  without  'if'	65	None	replace
17	[BUG]  [BUGGY]  if(consumed  <  0  ||  c.charAt(pos  -  1)!=  'n')  {  out.write(c);  }  else  {  out.write('n');  }  [CE]  'else'  without  'if'  [FE]        ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  <  0  ||  c.charAt(pos  -  1)!=  'n')  {  out.write(c);  }  else  {  out.write('n');  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  <  0  ||  c.charAt(pos  -  1)!=  'n')  {  out.write(c);  }  else  {  out.write('n');  }	  if(consumed    <    0    ||    c.charAt(consumed    -    1)!=    'n')    {    out.write(c);    }    else    {    out.write('n');    }    	non-compiled	[CE]  'else'  without  'if'	70	None	replace
18	[BUG]  [BUGGY]  if(pos  <  0  ||  c.charAt(consumed  -  1)!=  'n')  {  out.write(c);  }  else  {  out.write('n');  }  [CE]  'else'  without  'if'  [FE]          ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(pos  <  0  ||  c.charAt(consumed  -  1)!=  'n')  {  out.write(c);  }  else  {  out.write('n');  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(pos  <  0  ||  c.charAt(consumed  -  1)!=  'n')  {  out.write(c);  }  else  {  out.write('n');  }	  if(consumed    <    0    ||    c.charAt(consumed    -    1)!=    'n')    {    out.write(c);    }    else    {    out.write('n');    }    	non-compiled	[CE]  'else'  without  'if'	70	None	replace
19	[BUG]  [BUGGY]  if(consumed  <  =  0  ||  c.charAt(consumed  -  1)!=  'n')  {  out.write(c);  }  else  {  out.write('n');  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  <  =  0  ||  c.charAt(consumed  -  1)!=  'n')  {  out.write(c);  }  else  {  out.write('n');  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  <  =  0  ||  c.charAt(consumed  -  1)!=  'n')  {  out.write(c);  }  else  {  out.write('n');  }	  if(consumed    <    0    ||    c.charAt(consumed    -    1)!=    'n')    {    out.write(c);    }    else    {    out.write('n');    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
20	[BUG]  [BUGGY]  if(consumed  >  0  ||  c.charAt(consumed  -  1)!=  'n')  {  out.write(c);  }  else  {  out.write('n');  }  [CE]  'else'  without  'if'  [FE]              ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  >  0  ||  c.charAt(consumed  -  1)!=  'n')  {  out.write(c);  }  else  {  out.write('n');  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  >  0  ||  c.charAt(consumed  -  1)!=  'n')  {  out.write(c);  }  else  {  out.write('n');  }	  if(consumed    <    0    ||    c.charAt(consumed    -    1)!=    'n')    {    out.write(c);    }    else    {    out.write('n');    }    	non-compiled	[CE]  'else'  without  'if'	70	None	replace
21	[BUG]  [BUGGY]  pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars();  out.write(c);  }  [CE]  not  a  statement  [FE]            ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars();  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars();  out.write(c);  }	  if(consumed    >    0)    {    for(int    pt    =    0;    pos    <    len;    pos++)    {    char[]    c    =    input.toChars();    out.write(c);    }    	non-compiled	[CE]  not  a  statement	114	None	replace
22	[BUG]  [BUGGY]  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  c.length;  pt++)  {  pos  +=  Character.charCount(c[pos]);  }  [CE]  'else'  without  'if'  [FE]                    ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  c.length;  pt++)  {  pos  +=  Character.charCount(c[pos]);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  c.length;  pt++)  {  pos  +=  Character.charCount(c[pos]);  }	  if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    c.length;    pt++)    {    pos    +=    Character.charCount(c[pos]);    }    	non-compiled	[CE]  'else'  without  'if'	117	None	replace
23	[BUG]  [BUGGY]  if(pos  >  0)  {  for(int  pt  =  0;  pt  <  c.length;  pt++)  {  pos  +=  Character.charCount(c[pos]);  }  [CE]  'else'  without  'if'  [FE]                      ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(pos  >  0)  {  for(int  pt  =  0;  pt  <  c.length;  pt++)  {  pos  +=  Character.charCount(c[pos]);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(pos  >  0)  {  for(int  pt  =  0;  pt  <  c.length;  pt++)  {  pos  +=  Character.charCount(c[pos]);  }	  if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    c.length;    pt++)    {    pos    +=    Character.charCount(c[pos]);    }    	non-compiled	[CE]  'else'  without  'if'	117	None	replace
24	[BUG]  [BUGGY]  out.write(c,  0,  consumed);  [CE]  'else'  without  'if'  [FE]        ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  out.write(c,  0,  consumed);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	out.write(c,  0,  consumed);	  out.write(c,    consumed);    	non-compiled	[CE]  'else'  without  'if'	59	None	replace
25	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write('n');  }  else  {  out.write('m');  }  if(consumed  >  0)  {  out.write(c);  }  else  {  out.write('m');  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	add	                if(consumed        >        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    >    0)    {    out.write('n');    }    else    {    out.write('m');    }    if(consumed  >  0)  {  out.write(c);  }  else  {  out.write('m');  }	  	compilable	  [FE]  ComparisonFailure  	91	13	add
26	[BUG]  [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write('n');  }  else  {  out.write('m');  }  if(consumed  >  0)  {  out.write(c);  }  else  {  out.write('m');  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write('n');  }  else  {  out.write('m');  }  if(consumed  >  0)  {  out.write(c);  }  else  {  out.write('m');  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	                if(consumed        >        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    >    0)    {    out.write('n');    }    else    {    out.write('m');    }    if(consumed  >  0)  {  out.write(c);  }  else  {  out.write('m');  }	  	compilable	  [FE]  ComparisonFailure  	91	13	add
27	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write('n');  }  else  {  out.write('m');  }  if(consumed  >  0)  {  out.write('m');  }  else  {  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	add	                if(consumed        >        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    >    0)    {    out.write('n');    }    else    {    out.write('m');    }    if(consumed  >  0)  {  out.write('m');  }  else  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	91	13	add
28	[BUG]  [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write('n');  }  else  {  out.write('m');  }  if(consumed  >  0)  {  out.write('m');  }  else  {  out.write(c);  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write('n');  }  else  {  out.write('m');  }  if(consumed  >  0)  {  out.write('m');  }  else  {  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	                if(consumed        >        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    >    0)    {    out.write('n');    }    else    {    out.write('m');    }    if(consumed  >  0)  {  out.write('m');  }  else  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	91	13	add
29	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write('n');  }  else  {  out.write('m');  }  if(consumed  >  0)  {  out.write('m');  }  else  {  out.write('m');  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	add	                if(consumed        >        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    >    0)    {    out.write('n');    }    else    {    out.write('m');    }    if(consumed  >  0)  {  out.write('m');  }  else  {  out.write('m');  }	  	compilable	  [FE]  ComparisonFailure  	91	13	add
30	[BUG]  [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write('n');  }  else  {  out.write('m');  }  if(consumed  >  0)  {  out.write('m');  }  else  {  out.write('m');  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write('n');  }  else  {  out.write('m');  }  if(consumed  >  0)  {  out.write('m');  }  else  {  out.write('m');  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	                if(consumed        >        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    >    0)    {    out.write('n');    }    else    {    out.write('m');    }    if(consumed  >  0)  {  out.write('m');  }  else  {  out.write('m');  }	  	compilable	  [FE]  ComparisonFailure  	91	13	add
31	[BUG]  [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write('n');  }  else  {  out.write('m');  }  if(consumed  >  0)  {  out.write(c);  }  else  {  [CE]  'else'  without  'if'  [FE]          ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write('n');  }  else  {  out.write('m');  }  if(consumed  >  0)  {  out.write(c);  }  else  {  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	                if(consumed        >        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    >    0)    {    out.write('n');    }    else    {    out.write('m');    }    if(consumed  >  0)  {  out.write(c);  }  else  {	  	non-compiled	[CE]  'else'  without  'if'	91	None	add
32	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write(c);  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.  [CE]  <identifier>  expected  [FE]        ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  >  0)  {  out.write(c);  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  >  0)  {  out.write(c);  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.	          out.write(c);    if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    out.write(c);    }    	non-compiled	[CE]  <identifier>  expected	120	None	replace
33	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write(c);  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  >  0)  {  out.write(c);  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  >  0)  {  out.write(c);  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(	          out.write(c);    if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
34	[BUG]  [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(consumed,  pt));  [CE]  'else'  without  'if'  [FE]                ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(consumed,  pt));  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	pos  +=  Character.charCount(Character.codePointAt(consumed,  pt));	  pos    +=    Character.charCount(Character.codePointAt(pt,    out));    	non-compiled	[CE]  'else'  without  'if'	88	None	replace
35	[BUG]  [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(conumed,  pt));  [CE]  'else'  without  'if'  [FE]                  ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(conumed,  pt));  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	pos  +=  Character.charCount(Character.codePointAt(conumed,  pt));	  pos    +=    Character.charCount(Character.codePointAt(pt,    out));    	non-compiled	[CE]  'else'  without  'if'	88	None	replace
36	[BUG]  [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(c,  out));  [CE]  'else'  without  'if'  [FE]                    ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(c,  out));  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	pos  +=  Character.charCount(Character.codePointAt(c,  out));	  pos    +=    Character.charCount(Character.codePointAt(pt,    out));    	non-compiled	[CE]  'else'  without  'if'	88	None	replace
37	[BUG]  [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(input,  pt));  [CE]  'else'  without  'if'  [FE]                      ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(input,  pt));  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	pos  +=  Character.charCount(Character.codePointAt(input,  pt));	  pos    +=    Character.charCount(Character.codePointAt(pt,    out));    	non-compiled	[CE]  'else'  without  'if'	88	None	replace
38	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write('n');  }  else  {  out.write('n');  }  if(consumed  >  0)  {  out.write(c);  }  else  {  out.write('n');  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	add	                if(consumed        >        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    >    0)    {    out.write('n');    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write(c);  }  else  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	20	13	add
39	[BUG]  [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write('n');  }  else  {  out.write('n');  }  if(consumed  >  0)  {  out.write(c);  }  else  {  out.write('n');  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write('n');  }  else  {  out.write('n');  }  if(consumed  >  0)  {  out.write(c);  }  else  {  out.write('n');  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	                if(consumed        >        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    >    0)    {    out.write('n');    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write(c);  }  else  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	20	13	add
40	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write('n');  }  else  {  out.write('n');  }  if(consumed  >  0)  {  out.write('n');  }  else  {  out.write('n');  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	add	                if(consumed        >        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    >    0)    {    out.write('n');    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write('n');  }  else  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	20	13	add
41	[BUG]  [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write('n');  }  else  {  out.write('n');  }  if(consumed  >  0)  {  out.write('n');  }  else  {  out.write('n');  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write('n');  }  else  {  out.write('n');  }  if(consumed  >  0)  {  out.write('n');  }  else  {  out.write('n');  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	                if(consumed        >        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    >    0)    {    out.write('n');    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write('n');  }  else  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	20	13	add
42	[BUG]  [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write('n');  }  else  {  out.write('n');  }  if(consumed  >  0)  {  out.write(c);  }  else  {  [CE]  'else'  without  'if'  [FE]        ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write('n');  }  else  {  out.write('n');  }  if(consumed  >  0)  {  out.write(c);  }  else  {  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	                if(consumed        >        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    >    0)    {    out.write('n');    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write(c);  }  else  {	  	non-compiled	[CE]  'else'  without  'if'	20	None	add
43	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write('n');  }  else  {  out.write('n');  }  if(consumed  >  0)  {  out.write('n');  }  else  {  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	add	                if(consumed        >        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    >    0)    {    out.write('n');    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write('n');  }  else  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	20	13	add
44	[BUG]  [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write('n');  }  else  {  out.write('n');  }  if(consumed  >  0)  {  out.write('n');  }  else  {  out.write(c);  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write('n');  }  else  {  out.write('n');  }  if(consumed  >  0)  {  out.write('n');  }  else  {  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	                if(consumed        >        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    >    0)    {    out.write('n');    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write('n');  }  else  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	20	13	add
45	[BUG]  [BUGGY]  if(consumed  >  0)  {  if(consumed  <  0)  {  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  >  0)  {  if(consumed  <  0)  {  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  >  0)  {  if(consumed  <  0)  {  out.write(c);  }	          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed    <    0)    {    out.write('n');    }    else    {    out.write('m');    }    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
46	[BUG]  [BUGGY]  if(consumed  <  0)  {  out.write(c);  }  else  {  out.write('m');  }  [CE]  'else'  without  'if'  [FE]      ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  <  0)  {  out.write(c);  }  else  {  out.write('m');  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  <  0)  {  out.write(c);  }  else  {  out.write('m');  }	          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed    <    0)    {    out.write('n');    }    else    {    out.write('m');    }    	non-compiled	[CE]  'else'  without  'if'	96	None	replace
47	[BUG]  [BUGGY]  if(consumed  <  0  ||  c  ==  'e')  {  if(consumed  >  0)  {  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  <  0  ||  c  ==  'e')  {  if(consumed  >  0)  {  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  <  0  ||  c  ==  'e')  {  if(consumed  >  0)  {  out.write(c);  }	          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write(c);    }    while(consumed    >    0)    {    out.write(c);    }    else    {    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
48	[BUG]  [BUGGY]  if(consumed  <  0)  {  for(pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars();  out.write(c);  }  [CE]  'else'  without  'if'  [FE]              ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  <  0)  {  for(pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars();  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  <  0)  {  for(pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars();  out.write(c);  }	  if(consumed    >    0)    {    for(pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    input.toChars();    out.write(c);    }    	non-compiled	[CE]  'else'  without  'if'	101	None	replace
49	[BUG]  [BUGGY]  if(pos  >  0)  {  for(pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars();  out.write(c);  }  [CE]  'else'  without  'if'  [FE]                ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(pos  >  0)  {  for(pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars();  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(pos  >  0)  {  for(pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars();  out.write(c);  }	  if(consumed    >    0)    {    for(pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    input.toChars();    out.write(c);    }    	non-compiled	[CE]  'else'  without  'if'	101	None	replace
50	[BUG]  [BUGGY]  pos  <  =  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  pos  <  =  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }  [BUGGY]      else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	pos  <  =  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }	  if(consumed    <    =    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    Character.toChars(Character.codePointAt(pos,    pos));    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
51	[BUG]  [BUGGY]  if(consumed  <  0)  {  for(pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }  [CE]  'else'  without  'if'  [FE]                ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  <  0)  {  for(pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  <  0)  {  for(pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }	  if(consumed    >    0)    {    for(pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    Character.toChars(Character.codePointAt(pos,    pos));    out.write(c);    }    	non-compiled	[CE]  'else'  without  'if'	13	None	replace
52	[BUG]  [BUGGY]  if(consumed  >=  0)  {  for(pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }  [CE]  'else'  without  'if'  [FE]                  ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  >=  0)  {  for(pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  >=  0)  {  for(pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }	  if(consumed    >    0)    {    for(pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    Character.toChars(Character.codePointAt(pos,    pos));    out.write(c);    }    	non-compiled	[CE]  'else'  without  'if'	13	None	replace
53	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write(c);  }  else  {  out.write('m');  }  [CE]  'else'  without  'if'  [FE]    ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  >  0)  {  out.write(c);  }  else  {  out.write('m');  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  >  0)  {  out.write(c);  }  else  {  out.write('m');  }	          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed    >    0)    {    out.write('n');    }    else    {    out.write('m');    }    	non-compiled	[CE]  'else'  without  'if'	92	None	replace
54	[BUG]  [BUGGY]  if(consumed  <  0)  {  out.write(c,  0,  len);  }  else  {  out.write('n');  }  [CE]  'else'  without  'if'  [FE]        ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  <  0)  {  out.write(c,  0,  len);  }  else  {  out.write('n');  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  <  0)  {  out.write(c,  0,  len);  }  else  {  out.write('n');  }	  if(consumed    >    0)    {    out.write(c,    0,    len);    }    else    {    out.write('n');    }    	non-compiled	[CE]  'else'  without  'if'	113	None	replace
55	[BUG]  [BUGGY]  if(consumed  <  =  0)  {  out.write(c,  0,  len);  }  else  {  out.write('n');  }  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  <  =  0)  {  out.write(c,  0,  len);  }  else  {  out.write('n');  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  <  =  0)  {  out.write(c,  0,  len);  }  else  {  out.write('n');  }	  if(consumed    >    0)    {    out.write(c,    0,    len);    }    else    {    out.write('n');    }    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
56	[BUG]  [BUGGY]  if(c!=  null)  {  if(consume  >  0)  {  for(int  pt  =  0;  pt  <  len  -  2;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  [CE]  'else'  without  'if'  [FE]                ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(c!=  null)  {  if(consume  >  0)  {  for(int  pt  =  0;  pt  <  len  -  2;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  [BUGGY]      else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(c!=  null)  {  if(consume  >  0)  {  for(int  pt  =  0;  pt  <  len  -  2;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }	  if(consume    >    0)    {    for(int    pt    =    0;    pt    <    len    -    2;    pt++)    {    pos    +=    Character.charCount(Character.codePointAt(input,    pos));    }    	non-compiled	[CE]  'else'  without  'if'	76	None	replace
57	[BUG]  [BUGGY]  if(c  ==  null)  {  if(consume  >  0)  {  for(int  pt  =  0;  pt  <  len  -  2;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  [CE]  'else'  without  'if'  [FE]                  ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(c  ==  null)  {  if(consume  >  0)  {  for(int  pt  =  0;  pt  <  len  -  2;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  [BUGGY]      else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(c  ==  null)  {  if(consume  >  0)  {  for(int  pt  =  0;  pt  <  len  -  2;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }	  if(consume    >    0)    {    for(int    pt    =    0;    pt    <    len    -    2;    pt++)    {    pos    +=    Character.charCount(Character.codePointAt(input,    pos));    }    	non-compiled	[CE]  'else'  without  'if'	76	None	replace
58	[BUG]  [BUGGY]  out.write(c,  0,  consume);  [CE]  'else'  without  'if'  [FE]            ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  out.write(c,  0,  consume);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	out.write(c,  0,  consume);	  out.write(c,    0,    len);    	non-compiled	[CE]  'else'  without  'if'	61	None	replace
59	[BUG]  [BUGGY]  out.copyCurrentStructure(c);  [CE]  'else'  without  'if'  [FE]              ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  out.copyCurrentStructure(c);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	out.copyCurrentStructure(c);	  out.write(c,    0,    len);    	non-compiled	[CE]  'else'  without  'if'	61	None	replace
60	[BUG]  [BUGGY]  if(consumed  <  0)  {  if(pos  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  <  0)  {  if(pos  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.  [BUGGY]      else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  <  0)  {  if(pos  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.	  if(pos    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    Character.toChars(Character.codePointAt(pos,    pos));    out.write(c);    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
61	[BUG]  [BUGGY]  if(consumed  <  0)  {  if(pos  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write  [CE]  not  a  statement  [FE]                  ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  <  0)  {  if(pos  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write  [BUGGY]      else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  <  0)  {  if(pos  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write	  if(pos    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    Character.toChars(Character.codePointAt(pos,    pos));    out.write(c);    }    	non-compiled	[CE]  not  a  statement	6	None	replace
62	[BUG]  [BUGGY]  if(consumed  <  0)  {  if(pos  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  <  0)  {  if(pos  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(  [BUGGY]      else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  <  0)  {  if(pos  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(	  if(pos    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    Character.toChars(Character.codePointAt(pos,    pos));    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
63	[BUG]  [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(consumed,  pos));  [CE]  'else'  without  'if'  [FE]                  ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(consumed,  pos));  [BUGGY]      else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	pos  +=  Character.charCount(Character.codePointAt(consumed,  pos));	  pos    +=    Character.charCount(Character.codePointAt(input,    pos));    	non-compiled	[CE]  'else'  without  'if'	4	None	replace
64	[BUG]  [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(c,  pos));  [CE]  'else'  without  'if'  [FE]                    ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(c,  pos));  [BUGGY]      else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	pos  +=  Character.charCount(Character.codePointAt(c,  pos));	  pos    +=    Character.charCount(Character.codePointAt(input,    pos));    	non-compiled	[CE]  'else'  without  'if'	4	None	replace
65	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed  <  0)  {  out.write(c);  }  else  {  out.write(c);  }  if(consumed  <  0)  {  out.write(c);  }  else  {  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	add	                if(consumed        <        0)        {        out.write(c);        }        else        {        out.write(c);        }        if(consumed    <    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed  <  0)  {  out.write(c);  }  else  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	38	13	add
66	[BUG]  [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed  <  0)  {  out.write(c);  }  else  {  out.write(c);  }  if(consumed  <  0)  {  out.write(c);  }  else  {  out.write(c);  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed  <  0)  {  out.write(c);  }  else  {  out.write(c);  }  if(consumed  <  0)  {  out.write(c);  }  else  {  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	                if(consumed        <        0)        {        out.write(c);        }        else        {        out.write(c);        }        if(consumed    <    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed  <  0)  {  out.write(c);  }  else  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	38	13	add
67	[BUG]  [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed  <  0)  {  out.write(c);  }  else  {  out.write(c);  }  if(consumed  <  0)  {  out.write(c);  }  else  {  [CE]  'else'  without  'if'  [FE]      ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed  <  0)  {  out.write(c);  }  else  {  out.write(c);  }  if(consumed  <  0)  {  out.write(c);  }  else  {  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	                if(consumed        <        0)        {        out.write(c);        }        else        {        out.write(c);        }        if(consumed    <    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed  <  0)  {  out.write(c);  }  else  {	  	non-compiled	[CE]  'else'  without  'if'	38	None	add
68	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed  <  0)  {  out.write(c);  }  else  {  out.write(c);  }  if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	add	                if(consumed        <        0)        {        out.write(c);        }        else        {        out.write(c);        }        if(consumed    <    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	38	13	add
69	[BUG]  [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed  <  0)  {  out.write(c);  }  else  {  out.write(c);  }  if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(c);  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed  <  0)  {  out.write(c);  }  else  {  out.write(c);  }  if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	                if(consumed        <        0)        {        out.write(c);        }        else        {        out.write(c);        }        if(consumed    <    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	38	13	add
70	[BUG]  [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed  <  0)  {  out.write(c);  }  else  {  out.write(c);  }  if(consumed  <  =  0)  {  out.write(c);  }  else  {  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed  <  0)  {  out.write(c);  }  else  {  out.write(c);  }  if(consumed  <  =  0)  {  out.write(c);  }  else  {  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	                if(consumed        <        0)        {        out.write(c);        }        else        {        out.write(c);        }        if(consumed    <    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed  <  =  0)  {  out.write(c);  }  else  {  out.write(c);  }	  	non-compiled	[CE]  illegal  start  of  expression	38	None	add
71	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.toChars(pos,  input));  [CE]  'else'  without  'if'  [FE]                ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  char[]  c  =  Character.toChars(Character.toChars(pos,  input));  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	char[]  c  =  Character.toChars(Character.toChars(pos,  input));	          out.write(c);    char[]    c    =    Character.toChars(Character.toChars(input,    pos));    	non-compiled	[CE]  'else'  without  'if'	50	None	replace
72	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  [CE]  'else'  without  'if'  [FE]                  ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));	          out.write(c);    char[]    c    =    Character.toChars(Character.toChars(input,    pos));    	non-compiled	[CE]  'else'  without  'if'	50	None	replace
73	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.toChars(input,  pos));  [CE]  'else'  without  'if'  [FE]                    ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  char[]  c  =  Character.toChars(Character.toChars(input,  pos));  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	char[]  c  =  Character.toChars(Character.toChars(input,  pos));	          out.write(c);    char[]    c    =    Character.toChars(Character.toChars(input,    pos));    	non-compiled	[CE]  'else'  without  'if'	50	None	replace
74	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write('n');  }  else  {  out.write('n');  }  if(consumed  <  0)  {  out.write(c);  }  else  {  out.write('n');  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	add	                if(consumed        <        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    <    0)    {    out.write('n');    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write(c);  }  else  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	27	13	add
75	[BUG]  [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write('n');  }  else  {  out.write('n');  }  if(consumed  <  0)  {  out.write(c);  }  else  {  out.write('n');  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write('n');  }  else  {  out.write('n');  }  if(consumed  <  0)  {  out.write(c);  }  else  {  out.write('n');  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	                if(consumed        <        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    <    0)    {    out.write('n');    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write(c);  }  else  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	27	13	add
76	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write('n');  }  else  {  out.write('n');  }  if(consumed  <  0)  {  out.write('n');  }  else  {  out.write('n');  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	add	                if(consumed        <        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    <    0)    {    out.write('n');    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write('n');  }  else  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	27	13	add
77	[BUG]  [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write('n');  }  else  {  out.write('n');  }  if(consumed  <  0)  {  out.write('n');  }  else  {  out.write('n');  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write('n');  }  else  {  out.write('n');  }  if(consumed  <  0)  {  out.write('n');  }  else  {  out.write('n');  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	                if(consumed        <        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    <    0)    {    out.write('n');    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write('n');  }  else  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	27	13	add
78	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write('n');  }  else  {  out.write('n');  }  if(consumed  <  0)  {  out.write('n');  }  else  {  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	add	                if(consumed        <        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    <    0)    {    out.write('n');    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write('n');  }  else  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	27	13	add
79	[BUG]  [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write('n');  }  else  {  out.write('n');  }  if(consumed  <  0)  {  out.write('n');  }  else  {  out.write(c);  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write('n');  }  else  {  out.write('n');  }  if(consumed  <  0)  {  out.write('n');  }  else  {  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	                if(consumed        <        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    <    0)    {    out.write('n');    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write('n');  }  else  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	27	13	add
80	[BUG]  [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write('n');  }  else  {  out.write('n');  }  if(consumed  <  0)  {  out.write(c);  }  else  {  [CE]  'else'  without  'if'  [FE]          ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write('n');  }  else  {  out.write('n');  }  if(consumed  <  0)  {  out.write(c);  }  else  {  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	                if(consumed        <        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    <    0)    {    out.write('n');    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write(c);  }  else  {	  	non-compiled	[CE]  'else'  without  'if'	27	None	add
81	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write(c);  }  else  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  pos  +=  Character.charCount(Character.codePointAt(pos,  pos));  }  [CE]  'else'  without  'if'  [FE]        ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  >  0)  {  out.write(c);  }  else  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  pos  +=  Character.charCount(Character.codePointAt(pos,  pos));  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  >  0)  {  out.write(c);  }  else  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  pos  +=  Character.charCount(Character.codePointAt(pos,  pos));  }	          out.write(c);    if(consumed    >    0)    {    out.write(c);    }    else    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    pos    +=    Character.charCount(Character.codePointAt(pos,    pos));    }    	non-compiled	[CE]  'else'  without  'if'	66	None	replace
82	[BUG]  [BUGGY]  if(consumed  <  0)  {  out.write(c);  }  else  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  pos  +=  Character.charCount(Character.codePointAt(pos,  pos));  }  [CE]  'else'  without  'if'  [FE]          ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  <  0)  {  out.write(c);  }  else  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  pos  +=  Character.charCount(Character.codePointAt(pos,  pos));  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  <  0)  {  out.write(c);  }  else  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  pos  +=  Character.charCount(Character.codePointAt(pos,  pos));  }	          out.write(c);    if(consumed    >    0)    {    out.write(c);    }    else    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    pos    +=    Character.charCount(Character.codePointAt(pos,    pos));    }    	non-compiled	[CE]  'else'  without  'if'	66	None	replace
83	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write(c);  }  else  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  pos  +=  Character.charCount(Character.codePointAt(pos,  pos));  }  }  [CE]  'else'  without  'if'  [FE]            ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  >  0)  {  out.write(c);  }  else  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  pos  +=  Character.charCount(Character.codePointAt(pos,  pos));  }  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  >  0)  {  out.write(c);  }  else  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  pos  +=  Character.charCount(Character.codePointAt(pos,  pos));  }  }	          out.write(c);    if(consumed    >    0)    {    out.write(c);    }    else    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    pos    +=    Character.charCount(Character.codePointAt(pos,    pos));    }    	non-compiled	[CE]  'else'  without  'if'	66	None	replace
84	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write(c);  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  >  0)  {  out.write(c);  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  >  0)  {  out.write(c);  out.write(c);  }	          out.write(c);    out.write(c);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
85	[BUG]  [BUGGY]  if(consumed  <  0)  {  out.write(c);  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  <  0)  {  out.write(c);  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  <  0)  {  out.write(c);  out.write(c);  }	          out.write(c);    out.write(c);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
86	[BUG]  [BUGGY]  if(consumed  <  =  0)  {  out.write(c);  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  <  =  0)  {  out.write(c);  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  <  =  0)  {  out.write(c);  out.write(c);  }	          out.write(c);    out.write(c);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
87	[BUG]  [BUGGY]  if(consumed  >=  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }  [CE]  'else'  without  'if'  [FE]              ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  >=  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  >=  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }	  if(consumed    >    0)    {    for(int    pt    =    0;    pos    <    len;    pos++)    {    char[]    c    =    Character.toChars(Character.codePointAt(pos,    pos));    out.write(c);    }    	non-compiled	[CE]  'else'  without  'if'	115	None	replace
88	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write(c);  }  else  {  out.write('n');  }  if(consumed  <  0)  {  out.write(c);  }  else  {  out.write('n');  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	add	                if(consumed        <        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write(c);  }  else  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	25	13	add
89	[BUG]  [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write(c);  }  else  {  out.write('n');  }  if(consumed  <  0)  {  out.write(c);  }  else  {  out.write('n');  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write(c);  }  else  {  out.write('n');  }  if(consumed  <  0)  {  out.write(c);  }  else  {  out.write('n');  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	                if(consumed        <        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write(c);  }  else  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	25	13	add
90	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write(c);  }  else  {  out.write('n');  }  if(consumed  <  0)  {  out.write('n');  }  else  {  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	add	                if(consumed        <        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write('n');  }  else  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	25	13	add
91	[BUG]  [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write(c);  }  else  {  out.write('n');  }  if(consumed  <  0)  {  out.write('n');  }  else  {  out.write(c);  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write(c);  }  else  {  out.write('n');  }  if(consumed  <  0)  {  out.write('n');  }  else  {  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	                if(consumed        <        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write('n');  }  else  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	25	13	add
92	[BUG]  [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write(c);  }  else  {  out.write('n');  }  if(consumed  <  0)  {  out.write(c);  }  else  {  [CE]  'else'  without  'if'  [FE]        ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write(c);  }  else  {  out.write('n');  }  if(consumed  <  0)  {  out.write(c);  }  else  {  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	                if(consumed        <        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write(c);  }  else  {	  	non-compiled	[CE]  'else'  without  'if'	25	None	add
93	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write(c);  }  else  {  out.write('n');  }  if(consumed  >  0)  {  out.write(c);  }  else  {  out.write('n');  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	add	                if(consumed        <        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write(c);  }  else  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	25	13	add
94	[BUG]  [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write(c);  }  else  {  out.write('n');  }  if(consumed  >  0)  {  out.write(c);  }  else  {  out.write('n');  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write(c);  }  else  {  out.write('n');  }  if(consumed  >  0)  {  out.write(c);  }  else  {  out.write('n');  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	                if(consumed        <        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write(c);  }  else  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	25	13	add
95	[BUG]  [BUGGY]  if(consumed  >  0)  {  if(consumed  <  0)  {  out.write(c);  }  else  {  out.write(c,  out);  }  [CE]  'else'  without  'if'  [FE]          ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  >  0)  {  if(consumed  <  0)  {  out.write(c);  }  else  {  out.write(c,  out);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  >  0)  {  if(consumed  <  0)  {  out.write(c);  }  else  {  out.write(c,  out);  }	          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed    <    0)    {    out.write(c,    out);    }    else    {    out.write(c);    }    	non-compiled	[CE]  'else'  without  'if'	98	None	replace
96	[BUG]  [BUGGY]  if(consumed  <  0)  {  out.write(c,  out);  }  else  {  out.write(c);  }  [CE]  'else'  without  'if'  [FE]            ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  <  0)  {  out.write(c,  out);  }  else  {  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  <  0)  {  out.write(c,  out);  }  else  {  out.write(c);  }	          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed    <    0)    {    out.write(c,    out);    }    else    {    out.write(c);    }    	non-compiled	[CE]  'else'  without  'if'	98	None	replace
97	[BUG]  [BUGGY]  if(pos  <  len)  {  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write  [CE]  not  a  statement  [FE]            ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(pos  <  len)  {  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write  [BUGGY]      else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(pos  <  len)  {  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write	  if(consumed    <    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    out.write(c);    }    	non-compiled	[CE]  not  a  statement	53	None	replace
98	[BUG]  [BUGGY]  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pt,  pos));  }  [CE]  'else'  without  'if'  [FE]                  ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pt,  pos));  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pt,  pos));  }	  if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    consumed;    pt++)    {    pos    +=    Character.charCount(Character.codePointAt(pt,    pos));    }    	non-compiled	[CE]  'else'  without  'if'	34	None	replace
99	[BUG]  [BUGGY]  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  out.length();  pt++)  {  pos  +=  Character.charCount(pt);  }  [CE]  'else'  without  'if'  [FE]              ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  out.length();  pt++)  {  pos  +=  Character.charCount(pt);  }  [BUGGY]      else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  out.length();  pt++)  {  pos  +=  Character.charCount(pt);  }	  if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    out.length();    pt++)    {    pos    +=    Character.charCount(pt);    }    	non-compiled	[CE]  'else'  without  'if'	81	None	replace
100	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  input.length();  pt++)  {  pos  +=  Character.charCount(pt);  }  [CE]  'else'  without  'if'  [FE]                ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  input.length();  pt++)  {  pos  +=  Character.charCount(pt);  }  [BUGGY]      else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  input.length();  pt++)  {  pos  +=  Character.charCount(pt);  }	  if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    out.length();    pt++)    {    pos    +=    Character.charCount(pt);    }    	non-compiled	[CE]  'else'  without  'if'	81	None	replace
101	[BUG]  [BUGGY]  if(consumed  >  0)  {  if(consumed  <  =  0)  {  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  >  0)  {  if(consumed  <  =  0)  {  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  >  0)  {  if(consumed  <  =  0)  {  out.write(c);  }	          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    If(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
102	[BUG]  [BUGGY]  while(pos  <  len)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  [CE]  'else'  without  'if'  [FE]                    ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  while(pos  <  len)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	while(pos  <  len)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }	  while(pos    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    out.write(c);    }    	non-compiled	[CE]  'else'  without  'if'	36	None	replace
103	[BUG]  [BUGGY]  while(pos  <  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  [CE]  'else'  without  'if'  [FE]                      ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  while(pos  <  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	while(pos  <  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }	  while(pos    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    out.write(c);    }    	non-compiled	[CE]  'else'  without  'if'	36	None	replace
104	[BUG]  [BUGGY]  while(pos  >=  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  [CE]  'else'  without  'if'  [FE]                        ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  while(pos  >=  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	while(pos  >=  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }	  while(pos    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    out.write(c);    }    	non-compiled	[CE]  'else'  without  'if'	36	None	replace
105	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(pos,  input));  [CE]  'else'  without  'if'  [FE]          ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(pos,  input));  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	char[]  c  =  Character.toChars(Character.codePointAt(pos,  input));	          out.write(c);    char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    	non-compiled	[CE]  'else'  without  'if'	47	None	replace
106	[BUG]  [BUGGY]  out.write('n');  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  [CE]  'else'  without  'if'  [FE]            ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  out.write('n');  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	out.write('n');  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));	          out.write(c);    char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    	non-compiled	[CE]  'else'  without  'if'	47	None	replace
107	[BUG]  [BUGGY]  out.write(c);  char[]  c  =  Character.toChars(Character.codePointAt(pos,  input));  [CE]  'else'  without  'if'  [FE]              ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  out.write(c);  char[]  c  =  Character.toChars(Character.codePointAt(pos,  input));  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	out.write(c);  char[]  c  =  Character.toChars(Character.codePointAt(pos,  input));	          out.write(c);    char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    	non-compiled	[CE]  'else'  without  'if'	47	None	replace
108	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(len);  }  if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(len);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	add	                if(consumed        >        0)        {        out.write(c);        }        else        {        out.write(c);        }        if(consumed    >    0)    {    out.write(c);    }    else    {    out.write(len);    }    if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(len);  }	  	compilable	  [FE]  ComparisonFailure  	72	13	add
109	[BUG]  [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(len);  }  if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(len);  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(len);  }  if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(len);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	                if(consumed        >        0)        {        out.write(c);        }        else        {        out.write(c);        }        if(consumed    >    0)    {    out.write(c);    }    else    {    out.write(len);    }    if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(len);  }	  	compilable	  [FE]  ComparisonFailure  	72	13	add
110	[BUG]  [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(len);  }  if(conumed  >  0)  {  out.write(c);  }  else  {  out.write(len);  }  [CE]  cannot  find  symbol  conumed  [FE]      ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(len);  }  if(conumed  >  0)  {  out.write(c);  }  else  {  out.write(len);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	                if(consumed        >        0)        {        out.write(c);        }        else        {        out.write(c);        }        if(consumed    >    0)    {    out.write(c);    }    else    {    out.write(len);    }    if(conumed  >  0)  {  out.write(c);  }  else  {  out.write(len);  }	  	non-compiled	[CE]  cannot  find  symbol  conumed	72	None	add
111	[BUG]  [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(len);  }  if(consumed  >  0)  {  out.write(c);  }  else  {  [CE]  'else'  without  'if'  [FE]        ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(len);  }  if(consumed  >  0)  {  out.write(c);  }  else  {  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	                if(consumed        >        0)        {        out.write(c);        }        else        {        out.write(c);        }        if(consumed    >    0)    {    out.write(c);    }    else    {    out.write(len);    }    if(consumed  >  0)  {  out.write(c);  }  else  {	  	non-compiled	[CE]  'else'  without  'if'	72	None	add
112	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(len);  }  if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(len  +  1);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	add	                if(consumed        >        0)        {        out.write(c);        }        else        {        out.write(c);        }        if(consumed    >    0)    {    out.write(c);    }    else    {    out.write(len);    }    if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(len  +  1);  }	  	compilable	  [FE]  ComparisonFailure  	72	13	add
113	[BUG]  [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(len);  }  if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(len  +  1);  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(len);  }  if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(len  +  1);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	                if(consumed        >        0)        {        out.write(c);        }        else        {        out.write(c);        }        if(consumed    >    0)    {    out.write(c);    }    else    {    out.write(len);    }    if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(len  +  1);  }	  	compilable	  [FE]  ComparisonFailure  	72	13	add
114	[BUG]  [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(len);  }  if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(len;  }  [CE]  ')'  expected  [FE]            ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(len);  }  if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(len;  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	                if(consumed        >        0)        {        out.write(c);        }        else        {        out.write(c);        }        if(consumed    >    0)    {    out.write(c);    }    else    {    out.write(len);    }    if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(len;  }	  	non-compiled	[CE]  ')'  expected	72	None	add
115	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.charCount(input,  pos));  out.write(c);  }  [CE]  'else'  without  'if'  [FE]            ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.charCount(input,  pos));  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.charCount(input,  pos));  out.write(c);  }	          out.write(c);    if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    Character.toChars(Character.charCount(input,    pos));    out.write(c);    }    	non-compiled	[CE]  'else'  without  'if'	122	None	replace
116	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write(c);  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.charCount(input,  pos));  out.write(  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  >  0)  {  out.write(c);  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.charCount(input,  pos));  out.write(  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  >  0)  {  out.write(c);  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.charCount(input,  pos));  out.write(	          out.write(c);    if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    Character.toChars(Character.charCount(input,    pos));    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
117	[BUG]  [BUGGY]  if(pos  <  =  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(pos  <  =  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [BUGGY]      else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(pos  <  =  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }	  if(consumed    <    =    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
118	[BUG]  [BUGGY]  pos  <  =  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  pos  <  =  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [BUGGY]      else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	pos  <  =  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }	  if(consumed    <    =    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
119	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(c);  }  if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	add	                if(consumed        >        0)        {        out.write(c);        }        else        {        out.write(c);        }        if(consumed    >    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	7	13	add
120	[BUG]  [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(c);  }  if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(c);  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(c);  }  if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	                if(consumed        >        0)        {        out.write(c);        }        else        {        out.write(c);        }        if(consumed    >    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	7	13	add
121	[BUG]  [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(c);  }  if(consumed  >  0)  {  out.write(c);  }  else  {  [CE]  'else'  without  'if'  [FE]      ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(c);  }  if(consumed  >  0)  {  out.write(c);  }  else  {  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	                if(consumed        >        0)        {        out.write(c);        }        else        {        out.write(c);        }        if(consumed    >    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed  >  0)  {  out.write(c);  }  else  {	  	non-compiled	[CE]  'else'  without  'if'	7	None	add
122	[BUG]  [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(c);  }  if(conumed  >  0)  {  out.write(c);  }  else  {  out.write(c);  }  [CE]  cannot  find  symbol  conumed  [FE]        ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(c);  }  if(conumed  >  0)  {  out.write(c);  }  else  {  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	                if(consumed        >        0)        {        out.write(c);        }        else        {        out.write(c);        }        if(consumed    >    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(conumed  >  0)  {  out.write(c);  }  else  {  out.write(c);  }	  	non-compiled	[CE]  cannot  find  symbol  conumed	7	None	add
123	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(c);  }  if(consumed  <  0)  {  out.write(c);  }  else  {  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	add	                if(consumed        >        0)        {        out.write(c);        }        else        {        out.write(c);        }        if(consumed    >    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed  <  0)  {  out.write(c);  }  else  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	7	13	add
124	[BUG]  [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(c);  }  if(consumed  <  0)  {  out.write(c);  }  else  {  out.write(c);  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(c);  }  if(consumed  <  0)  {  out.write(c);  }  else  {  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	                if(consumed        >        0)        {        out.write(c);        }        else        {        out.write(c);        }        if(consumed    >    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed  <  0)  {  out.write(c);  }  else  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	7	13	add
125	[BUG]  [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(c);  }  if(consumed  >  0)  {  out.write(c);  }  else  {  output(c);  }  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(c);  }  if(consumed  >  0)  {  out.write(c);  }  else  {  output(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	                if(consumed        >        0)        {        out.write(c);        }        else        {        out.write(c);        }        if(consumed    >    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed  >  0)  {  out.write(c);  }  else  {  output(c);  }	  	non-compiled	[CE]  cannot  find  symbol	7	None	add
126	[BUG]  [BUGGY]  out.write(c);  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars();  out.write(c);  }  [CE]  'else'  without  'if'  [FE]            ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  out.write(c);  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars();  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	out.write(c);  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars();  out.write(c);  }	  if(consumed    >    0)    {    out.write(c);    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    input.toChars();    out.write(c);    }    	non-compiled	[CE]  'else'  without  'if'	100	None	replace
127	[BUG]  [BUGGY]  if(consumed  <  0)  {  out.write(c);  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars();  out.write(c);  }  [CE]  'else'  without  'if'  [FE]              ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  <  0)  {  out.write(c);  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars();  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  <  0)  {  out.write(c);  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars();  out.write(c);  }	  if(consumed    >    0)    {    out.write(c);    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    input.toChars();    out.write(c);    }    	non-compiled	[CE]  'else'  without  'if'	100	None	replace
128	[BUG]  [BUGGY]  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  c.length;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pt,  pos));  }  [CE]  'else'  without  'if'  [FE]              ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  c.length;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pt,  pos));  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  c.length;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pt,  pos));  }	  if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    c.length;    pt++)    {    pos    +=    Character.charCount(Character.codePointAt(pt,    pos));    }    	non-compiled	[CE]  'else'  without  'if'	87	None	replace
129	[BUG]  [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(pt,  pos));  [CE]  'else'  without  'if'  [FE]                ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(pt,  pos));  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	pos  +=  Character.charCount(Character.codePointAt(pt,  pos));	  if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    c.length;    pt++)    {    pos    +=    Character.charCount(Character.codePointAt(pt,    pos));    }    	non-compiled	[CE]  'else'  without  'if'	87	None	replace
130	[BUG]  [BUGGY]  out.write(c,  0,  pos);  [CE]  'else'  without  'if'  [FE]          ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  out.write(c,  0,  pos);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	out.write(c,  0,  pos);	  out.write(c,    pos);    	non-compiled	[CE]  'else'  without  'if'	60	None	replace
131	[BUG]  [BUGGY]  out.write(c,  pos  +  1);  [CE]  'else'  without  'if'  [FE]            ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  out.write(c,  pos  +  1);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	out.write(c,  pos  +  1);	  out.write(c,    pos);    	non-compiled	[CE]  'else'  without  'if'	60	None	replace
132	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(c);  }  if(consumed  <  0)  {  out.write(c);  }  else  {  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	add	                if(consumed        <        0)        {        out.write(c);        }        else        {        out.write(c);        }        if(consumed    >    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed  <  0)  {  out.write(c);  }  else  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	41	13	add
133	[BUG]  [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(c);  }  if(consumed  <  0)  {  out.write(c);  }  else  {  out.write(c);  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(c);  }  if(consumed  <  0)  {  out.write(c);  }  else  {  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	                if(consumed        <        0)        {        out.write(c);        }        else        {        out.write(c);        }        if(consumed    >    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed  <  0)  {  out.write(c);  }  else  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	41	13	add
134	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(c);  }  if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	add	                if(consumed        <        0)        {        out.write(c);        }        else        {        out.write(c);        }        if(consumed    >    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	41	13	add
135	[BUG]  [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(c);  }  if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(c);  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(c);  }  if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	                if(consumed        <        0)        {        out.write(c);        }        else        {        out.write(c);        }        if(consumed    >    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	41	13	add
136	[BUG]  [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(c);  }  if(consumed  <  0)  {  out.write(c);  }  else  {  [CE]  'else'  without  'if'  [FE]        ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(c);  }  if(consumed  <  0)  {  out.write(c);  }  else  {  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	                if(consumed        <        0)        {        out.write(c);        }        else        {        out.write(c);        }        if(consumed    >    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed  <  0)  {  out.write(c);  }  else  {	  	non-compiled	[CE]  'else'  without  'if'	41	None	add
137	[BUG]  [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(c);  }  if(consumed  <  =  0)  {  out.write(c);  }  else  {  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(c);  }  if(consumed  <  =  0)  {  out.write(c);  }  else  {  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	                if(consumed        <        0)        {        out.write(c);        }        else        {        out.write(c);        }        if(consumed    >    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed  <  =  0)  {  out.write(c);  }  else  {  out.write(c);  }	  	non-compiled	[CE]  illegal  start  of  expression	41	None	add
138	[BUG]  [BUGGY]  if(consumed  <  0)  {  for(int  pos  =  0;  pos  <  c.length;  pos++)  {  out.write(c);  }  [CE]  'else'  without  'if'  [FE]                  ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  <  0)  {  for(int  pos  =  0;  pos  <  c.length;  pos++)  {  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  <  0)  {  for(int  pos  =  0;  pos  <  c.length;  pos++)  {  out.write(c);  }	  if(consumed    >    0)    {    for(int    pos    =    0;    pos    <    c.length;    pos++)    {    out.write(c);    }    	non-compiled	[CE]  'else'  without  'if'	116	None	replace
139	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  c  =  0;  pos  <  c.length;  pos++)  {  out.write(c);  }  [CE]  'else'  without  'if'  [FE]                    ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  >  0)  {  for(int  c  =  0;  pos  <  c.length;  pos++)  {  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  >  0)  {  for(int  c  =  0;  pos  <  c.length;  pos++)  {  out.write(c);  }	  if(consumed    >    0)    {    for(int    pos    =    0;    pos    <    c.length;    pos++)    {    out.write(c);    }    	non-compiled	[CE]  'else'  without  'if'	116	None	replace
140	[BUG]  [BUGGY]  if(consumed  <  0)  {  for(int  c  =  0;  pos  <  c.length;  pos++)  {  out.write(c);  }  [CE]  'else'  without  'if'  [FE]                      ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  <  0)  {  for(int  c  =  0;  pos  <  c.length;  pos++)  {  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  <  0)  {  for(int  c  =  0;  pos  <  c.length;  pos++)  {  out.write(c);  }	  if(consumed    >    0)    {    for(int    pos    =    0;    pos    <    c.length;    pos++)    {    out.write(c);    }    	non-compiled	[CE]  'else'  without  'if'	116	None	replace
141	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write(c);  char[]  c  =  Character.toChars(Character.toChars(input,  pos));  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  >  0)  {  out.write(c);  char[]  c  =  Character.toChars(Character.toChars(input,  pos));  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  >  0)  {  out.write(c);  char[]  c  =  Character.toChars(Character.toChars(input,  pos));  out.write(c);  }	          out.write(c);    char[]    c    =    Character.toChars(Character.toChars(input,    pos));    out.write(c);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
142	[BUG]  [BUGGY]  if(consumed  <  0)  {  out.write(c);  char[]  c  =  Character.toChars(Character.toChars(input,  pos));  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  <  0)  {  out.write(c);  char[]  c  =  Character.toChars(Character.toChars(input,  pos));  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  <  0)  {  out.write(c);  char[]  c  =  Character.toChars(Character.toChars(input,  pos));  out.write(c);  }	          out.write(c);    char[]    c    =    Character.toChars(Character.toChars(input,    pos));    out.write(c);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
143	[BUG]  [BUGGY]  if(consumed  <  0)  {  out.write(c);  char[]  c  =  Character.toChars(Character.toChars(input,  pos));  out.write(c);  }  else  {  out.write(pos);  }  [CE]  'else'  without  'if'  [FE]                  ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  <  0)  {  out.write(c);  char[]  c  =  Character.toChars(Character.toChars(input,  pos));  out.write(c);  }  else  {  out.write(pos);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  <  0)  {  out.write(c);  char[]  c  =  Character.toChars(Character.toChars(input,  pos));  out.write(c);  }  else  {  out.write(pos);  }	          out.write(c);    char[]    c    =    Character.toChars(Character.toChars(input,    pos));    out.write(c);    	non-compiled	[CE]  'else'  without  'if'	49	None	replace
144	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(C);  }  [CE]  'else'  without  'if'  [FE]              ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(C);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(C);  }	          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed    >    0)    {    out.write(c);    }    else    {    out.write(C);    }    	non-compiled	[CE]  'else'  without  'if'	11	None	replace
145	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write(c);  }  else  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.  [CE]  <identifier>  expected  [FE]        ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  >  0)  {  out.write(c);  }  else  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  >  0)  {  out.write(c);  }  else  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.	  if(consumed    >    0)    {    out.write(c);    }    else    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    Character.toChars(Character.codePointAt(pos,    pos));    out.write(    	non-compiled	[CE]  <identifier>  expected	109	None	replace
146	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write(c);  }  else  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write  [CE]  not  a  statement  [FE]          ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  >  0)  {  out.write(c);  }  else  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  >  0)  {  out.write(c);  }  else  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write	  if(consumed    >    0)    {    out.write(c);    }    else    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    Character.toChars(Character.codePointAt(pos,    pos));    out.write(    	non-compiled	[CE]  not  a  statement	109	None	replace
147	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write('n');  }  else  {  out.write('m');  }  if(consumed  <  0)  {  out.write(c);  }  else  {  out.write('m');  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	add	                if(consumed        <        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    <    0)    {    out.write('n');    }    else    {    out.write('m');    }    if(consumed  <  0)  {  out.write(c);  }  else  {  out.write('m');  }	  	compilable	  [FE]  ComparisonFailure  	95	13	add
148	[BUG]  [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write('n');  }  else  {  out.write('m');  }  if(consumed  <  0)  {  out.write(c);  }  else  {  out.write('m');  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write('n');  }  else  {  out.write('m');  }  if(consumed  <  0)  {  out.write(c);  }  else  {  out.write('m');  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	                if(consumed        <        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    <    0)    {    out.write('n');    }    else    {    out.write('m');    }    if(consumed  <  0)  {  out.write(c);  }  else  {  out.write('m');  }	  	compilable	  [FE]  ComparisonFailure  	95	13	add
149	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write('n');  }  else  {  out.write('m');  }  if(consumed  <  0)  {  out.write('m');  }  else  {  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	add	                if(consumed        <        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    <    0)    {    out.write('n');    }    else    {    out.write('m');    }    if(consumed  <  0)  {  out.write('m');  }  else  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	95	13	add
150	[BUG]  [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write('n');  }  else  {  out.write('m');  }  if(consumed  <  0)  {  out.write('m');  }  else  {  out.write(c);  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write('n');  }  else  {  out.write('m');  }  if(consumed  <  0)  {  out.write('m');  }  else  {  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	                if(consumed        <        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    <    0)    {    out.write('n');    }    else    {    out.write('m');    }    if(consumed  <  0)  {  out.write('m');  }  else  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	95	13	add
151	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write('n');  }  else  {  out.write('m');  }  if(consumed  <  0)  {  out.write('m');  }  else  {  out.write('m');  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	add	                if(consumed        <        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    <    0)    {    out.write('n');    }    else    {    out.write('m');    }    if(consumed  <  0)  {  out.write('m');  }  else  {  out.write('m');  }	  	compilable	  [FE]  ComparisonFailure  	95	13	add
152	[BUG]  [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write('n');  }  else  {  out.write('m');  }  if(consumed  <  0)  {  out.write('m');  }  else  {  out.write('m');  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write('n');  }  else  {  out.write('m');  }  if(consumed  <  0)  {  out.write('m');  }  else  {  out.write('m');  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	                if(consumed        <        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    <    0)    {    out.write('n');    }    else    {    out.write('m');    }    if(consumed  <  0)  {  out.write('m');  }  else  {  out.write('m');  }	  	compilable	  [FE]  ComparisonFailure  	95	13	add
153	[BUG]  [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write('n');  }  else  {  out.write('m');  }  if(consumed  <  0)  {  out.write(c);  }  else  {  [CE]  'else'  without  'if'  [FE]          ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write('n');  }  else  {  out.write('m');  }  if(consumed  <  0)  {  out.write(c);  }  else  {  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	                if(consumed        <        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    <    0)    {    out.write('n');    }    else    {    out.write('m');    }    if(consumed  <  0)  {  out.write(c);  }  else  {	  	non-compiled	[CE]  'else'  without  'if'	95	None	add
154	[BUG]  [BUGGY]  if(c!=  null)  {  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  pos  +=  Character.charCount(pt);  }  [CE]  'else'  without  'if'  [FE]                ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(c!=  null)  {  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  pos  +=  Character.charCount(pt);  }  [BUGGY]      else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(c!=  null)  {  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  pos  +=  Character.charCount(pt);  }	  if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    consumed;    pt++)    {    pos    +=    Character.charCount(pt);    }    	non-compiled	[CE]  'else'  without  'if'	63	None	replace
155	[BUG]  [BUGGY]  if(c  ==  null)  {  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  pos  +=  Character.charCount(pt);  }  [CE]  'else'  without  'if'  [FE]                  ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(c  ==  null)  {  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  pos  +=  Character.charCount(pt);  }  [BUGGY]      else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(c  ==  null)  {  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  pos  +=  Character.charCount(pt);  }	  if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    consumed;    pt++)    {    pos    +=    Character.charCount(pt);    }    	non-compiled	[CE]  'else'  without  'if'	63	None	replace
156	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write('n');  }  else  {  out.write(c);  }  if(consumed  >  0)  {  out.write(c);  }  else  {  out.write('n');  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	add	                if(consumed        >        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    >    0)    {    out.write('n');    }    else    {    out.write(c);    }    if(consumed  >  0)  {  out.write(c);  }  else  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	22	13	add
157	[BUG]  [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write('n');  }  else  {  out.write(c);  }  if(consumed  >  0)  {  out.write(c);  }  else  {  out.write('n');  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write('n');  }  else  {  out.write(c);  }  if(consumed  >  0)  {  out.write(c);  }  else  {  out.write('n');  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	                if(consumed        >        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    >    0)    {    out.write('n');    }    else    {    out.write(c);    }    if(consumed  >  0)  {  out.write(c);  }  else  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	22	13	add
158	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write('n');  }  else  {  out.write(c);  }  if(consumed  >  0)  {  out.write('n');  }  else  {  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	add	                if(consumed        >        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    >    0)    {    out.write('n');    }    else    {    out.write(c);    }    if(consumed  >  0)  {  out.write('n');  }  else  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	22	13	add
159	[BUG]  [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write('n');  }  else  {  out.write(c);  }  if(consumed  >  0)  {  out.write('n');  }  else  {  out.write(c);  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write('n');  }  else  {  out.write(c);  }  if(consumed  >  0)  {  out.write('n');  }  else  {  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	                if(consumed        >        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    >    0)    {    out.write('n');    }    else    {    out.write(c);    }    if(consumed  >  0)  {  out.write('n');  }  else  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	22	13	add
160	[BUG]  [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write('n');  }  else  {  out.write(c);  }  if(consumed  >  0)  {  out.write(c);  }  else  {  [CE]  'else'  without  'if'  [FE]        ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write('n');  }  else  {  out.write(c);  }  if(consumed  >  0)  {  out.write(c);  }  else  {  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	                if(consumed        >        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    >    0)    {    out.write('n');    }    else    {    out.write(c);    }    if(consumed  >  0)  {  out.write(c);  }  else  {	  	non-compiled	[CE]  'else'  without  'if'	22	None	add
161	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write('n');  }  else  {  out.write(c);  }  if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	add	                if(consumed        >        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    >    0)    {    out.write('n');    }    else    {    out.write(c);    }    if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	22	13	add
162	[BUG]  [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write('n');  }  else  {  out.write(c);  }  if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(c);  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write('n');  }  else  {  out.write(c);  }  if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	                if(consumed        >        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    >    0)    {    out.write('n');    }    else    {    out.write(c);    }    if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	22	13	add
163	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write('n');  }  else  {  out.write('t');  }  if(consumed  >  0)  {  out.write(c);  }  else  {  out.write('t');  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	add	                if(consumed        >        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    >    0)    {    out.write('n');    }    else    {    out.write('t');    }    if(consumed  >  0)  {  out.write(c);  }  else  {  out.write('t');  }	  	compilable	  [FE]  ComparisonFailure  	89	13	add
164	[BUG]  [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write('n');  }  else  {  out.write('t');  }  if(consumed  >  0)  {  out.write(c);  }  else  {  out.write('t');  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write('n');  }  else  {  out.write('t');  }  if(consumed  >  0)  {  out.write(c);  }  else  {  out.write('t');  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	                if(consumed        >        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    >    0)    {    out.write('n');    }    else    {    out.write('t');    }    if(consumed  >  0)  {  out.write(c);  }  else  {  out.write('t');  }	  	compilable	  [FE]  ComparisonFailure  	89	13	add
165	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write('n');  }  else  {  out.write('t');  }  if(consumed  >  0)  {  out.write('t');  }  else  {  out.write('t');  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	add	                if(consumed        >        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    >    0)    {    out.write('n');    }    else    {    out.write('t');    }    if(consumed  >  0)  {  out.write('t');  }  else  {  out.write('t');  }	  	compilable	  [FE]  ComparisonFailure  	89	13	add
166	[BUG]  [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write('n');  }  else  {  out.write('t');  }  if(consumed  >  0)  {  out.write('t');  }  else  {  out.write('t');  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write('n');  }  else  {  out.write('t');  }  if(consumed  >  0)  {  out.write('t');  }  else  {  out.write('t');  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	                if(consumed        >        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    >    0)    {    out.write('n');    }    else    {    out.write('t');    }    if(consumed  >  0)  {  out.write('t');  }  else  {  out.write('t');  }	  	compilable	  [FE]  ComparisonFailure  	89	13	add
167	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write('n');  }  else  {  out.write('t');  }  if(consumed  >  0)  {  out.write('n');  }  else  {  out.write('t');  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	add	                if(consumed        >        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    >    0)    {    out.write('n');    }    else    {    out.write('t');    }    if(consumed  >  0)  {  out.write('n');  }  else  {  out.write('t');  }	  	compilable	  [FE]  ComparisonFailure  	89	13	add
168	[BUG]  [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write('n');  }  else  {  out.write('t');  }  if(consumed  >  0)  {  out.write('n');  }  else  {  out.write('t');  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write('n');  }  else  {  out.write('t');  }  if(consumed  >  0)  {  out.write('n');  }  else  {  out.write('t');  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	                if(consumed        >        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    >    0)    {    out.write('n');    }    else    {    out.write('t');    }    if(consumed  >  0)  {  out.write('n');  }  else  {  out.write('t');  }	  	compilable	  [FE]  ComparisonFailure  	89	13	add
169	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write('n');  }  else  {  out.write('t');  }  if(consumed  >  0)  {  out.write('t');  }  else  {  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	add	                if(consumed        >        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    >    0)    {    out.write('n');    }    else    {    out.write('t');    }    if(consumed  >  0)  {  out.write('t');  }  else  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	89	13	add
170	[BUG]  [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write('n');  }  else  {  out.write('t');  }  if(consumed  >  0)  {  out.write('t');  }  else  {  out.write(c);  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write('n');  }  else  {  out.write('t');  }  if(consumed  >  0)  {  out.write('t');  }  else  {  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	                if(consumed        >        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    >    0)    {    out.write('n');    }    else    {    out.write('t');    }    if(consumed  >  0)  {  out.write('t');  }  else  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	89	13	add
171	[BUG]  [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write('n');  }  else  {  out.write('t');  }  if(consumed  >  0)  {  out.write(c);  }  else  {  [CE]  'else'  without  'if'  [FE]            ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write('n');  }  else  {  out.write('t');  }  if(consumed  >  0)  {  out.write(c);  }  else  {  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	                if(consumed        >        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    >    0)    {    out.write('n');    }    else    {    out.write('t');    }    if(consumed  >  0)  {  out.write(c);  }  else  {	  	non-compiled	[CE]  'else'  without  'if'	89	None	add
172	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write(c);  }  else  {  for(int  pt  =  0;  pt  <  len  -  2;  pt++)  {  pos  +=  Character.charCount(Character.charCount(input,  pos));  }  [CE]  'else'  without  'if'  [FE]          ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  >  0)  {  out.write(c);  }  else  {  for(int  pt  =  0;  pt  <  len  -  2;  pt++)  {  pos  +=  Character.charCount(Character.charCount(input,  pos));  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  >  0)  {  out.write(c);  }  else  {  for(int  pt  =  0;  pt  <  len  -  2;  pt++)  {  pos  +=  Character.charCount(Character.charCount(input,  pos));  }	          out.write(c);    if(consumed    >    0)    {    out.write(c);    }    else    {    for(int    pt    =    0;    pt    <    len    -    2;    pt++)    {    pos    +=    Character.charCount(Character.charCount(input,    pos));    }    	non-compiled	[CE]  'else'  without  'if'	67	None	replace
173	[BUG]  [BUGGY]  if(consumed  <  0)  {  out.write(c);  }  else  {  for(int  pt  =  0;  pt  <  len  -  2;  pt++)  {  pos  +=  Character.charCount(Character.charCount(input,  pos));  }  [CE]  'else'  without  'if'  [FE]            ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  <  0)  {  out.write(c);  }  else  {  for(int  pt  =  0;  pt  <  len  -  2;  pt++)  {  pos  +=  Character.charCount(Character.charCount(input,  pos));  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  <  0)  {  out.write(c);  }  else  {  for(int  pt  =  0;  pt  <  len  -  2;  pt++)  {  pos  +=  Character.charCount(Character.charCount(input,  pos));  }	          out.write(c);    if(consumed    >    0)    {    out.write(c);    }    else    {    for(int    pt    =    0;    pt    <    len    -    2;    pt++)    {    pos    +=    Character.charCount(Character.charCount(input,    pos));    }    	non-compiled	[CE]  'else'  without  'if'	67	None	replace
174	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write(c);  }  else  {  for(int  pt  =  0;  pt  <  len  -  2;  pt++)  {  pos  +=  Character.charCount(Character.charCount(input,  pos));  }  }  [CE]  'else'  without  'if'  [FE]              ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  >  0)  {  out.write(c);  }  else  {  for(int  pt  =  0;  pt  <  len  -  2;  pt++)  {  pos  +=  Character.charCount(Character.charCount(input,  pos));  }  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  >  0)  {  out.write(c);  }  else  {  for(int  pt  =  0;  pt  <  len  -  2;  pt++)  {  pos  +=  Character.charCount(Character.charCount(input,  pos));  }  }	          out.write(c);    if(consumed    >    0)    {    out.write(c);    }    else    {    for(int    pt    =    0;    pt    <    len    -    2;    pt++)    {    pos    +=    Character.charCount(Character.charCount(input,    pos));    }    	non-compiled	[CE]  'else'  without  'if'	67	None	replace
175	[BUG]  [BUGGY]  if(consumed  <  0)  {  if(pos  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  <  0)  {  if(pos  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.  [BUGGY]      else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  <  0)  {  if(pos  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.	  if(pos    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    out.write(c);    }    	non-compiled	[CE]  <identifier>  expected	54	None	replace
176	[BUG]  [BUGGY]  if(consumed  <  0)  {  if(pos  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write  [CE]  not  a  statement  [FE]                ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  <  0)  {  if(pos  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write  [BUGGY]      else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  <  0)  {  if(pos  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write	  if(pos    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    out.write(c);    }    	non-compiled	[CE]  not  a  statement	54	None	replace
177	[BUG]  [BUGGY]  if(consumed  <  0)  {  if(pos  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  <  0)  {  if(pos  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(  [BUGGY]      else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  <  0)  {  if(pos  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(	  if(pos    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
178	[BUG]  [BUGGY]  if(pos  >  0)  {  for(int  c  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  [CE]  'else'  without  'if'  [FE]                      ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(pos  >  0)  {  for(int  c  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(pos  >  0)  {  for(int  c  =  0;  pos  <  len;  pos++)  {  out.write(c);  }	  if(consumed    >    0)    {    for(int    c    =    0;    pos    <    len;    pos++)    {    out.write(c);    }    	non-compiled	[CE]  'else'  without  'if'	37	None	replace
179	[BUG]  [BUGGY]  if(pos  >  0)  {  out.write(c,  0,  consumed);  }  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(pos  >  0)  {  out.write(c,  0,  consumed);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(pos  >  0)  {  out.write(c,  0,  consumed);  }	  if(consumed    >    0)    {    out.write(c,    0,    consumed);    }    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
180	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write(c,  0,  len);  }  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  >  0)  {  out.write(c,  0,  len);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  >  0)  {  out.write(c,  0,  len);  }	  if(consumed    >    0)    {    out.write(c,    0,    consumed);    }    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
181	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write(c);  }  else  {  for(pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.charCount(input,  pos));  out.write(  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  >  0)  {  out.write(c);  }  else  {  for(pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.charCount(input,  pos));  out.write(  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  >  0)  {  out.write(c);  }  else  {  for(pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.charCount(input,  pos));  out.write(	  if(consumed    >    0)    {    out.write(c);    }    else    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    Character.toChars(Character.charCount(input,    pos));    out.write(    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
182	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write(c);  }  else  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.charCount(input,  pos));  out.write  [CE]  not  a  statement  [FE]            ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  >  0)  {  out.write(c);  }  else  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.charCount(input,  pos));  out.write  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  >  0)  {  out.write(c);  }  else  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.charCount(input,  pos));  out.write	  if(consumed    >    0)    {    out.write(c);    }    else    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    Character.toChars(Character.charCount(input,    pos));    out.write(    	non-compiled	[CE]  not  a  statement	110	None	replace
183	[BUG]  [BUGGY]  if(consumed  <  0)  {  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars();  out.write(c);  }  [CE]  'else'  without  'if'  [FE]            ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  <  0)  {  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars();  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  <  0)  {  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars();  out.write(c);  }	  if(pos    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    input.toChars();    out.write(c);    }    	non-compiled	[CE]  'else'  without  'if'	1	None	replace
184	[BUG]  [BUGGY]  if(consumed  >=  0)  {  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars();  out.write(c);  }  [CE]  'else'  without  'if'  [FE]              ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  >=  0)  {  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars();  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  >=  0)  {  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars();  out.write(c);  }	  if(pos    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    input.toChars();    out.write(c);    }    	non-compiled	[CE]  'else'  without  'if'	1	None	replace
185	[BUG]  [BUGGY]  if(consumed  <  0)  {  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c  =  input.toChars();  out.write(c);  }  [CE]  'else'  without  'if'  [FE]                ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  <  0)  {  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c  =  input.toChars();  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  <  0)  {  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  c  =  input.toChars();  out.write(c);  }	  if(pos    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    input.toChars();    out.write(c);    }    	non-compiled	[CE]  'else'  without  'if'	1	None	replace
186	[BUG]  [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(conumed,  pos));  [CE]  'else'  without  'if'  [FE]                  ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(conumed,  pos));  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	pos  +=  Character.charCount(Character.codePointAt(conumed,  pos));	  pos    +=    Character.charCount(Character.codePointAt(pos,    pos));    	non-compiled	[CE]  'else'  without  'if'	58	None	replace
187	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          out.write(c);    out.write(c);  out.write(c);  out.write(c);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	add	                out.write(c);        out.write(c);    out.write(c);  out.write(c);	  	compilable	  [FE]  ComparisonFailure  	45	13	add
188	[BUG]  [BUGGY]          out.write(c);    out.write(c);  out.write(c);  out.write(c);  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          out.write(c);    out.write(c);  out.write(c);  out.write(c);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	                out.write(c);        out.write(c);    out.write(c);  out.write(c);	  	compilable	  [FE]  ComparisonFailure  	45	13	add
189	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          out.write(c);    out.write(c);  if(consumed  >  0)  {  out.write(c);  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	add	                out.write(c);        out.write(c);    if(consumed  >  0)  {  out.write(c);  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	45	13	add
190	[BUG]  [BUGGY]          out.write(c);    out.write(c);  if(consumed  >  0)  {  out.write(c);  out.write(c);  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          out.write(c);    out.write(c);  if(consumed  >  0)  {  out.write(c);  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	                out.write(c);        out.write(c);    if(consumed  >  0)  {  out.write(c);  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	45	13	add
191	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          out.write(c);    out.write(c);  if(consumed  <  0)  {  out.write(c);  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	add	                out.write(c);        out.write(c);    if(consumed  <  0)  {  out.write(c);  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	45	13	add
192	[BUG]  [BUGGY]          out.write(c);    out.write(c);  if(consumed  <  0)  {  out.write(c);  out.write(c);  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          out.write(c);    out.write(c);  if(consumed  <  0)  {  out.write(c);  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	                out.write(c);        out.write(c);    if(consumed  <  0)  {  out.write(c);  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	45	13	add
193	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          out.write(c);    out.write(c);  out.write(c);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	add	                out.write(c);        out.write(c);    out.write(c);	  	compilable	  [FE]  ComparisonFailure  	45	13	add
194	[BUG]  [BUGGY]          out.write(c);    out.write(c);  out.write(c);  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          out.write(c);    out.write(c);  out.write(c);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	                out.write(c);        out.write(c);    out.write(c);	  	compilable	  [FE]  ComparisonFailure  	45	13	add
195	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          out.write(c);    out.write(c);  if(c!=  null)  {  out.write(c);  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	add	                out.write(c);        out.write(c);    if(c!=  null)  {  out.write(c);  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	45	13	add
196	[BUG]  [BUGGY]          out.write(c);    out.write(c);  if(c!=  null)  {  out.write(c);  out.write(c);  }  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          out.write(c);    out.write(c);  if(c!=  null)  {  out.write(c);  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	                out.write(c);        out.write(c);    if(c!=  null)  {  out.write(c);  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	45	13	add
197	[BUG]  [BUGGY]  'else'  without  'if'  [CE]  unclosed  character  literal  [FE]            ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  'else'  without  'if'  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	'else'  without  'if'	          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed    >    0)    {    out.write(c);    }    else    {    	non-compiled	[CE]  unclosed  character  literal	10	None	replace
198	[BUG]  [BUGGY]  if(consumed  <  0  ||  c  ==  'e')  {  [CE]  'else'  without  'if'  [FE]              ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  <  0  ||  c  ==  'e')  {  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  <  0  ||  c  ==  'e')  {	          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed    >    0)    {    out.write(c);    }    else    {    	non-compiled	[CE]  'else'  without  'if'	10	None	replace
199	[BUG]  [BUGGY]  if(consumed  <  =  0  ||  c  ==  'e')  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  <  =  0  ||  c  ==  'e')  {  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  <  =  0  ||  c  ==  'e')  {	          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed    >    0)    {    out.write(c);    }    else    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
200	[BUG]  [BUGGY]  if(consumed  <  0  ||  c  ==  'else')  {  [CE]  unclosed  character  literal  [FE]                  ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  <  0  ||  c  ==  'else')  {  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  <  0  ||  c  ==  'else')  {	          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed    >    0)    {    out.write(c);    }    else    {    	non-compiled	[CE]  unclosed  character  literal	10	None	replace
201	[BUG]  [BUGGY]  if(consumed  <  0  ||  c  ==  ';')  {  if(consumed  >  0)  {  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  <  0  ||  c  ==  ';')  {  if(consumed  >  0)  {  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  <  0  ||  c  ==  ';')  {  if(consumed  >  0)  {  out.write(c);  }	          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write(c);    }    If(consumed    >    0)    {    out.write(c);    }    else    {    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
202	[BUG]  [BUGGY]  if(consumed  <  0  ||  c.length()  ==  0)  {  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  <  0  ||  c.length()  ==  0)  {  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  <  0  ||  c.length()  ==  0)  {  out.write(c);  }	  if(consumed    <    0)    {    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
203	[BUG]  [BUGGY]  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [CE]  'else'  without  'if'  [FE]            ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [BUGGY]      else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }	  if(consume    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  'else'  without  'if'	82	None	replace
204	[BUG]  [BUGGY]  if(consumed  <  0)  {  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [CE]  'else'  without  'if'  [FE]              ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  <  0)  {  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [BUGGY]      else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  <  0)  {  if(pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }	  if(consume    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  'else'  without  'if'	82	None	replace
205	[BUG]  [BUGGY]  if(consumed  <  0)  {  if(pos  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pt,  pos));  }  [CE]  'else'  without  'if'  [FE]                ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  <  0)  {  if(pos  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pt,  pos));  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  <  0)  {  if(pos  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pt,  pos));  }	  if(pos    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    pos    +=    Character.charCount(Character.codePointAt(pt,    pos));    }    	non-compiled	[CE]  'else'  without  'if'	33	None	replace
206	[BUG]  [BUGGY]  if(consumed  <  0)  {  if(pos  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pt,  pos));  }  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  <  0)  {  if(pos  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pt,  pos));  }  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  <  0)  {  if(pos  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pt,  pos));  }  }	  if(pos    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    pos    +=    Character.charCount(Character.codePointAt(pt,    pos));    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
207	[BUG]  [BUGGY]  if(consumed  <  0)  {  for(pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [CE]  'else'  without  'if'  [FE]              ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  <  0)  {  for(pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [BUGGY]      else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  <  0)  {  for(pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }	  if(consumed    >    0)    {    for(pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  'else'  without  'if'	56	None	replace
208	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(pos  =  0;  pos  <  len;  pos++)  {  c  =  input.toChars(pos);  out.write(c);  }  [CE]  'else'  without  'if'  [FE]                ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  >  0)  {  for(pos  =  0;  pos  <  len;  pos++)  {  c  =  input.toChars(pos);  out.write(c);  }  [BUGGY]      else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  >  0)  {  for(pos  =  0;  pos  <  len;  pos++)  {  c  =  input.toChars(pos);  out.write(c);  }	  if(consumed    >    0)    {    for(pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  'else'  without  'if'	56	None	replace
209	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write(c);  }  else  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pt,  pos));  }  [CE]  'else'  without  'if'  [FE]              ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  >  0)  {  out.write(c);  }  else  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pt,  pos));  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  >  0)  {  out.write(c);  }  else  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pt,  pos));  }	          out.write(c);    if(consumed    >    0)    {    out.write(c);    }    else    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    pos    +=    Character.charCount(Character.codePointAt(pt,    pos));    }    	non-compiled	[CE]  'else'  without  'if'	69	None	replace
210	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write(c);  }  else  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pt,  pos));  }  }  [CE]  'else'  without  'if'  [FE]                ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  >  0)  {  out.write(c);  }  else  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pt,  pos));  }  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  >  0)  {  out.write(c);  }  else  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pt,  pos));  }  }	          out.write(c);    if(consumed    >    0)    {    out.write(c);    }    else    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    pos    +=    Character.charCount(Character.codePointAt(pt,    pos));    }    	non-compiled	[CE]  'else'  without  'if'	69	None	replace
211	[BUG]  [BUGGY]  out.write(c  +  2);  [CE]  'else'  without  'if'  [FE]        ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  out.write(c  +  2);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	out.write(c  +  2);	  out.write(c    +    1);    	non-compiled	[CE]  'else'  without  'if'	71	None	replace
212	[BUG]  [BUGGY]  if(consumed  <  0  ||  c.length()  ==  pos)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  [CE]  'else'  without  'if'  [FE]                  ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  <  0  ||  c.length()  ==  pos)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  <  0  ||  c.length()  ==  pos)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }	  if(consumed    <    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    out.write(c);    }    	non-compiled	[CE]  'else'  without  'if'	35	None	replace
213	[BUG]  [BUGGY]  if(consumed  <  0)  {  for(int  c  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  [CE]  'else'  without  'if'  [FE]                    ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  <  0)  {  for(int  c  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  <  0)  {  for(int  c  =  0;  pos  <  len;  pos++)  {  out.write(c);  }	  if(consumed    <    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    out.write(c);    }    	non-compiled	[CE]  'else'  without  'if'	35	None	replace
214	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write('n');  }  else  {  out.write(c);  }  if(consumed  <  0)  {  out.write(c);  }  else  {  out.write('n');  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	add	                if(consumed        <        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    <    0)    {    out.write('n');    }    else    {    out.write(c);    }    if(consumed  <  0)  {  out.write(c);  }  else  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	29	13	add
215	[BUG]  [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write('n');  }  else  {  out.write(c);  }  if(consumed  <  0)  {  out.write(c);  }  else  {  out.write('n');  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write('n');  }  else  {  out.write(c);  }  if(consumed  <  0)  {  out.write(c);  }  else  {  out.write('n');  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	                if(consumed        <        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    <    0)    {    out.write('n');    }    else    {    out.write(c);    }    if(consumed  <  0)  {  out.write(c);  }  else  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	29	13	add
216	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write('n');  }  else  {  out.write(c);  }  if(consumed  <  0)  {  out.write('n');  }  else  {  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	add	                if(consumed        <        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    <    0)    {    out.write('n');    }    else    {    out.write(c);    }    if(consumed  <  0)  {  out.write('n');  }  else  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	29	13	add
217	[BUG]  [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write('n');  }  else  {  out.write(c);  }  if(consumed  <  0)  {  out.write('n');  }  else  {  out.write(c);  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write('n');  }  else  {  out.write(c);  }  if(consumed  <  0)  {  out.write('n');  }  else  {  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	                if(consumed        <        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    <    0)    {    out.write('n');    }    else    {    out.write(c);    }    if(consumed  <  0)  {  out.write('n');  }  else  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	29	13	add
218	[BUG]  [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write('n');  }  else  {  out.write(c);  }  if(consumed  <  0)  {  out.write(c);  }  else  {  [CE]  'else'  without  'if'  [FE]        ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write('n');  }  else  {  out.write(c);  }  if(consumed  <  0)  {  out.write(c);  }  else  {  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	                if(consumed        <        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    <    0)    {    out.write('n');    }    else    {    out.write(c);    }    if(consumed  <  0)  {  out.write(c);  }  else  {	  	non-compiled	[CE]  'else'  without  'if'	29	None	add
219	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write('n');  }  else  {  out.write(c);  }  if(consumed  <  0)  {  out.write(c);  }  else  {  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	add	                if(consumed        <        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    <    0)    {    out.write('n');    }    else    {    out.write(c);    }    if(consumed  <  0)  {  out.write(c);  }  else  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	29	13	add
220	[BUG]  [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write('n');  }  else  {  out.write(c);  }  if(consumed  <  0)  {  out.write(c);  }  else  {  out.write(c);  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write('n');  }  else  {  out.write(c);  }  if(consumed  <  0)  {  out.write(c);  }  else  {  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	                if(consumed        <        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    <    0)    {    out.write('n');    }    else    {    out.write(c);    }    if(consumed  <  0)  {  out.write(c);  }  else  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	29	13	add
221	[BUG]  [BUGGY]  pos  >  0)  {  for(int  pos  =  0;  pos  <  consumed;  pos++)  {  out.write(c);  }  [CE]  not  a  statement  [FE]                  ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  pos  >  0)  {  for(int  pos  =  0;  pos  <  consumed;  pos++)  {  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	pos  >  0)  {  for(int  pos  =  0;  pos  <  consumed;  pos++)  {  out.write(c);  }	  pos    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    out.write(c);    }    	non-compiled	[CE]  not  a  statement	83	None	replace
222	[BUG]  [BUGGY]  int  pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  int  pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	int  pos  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }	  pos    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    out.write(c);    }    	non-compiled	[CE]  ';'  expected	83	None	replace
223	[BUG]  [BUGGY]  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pos,  p));  }  [CE]  'else'  without  'if'  [FE]                ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pos,  p));  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pos,  p));  }	  if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    pos    +=    Character.charCount(Character.codePointAt(pos,    p));    }    	non-compiled	[CE]  'else'  without  'if'	64	None	replace
224	[BUG]  [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(pos,  p));  [CE]  'else'  without  'if'  [FE]                  ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(pos,  p));  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	pos  +=  Character.charCount(Character.codePointAt(pos,  p));	  if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    pos    +=    Character.charCount(Character.codePointAt(pos,    p));    }    	non-compiled	[CE]  'else'  without  'if'	64	None	replace
225	[BUG]  [BUGGY]  if(consumed  <  0  ||  c  ==  '-')  {  if(consumed  >  0)  {  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  <  0  ||  c  ==  '-')  {  if(consumed  >  0)  {  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  <  0  ||  c  ==  '-')  {  if(consumed  >  0)  {  out.write(c);  }	          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed    >    0)    {    out.write(c;    }    else    {    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
226	[BUG]  [BUGGY]  if(consumed  <  0)  {  if(pos  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(c[pos]);  }  [CE]  'else'  without  'if'  [FE]                    ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  <  0)  {  if(pos  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(c[pos]);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  <  0)  {  if(pos  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(c[pos]);  }	  if(pos    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    pos    +=    Character.charCount(c[pos]);    }    	non-compiled	[CE]  'else'  without  'if'	14	None	replace
227	[BUG]  [BUGGY]  if(consumed  <  =  0)  {  if(pos  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(c[pos]);  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  <  =  0)  {  if(pos  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(c[pos]);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  <  =  0)  {  if(pos  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(c[pos]);  }	  if(pos    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    pos    +=    Character.charCount(c[pos]);    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
228	[BUG]  [BUGGY]  if(consumed  <  0  ||  c  ==  'e')  {  if(consumed  <  0)  {  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  <  0  ||  c  ==  'e')  {  if(consumed  <  0)  {  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  <  0  ||  c  ==  'e')  {  if(consumed  <  0)  {  out.write(c);  }	          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write(c);    }    while(consumed    <    0)    {    out.write(c);    }    else    {    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
229	[BUG]  [BUGGY]  if(consumed  <  =  0)  {  if(consumed  <  0)  {  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  <  =  0)  {  if(consumed  <  0)  {  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  <  =  0)  {  if(consumed  <  0)  {  out.write(c);  }	          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write(c);    }    while(consumed    <    0)    {    out.write(c);    }    else    {    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
230	[BUG]  [BUGGY]  if(consumed  <  0)  {  out.write(c);  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(c);  }  [CE]  'else'  without  'if'  [FE]            ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  <  0)  {  out.write(c);  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(c);  }  [BUGGY]      else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  <  0)  {  out.write(c);  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(c);  }	  if(consumed    >    0)    {    out.write(c);    for(int    pt    =    0;    pt    <    len;    pt++)    {    pos    +=    Character.charCount(c);    }    	non-compiled	[CE]  'else'  without  'if'	77	None	replace
231	[BUG]  [BUGGY]  out.write(c);  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(c);  }  [CE]  'else'  without  'if'  [FE]              ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  out.write(c);  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(c);  }  [BUGGY]      else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	out.write(c);  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(c);  }	  if(consumed    >    0)    {    out.write(c);    for(int    pt    =    0;    pt    <    len;    pt++)    {    pos    +=    Character.charCount(c);    }    	non-compiled	[CE]  'else'  without  'if'	77	None	replace
232	[BUG]  [BUGGY]  if(consumed  <  0)  {  out.write(c);  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  input.toChars();  out.write(  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  <  0)  {  out.write(c);  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  input.toChars();  out.write(  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  <  0)  {  out.write(c);  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  input.toChars();  out.write(	          out.write(c);    if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    input.toChars();    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
233	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write(c);  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  input.toChars();  out.write(c);  }  [CE]  'else'  without  'if'  [FE]            ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  >  0)  {  out.write(c);  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  input.toChars();  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  >  0)  {  out.write(c);  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  input.toChars();  out.write(c);  }	          out.write(c);    if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    input.toChars();    out.write(c);    }    	non-compiled	[CE]  'else'  without  'if'	121	None	replace
234	[BUG]  [BUGGY]  if(consumed  <  0)  {  out.write(c);  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  input.toChars();  out.write  [CE]  not  a  statement  [FE]              ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  <  0)  {  out.write(c);  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  input.toChars();  out.write  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  <  0)  {  out.write(c);  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  input.toChars();  out.write	          out.write(c);    if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    input.toChars();    out.write(c);    }    	non-compiled	[CE]  not  a  statement	121	None	replace
235	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write(c);  }  else  {  out.write('n');  }  if(consumed  >  0)  {  out.write(c);  }  else  {  out.write('n');  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	add	                if(consumed        >        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write(c);  }  else  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	18	13	add
236	[BUG]  [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write(c);  }  else  {  out.write('n');  }  if(consumed  >  0)  {  out.write(c);  }  else  {  out.write('n');  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write(c);  }  else  {  out.write('n');  }  if(consumed  >  0)  {  out.write(c);  }  else  {  out.write('n');  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	                if(consumed        >        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write(c);  }  else  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	18	13	add
237	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write(c);  }  else  {  out.write('n');  }  if(consumed  >  0)  {  out.write('n');  }  else  {  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	add	                if(consumed        >        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write('n');  }  else  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	18	13	add
238	[BUG]  [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write(c);  }  else  {  out.write('n');  }  if(consumed  >  0)  {  out.write('n');  }  else  {  out.write(c);  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write(c);  }  else  {  out.write('n');  }  if(consumed  >  0)  {  out.write('n');  }  else  {  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	                if(consumed        >        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write('n');  }  else  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	18	13	add
239	[BUG]  [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write(c);  }  else  {  out.write('n');  }  if(consumed  >  0)  {  out.write(c);  }  else  {  [CE]  'else'  without  'if'  [FE]        ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write(c);  }  else  {  out.write('n');  }  if(consumed  >  0)  {  out.write(c);  }  else  {  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	                if(consumed        >        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write(c);  }  else  {	  	non-compiled	[CE]  'else'  without  'if'	18	None	add
240	[BUG]  [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write(c);  }  else  {  out.write('n');  }  if(conumed  >  0)  {  out.write(c);  }  else  {  out.write('n');  }  [CE]  cannot  find  symbol  conumed  [FE]          ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write(c);  }  else  {  out.write('n');  }  if(conumed  >  0)  {  out.write(c);  }  else  {  out.write('n');  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	                if(consumed        >        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(conumed  >  0)  {  out.write(c);  }  else  {  out.write('n');  }	  	non-compiled	[CE]  cannot  find  symbol  conumed	18	None	add
241	[BUG]  [BUGGY]  if(consumed  >  0  ||  c.charAt(pos  +  1)!=  '-')  {  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  >  0  ||  c.charAt(pos  +  1)!=  '-')  {  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  >  0  ||  c.charAt(pos  +  1)!=  '-')  {  out.write(c);  }	  if(consumed    >    0)    {    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
242	[BUG]  [BUGGY]  pos  +=  Character.charCount(c,  consumed);  [CE]  'else'  without  'if'  [FE]                    ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  pos  +=  Character.charCount(c,  consumed);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	pos  +=  Character.charCount(c,  consumed);	  pos    +=    Character.charCount(c[pos]);    	non-compiled	[CE]  'else'  without  'if'	78	None	replace
243	[BUG]  [BUGGY]  pos  +=  Character.charCount(c);  [CE]  'else'  without  'if'  [FE]                      ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  pos  +=  Character.charCount(c);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	pos  +=  Character.charCount(c);	  pos    +=    Character.charCount(c[pos]);    	non-compiled	[CE]  'else'  without  'if'	78	None	replace
244	[BUG]  [BUGGY]  pos  +=  Character.charCount(c,  out.write(pos));  [CE]  'else'  without  'if'  [FE]                        ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  pos  +=  Character.charCount(c,  out.write(pos));  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	pos  +=  Character.charCount(c,  out.write(pos));	  pos    +=    Character.charCount(c[pos]);    	non-compiled	[CE]  'else'  without  'if'	78	None	replace
245	[BUG]  [BUGGY]  pos  <  =  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CE]  illegal  start  of  type  [FE]            ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  pos  <  =  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [BUGGY]      else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	pos  <  =  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }	  if(consumed    <    =    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
246	[BUG]  [BUGGY]  if(pos  <  len)  {  if(consumed  <  =  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(pos  <  len)  {  if(consumed  <  =  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.  [BUGGY]      else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(pos  <  len)  {  if(consumed  <  =  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.	  if(consumed    <    =    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
247	[BUG]  [BUGGY]  if(pos  <  len)  {  if(consumed  <  =  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(pos  <  len)  {  if(consumed  <  =  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write  [BUGGY]      else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(pos  <  len)  {  if(consumed  <  =  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write	  if(consumed    <    =    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
248	[BUG]  [BUGGY]  if(consumed  <  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(c);  }  [CE]  'else'  without  'if'  [FE]              ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  <  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(c);  }  [BUGGY]      else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  <  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(c);  }	  if(c!=    null)    {    if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    pos    +=    Character.charCount(c);    }    	non-compiled	[CE]  'else'  without  'if'	52	None	replace
249	[BUG]  [BUGGY]  if(consumed  <  =  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(c);  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  <  =  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(c);  }  [BUGGY]      else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  <  =  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(c);  }	  if(c!=    null)    {    if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    pos    +=    Character.charCount(c);    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
250	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write(c);  }  else  {  for(int  pt  =  0;  pt  <  len  -  2;  pt++)  {  pos  +=  Character.charCount(pt);  }  [CE]  'else'  without  'if'  [FE]            ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  >  0)  {  out.write(c);  }  else  {  for(int  pt  =  0;  pt  <  len  -  2;  pt++)  {  pos  +=  Character.charCount(pt);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  >  0)  {  out.write(c);  }  else  {  for(int  pt  =  0;  pt  <  len  -  2;  pt++)  {  pos  +=  Character.charCount(pt);  }	          out.write(c);    if(consumed    >    0)    {    out.write(c);    }    else    {    for(int    pt    =    0;    pt    <    len    -    2;    pt++)    {    pos    +=    Character.charCount(pt);    }    	non-compiled	[CE]  'else'  without  'if'	68	None	replace
251	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write(c);  }  else  {  for(int  pt  =  0;  pt  <  len  -  2;  pt++)  {  pos  +=  Character.charCount(pt);  }  }  [CE]  'else'  without  'if'  [FE]              ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  >  0)  {  out.write(c);  }  else  {  for(int  pt  =  0;  pt  <  len  -  2;  pt++)  {  pos  +=  Character.charCount(pt);  }  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  >  0)  {  out.write(c);  }  else  {  for(int  pt  =  0;  pt  <  len  -  2;  pt++)  {  pos  +=  Character.charCount(pt);  }  }	          out.write(c);    if(consumed    >    0)    {    out.write(c);    }    else    {    for(int    pt    =    0;    pt    <    len    -    2;    pt++)    {    pos    +=    Character.charCount(pt);    }    	non-compiled	[CE]  'else'  without  'if'	68	None	replace
252	[BUG]  [BUGGY]  if(consumed  <  0)  {  out.write(c);  }  else  {  for(int  pt  =  0;  pt  <  len  -  2;  pt++)  {  pos  +=  Character.charCount(pt);  }  [CE]  'else'  without  'if'  [FE]                ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  <  0)  {  out.write(c);  }  else  {  for(int  pt  =  0;  pt  <  len  -  2;  pt++)  {  pos  +=  Character.charCount(pt);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  <  0)  {  out.write(c);  }  else  {  for(int  pt  =  0;  pt  <  len  -  2;  pt++)  {  pos  +=  Character.charCount(pt);  }	          out.write(c);    if(consumed    >    0)    {    out.write(c);    }    else    {    for(int    pt    =    0;    pt    <    len    -    2;    pt++)    {    pos    +=    Character.charCount(pt);    }    	non-compiled	[CE]  'else'  without  'if'	68	None	replace
253	[BUG]  [BUGGY]  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  pos  +=  Character.charCount(pt);  }  [CE]  'else'  without  'if'  [FE]              ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  pos  +=  Character.charCount(pt);  }  [BUGGY]      else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  pos  +=  Character.charCount(pt);  }	  if(consumed    <    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    pos    +=    Character.charCount(pt);    }    	non-compiled	[CE]  'else'  without  'if'	62	None	replace
254	[BUG]  [BUGGY]  if(pos  <  =  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(c[pos]);  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(pos  <  =  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(c[pos]);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(pos  <  =  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(c[pos]);  }	  if(consumed    <    =    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    pos    +=    Character.charCount(c[pos]);    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
255	[BUG]  [BUGGY]  pos  <  =  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(c[pos]);  }  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  pos  <  =  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(c[pos]);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	pos  <  =  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(c[pos]);  }	  if(consumed    <    =    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    pos    +=    Character.charCount(c[pos]);    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
256	[BUG]  [BUGGY]  if(c!=  null)  {  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  pos  +=  Character.charCount(c);  }  [CE]  'else'  without  'if'  [FE]            ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(c!=  null)  {  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  pos  +=  Character.charCount(c);  }  [BUGGY]      else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(c!=  null)  {  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  pos  +=  Character.charCount(c);  }	  if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    consumed;    pt++)    {    pos    +=    Character.charCount(c);    }    	non-compiled	[CE]  'else'  without  'if'	108	None	replace
257	[BUG]  [BUGGY]  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  pos  +=  Character.charCount(c);  }  [CE]  'else'  without  'if'  [FE]              ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  pos  +=  Character.charCount(c);  }  [BUGGY]      else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  pos  +=  Character.charCount(c);  }	  if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    consumed;    pt++)    {    pos    +=    Character.charCount(c);    }    	non-compiled	[CE]  'else'  without  'if'	108	None	replace
258	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write(c);  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  >  0)  {  out.write(c);  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  >  0)  {  out.write(c);  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }	          out.write(c);    char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    out.write(c);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
259	[BUG]  [BUGGY]  if(consumed  <  0)  {  out.write(c);  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  <  0)  {  out.write(c);  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  <  0)  {  out.write(c);  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }	          out.write(c);    char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    out.write(c);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
260	[BUG]  [BUGGY]  if(consumed  <  0)  {  out.write(c);  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {  out.write(pos);  }  [CE]  'else'  without  'if'  [FE]                ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  <  0)  {  out.write(c);  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {  out.write(pos);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  <  0)  {  out.write(c);  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {  out.write(pos);  }	          out.write(c);    char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    out.write(c);    	non-compiled	[CE]  'else'  without  'if'	48	None	replace
261	[BUG]  [BUGGY]  if(consumed  <  =  0)  {  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  <  =  0)  {  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  <  =  0)  {  out.write(c);  }	          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed    <    =    0)    {    out.write(c);    }    else    {    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
262	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write('n');  }  else  {  out.write('m');  }  if(consumed  >  0)  {  out.write('m');  }  else  {  out.write('f');  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	add	                if(consumed        >        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    >    0)    {    out.write('n');    }    else    {    out.write('m');    }    if(consumed  >  0)  {  out.write('m');  }  else  {  out.write('f');  }	  	compilable	  [FE]  ComparisonFailure  	91	13	add
263	[BUG]  [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write('n');  }  else  {  out.write('m');  }  if(consumed  >  0)  {  out.write('m');  }  else  {  out.write('f');  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write('n');  }  else  {  out.write('m');  }  if(consumed  >  0)  {  out.write('m');  }  else  {  out.write('f');  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	                if(consumed        >        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    >    0)    {    out.write('n');    }    else    {    out.write('m');    }    if(consumed  >  0)  {  out.write('m');  }  else  {  out.write('f');  }	  	compilable	  [FE]  ComparisonFailure  	91	13	add
264	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write('n');  }  else  {  out.write('m');  }  if(consumed  <  0)  {  out.write(c);  }  else  {  out.write('m');  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	add	                if(consumed        >        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    >    0)    {    out.write('n');    }    else    {    out.write('m');    }    if(consumed  <  0)  {  out.write(c);  }  else  {  out.write('m');  }	  	compilable	  [FE]  ComparisonFailure  	91	13	add
265	[BUG]  [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write('n');  }  else  {  out.write('m');  }  if(consumed  <  0)  {  out.write(c);  }  else  {  out.write('m');  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write('n');  }  else  {  out.write('m');  }  if(consumed  <  0)  {  out.write(c);  }  else  {  out.write('m');  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	                if(consumed        >        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    >    0)    {    out.write('n');    }    else    {    out.write('m');    }    if(consumed  <  0)  {  out.write(c);  }  else  {  out.write('m');  }	  	compilable	  [FE]  ComparisonFailure  	91	13	add
266	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write(c);  }  else  {  for(int  pos  =  0;  pt  <  len  -  2;  pt++)  {  pos  +=  Character.charCount(Character.charCount(input,  pos));  }  [CE]  'else'  without  'if'  [FE]          ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  >  0)  {  out.write(c);  }  else  {  for(int  pos  =  0;  pt  <  len  -  2;  pt++)  {  pos  +=  Character.charCount(Character.charCount(input,  pos));  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  >  0)  {  out.write(c);  }  else  {  for(int  pos  =  0;  pt  <  len  -  2;  pt++)  {  pos  +=  Character.charCount(Character.charCount(input,  pos));  }	          out.write(c);    if(consumed    >    0)    {    out.write(c);    }    else    {    for(int    pt    =    0;    pt    <    len    -    2;    pt++)    {    pos    +=    Character.charCount(Character.charCount(input,    pos));    }    	non-compiled	[CE]  'else'  without  'if'	67	None	replace
267	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pos,  out));  }  [CE]  'else'  without  'if'  [FE]                ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pos,  out));  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pos,  out));  }	  if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    pos    +=    Character.charCount(Character.codePointAt(pos,    p));    }    	non-compiled	[CE]  'else'  without  'if'	64	None	replace
268	[BUG]  [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(pos,  out));  [CE]  'else'  without  'if'  [FE]                  ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(pos,  out));  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	pos  +=  Character.charCount(Character.codePointAt(pos,  out));	  if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    pos    +=    Character.charCount(Character.codePointAt(pos,    p));    }    	non-compiled	[CE]  'else'  without  'if'	64	None	replace
269	[BUG]  [BUGGY]  if(consumed  ==  0)  {  for(int  pt  =  0;  pt  <  len  -  2;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  [CE]  'else'  without  'if'  [FE]                ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  ==  0)  {  for(int  pt  =  0;  pt  <  len  -  2;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  [BUGGY]      else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  ==  0)  {  for(int  pt  =  0;  pt  <  len  -  2;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }	  if(consumed    <    0)    {    for(int    pt    =    0;    pt    <    len    -    2;    pt++)    {    pos    +=    Character.charCount(Character.codePointAt(input,    pos));    }    	non-compiled	[CE]  'else'  without  'if'	3	None	replace
270	[BUG]  [BUGGY]  out.write('n');  [CE]  'else'  without  'if'  [FE]    ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  out.write('n');  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	out.write('n');	          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    	non-compiled	[CE]  'else'  without  'if'	19	None	replace
271	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  output.toChars();  out.write(c);  }  [CE]  'else'  without  'if'  [FE]            ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  output.toChars();  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  output.toChars();  out.write(c);  }	  if(pos    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    input.toChars();    out.write(c);    }    	non-compiled	[CE]  'else'  without  'if'	1	None	replace
272	[BUG]  [BUGGY]  if(consumed  >=  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [CE]  'else'  without  'if'  [FE]            ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  >=  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [BUGGY]      else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  >=  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }	  if(consumed    <    =    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  'else'  without  'if'	103	None	replace
273	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write('n');  }  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  >  0)  {  out.write('n');  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  >  0)  {  out.write('n');  }	          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed    >    0)    {    out.write('n');    }    else    {    out.write('n');    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
274	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(c);  }  if(consumed  >  0)  {  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	add	                if(consumed        >        0)        {        out.write(c);        }        else        {        out.write(c);        }        if(consumed    >    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed  >  0)  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	7	13	add
275	[BUG]  [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(c);  }  if(consumed  >  0)  {  out.write(c);  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(c);  }  if(consumed  >  0)  {  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	                if(consumed        >        0)        {        out.write(c);        }        else        {        out.write(c);        }        if(consumed    >    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed  >  0)  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	7	13	add
276	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(c);  }  if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(len);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	add	                if(consumed        >        0)        {        out.write(c);        }        else        {        out.write(c);        }        if(consumed    >    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(len);  }	  	compilable	  [FE]  ComparisonFailure  	7	13	add
277	[BUG]  [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(c);  }  if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(len);  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(c);  }  if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(len);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	                if(consumed        >        0)        {        out.write(c);        }        else        {        out.write(c);        }        if(consumed    >    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(len);  }	  	compilable	  [FE]  ComparisonFailure  	7	13	add
278	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(len);  }  if(consumed  <  0)  {  out.write(c);  }  else  {  out.write(len);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	add	                if(consumed        >        0)        {        out.write(c);        }        else        {        out.write(c);        }        if(consumed    >    0)    {    out.write(c);    }    else    {    out.write(len);    }    if(consumed  <  0)  {  out.write(c);  }  else  {  out.write(len);  }	  	compilable	  [FE]  ComparisonFailure  	72	13	add
279	[BUG]  [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(len);  }  if(consumed  <  0)  {  out.write(c);  }  else  {  out.write(len);  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(len);  }  if(consumed  <  0)  {  out.write(c);  }  else  {  out.write(len);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	                if(consumed        >        0)        {        out.write(c);        }        else        {        out.write(c);        }        if(consumed    >    0)    {    out.write(c);    }    else    {    out.write(len);    }    if(consumed  <  0)  {  out.write(c);  }  else  {  out.write(len);  }	  	compilable	  [FE]  ComparisonFailure  	72	13	add
280	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(len);  }  if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(len  +  len);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	add	                if(consumed        >        0)        {        out.write(c);        }        else        {        out.write(c);        }        if(consumed    >    0)    {    out.write(c);    }    else    {    out.write(len);    }    if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(len  +  len);  }	  	compilable	  [FE]  ComparisonFailure  	72	13	add
281	[BUG]  [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(len);  }  if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(len  +  len);  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(len);  }  if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(len  +  len);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	                if(consumed        >        0)        {        out.write(c);        }        else        {        out.write(c);        }        if(consumed    >    0)    {    out.write(c);    }    else    {    out.write(len);    }    if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(len  +  len);  }	  	compilable	  [FE]  ComparisonFailure  	72	13	add
282	[BUG]  [BUGGY]  out.write(c  +  1).append('e');  [CE]  'else'  without  'if'  [FE]        ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  out.write(c  +  1).append('e');  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	out.write(c  +  1).append('e');	  out.write(c    +    1);    	non-compiled	[CE]  'else'  without  'if'	71	None	replace
283	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(  [BUGGY]      else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(	  if(consumed    <    =    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    Character.toChars(Character.codePointAt(pos,    pos));    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
284	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          out.write(c);    out.write(c);  if(consumed  >  0)  {  out.write(c);  out.write(c);  }  else  {  out.write('n');  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	add	                out.write(c);        out.write(c);    if(consumed  >  0)  {  out.write(c);  out.write(c);  }  else  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	45	13	add
285	[BUG]  [BUGGY]          out.write(c);    out.write(c);  if(consumed  >  0)  {  out.write(c);  out.write(c);  }  else  {  out.write('n');  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          out.write(c);    out.write(c);  if(consumed  >  0)  {  out.write(c);  out.write(c);  }  else  {  out.write('n');  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	                out.write(c);        out.write(c);    if(consumed  >  0)  {  out.write(c);  out.write(c);  }  else  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	45	13	add
286	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  p));  out.write(c);  }  [CE]  'else'  without  'if'  [FE]                ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  >  0)  {  for(pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  p));  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  >  0)  {  for(pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  p));  out.write(c);  }	  if(consumed    >    0)    {    for(pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    Character.toChars(Character.codePointAt(pos,    pos));    out.write(c);    }    	non-compiled	[CE]  'else'  without  'if'	13	None	replace
287	[BUG]  [BUGGY]  if(consumed  >=  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  [CE]  'else'  without  'if'  [FE]                  ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  >=  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  >=  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }	  if(consumed    <    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    out.write(c);    }    	non-compiled	[CE]  'else'  without  'if'	35	None	replace
288	[BUG]  [BUGGY]  if(consumed  <  =  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  <  =  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  <  =  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }	  if(consumed    <    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
289	[BUG]  [BUGGY]  OutputStream  out  =  input.outputStream();  [CE]  'else'  without  'if'  [FE]        ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  OutputStream  out  =  input.outputStream();  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	OutputStream  out  =  input.outputStream();	  if(consumed    <    =    0)    {    out.write(c);    }    else    {    out.write('n');    }    	non-compiled	[CE]  'else'  without  'if'	102	None	replace
290	[BUG]  [BUGGY]  if(consumed  <  0)  {  out.write('n');  }  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  <  0)  {  out.write('n');  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  <  0)  {  out.write('n');  }	          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed    <    0)    {    out.write('n');    }    else    {    out.write('n');    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
291	[BUG]  [BUGGY]  if(consumed  <  0)  {  for(int  pos  =  0;  pos  >=  len;  pos++)  {  char[]  c  =  input.toChars();  out.write(c);  }  [CE]  'else'  without  'if'  [FE]              ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  <  0)  {  for(int  pos  =  0;  pos  >=  len;  pos++)  {  char[]  c  =  input.toChars();  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  <  0)  {  for(int  pos  =  0;  pos  >=  len;  pos++)  {  char[]  c  =  input.toChars();  out.write(c);  }	  if(consumed    <    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    input.toChars();    out.write(c);    }    	non-compiled	[CE]  'else'  without  'if'	2	None	replace
292	[BUG]  [BUGGY]  pos  +=  Character.charCount(Character.charCountAt(c,  pos));  [CE]  'else'  without  'if'  [FE]                  ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  pos  +=  Character.charCount(Character.charCountAt(c,  pos));  [BUGGY]      else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	pos  +=  Character.charCount(Character.charCountAt(c,  pos));	  pos    +=    Character.charCount(Character.codePointAt(input,    pos));    	non-compiled	[CE]  'else'  without  'if'	4	None	replace
293	[BUG]  [BUGGY]  pos  +=  Character.charCount(Character.toChars(input));  [CE]  'else'  without  'if'  [FE]                    ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  pos  +=  Character.charCount(Character.toChars(input));  [BUGGY]      else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	pos  +=  Character.charCount(Character.toChars(input));	  pos    +=    Character.charCount(Character.codePointAt(input,    pos));    	non-compiled	[CE]  'else'  without  'if'	4	None	replace
294	[BUG]  [BUGGY]  out.write('n');  char[]  c  =  Character.toChars(Character.toChars(input,  pos));  [CE]  'else'  without  'if'  [FE]                ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  out.write('n');  char[]  c  =  Character.toChars(Character.toChars(input,  pos));  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	out.write('n');  char[]  c  =  Character.toChars(Character.toChars(input,  pos));	          out.write(c);    char[]    c    =    Character.toChars(Character.toChars(input,    pos));    	non-compiled	[CE]  'else'  without  'if'	50	None	replace
295	[BUG]  [BUGGY]  out.write( "n ");  char[]  c  =  Character.toChars(Character.toChars(input,  pos));  [CE]  'else'  without  'if'  [FE]                  ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  out.write( "n ");  char[]  c  =  Character.toChars(Character.toChars(input,  pos));  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	out.write( "n ");  char[]  c  =  Character.toChars(Character.toChars(input,  pos));	          out.write(c);    char[]    c    =    Character.toChars(Character.toChars(input,    pos));    	non-compiled	[CE]  'else'  without  'if'	50	None	replace
296	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write(c);  }  else  {  out.write('n');  }  if(consumed  <  0)  {  out.write('n');  }  else  {  out.write('n');  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	add	                if(consumed        <        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write('n');  }  else  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	25	13	add
297	[BUG]  [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write(c);  }  else  {  out.write('n');  }  if(consumed  <  0)  {  out.write('n');  }  else  {  out.write('n');  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write(c);  }  else  {  out.write('n');  }  if(consumed  <  0)  {  out.write('n');  }  else  {  out.write('n');  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	                if(consumed        <        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write('n');  }  else  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	25	13	add
298	[BUG]  [BUGGY]  pos  +=  Character.charCount(c,  out.length());  [CE]  'else'  without  'if'  [FE]                    ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  pos  +=  Character.charCount(c,  out.length());  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	pos  +=  Character.charCount(c,  out.length());	  pos    +=    Character.charCount(c[pos]);    	non-compiled	[CE]  'else'  without  'if'	78	None	replace
299	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(  [BUGGY]      else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(	  if(consume    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
300	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write('n');  }  else  {  out.write(c);  }  if(consumed  <  0)  {  out.write('[');  }  else  {  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	add	                if(consumed        <        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    <    0)    {    out.write('n');    }    else    {    out.write(c);    }    if(consumed  <  0)  {  out.write('[');  }  else  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	29	13	add
301	[BUG]  [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write('n');  }  else  {  out.write(c);  }  if(consumed  <  0)  {  out.write('[');  }  else  {  out.write(c);  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write('n');  }  else  {  out.write(c);  }  if(consumed  <  0)  {  out.write('[');  }  else  {  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	                if(consumed        <        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    <    0)    {    out.write('n');    }    else    {    out.write(c);    }    if(consumed  <  0)  {  out.write('[');  }  else  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	29	13	add
302	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write('n');  }  else  {  out.write(c);  }  if(consumed  <  0)  {  out.write('n');  }  else  {  out.write('n');  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	add	                if(consumed        <        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    <    0)    {    out.write('n');    }    else    {    out.write(c);    }    if(consumed  <  0)  {  out.write('n');  }  else  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	29	13	add
303	[BUG]  [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write('n');  }  else  {  out.write(c);  }  if(consumed  <  0)  {  out.write('n');  }  else  {  out.write('n');  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write('n');  }  else  {  out.write(c);  }  if(consumed  <  0)  {  out.write('n');  }  else  {  out.write('n');  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	                if(consumed        <        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    <    0)    {    out.write('n');    }    else    {    out.write(c);    }    if(consumed  <  0)  {  out.write('n');  }  else  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	29	13	add
304	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write(c,  0,  consumed);  }  else  {  out.write('n');  }  [CE]  'else'  without  'if'  [FE]        ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  >  0)  {  out.write(c,  0,  consumed);  }  else  {  out.write('n');  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  >  0)  {  out.write(c,  0,  consumed);  }  else  {  out.write('n');  }	  if(consumed    >    0)    {    out.write(c,    0,    len);    }    else    {    out.write('n');    }    	non-compiled	[CE]  'else'  without  'if'	113	None	replace
305	[BUG]  [BUGGY]  if(consumed  <  =  0)  {  for(int  pos  =  0;  pos  <  c.length;  pos++)  {  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  <  =  0)  {  for(int  pos  =  0;  pos  <  c.length;  pos++)  {  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  <  =  0)  {  for(int  pos  =  0;  pos  <  c.length;  pos++)  {  out.write(c);  }	  if(consumed    >    0)    {    for(int    pos    =    0;    pos    <    c.length;    pos++)    {    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
306	[BUG]  [BUGGY]  out.write( "n ");  [CE]  'else'  without  'if'  [FE]            ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  out.write( "n ");  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	out.write( "n ");	          out.write(c);    char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    out.write(c);    	non-compiled	[CE]  'else'  without  'if'	48	None	replace
307	[BUG]  [BUGGY]  out.write('ufffd');  [CE]  unclosed  character  literal  [FE]              ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  out.write('ufffd');  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	out.write('ufffd');	          out.write(c);    char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    out.write(c);    	non-compiled	[CE]  unclosed  character  literal	48	None	replace
308	[BUG]  [BUGGY]  if(consumed  <  0)  {  out.write(c);  }  else  {  out.write(C);  }  [CE]  'else'  without  'if'  [FE]        ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  <  0)  {  out.write(c);  }  else  {  out.write(C);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  <  0)  {  out.write(c);  }  else  {  out.write(C);  }	          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed    <    0)    {    out.write(C);    }    else    {    out.write(c);    }    	non-compiled	[CE]  'else'  without  'if'	112	None	replace
309	[BUG]  [BUGGY]  if(consumed  <  =  0)  {  out.write(c);  }  else  {  out.write(C);  }  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  <  =  0)  {  out.write(c);  }  else  {  out.write(C);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  <  =  0)  {  out.write(c);  }  else  {  out.write(C);  }	          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed    <    0)    {    out.write(C);    }    else    {    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
310	[BUG]  [BUGGY]  if(consumed  ==  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pt,  pos));  }  [CE]  'else'  without  'if'  [FE]              ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  ==  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pt,  pos));  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  ==  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pt,  pos));  }	  if(consumed    <    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    pos    +=    Character.charCount(Character.codePointAt(pt,    pos));    }    	non-compiled	[CE]  'else'  without  'if'	32	None	replace
311	[BUG]  [BUGGY]  out.write(  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  out.write(  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	out.write(	  if(consumed    >    0)    {    out.write(c);    }    else    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    Character.toChars(Character.charCount(input,    pos));    out.write(    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
312	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write(c);  }  else  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  >  0)  {  out.write(c);  }  else  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  >  0)  {  out.write(c);  }  else  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.	  if(consumed    >    0)    {    out.write(c);    }    else    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    Character.toChars(Character.charCount(input,    pos));    out.write(    	non-compiled	[CE]  <identifier>  expected	110	None	replace
313	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write(c);  }  else  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.charCount(input,  pos));  out.  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  >  0)  {  out.write(c);  }  else  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.charCount(input,  pos));  out.  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  >  0)  {  out.write(c);  }  else  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.charCount(input,  pos));  out.	  if(consumed    >    0)    {    out.write(c);    }    else    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    Character.toChars(Character.charCount(input,    pos));    out.write(    	non-compiled	[CE]  <identifier>  expected	110	None	replace
314	[BUG]  [BUGGY]  if(consumed  <  =  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  <  =  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  <  =  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }	  if(consumed    >    0)    {    for(int    pt    =    0;    pos    <    len;    pos++)    {    char[]    c    =    Character.toChars(Character.codePointAt(pos,    pos));    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
315	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write(c);  }  else  {  out.write('n');  }  if(consumed  <  0)  {  out.write(c);  }  else  {  out.write('n');  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	add	                if(consumed        >        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write(c);  }  else  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	18	13	add
316	[BUG]  [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write(c);  }  else  {  out.write('n');  }  if(consumed  <  0)  {  out.write(c);  }  else  {  out.write('n');  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write(c);  }  else  {  out.write('n');  }  if(consumed  <  0)  {  out.write(c);  }  else  {  out.write('n');  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	                if(consumed        >        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write(c);  }  else  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	18	13	add
317	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write(c);  }  else  {  out.write('n');  }  if(consumed  >  0)  {  out.write('n');  }  else  {  out.write('n');  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	add	                if(consumed        >        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write('n');  }  else  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	18	13	add
318	[BUG]  [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write(c);  }  else  {  out.write('n');  }  if(consumed  >  0)  {  out.write('n');  }  else  {  out.write('n');  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write(c);  }  else  {  out.write('n');  }  if(consumed  >  0)  {  out.write('n');  }  else  {  out.write('n');  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	                if(consumed        >        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write('n');  }  else  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	18	13	add
319	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write(c);  }  else  {  out.write('n');  }  if(consumed  >  0)  {  out.write('n');  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	add	                if(consumed        >        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	18	13	add
320	[BUG]  [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write(c);  }  else  {  out.write('n');  }  if(consumed  >  0)  {  out.write('n');  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write(c);  }  else  {  out.write('n');  }  if(consumed  >  0)  {  out.write('n');  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	                if(consumed        >        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	18	13	add
321	[BUG]  [BUGGY]  if(consumed  <  0  ||  c.charAt(consumed  -  1)!=  '-')  {  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  <  0  ||  c.charAt(consumed  -  1)!=  '-')  {  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  <  0  ||  c.charAt(consumed  -  1)!=  '-')  {  out.write(c);  }	  if(consumed    <    0)    {    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
322	[BUG]  [BUGGY]  if(consumed  <  0  ||  c.charAt(consumed  -  1)  ==  '-')  {  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  <  0  ||  c.charAt(consumed  -  1)  ==  '-')  {  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  <  0  ||  c.charAt(consumed  -  1)  ==  '-')  {  out.write(c);  }	  if(consumed    <    0)    {    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
323	[BUG]  [BUGGY]  if(consumed  <  0  ||  c.charAt(consumed  -  1)!=  'n')  {  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  <  0  ||  c.charAt(consumed  -  1)!=  'n')  {  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  <  0  ||  c.charAt(consumed  -  1)!=  'n')  {  out.write(c);  }	  if(consumed    <    0)    {    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
324	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write(c);  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(pt);  }  [CE]  'else'  without  'if'  [FE]                ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  >  0)  {  out.write(c);  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(pt);  }  [BUGGY]      else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  >  0)  {  out.write(c);  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(pt);  }	  if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    consumed;    pt++)    {    pos    +=    Character.charCount(pt);    }    	non-compiled	[CE]  'else'  without  'if'	63	None	replace
325	[BUG]  [BUGGY]  if(else  ==  null)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(else  ==  null)  {  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(else  ==  null)  {	          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed    >    0)    {    out.write(c);    }    else    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
326	[BUG]  [BUGGY]  if(else)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(else)  {  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(else)  {	          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed    >    0)    {    out.write(c);    }    else    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
327	[BUG]  [BUGGY]  if(consume  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pt,  pos));  }  [CE]  'else'  without  'if'  [FE]                  ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consume  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pt,  pos));  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consume  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pt,  pos));  }	  if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    consumed;    pt++)    {    pos    +=    Character.charCount(Character.codePointAt(pt,    pos));    }    	non-compiled	[CE]  'else'  without  'if'	34	None	replace
328	[BUG]  [BUGGY]  if(consumed  ==  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(c);  }  [CE]  'else'  without  'if'  [FE]              ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  ==  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(c);  }  [BUGGY]      else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  ==  0)  {  if(c!=  null)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(c);  }	  if(c!=    null)    {    if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    pos    +=    Character.charCount(c);    }    	non-compiled	[CE]  'else'  without  'if'	52	None	replace
329	[BUG]  [BUGGY]  if(consumed  ==  0)  {  if(c!=  null)  {  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(c);  }  [CE]  'else'  without  'if'  [FE]                ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  ==  0)  {  if(c!=  null)  {  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(c);  }  [BUGGY]      else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  ==  0)  {  if(c!=  null)  {  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(c);  }	  if(c!=    null)    {    if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    pos    +=    Character.charCount(c);    }    	non-compiled	[CE]  'else'  without  'if'	52	None	replace
330	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write('n');  }  else  {  out.write(c);  }  if(consumed  >  0)  {  out.write('n');  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	add	                if(consumed        >        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    >    0)    {    out.write('n');    }    else    {    out.write(c);    }    if(consumed  >  0)  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	22	13	add
331	[BUG]  [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write('n');  }  else  {  out.write(c);  }  if(consumed  >  0)  {  out.write('n');  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write('n');  }  else  {  out.write(c);  }  if(consumed  >  0)  {  out.write('n');  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	                if(consumed        >        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    >    0)    {    out.write('n');    }    else    {    out.write(c);    }    if(consumed  >  0)  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	22	13	add
332	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write('n');  }  else  {  out.write(c);  }  if(consumed  >  0)  {  out.write('[');  }  else  {  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	add	                if(consumed        >        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    >    0)    {    out.write('n');    }    else    {    out.write(c);    }    if(consumed  >  0)  {  out.write('[');  }  else  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	22	13	add
333	[BUG]  [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write('n');  }  else  {  out.write(c);  }  if(consumed  >  0)  {  out.write('[');  }  else  {  out.write(c);  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write('n');  }  else  {  out.write(c);  }  if(consumed  >  0)  {  out.write('[');  }  else  {  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	                if(consumed        >        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    >    0)    {    out.write('n');    }    else    {    out.write(c);    }    if(consumed  >  0)  {  out.write('[');  }  else  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	22	13	add
334	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(c,  out);  }  [CE]  'else'  without  'if'  [FE]          ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(c,  out);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(c,  out);  }	          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed    <    0)    {    out.write(c,    out);    }    else    {    out.write(c);    }    	non-compiled	[CE]  'else'  without  'if'	98	None	replace
335	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write('n');  }  else  {  out.write('t');  }  if(consumed  <  0)  {  out.write('t');  }  else  {  out.write('n');  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	add	                if(consumed        <        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    <    0)    {    out.write('n');    }    else    {    out.write('t');    }    if(consumed  <  0)  {  out.write('t');  }  else  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	93	13	add
336	[BUG]  [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write('n');  }  else  {  out.write('t');  }  if(consumed  <  0)  {  out.write('t');  }  else  {  out.write('n');  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write('n');  }  else  {  out.write('t');  }  if(consumed  <  0)  {  out.write('t');  }  else  {  out.write('n');  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	                if(consumed        <        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    <    0)    {    out.write('n');    }    else    {    out.write('t');    }    if(consumed  <  0)  {  out.write('t');  }  else  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	93	13	add
337	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write('n');  }  else  {  out.write('t');  }  if(consumed  <  0)  {  out.write('t');  }  else  {  out.write('s');  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	add	                if(consumed        <        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    <    0)    {    out.write('n');    }    else    {    out.write('t');    }    if(consumed  <  0)  {  out.write('t');  }  else  {  out.write('s');  }	  	compilable	  [FE]  ComparisonFailure  	93	13	add
338	[BUG]  [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write('n');  }  else  {  out.write('t');  }  if(consumed  <  0)  {  out.write('t');  }  else  {  out.write('s');  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write('n');  }  else  {  out.write('t');  }  if(consumed  <  0)  {  out.write('t');  }  else  {  out.write('s');  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	                if(consumed        <        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    <    0)    {    out.write('n');    }    else    {    out.write('t');    }    if(consumed  <  0)  {  out.write('t');  }  else  {  out.write('s');  }	  	compilable	  [FE]  ComparisonFailure  	93	13	add
339	[BUG]  [BUGGY]  pos  +=  Character.charCount(Character.toChars(c));  [CE]  'else'  without  'if'  [FE]                  ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  pos  +=  Character.charCount(Character.toChars(c));  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	pos  +=  Character.charCount(Character.toChars(c));	  pos    +=    Character.charCount(Character.codePointAt(pos,    pos));    	non-compiled	[CE]  'else'  without  'if'	58	None	replace
340	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pt,  out));  }  [CE]  'else'  without  'if'  [FE]                ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pt,  out));  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pt,  out));  }	  if(pos    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    pos    +=    Character.charCount(Character.codePointAt(pt,    pos));    }    	non-compiled	[CE]  'else'  without  'if'	33	None	replace
341	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write(c);  out.write(c);  }  else  {  out.write('n');  }  [CE]  'else'  without  'if'  [FE]    ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  >  0)  {  out.write(c);  out.write(c);  }  else  {  out.write('n');  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  >  0)  {  out.write(c);  out.write(c);  }  else  {  out.write('n');  }	          out.write(c);    out.write(c);    	non-compiled	[CE]  'else'  without  'if'	46	None	replace
342	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write(C);  }  else  {  out.write(c);  }  [CE]  'else'  without  'if'  [FE]            ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  >  0)  {  out.write(C);  }  else  {  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  >  0)  {  out.write(C);  }  else  {  out.write(c);  }	          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed    >    0)    {    out.write(C);    }    else    {    out.write(c);    }    	non-compiled	[CE]  'else'  without  'if'	75	None	replace
343	[BUG]  [BUGGY]  if(consumed  >=  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars();  out.write(c);  }  [CE]  'else'  without  'if'  [FE]            ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  >=  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars();  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  >=  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars();  out.write(c);  }	  if(consumed    >    0)    {    for(int    pt    =    0;    pos    <    len;    pos++)    {    char[]    c    =    input.toChars();    out.write(c);    }    	non-compiled	[CE]  'else'  without  'if'	114	None	replace
344	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  output.toChars();  out.write(c);  }  [CE]  'else'  without  'if'  [FE]              ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  >  0)  {  for(pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  output.toChars();  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  >  0)  {  for(pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  output.toChars();  out.write(c);  }	  if(consumed    >    0)    {    for(pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    input.toChars();    out.write(c);    }    	non-compiled	[CE]  'else'  without  'if'	101	None	replace
345	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write('n');  }  else  {  out.write('n');  }  if(consumed  <  0)  {  out.write(c);  }  else  {  out.write('n');  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	add	                if(consumed        >        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    >    0)    {    out.write('n');    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write(c);  }  else  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	20	13	add
346	[BUG]  [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write('n');  }  else  {  out.write('n');  }  if(consumed  <  0)  {  out.write(c);  }  else  {  out.write('n');  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write('n');  }  else  {  out.write('n');  }  if(consumed  <  0)  {  out.write(c);  }  else  {  out.write('n');  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	                if(consumed        >        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    >    0)    {    out.write('n');    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write(c);  }  else  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	20	13	add
347	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write('n');  }  else  {  out.write('n');  }  if(consumed  >  0)  {  out.write('m');  }  else  {  out.write('n');  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	add	                if(consumed        >        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    >    0)    {    out.write('n');    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write('m');  }  else  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	20	13	add
348	[BUG]  [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write('n');  }  else  {  out.write('n');  }  if(consumed  >  0)  {  out.write('m');  }  else  {  out.write('n');  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write('n');  }  else  {  out.write('n');  }  if(consumed  >  0)  {  out.write('m');  }  else  {  out.write('n');  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	                if(consumed        >        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    >    0)    {    out.write('n');    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write('m');  }  else  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	20	13	add
349	[BUG]  [BUGGY]  if(consumed  <  0)  {  out.write(c);  }  else  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pt,  pos));  }  [CE]  'else'  without  'if'  [FE]              ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  <  0)  {  out.write(c);  }  else  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pt,  pos));  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  <  0)  {  out.write(c);  }  else  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pt,  pos));  }	          out.write(c);    if(consumed    >    0)    {    out.write(c);    }    else    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    pos    +=    Character.charCount(Character.codePointAt(pt,    pos));    }    	non-compiled	[CE]  'else'  without  'if'	69	None	replace
350	[BUG]  [BUGGY]  if(consumed  <  0)  {  out.write(c);  }  else  {  for(int  pos  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pt,  pos));  }  [CE]  'else'  without  'if'  [FE]                ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  <  0)  {  out.write(c);  }  else  {  for(int  pos  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pt,  pos));  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  <  0)  {  out.write(c);  }  else  {  for(int  pos  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pt,  pos));  }	          out.write(c);    if(consumed    >    0)    {    out.write(c);    }    else    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    pos    +=    Character.charCount(Character.codePointAt(pt,    pos));    }    	non-compiled	[CE]  'else'  without  'if'	69	None	replace
351	[BUG]  [BUGGY]  out.write(c,  0,  len  -  1);  [CE]  'else'  without  'if'  [FE]            ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  out.write(c,  0,  len  -  1);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	out.write(c,  0,  len  -  1);	  out.write(c,    0,    len);    	non-compiled	[CE]  'else'  without  'if'	61	None	replace
352	[BUG]  [BUGGY]  out.write( "n ");  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  [CE]  'else'  without  'if'  [FE]          ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  out.write( "n ");  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	out.write( "n ");  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));	          out.write(c);    char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    	non-compiled	[CE]  'else'  without  'if'	47	None	replace
353	[BUG]  [BUGGY]  out.write('  ');  [CE]  'else'  without  'if'  [FE]              ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  out.write('  ');  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	out.write('  ');	          out.write(c);    char[]    c    =    Character.toChars(Character.toChars(input,    pos));    out.write(c);    	non-compiled	[CE]  'else'  without  'if'	49	None	replace
354	[BUG]  [BUGGY]  if(consumed  <  0  ||  c.charAt(consumed  -  1)  ==  'n')  {  out.write(c);  }  else  {  out.write('n');  }  [CE]  'else'  without  'if'  [FE]        ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  <  0  ||  c.charAt(consumed  -  1)  ==  'n')  {  out.write(c);  }  else  {  out.write('n');  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  <  0  ||  c.charAt(consumed  -  1)  ==  'n')  {  out.write(c);  }  else  {  out.write('n');  }	  if(consumed    <    0    ||    c.charAt(consumed    -    1)!=    'n')    {    out.write(c);    }    else    {    out.write('n');    }    	non-compiled	[CE]  'else'  without  'if'	70	None	replace
355	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write('n');  }  else  {  out.write('n');  }  if(consumed  >  0)  {  out.write(c);  }  else  {  out.write('n');  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	add	                if(consumed        <        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    <    0)    {    out.write('n');    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write(c);  }  else  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	27	13	add
356	[BUG]  [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write('n');  }  else  {  out.write('n');  }  if(consumed  >  0)  {  out.write(c);  }  else  {  out.write('n');  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write('n');  }  else  {  out.write('n');  }  if(consumed  >  0)  {  out.write(c);  }  else  {  out.write('n');  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	                if(consumed        <        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    <    0)    {    out.write('n');    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write(c);  }  else  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	27	13	add
357	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write('n');  }  else  {  out.write('n');  }  if(consumed  <  0)  {  out.write('m');  }  else  {  out.write('n');  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	add	                if(consumed        <        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    <    0)    {    out.write('n');    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write('m');  }  else  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	27	13	add
358	[BUG]  [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write('n');  }  else  {  out.write('n');  }  if(consumed  <  0)  {  out.write('m');  }  else  {  out.write('n');  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write('n');  }  else  {  out.write('n');  }  if(consumed  <  0)  {  out.write('m');  }  else  {  out.write('n');  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	                if(consumed        <        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    <    0)    {    out.write('n');    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write('m');  }  else  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	27	13	add
359	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  output.length();  pt++)  {  pos  +=  Character.charCount(pt);  }  [CE]  'else'  without  'if'  [FE]              ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  output.length();  pt++)  {  pos  +=  Character.charCount(pt);  }  [BUGGY]      else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  output.length();  pt++)  {  pos  +=  Character.charCount(pt);  }	  if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    out.length();    pt++)    {    pos    +=    Character.charCount(pt);    }    	non-compiled	[CE]  'else'  without  'if'	81	None	replace
360	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write('n');  }  else  {  out.write('m');  }  if(consumed  <  0)  {  out.write('m');  }  else  {  out.write('f');  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	add	                if(consumed        <        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    <    0)    {    out.write('n');    }    else    {    out.write('m');    }    if(consumed  <  0)  {  out.write('m');  }  else  {  out.write('f');  }	  	compilable	  [FE]  ComparisonFailure  	95	13	add
361	[BUG]  [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write('n');  }  else  {  out.write('m');  }  if(consumed  <  0)  {  out.write('m');  }  else  {  out.write('f');  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write('n');  }  else  {  out.write('m');  }  if(consumed  <  0)  {  out.write('m');  }  else  {  out.write('f');  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	                if(consumed        <        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    <    0)    {    out.write('n');    }    else    {    out.write('m');    }    if(consumed  <  0)  {  out.write('m');  }  else  {  out.write('f');  }	  	compilable	  [FE]  ComparisonFailure  	95	13	add
362	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write('n');  }  else  {  out.write('m');  }  if(consumed  >  0)  {  out.write(c);  }  else  {  out.write('m');  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	add	                if(consumed        <        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    <    0)    {    out.write('n');    }    else    {    out.write('m');    }    if(consumed  >  0)  {  out.write(c);  }  else  {  out.write('m');  }	  	compilable	  [FE]  ComparisonFailure  	95	13	add
363	[BUG]  [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write('n');  }  else  {  out.write('m');  }  if(consumed  >  0)  {  out.write(c);  }  else  {  out.write('m');  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write('n');  }  else  {  out.write('m');  }  if(consumed  >  0)  {  out.write(c);  }  else  {  out.write('m');  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	                if(consumed        <        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    <    0)    {    out.write('n');    }    else    {    out.write('m');    }    if(consumed  >  0)  {  out.write(c);  }  else  {  out.write('m');  }	  	compilable	  [FE]  ComparisonFailure  	95	13	add
364	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos,  out);  out.write(c);  }  [CE]  'else'  without  'if'  [FE]            ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos,  out);  out.write(c);  }  [BUGGY]      else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos,  out);  out.write(c);  }	  if(consume    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  'else'  without  'if'	82	None	replace
365	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  output.toChars(pos);  out.write(c);  }  [CE]  'else'  without  'if'  [FE]              ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  output.toChars(pos);  out.write(c);  }  [BUGGY]      else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  output.toChars(pos);  out.write(c);  }	  if(consume    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  'else'  without  'if'	82	None	replace
366	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  p));  out.write(c);  }  [CE]  'else'  without  'if'  [FE]              ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  p));  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  p));  out.write(c);  }	  if(consumed    <    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    Character.toChars(Character.codePointAt(pos,    pos));    out.write(c);    }    	non-compiled	[CE]  'else'  without  'if'	12	None	replace
367	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write('n');  }  else  {  out.write('t');  }  if(consumed  >  0)  {  out.write('t');  }  else  {  out.write('n');  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	add	                if(consumed        >        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    >    0)    {    out.write('n');    }    else    {    out.write('t');    }    if(consumed  >  0)  {  out.write('t');  }  else  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	89	13	add
368	[BUG]  [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write('n');  }  else  {  out.write('t');  }  if(consumed  >  0)  {  out.write('t');  }  else  {  out.write('n');  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write('n');  }  else  {  out.write('t');  }  if(consumed  >  0)  {  out.write('t');  }  else  {  out.write('n');  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	                if(consumed        >        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    >    0)    {    out.write('n');    }    else    {    out.write('t');    }    if(consumed  >  0)  {  out.write('t');  }  else  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	89	13	add
369	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write('n');  }  else  {  out.write('t');  }  if(consumed  >  0)  {  out.write('t');  }  else  {  out.write('s');  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	add	                if(consumed        >        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    >    0)    {    out.write('n');    }    else    {    out.write('t');    }    if(consumed  >  0)  {  out.write('t');  }  else  {  out.write('s');  }	  	compilable	  [FE]  ComparisonFailure  	89	13	add
370	[BUG]  [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write('n');  }  else  {  out.write('t');  }  if(consumed  >  0)  {  out.write('t');  }  else  {  out.write('s');  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write('n');  }  else  {  out.write('t');  }  if(consumed  >  0)  {  out.write('t');  }  else  {  out.write('s');  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	                if(consumed        >        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    >    0)    {    out.write('n');    }    else    {    out.write('t');    }    if(consumed  >  0)  {  out.write('t');  }  else  {  out.write('s');  }	  	compilable	  [FE]  ComparisonFailure  	89	13	add
371	[BUG]  [BUGGY]  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  c.length;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pt,  pos));  }  [CE]  'else'  without  'if'  [FE]              ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  c.length;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pt,  pos));  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  c.length;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pt,  pos));  }	  if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    c.length;    pt++)    {    pos    +=    Character.charCount(Character.codePointAt(pt,    pos));    }    	non-compiled	[CE]  'else'  without  'if'	87	None	replace
372	[BUG]  [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed  <  0)  {  out.write(c);  }  else  {  out.write(c);  }  if(consumed  <  0)  {  out.write(c;  }  else  {  out.write(c);  }  [CE]  ')'  expected  [FE]    ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed  <  0)  {  out.write(c);  }  else  {  out.write(c);  }  if(consumed  <  0)  {  out.write(c;  }  else  {  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	                if(consumed        <        0)        {        out.write(c);        }        else        {        out.write(c);        }        if(consumed    <    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed  <  0)  {  out.write(c;  }  else  {  out.write(c);  }	  	non-compiled	[CE]  ')'  expected	38	None	add
373	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed  <  0)  {  out.write(c);  }  else  {  out.write(c);  }  if(consumed  <  0)  {  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	add	                if(consumed        <        0)        {        out.write(c);        }        else        {        out.write(c);        }        if(consumed    <    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed  <  0)  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	38	13	add
374	[BUG]  [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed  <  0)  {  out.write(c);  }  else  {  out.write(c);  }  if(consumed  <  0)  {  out.write(c);  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed  <  0)  {  out.write(c);  }  else  {  out.write(c);  }  if(consumed  <  0)  {  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	                if(consumed        <        0)        {        out.write(c);        }        else        {        out.write(c);        }        if(consumed    <    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed  <  0)  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	38	13	add
375	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  input.toChars();  out.write(c);  }  [CE]  'else'  without  'if'  [FE]          ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  input.toChars();  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  input.toChars();  out.write(c);  }	          out.write(c);    if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    input.toChars();    out.write(c);    }    	non-compiled	[CE]  'else'  without  'if'	121	None	replace
376	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write(c);  for(int  pos  =  0;  pt  <  len;  pt++)  {  char[]  c  =  input.toChars();  out.write(c);  }  [CE]  'else'  without  'if'  [FE]            ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  >  0)  {  out.write(c);  for(int  pos  =  0;  pt  <  len;  pt++)  {  char[]  c  =  input.toChars();  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  >  0)  {  out.write(c);  for(int  pos  =  0;  pt  <  len;  pt++)  {  char[]  c  =  input.toChars();  out.write(c);  }	          out.write(c);    if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    input.toChars();    out.write(c);    }    	non-compiled	[CE]  'else'  without  'if'	121	None	replace
377	[BUG]  [BUGGY]  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  c.length;  pt++)  {  pos  +=  Character.charCount(c[pos]);  }  [CE]  'else'  without  'if'  [FE]                    ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  c.length;  pt++)  {  pos  +=  Character.charCount(c[pos]);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  c.length;  pt++)  {  pos  +=  Character.charCount(c[pos]);  }	  if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    c.length;    pt++)    {    pos    +=    Character.charCount(c[pos]);    }    	non-compiled	[CE]  'else'  without  'if'	117	None	replace
378	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(c);  }  if(consumed  <  0)  {  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	add	                if(consumed        <        0)        {        out.write(c);        }        else        {        out.write(c);        }        if(consumed    >    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed  <  0)  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	41	13	add
379	[BUG]  [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(c);  }  if(consumed  <  0)  {  out.write(c);  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(c);  }  if(consumed  <  0)  {  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	                if(consumed        <        0)        {        out.write(c);        }        else        {        out.write(c);        }        if(consumed    >    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed  <  0)  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	41	13	add
380	[BUG]  [BUGGY]  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  c.length;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pos,  pos));  }  [CE]  'else'  without  'if'  [FE]                  ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  c.length;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pos,  pos));  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  >=  0)  {  for(int  pt  =  0;  pt  <  c.length;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pos,  pos));  }	  if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    c.length;    pt++)    {    pos    +=    Character.charCount(Character.codePointAt(pos,    pos));    }    	non-compiled	[CE]  'else'  without  'if'	65	None	replace
381	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos,  out);  out.write(c);  }  [CE]  'else'  without  'if'  [FE]              ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  >  0)  {  for(pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos,  out);  out.write(c);  }  [BUGGY]      else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  >  0)  {  for(pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos,  out);  out.write(c);  }	  if(consumed    >    0)    {    for(pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  'else'  without  'if'	56	None	replace
382	[BUG]  [BUGGY]  if(consumed  <  =  0)  {  for(pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  <  =  0)  {  for(pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [BUGGY]      else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  <  =  0)  {  for(pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }	  if(consumed    >    0)    {    for(pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
383	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(pos  =  0;  pos  <  Len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [CE]  'else'  without  'if'  [FE]                ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  >  0)  {  for(pos  =  0;  pos  <  Len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }  [BUGGY]      else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  >  0)  {  for(pos  =  0;  pos  <  Len;  pos++)  {  char[]  c  =  input.toChars(pos);  out.write(c);  }	  if(consumed    >    0)    {    for(pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    input.toChars(pos);    out.write(c);    }    	non-compiled	[CE]  'else'  without  'if'	56	None	replace
384	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write(c);  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  [CE]  'else'  without  'if'  [FE]            ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  >  0)  {  out.write(c);  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  >  0)  {  out.write(c);  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {  for(int  pos  =  0;  pos  <  len;  pos++)  {	          out.write(c);    char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    out.write(c);    	non-compiled	[CE]  'else'  without  'if'	48	None	replace
385	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write(c);  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {  out.write( " ");  }  [CE]  'else'  without  'if'  [FE]              ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  >  0)  {  out.write(c);  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {  out.write( " ");  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  >  0)  {  out.write(c);  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {  out.write( " ");  }	          out.write(c);    char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    out.write(c);    	non-compiled	[CE]  'else'  without  'if'	48	None	replace
386	[BUG]  [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(input,  len));  [CE]  'else'  without  'if'  [FE]                  ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(input,  len));  [BUGGY]      else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	pos  +=  Character.charCount(Character.codePointAt(input,  len));	  pos    +=    Character.charCount(Character.codePointAt(input,    pos));    	non-compiled	[CE]  'else'  without  'if'	4	None	replace
387	[BUG]  [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write(c);  }  else  {  out.write('n');  }  if(consumed  <  =  0)  {  out.write(c);  }  else  {  out.write('n');  }  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write(c);  }  else  {  out.write('n');  }  if(consumed  <  =  0)  {  out.write(c);  }  else  {  out.write('n');  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	                if(consumed        <        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  <  =  0)  {  out.write(c);  }  else  {  out.write('n');  }	  	non-compiled	[CE]  illegal  start  of  expression	25	None	add
388	[BUG]  [BUGGY]  while(pos  <  len)  {  if(consumed  <  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  [CE]  'else'  without  'if'  [FE]                  ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  while(pos  <  len)  {  if(consumed  <  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	while(pos  <  len)  {  if(consumed  <  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  out.write(c);  }	  if(consumed    <    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    out.write(c);    }    	non-compiled	[CE]  'else'  without  'if'	35	None	replace
389	[BUG]  [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write('n');  }  else  {  out.write('m');  }  if(conumed  >  0)  {  out.write(c);  }  else  {  out.write('m');  }  [CE]  cannot  find  symbol  conumed  [FE]    ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write('n');  }  else  {  out.write('m');  }  if(conumed  >  0)  {  out.write(c);  }  else  {  out.write('m');  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	                if(consumed        >        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    >    0)    {    out.write('n');    }    else    {    out.write('m');    }    if(conumed  >  0)  {  out.write(c);  }  else  {  out.write('m');  }	  	non-compiled	[CE]  cannot  find  symbol  conumed	91	None	add
390	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write(c,  0,  c.length);  }  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  >  0)  {  out.write(c,  0,  c.length);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  >  0)  {  out.write(c,  0,  c.length);  }	  if(consumed    >    0)    {    out.write(c,    0,    consumed);    }    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
391	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write(c);  char[]  c  =  Character.toChars(Character.toChars(input,  pos));  out.write(c);  }  else  {  out.write( " ");  }  [CE]  'else'  without  'if'  [FE]              ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  >  0)  {  out.write(c);  char[]  c  =  Character.toChars(Character.toChars(input,  pos));  out.write(c);  }  else  {  out.write( " ");  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  >  0)  {  out.write(c);  char[]  c  =  Character.toChars(Character.toChars(input,  pos));  out.write(c);  }  else  {  out.write( " ");  }	          out.write(c);    char[]    c    =    Character.toChars(Character.toChars(input,    pos));    out.write(c);    	non-compiled	[CE]  'else'  without  'if'	49	None	replace
392	[BUG]  [BUGGY]  pos  +=  Character.charCount(c[pos++]);  [CE]  'else'  without  'if'  [FE]                    ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  pos  +=  Character.charCount(c[pos++]);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	pos  +=  Character.charCount(c[pos++]);	  pos    +=    Character.charCount(c[pos]);    	non-compiled	[CE]  'else'  without  'if'	78	None	replace
393	[BUG]  [BUGGY]  if(pos  >  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pt,  pos));  }  [CE]  'else'  without  'if'  [FE]                  ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(pos  >  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pt,  pos));  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(pos  >  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pt,  pos));  }	  if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    consumed;    pt++)    {    pos    +=    Character.charCount(Character.codePointAt(pt,    pos));    }    	non-compiled	[CE]  'else'  without  'if'	34	None	replace
394	[BUG]  [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(c);  }  if(consumed  >  0)  {  out.write(c);  }  else  {  in.write(c);  }  [CE]  cannot  find  symbol  in  [FE]    ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed  >  0)  {  out.write(c);  }  else  {  out.write(c);  }  if(consumed  >  0)  {  out.write(c);  }  else  {  in.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	                if(consumed        >        0)        {        out.write(c);        }        else        {        out.write(c);        }        if(consumed    >    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed  >  0)  {  out.write(c);  }  else  {  in.write(c);  }	  	non-compiled	[CE]  cannot  find  symbol  in	7	None	add
395	[BUG]  [BUGGY]  out.write(c,  0,  c.length);  [CE]  'else'  without  'if'  [FE]          ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  out.write(c,  0,  c.length);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	out.write(c,  0,  c.length);	  out.write(c,    pos);    	non-compiled	[CE]  'else'  without  'if'	60	None	replace
396	[BUG]  [BUGGY]  if(consumed  <  =  0)  {  out.write(c);  }  else  {  for(int  pt  =  0;  pt  <  len  -  2;  pt++)  {  pos  +=  Character.charCount(Character.charCount(input,  pos));  }  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  <  =  0)  {  out.write(c);  }  else  {  for(int  pt  =  0;  pt  <  len  -  2;  pt++)  {  pos  +=  Character.charCount(Character.charCount(input,  pos));  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  <  =  0)  {  out.write(c);  }  else  {  for(int  pt  =  0;  pt  <  len  -  2;  pt++)  {  pos  +=  Character.charCount(Character.charCount(input,  pos));  }	          out.write(c);    if(consumed    >    0)    {    out.write(c);    }    else    {    for(int    pt    =    0;    pt    <    len    -    2;    pt++)    {    pos    +=    Character.charCount(Character.charCount(input,    pos));    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
397	[BUG]  [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(output,  pos));  [CE]  'else'  without  'if'  [FE]                  ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(output,  pos));  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	pos  +=  Character.charCount(Character.codePointAt(output,  pos));	  pos    +=    Character.charCount(Character.codePointAt(pos,    pos));    	non-compiled	[CE]  'else'  without  'if'	58	None	replace
398	[BUG]  [BUGGY]  if(consumed  <  0)  {  out.write(c);  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.charCount(input,  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  <  0)  {  out.write(c);  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.charCount(input,  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  <  0)  {  out.write(c);  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  char[]  c  =  Character.toChars(Character.charCount(input,	          out.write(c);    if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    Character.toChars(Character.charCount(input,    pos));    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
399	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write('n');  }  else  {  out.write(c);  }  if(consumed  <  0)  {  out.write(c);  }  else  {  out.write('n');  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	add	                if(consumed        >        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    >    0)    {    out.write('n');    }    else    {    out.write(c);    }    if(consumed  <  0)  {  out.write(c);  }  else  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	22	13	add
400	[BUG]  [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write('n');  }  else  {  out.write(c);  }  if(consumed  <  0)  {  out.write(c);  }  else  {  out.write('n');  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write('n');  }  else  {  out.write(c);  }  if(consumed  <  0)  {  out.write(c);  }  else  {  out.write('n');  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	                if(consumed        >        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    >    0)    {    out.write('n');    }    else    {    out.write(c);    }    if(consumed  <  0)  {  out.write(c);  }  else  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	22	13	add
401	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write('n');  }  else  {  out.write(c);  }  if(consumed  >  0)  {  out.write('m');  }  else  {  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	add	                if(consumed        >        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    >    0)    {    out.write('n');    }    else    {    out.write(c);    }    if(consumed  >  0)  {  out.write('m');  }  else  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	22	13	add
402	[BUG]  [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write('n');  }  else  {  out.write(c);  }  if(consumed  >  0)  {  out.write('m');  }  else  {  out.write(c);  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write('n');  }  else  {  out.write(c);  }  if(consumed  >  0)  {  out.write('m');  }  else  {  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	                if(consumed        >        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    >    0)    {    out.write('n');    }    else    {    out.write(c);    }    if(consumed  >  0)  {  out.write('m');  }  else  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	22	13	add
403	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write('n');  }  else  {  out.write(c);  }  if(consumed  >  0)  {  out.write('s');  }  else  {  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	add	                if(consumed        >        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    >    0)    {    out.write('n');    }    else    {    out.write(c);    }    if(consumed  >  0)  {  out.write('s');  }  else  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	22	13	add
404	[BUG]  [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write('n');  }  else  {  out.write(c);  }  if(consumed  >  0)  {  out.write('s');  }  else  {  out.write(c);  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write('n');  }  else  {  out.write(c);  }  if(consumed  >  0)  {  out.write('s');  }  else  {  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	                if(consumed        >        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    >    0)    {    out.write('n');    }    else    {    out.write(c);    }    if(consumed  >  0)  {  out.write('s');  }  else  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	22	13	add
405	[BUG]  [BUGGY]  if(consumed  <  =  0)  {  out.write(c);  }  else  {  out.write('m');  }  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  <  =  0)  {  out.write(c);  }  else  {  out.write('m');  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  <  =  0)  {  out.write(c);  }  else  {  out.write('m');  }	          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed    <    0)    {    out.write('n');    }    else    {    out.write('m');    }    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
406	[BUG]  [BUGGY]  if(c!=  null)  {  for(int  pos  =  0;  pos  <  consumed;  pos++)  {  out.write(c);  }  [CE]  'else'  without  'if'  [FE]                    ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(c!=  null)  {  for(int  pos  =  0;  pos  <  consumed;  pos++)  {  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(c!=  null)  {  for(int  pos  =  0;  pos  <  consumed;  pos++)  {  out.write(c);  }	  if(consumed    >    0)    {    for(int    pos    =    0;    pos    <    consumed;    pos++)    {    out.write(c);    }    	non-compiled	[CE]  'else'  without  'if'	84	None	replace
407	[BUG]  [BUGGY]  if(consumed  <  0)  {  out.write(c,  out);  }  else  {  out.write(c,  out);  }  [CE]  'else'  without  'if'  [FE]          ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  <  0)  {  out.write(c,  out);  }  else  {  out.write(c,  out);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  <  0)  {  out.write(c,  out);  }  else  {  out.write(c,  out);  }	          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed    <    0)    {    out.write(c,    out);    }    else    {    out.write(c);    }    	non-compiled	[CE]  'else'  without  'if'	98	None	replace
408	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write(c);  char[]  c  =  Character.toChars(Character.toChars(input,  pos));  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  >  0)  {  out.write(c);  char[]  c  =  Character.toChars(Character.toChars(input,  pos));  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  >  0)  {  out.write(c);  char[]  c  =  Character.toChars(Character.toChars(input,  pos));  }	          out.write(c);    char[]    c    =    Character.toChars(Character.toChars(input,    pos));    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
409	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write(C);  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  >  0)  {  out.write(C);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  >  0)  {  out.write(C);  }	          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed    >    0)    {    out.write(C);    }    else    {    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
410	[BUG]  [BUGGY]  if(consumed  <  =  0)  {  for(pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  <  =  0)  {  for(pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  <  =  0)  {  for(pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }	  if(consumed    >    0)    {    for(pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    Character.toChars(Character.codePointAt(pos,    pos));    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
411	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write(c);  out.write(c);  }  else  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  pos  +=  Character.charCount(c);  }  [CE]  'else'  without  'if'  [FE]    ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  >  0)  {  out.write(c);  out.write(c);  }  else  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  pos  +=  Character.charCount(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  >  0)  {  out.write(c);  out.write(c);  }  else  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  pos  +=  Character.charCount(c);  }	          out.write(c);    out.write(c);    	non-compiled	[CE]  'else'  without  'if'	46	None	replace
412	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write(c);  out.write(c);  }  else  {  for(int  pos  =  0;  pos  <  consumed;  pos++)  {  pos  +=  Character.charCount(c);  }  [CE]  'else'  without  'if'  [FE]      ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  >  0)  {  out.write(c);  out.write(c);  }  else  {  for(int  pos  =  0;  pos  <  consumed;  pos++)  {  pos  +=  Character.charCount(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  >  0)  {  out.write(c);  out.write(c);  }  else  {  for(int  pos  =  0;  pos  <  consumed;  pos++)  {  pos  +=  Character.charCount(c);  }	          out.write(c);    out.write(c);    	non-compiled	[CE]  'else'  without  'if'	46	None	replace
413	[BUG]  [BUGGY]          out.write(c);    out.write(c);  if(consumed  <  =  0)  {  out.write(c);  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          out.write(c);    out.write(c);  if(consumed  <  =  0)  {  out.write(c);  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	                out.write(c);        out.write(c);    if(consumed  <  =  0)  {  out.write(c);  out.write(c);  }	  	non-compiled	[CE]  illegal  start  of  expression	45	None	add
414	[BUG]  [BUGGY]  pos  +=  Character.charCount(pt);  [CE]  'else'  without  'if'  [FE]              ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  pos  +=  Character.charCount(pt);  [BUGGY]      else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	pos  +=  Character.charCount(pt);	  if(consumed    <    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    pos    +=    Character.charCount(pt);    }    	non-compiled	[CE]  'else'  without  'if'	62	None	replace
415	[BUG]  [BUGGY]  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  c.length;  pt++)  {  pos  +=  Character.charCount(pt);  }  [CE]  'else'  without  'if'  [FE]                ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  c.length;  pt++)  {  pos  +=  Character.charCount(pt);  }  [BUGGY]      else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  <  0)  {  for(int  pt  =  0;  pt  <  c.length;  pt++)  {  pos  +=  Character.charCount(pt);  }	  if(consumed    <    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    pos    +=    Character.charCount(pt);    }    	non-compiled	[CE]  'else'  without  'if'	62	None	replace
416	[BUG]  [BUGGY]  while(consumed  <  0)  {  out.write(c);  [CE]  'else'  without  'if'  [FE]          ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  while(consumed  <  0)  {  out.write(c);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	while(consumed  <  0)  {  out.write(c);	          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    while(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    	non-compiled	[CE]  'else'  without  'if'	107	None	replace
417	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write(c);  }  else  {  for(pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  >  0)  {  out.write(c);  }  else  {  for(pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  >  0)  {  out.write(c);  }  else  {  for(pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(	  if(consumed    >    0)    {    out.write(c);    }    else    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    Character.toChars(Character.codePointAt(pos,    pos));    out.write(    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
418	[BUG]  [BUGGY]  if(c!=  null)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  pos  +=  Character.charCount(c);  }  [CE]  'else'  without  'if'  [FE]            ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(c!=  null)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  pos  +=  Character.charCount(c);  }  [BUGGY]      else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(c!=  null)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  pos  +=  Character.charCount(c);  }	  if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    consumed;    pt++)    {    pos    +=    Character.charCount(c);    }    	non-compiled	[CE]  'else'  without  'if'	108	None	replace
419	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }  [CE]  'else'  without  'if'  [FE]                ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }  [BUGGY]      else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write(c);  }	  if(pos    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    char[]    c    =    Character.toChars(Character.codePointAt(pos,    pos));    out.write(c);    }    	non-compiled	[CE]  'else'  without  'if'	6	None	replace
420	[BUG]  [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  consumed.length();  pt++)  {  pos  +=  Character.charCount(pt);  }  [CE]  'else'  without  'if'  [FE]              ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  consumed.length();  pt++)  {  pos  +=  Character.charCount(pt);  }  [BUGGY]      else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  consumed.length();  pt++)  {  pos  +=  Character.charCount(pt);  }	  if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    out.length();    pt++)    {    pos    +=    Character.charCount(pt);    }    	non-compiled	[CE]  'else'  without  'if'	81	None	replace
421	[BUG]  [BUGGY]  if(consumed  <  =  0)  {  for(pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars();  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  <  =  0)  {  for(pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars();  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  <  =  0)  {  for(pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars();  out.write(c);  }	  if(consumed    >    0)    {    for(pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    input.toChars();    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
422	[BUG]  [BUGGY]  if(consumed  >=  0)  {  for(pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars();  out.write(c);  }  [CE]  'else'  without  'if'  [FE]                ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  >=  0)  {  for(pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars();  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  >=  0)  {  for(pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars();  out.write(c);  }	  if(consumed    >    0)    {    for(pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    input.toChars();    out.write(c);    }    	non-compiled	[CE]  'else'  without  'if'	101	None	replace
423	[BUG]  [BUGGY]  if(consumed  <  0)  {  out.write(C);  }  else  {  out.write(c);  }  [CE]  'else'  without  'if'  [FE]        ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  <  0)  {  out.write(C);  }  else  {  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  <  0)  {  out.write(C);  }  else  {  out.write(c);  }	          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed    <    0)    {    out.write(C);    }    else    {    out.write(c);    }    	non-compiled	[CE]  'else'  without  'if'	112	None	replace
424	[BUG]  [BUGGY]  if(consumed  <  =  0)  {  out.write(c);  }  else  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  pos  +=  Character.charCount(Character.codePointAt(pos,  pos));  }  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  <  =  0)  {  out.write(c);  }  else  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  pos  +=  Character.charCount(Character.codePointAt(pos,  pos));  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  <  =  0)  {  out.write(c);  }  else  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  pos  +=  Character.charCount(Character.codePointAt(pos,  pos));  }	          out.write(c);    if(consumed    >    0)    {    out.write(c);    }    else    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    pos    +=    Character.charCount(Character.codePointAt(pos,    pos));    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
425	[BUG]  [BUGGY]  if(consumed  <  =  0)  {  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(c);  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  <  =  0)  {  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(c);  }  [BUGGY]      else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  <  =  0)  {  if(consumed  >  0)  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(c);  }	  if(c!=    null)    {    if(consumed    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    pos    +=    Character.charCount(c);    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
426	[BUG]  [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed  <  0)  {  out.write(c);  }  else  {  out.write(c);  }  if(conumed  <  0)  {  out.write(c);  }  else  {  out.write(c);  }  [CE]  cannot  find  symbol  conumed  [FE]    ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(consumed  <  0)  {  out.write(c);  }  else  {  out.write(c);  }  if(conumed  <  0)  {  out.write(c);  }  else  {  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	                if(consumed        <        0)        {        out.write(c);        }        else        {        out.write(c);        }        if(consumed    <    0)    {    out.write(c);    }    else    {    out.write(c);    }    if(conumed  <  0)  {  out.write(c);  }  else  {  out.write(c);  }	  	non-compiled	[CE]  cannot  find  symbol  conumed	38	None	add
427	[BUG]  [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write('n');  }  else  {  out.write('n');  }  if(conumed  >  0)  {  out.write(c);  }  else  {  out.write('n');  }  [CE]  cannot  find  symbol  conumed  [FE]    ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    >    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  >  0)  {  out.write('n');  }  else  {  out.write('n');  }  if(conumed  >  0)  {  out.write(c);  }  else  {  out.write('n');  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	                if(consumed        >        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    >    0)    {    out.write('n');    }    else    {    out.write('n');    }    if(conumed  >  0)  {  out.write(c);  }  else  {  out.write('n');  }	  	non-compiled	[CE]  cannot  find  symbol  conumed	20	None	add
428	[BUG]  [BUGGY]  if(consumed  <  =  0)  {  out.write(c);  }  else  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pt,  pos));  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  <  =  0)  {  out.write(c);  }  else  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pt,  pos));  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  <  =  0)  {  out.write(c);  }  else  {  for(int  pt  =  0;  pt  <  len;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(pt,  pos));  }	          out.write(c);    if(consumed    >    0)    {    out.write(c);    }    else    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    pos    +=    Character.charCount(Character.codePointAt(pt,    pos));    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
429	[BUG]  [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write('n');  }  else  {  out.write(c);  }  if(consumed  <  =  0)  {  out.write(c);  }  else  {  out.write('n');  }  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write('n');  }  else  {  out.write(c);  }  if(consumed  <  =  0)  {  out.write(c);  }  else  {  out.write('n');  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	                if(consumed        <        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    <    0)    {    out.write('n');    }    else    {    out.write(c);    }    if(consumed  <  =  0)  {  out.write(c);  }  else  {  out.write('n');  }	  	non-compiled	[CE]  illegal  start  of  expression	29	None	add
430	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write('n');  }  else  {  out.write(c);  }  if(consumed  >  0)  {  out.write(c);  }  else  {  out.write('n');  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	add	                if(consumed        <        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    <    0)    {    out.write('n');    }    else    {    out.write(c);    }    if(consumed  >  0)  {  out.write(c);  }  else  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	29	13	add
431	[BUG]  [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write('n');  }  else  {  out.write(c);  }  if(consumed  >  0)  {  out.write(c);  }  else  {  out.write('n');  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write('n');  }  else  {  out.write(c);  }  if(consumed  >  0)  {  out.write(c);  }  else  {  out.write('n');  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	                if(consumed        <        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    <    0)    {    out.write('n');    }    else    {    out.write(c);    }    if(consumed  >  0)  {  out.write(c);  }  else  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	29	13	add
432	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write('n');  }  else  {  out.write(c);  }  if(consumed  <  0)  {  out.write('m');  }  else  {  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	add	                if(consumed        <        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    <    0)    {    out.write('n');    }    else    {    out.write(c);    }    if(consumed  <  0)  {  out.write('m');  }  else  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	29	13	add
433	[BUG]  [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write('n');  }  else  {  out.write(c);  }  if(consumed  <  0)  {  out.write('m');  }  else  {  out.write(c);  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]          if(consumed    <    0)    {    out.write(c);    }    else    {    out.write('n');    }    if(consumed  <  0)  {  out.write('n');  }  else  {  out.write(c);  }  if(consumed  <  0)  {  out.write('m');  }  else  {  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	                if(consumed        <        0)        {        out.write(c);        }        else        {        out.write('n');        }        if(consumed    <    0)    {    out.write('n');    }    else    {    out.write(c);    }    if(consumed  <  0)  {  out.write('m');  }  else  {  out.write(c);  }	  	compilable	  [FE]  ComparisonFailure  	29	13	add
434	[BUG]  [BUGGY]  if(consumed  >=  0)  {  out.write(c);  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars();  out.write(c);  }  [CE]  'else'  without  'if'  [FE]            ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  >=  0)  {  out.write(c);  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars();  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  >=  0)  {  out.write(c);  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars();  out.write(c);  }	  if(consumed    >    0)    {    out.write(c);    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    input.toChars();    out.write(c);    }    	non-compiled	[CE]  'else'  without  'if'	100	None	replace
435	[BUG]  [BUGGY]  out.write(c  +  1,  consumed);  [CE]  'else'  without  'if'  [FE]        ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  out.write(c  +  1,  consumed);  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	out.write(c  +  1,  consumed);	  out.write(c    +    1);    	non-compiled	[CE]  'else'  without  'if'	71	None	replace
436	[BUG]  [BUGGY]  if(pos  >  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  pos  +=  Character.charCount(c[pos]);  }  [CE]  'else'  without  'if'  [FE]                    ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(pos  >  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  pos  +=  Character.charCount(c[pos]);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(pos  >  0)  {  for(int  pt  =  0;  pt  <  consumed;  pt++)  {  pos  +=  Character.charCount(c[pos]);  }	  if(pos    >    0)    {    for(int    pt    =    0;    pt    <    len;    pt++)    {    pos    +=    Character.charCount(c[pos]);    }    	non-compiled	[CE]  'else'  without  'if'	14	None	replace
437	[BUG]  [BUGGY]  if(consumed  <  =  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars();  out.write(c);  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  <  =  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars();  out.write(c);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  <  =  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  char[]  c  =  input.toChars();  out.write(c);  }	  if(consumed    <    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    char[]    c    =    input.toChars();    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
438	[BUG]  [BUGGY]  if(consumed  <  =  0)  {  out.write(c);  }  else  {  for(int  pt  =  0;  pt  <  len  -  2;  pt++)  {  pos  +=  Character.charCount(pt);  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);      [BUGGY]  if(consumed  <  =  0)  {  out.write(c);  }  else  {  for(int  pt  =  0;  pt  <  len  -  2;  pt++)  {  pos  +=  Character.charCount(pt);  }  [BUGGY]      }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	89	89	1	replace	if(consumed  <  =  0)  {  out.write(c);  }  else  {  for(int  pt  =  0;  pt  <  len  -  2;  pt++)  {  pos  +=  Character.charCount(pt);  }	          out.write(c);    if(consumed    >    0)    {    out.write(c);    }    else    {    for(int    pt    =    0;    pt    <    len    -    2;    pt++)    {    pos    +=    Character.charCount(pt);    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
