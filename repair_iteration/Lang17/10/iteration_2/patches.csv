bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(0));  out.write(input.charAt(0));  out.write(input.charAt(0));  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	add	                out.write(input.charAt(0));        out.write(input.charAt(0));    out.write(input.charAt(0));  out.write(input.charAt(0));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	104	19	add
2	[BUG]  [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(0));  out.write(input.charAt(0));  out.write(input.charAt(0));  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(0));  out.write(input.charAt(0));  out.write(input.charAt(0));  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	                out.write(input.charAt(0));        out.write(input.charAt(0));    out.write(input.charAt(0));  out.write(input.charAt(0));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	104	19	add
3	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(0));  out.write(input.charAt(0));  out.write(input.charAt(1));  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	add	                out.write(input.charAt(0));        out.write(input.charAt(0));    out.write(input.charAt(0));  out.write(input.charAt(1));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	104	19	add
4	[BUG]  [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(0));  out.write(input.charAt(0));  out.write(input.charAt(1));  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(0));  out.write(input.charAt(0));  out.write(input.charAt(1));  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	                out.write(input.charAt(0));        out.write(input.charAt(0));    out.write(input.charAt(0));  out.write(input.charAt(1));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	104	19	add
5	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(0));  out.write(input.charAt(1));  out.write(input.charAt(1));  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	add	                out.write(input.charAt(0));        out.write(input.charAt(0));    out.write(input.charAt(1));  out.write(input.charAt(1));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	104	19	add
6	[BUG]  [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(0));  out.write(input.charAt(1));  out.write(input.charAt(1));  [FE]  StringIndexOutOfBoundsException  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(0));  out.write(input.charAt(1));  out.write(input.charAt(1));  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	                out.write(input.charAt(0));        out.write(input.charAt(0));    out.write(input.charAt(1));  out.write(input.charAt(1));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	104	19	add
7	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(0));  out.write(input.charAt(1));  out.write(input.charAt(0));  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	add	                out.write(input.charAt(0));        out.write(input.charAt(0));    out.write(input.charAt(1));  out.write(input.charAt(0));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	104	19	add
8	[BUG]  [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(0));  out.write(input.charAt(1));  out.write(input.charAt(0));  [FE]  StringIndexOutOfBoundsException  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(0));  out.write(input.charAt(1));  out.write(input.charAt(0));  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	                out.write(input.charAt(0));        out.write(input.charAt(0));    out.write(input.charAt(1));  out.write(input.charAt(0));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	104	19	add
9	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]            StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(0));  out.write(input.charAt(1));  out.write(input.charAt(2));  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	add	                out.write(input.charAt(0));        out.write(input.charAt(0));    out.write(input.charAt(1));  out.write(input.charAt(2));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	104	19	add
10	[BUG]  [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(0));  out.write(input.charAt(1));  out.write(input.charAt(2));  [FE]  StringIndexOutOfBoundsException  [FE]            StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(0));  out.write(input.charAt(1));  out.write(input.charAt(2));  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	                out.write(input.charAt(0));        out.write(input.charAt(0));    out.write(input.charAt(1));  out.write(input.charAt(2));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	104	19	add
11	[BUG]  [BUGGY]  out.write('n',  input.length());  [CE]  no  suitable  method  found  for  write(char,int)  [FE]          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  out.write('n',  input.length());  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	out.write('n',  input.length());	  out.write('n');    	non-compiled	[CE]  no  suitable  method  found  for  write(char,int)	24	None	replace
12	[BUG]  [BUGGY]  out.write('n',  0,  input.length());  [CE]  no  suitable  method  found  for  write(char,int,int)  [FE]            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  out.write('n',  0,  input.length());  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	out.write('n',  0,  input.length());	  out.write('n');    	non-compiled	[CE]  no  suitable  method  found  for  write(char,int,int)	24	None	replace
13	[BUG]  [BUGGY]  out.write('n',  pos);  [CE]  cannot  find  symbol  pos  [FE]              ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  out.write('n',  pos);  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	out.write('n',  pos);	  out.write('n');    	non-compiled	[CE]  cannot  find  symbol  pos	24	None	replace
14	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(1));  out.write(input.charAt(0));  out.write(input.charAt(1));  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	add	                out.write(input.charAt(0));        out.write(input.charAt(1));    out.write(input.charAt(0));  out.write(input.charAt(1));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	106	19	add
15	[BUG]  [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(1));  out.write(input.charAt(0));  out.write(input.charAt(1));  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(1));  out.write(input.charAt(0));  out.write(input.charAt(1));  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	                out.write(input.charAt(0));        out.write(input.charAt(1));    out.write(input.charAt(0));  out.write(input.charAt(1));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	106	19	add
16	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(1));  out.write(input.charAt(1));  out.write(input.charAt(1));  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	add	                out.write(input.charAt(0));        out.write(input.charAt(1));    out.write(input.charAt(1));  out.write(input.charAt(1));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	106	19	add
17	[BUG]  [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(1));  out.write(input.charAt(1));  out.write(input.charAt(1));  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(1));  out.write(input.charAt(1));  out.write(input.charAt(1));  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	                out.write(input.charAt(0));        out.write(input.charAt(1));    out.write(input.charAt(1));  out.write(input.charAt(1));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	106	19	add
18	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(1));  out.write(input.charAt(0));  out.write(input.charAt(2));  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	add	                out.write(input.charAt(0));        out.write(input.charAt(1));    out.write(input.charAt(0));  out.write(input.charAt(2));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	106	19	add
19	[BUG]  [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(1));  out.write(input.charAt(0));  out.write(input.charAt(2));  [FE]  StringIndexOutOfBoundsException  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(1));  out.write(input.charAt(0));  out.write(input.charAt(2));  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	                out.write(input.charAt(0));        out.write(input.charAt(1));    out.write(input.charAt(0));  out.write(input.charAt(2));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	106	19	add
20	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(1));  out.write(input.charAt(1));  out.write(input.charAt(2));  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	add	                out.write(input.charAt(0));        out.write(input.charAt(1));    out.write(input.charAt(1));  out.write(input.charAt(2));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	106	19	add
21	[BUG]  [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(1));  out.write(input.charAt(1));  out.write(input.charAt(2));  [FE]  StringIndexOutOfBoundsException  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(1));  out.write(input.charAt(1));  out.write(input.charAt(2));  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	                out.write(input.charAt(0));        out.write(input.charAt(1));    out.write(input.charAt(1));  out.write(input.charAt(2));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	106	19	add
22	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]            StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(1));  out.write(input.charAt(0));  out.write(input.charAt(3));  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	add	                out.write(input.charAt(0));        out.write(input.charAt(1));    out.write(input.charAt(0));  out.write(input.charAt(3));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	106	19	add
23	[BUG]  [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(1));  out.write(input.charAt(0));  out.write(input.charAt(3));  [FE]  StringIndexOutOfBoundsException  [FE]            StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(1));  out.write(input.charAt(0));  out.write(input.charAt(3));  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	                out.write(input.charAt(0));        out.write(input.charAt(1));    out.write(input.charAt(0));  out.write(input.charAt(3));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	106	19	add
24	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  Integer  pos  =  1;  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	add	Integer  pos  =  1;	  int    pos    =    1;    Integer    pos    =    1;    	compilable	  [FE]  AssertionFailedError  	67	19	replace
25	[BUG]  [BUGGY]  Integer  pos  =  1;  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  Integer  pos  =  1;  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	Integer  pos  =  1;	  int    pos    =    1;    Integer    pos    =    1;    	compilable	  [FE]  AssertionFailedError  	67	19	replace
26	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  char  pos  =  1;  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	add	char  pos  =  1;	  int    pos    =    1;    Integer    pos    =    1;    	compilable	  [FE]  AssertionFailedError  	67	19	replace
27	[BUG]  [BUGGY]  char  pos  =  1;  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  char  pos  =  1;  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	char  pos  =  1;	  int    pos    =    1;    Integer    pos    =    1;    	compilable	  [FE]  AssertionFailedError  	67	19	replace
28	[BUG]  [BUGGY]  if(input.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  pos  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(input.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	if(input.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	          if(input    ==    null)    {    throw    new    IllegalArgumentException(       "       ");    }    if(input    ==    null)    {    throw    new    IllegalArgumentException(   ".       ");    }    	non-compiled	[CE]  cannot  find  symbol  pos	150	None	replace
29	[BUG]  [BUGGY]  if(out  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  pos  [FE]      ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(out  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	if(out  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	          if(input    ==    null)    {    throw    new    IllegalArgumentException(       "       ");    }    if(input    ==    null)    {    throw    new    IllegalArgumentException(   ".       ");    }    	non-compiled	[CE]  cannot  find  symbol  pos	150	None	replace
30	[BUG]  [BUGGY]  char[]  input  =  input.toChars();  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  char[]  input  =  input.toChars();  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	char[]  input  =  input.toChars();	          out.write(input.charAt(0));    char[]    input    =    input.toChars();    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	144	None	replace
31	[BUG]  [BUGGY]  out.write(input.charAt(0));  char[]  input  =  input.toString();  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  out.write(input.charAt(0));  char[]  input  =  input.toString();  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	out.write(input.charAt(0));  char[]  input  =  input.toString();	          out.write(input.charAt(0));    char[]    input    =    input.toChars();    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	144	None	replace
32	[BUG]  [BUGGY]  char  input  =  input.charAt(0);  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  char  input  =  input.charAt(0);  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	char  input  =  input.charAt(0);	          out.write(input.charAt(0));    int    input    =    input.charAt(0);    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	145	None	replace
33	[BUG]  [BUGGY]  out.write(input.charAt(0));  int  input  =  input.charAt(1);  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  out.write(input.charAt(0));  int  input  =  input.charAt(1);  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	out.write(input.charAt(0));  int  input  =  input.charAt(1);	          out.write(input.charAt(0));    int    input    =    input.charAt(0);    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	145	None	replace
34	[BUG]  [BUGGY]  int  pos  =  output.length();  [CE]  cannot  find  symbol  output  [FE]    AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =  output.length();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	int  pos  =  output.length();	  int    pos    =    input.length()    -    2;    	non-compiled	[CE]  cannot  find  symbol  output	6	None	replace
35	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  Integer  pos  =  input.length();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	add	Integer  pos  =  input.length();	  int    pos    =    input.length()    -    2;    	compilable	  [FE]  AssertionFailedError  	6	19	replace
36	[BUG]  [BUGGY]  Integer  pos  =  input.length();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  Integer  pos  =  input.length();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	Integer  pos  =  input.length();	  int    pos    =    input.length()    -    2;    	compilable	  [FE]  AssertionFailedError  	6	19	replace
37	[BUG]  [BUGGY]  out.write(input,  0,  input.length());  [CE]  no  suitable  method  found  for  write(CharSequence,int,int)  [FE]          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  out.write(input,  0,  input.length());  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	out.write(input,  0,  input.length());	  out.write(input);    	non-compiled	[CE]  no  suitable  method  found  for  write(CharSequence,int,int)	123	None	replace
38	[BUG]  [BUGGY]  out.write(input,  pos);  [CE]  cannot  find  symbol  pos  [FE]            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  out.write(input,  pos);  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	out.write(input,  pos);	  out.write(input);    	non-compiled	[CE]  cannot  find  symbol  pos	123	None	replace
39	[BUG]  [BUGGY]  out.write(c);  [CE]  cannot  find  symbol  c  [FE]              ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  out.write(c);  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	out.write(c);	  out.write(input);    	non-compiled	[CE]  cannot  find  symbol  c	123	None	replace
40	[BUG]  [BUGGY]  out.write(input,  pt);  [CE]  cannot  find  symbol  pt  [FE]                ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  out.write(input,  pt);  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	out.write(input,  pt);	  out.write(input);    	non-compiled	[CE]  cannot  find  symbol  pt	123	None	replace
41	[BUG]  [BUGGY]  int  pos  =  0;  Int  pos  =  0;  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =  0;  Int  pos  =  0;  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	int  pos  =  0;  Int  pos  =  0;	  int    pos    =    1;    Int    pos    =    1;    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
42	[BUG]  [BUGGY]  int  pos  =  0;  Int  pos  =  1;  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =  0;  Int  pos  =  1;  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	int  pos  =  0;  Int  pos  =  1;	  int    pos    =    1;    Int    pos    =    1;    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
43	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  Integer  pos  =(input!=  null)?  0  :  input.length();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	add	Integer  pos  =(input!=  null)?  0  :  input.length();	  int    pos    =(input!=    null)?    0    :    input.length();    int    pos    =(input!=    null)?    0    :    input.length();    	compilable	  [FE]  ComparisonFailure  	43	1	replace
44	[BUG]  [BUGGY]  Integer  pos  =(input!=  null)?  0  :  input.length();  [FE]  ComparisonFailure  [FE]        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  Integer  pos  =(input!=  null)?  0  :  input.length();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	Integer  pos  =(input!=  null)?  0  :  input.length();	  int    pos    =(input!=    null)?    0    :    input.length();    int    pos    =(input!=    null)?    0    :    input.length();    	compilable	  [FE]  ComparisonFailure  	43	1	replace
45	[BUG]  [BUGGY]  int  pos  =  input.length()  -  1;  int  pos  =  input.length()  -  1;  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]    AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =  input.length()  -  1;  int  pos  =  input.length()  -  1;  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	int    pos    =    input.length()    -    1;    int  pos  =  input.length()  -  1;	  	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	1	None	add
46	[BUG]  [BUGGY]  int  pos  =  input.length()  -  1;  Integer  pos  =  input.length()  -  1;  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]      AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =  input.length()  -  1;  Integer  pos  =  input.length()  -  1;  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	int    pos    =    input.length()    -    1;    Integer  pos  =  input.length()  -  1;	  	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	1	None	add
47	[BUG]  [BUGGY]  int  pos  =  input.length()  -  1;  Int  pos  =  input.length()  -  1;  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =  input.length()  -  1;  Int  pos  =  input.length()  -  1;  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	int    pos    =    input.length()    -    1;    Int  pos  =  input.length()  -  1;	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
48	[BUG]  [BUGGY]  int  pos  =  input.length()  -  1;  pos  =  input.length()  -  1;  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]          AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =  input.length()  -  1;  pos  =  input.length()  -  1;  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	int    pos    =    input.length()    -    1;    pos  =  input.length()  -  1;	  	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	1	None	add
49	[BUG]  [BUGGY]  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null. ");  }  [CE]  cannot  find  symbol  pos  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null. ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null. ");  }	          if(input    ==    null)    {    throw    new    IllegalArgumentException(       "The    Writer    must    be    null.       ");    }    if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    be    null..   ");    }    	non-compiled	[CE]  cannot  find  symbol  pos	97	None	replace
50	[BUG]  [BUGGY]  If(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null. ");  }  [CE]  [FE]        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  If(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null. ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	If(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null. ");  }	  if(out    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    be    null.   ");    }    	non-compiled	[CE]  	121	None	replace
51	[BUG]  [BUGGY]  while(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null. ");  }  [CE]  cannot  find  symbol  pos  [FE]          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  while(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null. ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	while(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null. ");  }	  if(out    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    be    null.   ");    }    	non-compiled	[CE]  cannot  find  symbol  pos	121	None	replace
52	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	add	                if(input        ==        null)        {        out.write('n');        }        if(input    ==    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	79	1	add
53	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	                if(input        ==        null)        {        out.write('n');        }        if(input    ==    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	79	1	add
54	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	add	                if(input        ==        null)        {        out.write('n');        }        if(input    ==    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	79	19	add
55	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	                if(input        ==        null)        {        out.write('n');        }        if(input    ==    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	79	19	add
56	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	add	                if(input        ==        null)        {        out.write('n');        }        if(input    ==    null)    {    out.write('n');    }    if(input!=  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	79	19	add
57	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	                if(input        ==        null)        {        out.write('n');        }        if(input    ==    null)    {    out.write('n');    }    if(input!=  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	79	19	add
58	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  if(input  >=  null)  {  out.write('n');  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]          ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  if(input  >=  null)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	                if(input        ==        null)        {        out.write('n');        }        if(input    ==    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  }  if(input  >=  null)  {  out.write('n');  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	79	None	add
59	[BUG]  [BUGGY]  String  input  =  input.length();  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]              ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  String  input  =  input.length();  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	String  input  =  input.length();	  char    input    =    input.length();    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	78	None	replace
60	[BUG]  [BUGGY]  Char  input  =  input.length();  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  Char  input  =  input.length();  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	Char  input  =  input.length();	  char    input    =    input.length();    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
61	[BUG]  [BUGGY]  out.write(input.charAt(0));  String  input  =  input.getChars();  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  out.write(input.charAt(0));  String  input  =  input.getChars();  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	out.write(input.charAt(0));  String  input  =  input.getChars();	          out.write(input.charAt(0));    char[]    input    =    input.getChars();    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	110	None	replace
62	[BUG]  [BUGGY]  Char  pos  =(input  ==  null)?  0  :  input.length();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  Char  pos  =(input  ==  null)?  0  :  input.length();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	Char  pos  =(input  ==  null)?  0  :  input.length();	  char    pos    =(input    ==    null)?    0    :    input.length();    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
63	[BUG]  [BUGGY]  String  pos  =(input  ==  null)?  0  :  input.length();  [CE]  incompatible  types  [FE]          AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  String  pos  =(input  ==  null)?  0  :  input.length();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	String  pos  =(input  ==  null)?  0  :  input.length();	  char    pos    =(input    ==    null)?    0    :    input.length();    	non-compiled	[CE]  incompatible  types	112	None	replace
64	[BUG]  [BUGGY]  Character  pos  =(input  ==  null)?  0  :  input.length();  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  Character  pos  =(input  ==  null)?  0  :  input.length();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	Character  pos  =(input  ==  null)?  0  :  input.length();	  char    pos    =(input    ==    null)?    0    :    input.length();    	non-compiled	[CE]  incompatible  types	112	None	replace
65	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	add	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        not        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }	  	compilable	  [FE]  ComparisonFailure  	52	1	add
66	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        not        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }	  	compilable	  [FE]  ComparisonFailure  	52	1	add
67	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	add	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        not        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }	  	compilable	  [FE]  ComparisonFailure  	52	1	add
68	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        not        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }	  	compilable	  [FE]  ComparisonFailure  	52	1	add
69	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	add	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        not        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }	  	compilable	  [FE]  IllegalArgumentException  	52	19	add
70	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  [FE]  IllegalArgumentException  [FE]        ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        not        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }	  	compilable	  [FE]  IllegalArgumentException  	52	19	add
71	[BUG]  [BUGGY]  char  pos  =  1;  int  pos  =  2;  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]        AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  char  pos  =  1;  int  pos  =  2;  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	char  pos  =  1;  int  pos  =  2;	  int    pos    =    1;    int    pos    =    2;    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	129	None	replace
72	[BUG]  [BUGGY]  if(input!=  null  ||  input.length()  ==  0)  {  out.write('n');  }  [CE]  cannot  find  symbol  pos  [FE]        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(input!=  null  ||  input.length()  ==  0)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	if(input!=  null  ||  input.length()  ==  0)  {  out.write('n');  }	  if(input    ==    null    ||    input.length()    ==    0)    {    out.write('n');    }    	non-compiled	[CE]  cannot  find  symbol  pos	158	None	replace
73	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()!=  0)  {  out.write('n');  }  [CE]  cannot  find  symbol  pos  [FE]          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(input  ==  null  ||  input.length()!=  0)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	if(input  ==  null  ||  input.length()!=  0)  {  out.write('n');  }	  if(input    ==    null    ||    input.length()    ==    0)    {    out.write('n');    }    	non-compiled	[CE]  cannot  find  symbol  pos	158	None	replace
74	[BUG]  [BUGGY]  char  pos  =  input.charAt(0);  char  pos  =  input.charAt(0);  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]    AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  char  pos  =  input.charAt(0);  char  pos  =  input.charAt(0);  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	char    pos    =    input.charAt(0);    char  pos  =  input.charAt(0);	  	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	19	None	add
75	[BUG]  [BUGGY]  char  pos  =  input.charAt(0);  char  pos  =  input.charAt(1);  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]      AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  char  pos  =  input.charAt(0);  char  pos  =  input.charAt(1);  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	char    pos    =    input.charAt(0);    char  pos  =  input.charAt(1);	  	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	19	None	add
76	[BUG]  [BUGGY]  char  pos  =  input.charAt(0);  Character  pos  =  input.charAt(0);  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]        AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  char  pos  =  input.charAt(0);  Character  pos  =  input.charAt(0);  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	char    pos    =    input.charAt(0);    Character  pos  =  input.charAt(0);	  	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	19	None	add
77	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  Integer  pos  =(input  ==  null)?  0  :  input.length();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	add	Integer  pos  =(input  ==  null)?  0  :  input.length();	  int    pos    =(input!=    null)?    0    :    input.length();    int    pos    =(input    ==    null)?    0    :    input.length();    	compilable	  [FE]  AssertionFailedError  	44	19	replace
78	[BUG]  [BUGGY]  Integer  pos  =(input  ==  null)?  0  :  input.length();  [FE]  AssertionFailedError  [FE]          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  Integer  pos  =(input  ==  null)?  0  :  input.length();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	Integer  pos  =(input  ==  null)?  0  :  input.length();	  int    pos    =(input!=    null)?    0    :    input.length();    int    pos    =(input    ==    null)?    0    :    input.length();    	compilable	  [FE]  AssertionFailedError  	44	19	replace
79	[BUG]  [BUGGY]  String  inputLength  =  input.length();  [CE]  incompatible  types  [FE]        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  String  inputLength  =  input.length();  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	String  inputLength  =  input.length();	  char    inputLength    =    input.length();    	non-compiled	[CE]  incompatible  types	128	None	replace
80	[BUG]  [BUGGY]  Char  inputLength  =  input.length();  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  Char  inputLength  =  input.length();  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	Char  inputLength  =  input.length();	  char    inputLength    =    input.length();    	non-compiled	[CE]  cannot  find  symbol	128	None	replace
81	[BUG]  [BUGGY]  Character  inputLength  =  input.length();  [CE]  incompatible  types  [FE]            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  Character  inputLength  =  input.length();  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	Character  inputLength  =  input.length();	  char    inputLength    =    input.length();    	non-compiled	[CE]  incompatible  types	128	None	replace
82	[BUG]  [BUGGY]  OutputStream  input  =  input.getOutputStream();  [CE]  cannot  find  symbol  [FE]        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  OutputStream  input  =  input.getOutputStream();  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	OutputStream  input  =  input.getOutputStream();	  OutputStream    input    =    output.getOutputStream();    	non-compiled	[CE]  cannot  find  symbol	131	None	replace
83	[BUG]  [BUGGY]  OutputStream  input  =  out.getOutputStream();  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  OutputStream  input  =  out.getOutputStream();  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	OutputStream  input  =  out.getOutputStream();	  OutputStream    input    =    output.getOutputStream();    	non-compiled	[CE]  cannot  find  symbol	131	None	replace
84	[BUG]  [BUGGY]  OutputStream  input  =  this.output.getOutputStream();  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  OutputStream  input  =  this.output.getOutputStream();  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	OutputStream  input  =  this.output.getOutputStream();	  OutputStream    input    =    output.getOutputStream();    	non-compiled	[CE]  cannot  find  symbol	131	None	replace
85	[BUG]  [BUGGY]  Char[]  input  =  input.getInputChars();  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  Char[]  input  =  input.getInputChars();  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	Char[]  input  =  input.getInputChars();	  char[]    input    =    input.getInputChars();    	non-compiled	[CE]  cannot  find  symbol	159	None	replace
86	[BUG]  [BUGGY]  CharSequence  input  =  input.getInputChars();  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  CharSequence  input  =  input.getInputChars();  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	CharSequence  input  =  input.getInputChars();	  char[]    input    =    input.getInputChars();    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	159	None	replace
87	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()!=  0)  {  throw  new  IllegalArgumentException( "Input  input  is  null. ");  }  [CE]  cannot  find  symbol  pos  [FE]        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(input  ==  null  ||  input.length()!=  0)  {  throw  new  IllegalArgumentException( "Input  input  is  null. ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	if(input  ==  null  ||  input.length()!=  0)  {  throw  new  IllegalArgumentException( "Input  input  is  null. ");  }	  if(input    ==    null    ||    input.length()    ==    0)    {    throw    new    IllegalArgumentException(   "Input    input    is    null.   ");    }    	non-compiled	[CE]  cannot  find  symbol  pos	148	None	replace
88	[BUG]  [BUGGY]  if(input!=  null  ||  input.length()  ==  0)  {  throw  new  IllegalArgumentException( "Input  input  is  null. ");  }  [CE]  cannot  find  symbol  pos  [FE]          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(input!=  null  ||  input.length()  ==  0)  {  throw  new  IllegalArgumentException( "Input  input  is  null. ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	if(input!=  null  ||  input.length()  ==  0)  {  throw  new  IllegalArgumentException( "Input  input  is  null. ");  }	  if(input    ==    null    ||    input.length()    ==    0)    {    throw    new    IllegalArgumentException(   "Input    input    is    null.   ");    }    	non-compiled	[CE]  cannot  find  symbol  pos	148	None	replace
89	[BUG]  [BUGGY]  If(input  ==  null  ||  input.length()  ==  0)  {  throw  new  IllegalArgumentException( "Input  input  is  null. ");  }  [CE]  [FE]            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  If(input  ==  null  ||  input.length()  ==  0)  {  throw  new  IllegalArgumentException( "Input  input  is  null. ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	If(input  ==  null  ||  input.length()  ==  0)  {  throw  new  IllegalArgumentException( "Input  input  is  null. ");  }	  if(input    ==    null    ||    input.length()    ==    0)    {    throw    new    IllegalArgumentException(   "Input    input    is    null.   ");    }    	non-compiled	[CE]  	148	None	replace
90	[BUG]  [BUGGY]  If(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }  [CE]  [FE]          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  If(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	If(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }	  if(input!=    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null.   ");    }    	non-compiled	[CE]  	133	None	replace
91	[BUG]  [BUGGY]  while(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }  [CE]  cannot  find  symbol  pos  [FE]            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  while(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	while(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }	  if(input!=    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null.   ");    }    	non-compiled	[CE]  cannot  find  symbol  pos	133	None	replace
92	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	add	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    be    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }	  	compilable	  [FE]  ComparisonFailure  	94	1	add
93	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    be    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }	  	compilable	  [FE]  ComparisonFailure  	94	1	add
94	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	add	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    be    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }	  	compilable	  [FE]  ComparisonFailure  	94	1	add
95	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    be    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }	  	compilable	  [FE]  ComparisonFailure  	94	1	add
96	[BUG]  [BUGGY]  Int  pos  =(input!=  null)?  0  :  input.length();  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  Int  pos  =(input!=  null)?  0  :  input.length();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	Int  pos  =(input!=  null)?  0  :  input.length();	  int    pos    =(input!=    null)?    0    :    input.length();    Int    pos    =(input!=    null)?    0    :    input.length();    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
97	[BUG]  [BUGGY]  Int  pos  =(input  ==  null)?  0  :  input.length();  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  Int  pos  =(input  ==  null)?  0  :  input.length();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	Int  pos  =(input  ==  null)?  0  :  input.length();	  int    pos    =(input!=    null)?    0    :    input.length();    Int    pos    =(input!=    null)?    0    :    input.length();    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
98	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "Input    input    is    null.     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(   "Input  input  is  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null.   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	add	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "Input        input        is        null.       ");        }        if(input!=    null)    {    throw    new    IllegalArgumentException(   "Input    input    is    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null.   ");  }	  	compilable	  [FE]  IllegalArgumentException  	71	19	add
99	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "Input    input    is    null.     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(   "Input  input  is  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null.   ");  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "Input    input    is    null.     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(   "Input  input  is  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null.   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "Input        input        is        null.       ");        }        if(input!=    null)    {    throw    new    IllegalArgumentException(   "Input    input    is    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null.   ");  }	  	compilable	  [FE]  IllegalArgumentException  	71	19	add
100	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "Input    input    is    null.     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(   "Input  input  is  null.     ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null.   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	add	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "Input        input        is        null.       ");        }        if(input!=    null)    {    throw    new    IllegalArgumentException(   "Input    input    is    null.       ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null.   ");  }	  	compilable	  [FE]  IllegalArgumentException  	71	19	add
101	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "Input    input    is    null.     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(   "Input  input  is  null.     ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null.   ");  }  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "Input    input    is    null.     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(   "Input  input  is  null.     ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null.   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "Input        input        is        null.       ");        }        if(input!=    null)    {    throw    new    IllegalArgumentException(   "Input    input    is    null.       ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null.   ");  }	  	compilable	  [FE]  IllegalArgumentException  	71	19	add
102	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  char  pos  =  input.charAt(input.length());  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	add	char  pos  =  input.charAt(input.length());	  char    pos    =    input.charAt(pos);    	compilable	  [FE]  StringIndexOutOfBoundsException  	22	19	replace
103	[BUG]  [BUGGY]  char  pos  =  input.charAt(input.length());  [FE]  StringIndexOutOfBoundsException  [FE]            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  char  pos  =  input.charAt(input.length());  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	char  pos  =  input.charAt(input.length());	  char    pos    =    input.charAt(pos);    	compilable	  [FE]  StringIndexOutOfBoundsException  	22	19	replace
104	[BUG]  [BUGGY]  char  pos  =  input.charAt(offset);  [CE]  cannot  find  symbol  offset  [FE]              ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  char  pos  =  input.charAt(offset);  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	char  pos  =  input.charAt(offset);	  char    pos    =    input.charAt(pos);    	non-compiled	[CE]  cannot  find  symbol  offset	22	None	replace
105	[BUG]  [BUGGY]  char  pos  =  input.charAt(out);  [CE]  method  charAt  in  interface  CharSequence  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  char  pos  =  input.charAt(out);  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	char  pos  =  input.charAt(out);	  char    pos    =    input.charAt(pos);    	non-compiled	[CE]  method  charAt  in  interface  CharSequence  cannot  be  applied  to  given  types;	22	None	replace
106	[BUG]  [BUGGY]  if(inputLength  >  0)  {  int  inputLength  =  input.length();  int  outputLength  =  input.length();  }  [CE]  cannot  find  symbol  inputLength  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(inputLength  >  0)  {  int  inputLength  =  input.length();  int  outputLength  =  input.length();  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	if(inputLength  >  0)  {  int  inputLength  =  input.length();  int  outputLength  =  input.length();  }	          int    inputLength    =    input.length();    int    outputLength    =    input.length();    	non-compiled	[CE]  cannot  find  symbol  inputLength	42	None	replace
107	[BUG]  [BUGGY]  Integer  inputLength  =  input.length();  [CE]  cannot  find  symbol  pos  [FE]      ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  Integer  inputLength  =  input.length();  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	Integer  inputLength  =  input.length();	          int    inputLength    =    input.length();    int    outputLength    =    input.length();    	non-compiled	[CE]  cannot  find  symbol  pos	42	None	replace
108	[BUG]  [BUGGY]  out  =  0;  [CE]  incompatible  types  [FE]        AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  out  =  0;  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	out  =  0;	  pos    =    0;    	non-compiled	[CE]  incompatible  types	111	None	replace
109	[BUG]  [BUGGY]  pt  =  0;  [CE]  cannot  find  symbol  pt  [FE]          AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  pt  =  0;  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	pt  =  0;	  pos    =    0;    	non-compiled	[CE]  cannot  find  symbol  pt	111	None	replace
110	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(this,  input);  [CE]  method  setContextClassLoader  in  class  Thread  cannot  be  applied  to  given  types;  [FE]        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  Thread.currentThread().setContextClassLoader(this,  input);  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	Thread.currentThread().setContextClassLoader(this,  input);	  Thread.currentThread().setContextClassLoader(this);    	non-compiled	[CE]  method  setContextClassLoader  in  class  Thread  cannot  be  applied  to  given  types;	34	None	replace
111	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(this,  out);  [CE]  method  setContextClassLoader  in  class  Thread  cannot  be  applied  to  given  types;  [FE]          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  Thread.currentThread().setContextClassLoader(this,  out);  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	Thread.currentThread().setContextClassLoader(this,  out);	  Thread.currentThread().setContextClassLoader(this);    	non-compiled	[CE]  method  setContextClassLoader  in  class  Thread  cannot  be  applied  to  given  types;	34	None	replace
112	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(input,  this);  [CE]  method  setContextClassLoader  in  class  Thread  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  Thread.currentThread().setContextClassLoader(input,  this);  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	Thread.currentThread().setContextClassLoader(input,  this);	  Thread.currentThread().setContextClassLoader(this);    	non-compiled	[CE]  method  setContextClassLoader  in  class  Thread  cannot  be  applied  to  given  types;	34	None	replace
113	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(out,  this);  [CE]  method  setContextClassLoader  in  class  Thread  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  Thread.currentThread().setContextClassLoader(out,  this);  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	Thread.currentThread().setContextClassLoader(out,  this);	  Thread.currentThread().setContextClassLoader(this);    	non-compiled	[CE]  method  setContextClassLoader  in  class  Thread  cannot  be  applied  to  given  types;	34	None	replace
114	[BUG]  [BUGGY]  out.write(input.charAt(1)+  input.length());  [CE]  cannot  find  symbol  pos  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  out.write(input.charAt(1)+  input.length());  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	out.write(input.charAt(1)+  input.length());	  out.write(input.charAt(0)    +    input.length());    	non-compiled	[CE]  cannot  find  symbol  pos	11	None	replace
115	[BUG]  [BUGGY]  out.write(input.charAt(0)+  input.length()  -  1);  [CE]  cannot  find  symbol  pos  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  out.write(input.charAt(0)+  input.length()  -  1);  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	out.write(input.charAt(0)+  input.length()  -  1);	  out.write(input.charAt(0)    +    input.length());    	non-compiled	[CE]  cannot  find  symbol  pos	11	None	replace
116	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(2));  out.write(input.charAt(0));  out.write(input.charAt(2));  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	add	                out.write(input.charAt(0));        out.write(input.charAt(2));    out.write(input.charAt(0));  out.write(input.charAt(2));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	134	19	add
117	[BUG]  [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(2));  out.write(input.charAt(0));  out.write(input.charAt(2));  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(2));  out.write(input.charAt(0));  out.write(input.charAt(2));  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	                out.write(input.charAt(0));        out.write(input.charAt(2));    out.write(input.charAt(0));  out.write(input.charAt(2));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	134	19	add
118	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(2));  out.write(input.charAt(1));  out.write(input.charAt(2));  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	add	                out.write(input.charAt(0));        out.write(input.charAt(2));    out.write(input.charAt(1));  out.write(input.charAt(2));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	134	19	add
119	[BUG]  [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(2));  out.write(input.charAt(1));  out.write(input.charAt(2));  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(2));  out.write(input.charAt(1));  out.write(input.charAt(2));  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	                out.write(input.charAt(0));        out.write(input.charAt(2));    out.write(input.charAt(1));  out.write(input.charAt(2));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	134	19	add
120	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(2));  out.write(input.charAt(0));  out.write(input.charAt(3));  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	add	                out.write(input.charAt(0));        out.write(input.charAt(2));    out.write(input.charAt(0));  out.write(input.charAt(3));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	134	19	add
121	[BUG]  [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(2));  out.write(input.charAt(0));  out.write(input.charAt(3));  [FE]  StringIndexOutOfBoundsException  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(2));  out.write(input.charAt(0));  out.write(input.charAt(3));  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	                out.write(input.charAt(0));        out.write(input.charAt(2));    out.write(input.charAt(0));  out.write(input.charAt(3));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	134	19	add
122	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(2));  out.write(input.charAt(1));  out.write(input.charAt(3));  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	add	                out.write(input.charAt(0));        out.write(input.charAt(2));    out.write(input.charAt(1));  out.write(input.charAt(3));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	134	19	add
123	[BUG]  [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(2));  out.write(input.charAt(1));  out.write(input.charAt(3));  [FE]  StringIndexOutOfBoundsException  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(2));  out.write(input.charAt(1));  out.write(input.charAt(3));  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	                out.write(input.charAt(0));        out.write(input.charAt(2));    out.write(input.charAt(1));  out.write(input.charAt(3));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	134	19	add
124	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]            StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(2));  out.write(input.charAt(0));  out.write(input.charAt(1));  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	add	                out.write(input.charAt(0));        out.write(input.charAt(2));    out.write(input.charAt(0));  out.write(input.charAt(1));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	134	19	add
125	[BUG]  [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(2));  out.write(input.charAt(0));  out.write(input.charAt(1));  [FE]  StringIndexOutOfBoundsException  [FE]            StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(2));  out.write(input.charAt(0));  out.write(input.charAt(1));  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	                out.write(input.charAt(0));        out.write(input.charAt(2));    out.write(input.charAt(0));  out.write(input.charAt(1));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	134	19	add
126	[BUG]  [BUGGY]  if(input!=  null)  {  if(input.length()  ==  0)  {  out.write('n');  }  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(input!=  null)  {  if(input.length()  ==  0)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	if(input!=  null)  {  if(input.length()  ==  0)  {  out.write('n');  }	          if(input.length()    ==    0)    {    out.write('n');    }    if(input.length()    {    0)    {    out.write('n');    }    	non-compiled	[CE]  illegal  start  of  expression	140	None	replace
127	[BUG]  [BUGGY]  if(input.length()  <  =  0)  {  if(input.length()  ==  0)  {  out.write('n');  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(input.length()  <  =  0)  {  if(input.length()  ==  0)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	if(input.length()  <  =  0)  {  if(input.length()  ==  0)  {  out.write('n');  }	          if(input.length()    ==    0)    {    out.write('n');    }    if(input.length()    {    0)    {    out.write('n');    }    	non-compiled	[CE]  illegal  start  of  expression	140	None	replace
128	[BUG]  [BUGGY]  OutputFactory  outputFactory  =  getOutputFactoryInput();  [CE]  cannot  find  symbol  [FE]        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  OutputFactory  outputFactory  =  getOutputFactoryInput();  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	OutputFactory  outputFactory  =  getOutputFactoryInput();	  OutputFactory    outputFactory    =    getOutputFactory();    	non-compiled	[CE]  cannot  find  symbol	130	None	replace
129	[BUG]  [BUGGY]  OutputFactory  outputFactory  =  getOutputFactory(out);  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  OutputFactory  outputFactory  =  getOutputFactory(out);  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	OutputFactory  outputFactory  =  getOutputFactory(out);	  OutputFactory    outputFactory    =    getOutputFactory();    	non-compiled	[CE]  cannot  find  symbol	130	None	replace
130	[BUG]  [BUGGY]  OutputFactory  outputFactory  =  getOutputFactory().outputFactory;  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  OutputFactory  outputFactory  =  getOutputFactory().outputFactory;  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	OutputFactory  outputFactory  =  getOutputFactory().outputFactory;	  OutputFactory    outputFactory    =    getOutputFactory();    	non-compiled	[CE]  cannot  find  symbol	130	None	replace
131	[BUG]  [BUGGY]  if(input.length()  >  0)  {  if(input.length()  ==  0)  {  out.write('n');  }  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(input.length()  >  0)  {  if(input.length()  ==  0)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	if(input.length()  >  0)  {  if(input.length()  ==  0)  {  out.write('n');  }	          if(input.length()    ==    0)    {    out.write('n');    }    if(input.length()!=    0)    {    out.write('n');    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
132	[BUG]  [BUGGY]  if(input.length()  >  0)  {  if(input.length()!=  0)  {  out.write('n');  }  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(input.length()  >  0)  {  if(input.length()!=  0)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	if(input.length()  >  0)  {  if(input.length()!=  0)  {  out.write('n');  }	          if(input.length()    ==    0)    {    out.write('n');    }    if(input.length()!=    0)    {    out.write('n');    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
133	[BUG]  [BUGGY]  out.write(input.substring(pos,  input.length()));  [CE]  cannot  find  symbol  pos  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  out.write(input.substring(pos,  input.length()));  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	out.write(input.substring(pos,  input.length()));	  out.write(input.substring(1));    	non-compiled	[CE]  cannot  find  symbol  pos	12	None	replace
134	[BUG]  [BUGGY]  If(input  ==  null)  {  throw  new  IllegalArgumentException( "Input  input  must  not  be  null. ");  }  [CE]  [FE]            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  If(input  ==  null)  {  throw  new  IllegalArgumentException( "Input  input  must  not  be  null. ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	If(input  ==  null)  {  throw  new  IllegalArgumentException( "Input  input  must  not  be  null. ");  }	  if(input    ==    null)    {    throw    new    IllegalArgumentException(   "Input    input    must    not    be    null.   ");    }    	non-compiled	[CE]  	64	None	replace
135	[BUG]  [BUGGY]  if(input!=  null)  {  throw  new  IllegalArgumentException( "Input  input  must  not  be  null. ");  }  [CE]  cannot  find  symbol  pos  [FE]              ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(input!=  null)  {  throw  new  IllegalArgumentException( "Input  input  must  not  be  null. ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	if(input!=  null)  {  throw  new  IllegalArgumentException( "Input  input  must  not  be  null. ");  }	  if(input    ==    null)    {    throw    new    IllegalArgumentException(   "Input    input    must    not    be    null.   ");    }    	non-compiled	[CE]  cannot  find  symbol  pos	64	None	replace
136	[BUG]  [BUGGY]  if(out  ==  null)  {  throw  new  IllegalArgumentException( "Input  input  must  not  be  null. ");  }  [CE]  cannot  find  symbol  pos  [FE]                ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(out  ==  null)  {  throw  new  IllegalArgumentException( "Input  input  must  not  be  null. ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	if(out  ==  null)  {  throw  new  IllegalArgumentException( "Input  input  must  not  be  null. ");  }	  if(input    ==    null)    {    throw    new    IllegalArgumentException(   "Input    input    must    not    be    null.   ");    }    	non-compiled	[CE]  cannot  find  symbol  pos	64	None	replace
137	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(input,  out);  [CE]  method  setContextClassLoader  in  class  Thread  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  Thread.currentThread().setContextClassLoader(input,  out);  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	Thread.currentThread().setContextClassLoader(input,  out);	  Thread.currentThread().setContextClassLoader(input);    	non-compiled	[CE]  method  setContextClassLoader  in  class  Thread  cannot  be  applied  to  given  types;	36	None	replace
138	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(out,  input);  [CE]  method  setContextClassLoader  in  class  Thread  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  Thread.currentThread().setContextClassLoader(out,  input);  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	Thread.currentThread().setContextClassLoader(out,  input);	  Thread.currentThread().setContextClassLoader(input);    	non-compiled	[CE]  method  setContextClassLoader  in  class  Thread  cannot  be  applied  to  given  types;	36	None	replace
139	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(out);  [CE]  method  setContextClassLoader  in  class  Thread  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  Thread.currentThread().setContextClassLoader(out);  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	Thread.currentThread().setContextClassLoader(out);	  Thread.currentThread().setContextClassLoader(input);    	non-compiled	[CE]  method  setContextClassLoader  in  class  Thread  cannot  be  applied  to  given  types;	36	None	replace
140	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(input,  output);  [CE]  cannot  find  symbol  output  [FE]                  ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  Thread.currentThread().setContextClassLoader(input,  output);  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	Thread.currentThread().setContextClassLoader(input,  output);	  Thread.currentThread().setContextClassLoader(input);    	non-compiled	[CE]  cannot  find  symbol  output	36	None	replace
141	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "Input    input    is    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "Input  input  is  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null.   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	add	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "Input        input        is        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "Input    input    is    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null.   ");  }	  	compilable	  [FE]  ComparisonFailure  	69	1	add
142	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "Input    input    is    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "Input  input  is  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null.   ");  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "Input    input    is    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "Input  input  is  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null.   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "Input        input        is        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "Input    input    is    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null.   ");  }	  	compilable	  [FE]  ComparisonFailure  	69	1	add
143	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "Input    input    is    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "Input  input  is  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null.   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	add	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "Input        input        is        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "Input    input    is    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null.   ");  }	  	compilable	  [FE]  IllegalArgumentException  	69	19	add
144	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "Input    input    is    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "Input  input  is  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null.   ");  }  [FE]  IllegalArgumentException  [FE]      ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "Input    input    is    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "Input  input  is  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null.   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "Input        input        is        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "Input    input    is    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null.   ");  }	  	compilable	  [FE]  IllegalArgumentException  	69	19	add
145	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "Input    input    is    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "Input  input  is  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null.   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	add	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "Input        input        is        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "Input    input    is    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null.   ");  }	  	compilable	  [FE]  ComparisonFailure  	69	1	add
146	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "Input    input    is    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "Input  input  is  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null.   ");  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "Input    input    is    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "Input  input  is  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null.   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "Input        input        is        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "Input    input    is    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null.   ");  }	  	compilable	  [FE]  ComparisonFailure  	69	1	add
147	[BUG]  [BUGGY]  char[]  inputLength  =  input.length();  [CE]  incompatible  types  [FE]        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  char[]  inputLength  =  input.length();  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	char[]  inputLength  =  input.length();	          int    inputLength    =    input.length();    char[]    inputLength    =    input.length();    	non-compiled	[CE]  incompatible  types	120	None	replace
148	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  Integer  pos  =  0;  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	add	Integer  pos  =  0;	  char    pos    =    0;    int    pos    =    0;    	compilable	  [FE]  ComparisonFailure  	91	1	replace
149	[BUG]  [BUGGY]  Integer  pos  =  0;  [FE]  ComparisonFailure  [FE]            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  Integer  pos  =  0;  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	Integer  pos  =  0;	  char    pos    =    0;    int    pos    =    0;    	compilable	  [FE]  ComparisonFailure  	91	1	replace
150	[BUG]  [BUGGY]  CharSequence  input  =  input.getValues();  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  CharSequence  input  =  input.getValues();  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	CharSequence  input  =  input.getValues();	  char[]    input    =    input.getValues();    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	160	None	replace
151	[BUG]  [BUGGY]  Char[]  input  =  input.getValues();  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  Char[]  input  =  input.getValues();  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	Char[]  input  =  input.getValues();	  char[]    input    =    input.getValues();    	non-compiled	[CE]  cannot  find  symbol	160	None	replace
152	[BUG]  [BUGGY]  String  input  =  input.getValues();  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                    ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  String  input  =  input.getValues();  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	String  input  =  input.getValues();	  char[]    input    =    input.getValues();    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	160	None	replace
153	[BUG]  [BUGGY]  while(input!=  null)  {  out.write('n');  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  while(input!=  null)  {  out.write('n');  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	while(input!=  null)  {  out.write('n');	          if(input    ==    null)    {    out.write('n');    }    while(input    ==    null)    {    out.write('n');    	non-compiled	[CE]  illegal  start  of  expression	142	None	replace
154	[BUG]  [BUGGY]  if(input.length()  ==  0)  {  if(input!=  null)  {  out.write('n');  }  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(input.length()  ==  0)  {  if(input!=  null)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	if(input.length()  ==  0)  {  if(input!=  null)  {  out.write('n');  }	          if(input!=    null)    {    out.write('n');    }    if(input!=    null)    {    out.write('n');    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
155	[BUG]  [BUGGY]  Char[]  input  =  this.input.getChars();  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  Char[]  input  =  this.input.getChars();  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	Char[]  input  =  this.input.getChars();	  Char[]    input    =    input.getChars();    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
156	[BUG]  [BUGGY]  Char[]  input  =  output.getChars();  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  Char[]  input  =  output.getChars();  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	Char[]  input  =  output.getChars();	  Char[]    input    =    input.getChars();    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
157	[BUG]  [BUGGY]  int  inputPos  =  input.length()  -  1;  [CE]  cannot  find  symbol  pos  [FE]                  ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  inputPos  =  input.length()  -  1;  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	int  inputPos  =  input.length()  -  1;	  int    inputPos    =    input.length();    	non-compiled	[CE]  cannot  find  symbol  pos	124	None	replace
158	[BUG]  [BUGGY]  int  inputPos  =  input.length()  +  1;  [CE]  cannot  find  symbol  pos  [FE]                    ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  inputPos  =  input.length()  +  1;  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	int  inputPos  =  input.length()  +  1;	  int    inputPos    =    input.length();    	non-compiled	[CE]  cannot  find  symbol  pos	124	None	replace
159	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	add	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        be        null.       ");        }        if(input!=    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    be    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }	  	compilable	  [FE]  IllegalArgumentException  	98	19	add
160	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        be        null.       ");        }        if(input!=    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    be    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }	  	compilable	  [FE]  IllegalArgumentException  	98	19	add
161	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	add	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        be        null.       ");        }        if(input!=    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    be    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }	  	compilable	  [FE]  IllegalArgumentException  	98	19	add
162	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        be        null.       ");        }        if(input!=    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    be    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }	  	compilable	  [FE]  IllegalArgumentException  	98	19	add
163	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	add	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        not        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null..   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }	  	compilable	  [FE]  ComparisonFailure  	54	1	add
164	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        not        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null..   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }	  	compilable	  [FE]  ComparisonFailure  	54	1	add
165	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null..   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	add	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        not        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null..   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null..   ");  }	  	compilable	  [FE]  ComparisonFailure  	54	1	add
166	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null..   ");  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null..   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        not        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null..   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null..   ");  }	  	compilable	  [FE]  ComparisonFailure  	54	1	add
167	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	add	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        not        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null..   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }	  	compilable	  [FE]  ComparisonFailure  	54	1	add
168	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        not        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null..   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }	  	compilable	  [FE]  ComparisonFailure  	54	1	add
169	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.  [CE]  unclosed  string  literal  [FE]          ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        not        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null..   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.	  	non-compiled	[CE]  unclosed  string  literal	54	None	add
170	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(     "     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	add	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "       ");        }        if(input!=    null)    {    throw    new    IllegalArgumentException(       "       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	102	19	add
171	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(     "     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(     "     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "       ");        }        if(input!=    null)    {    throw    new    IllegalArgumentException(       "       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	102	19	add
172	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(     "     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	add	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "       ");        }        if(input!=    null)    {    throw    new    IllegalArgumentException(       "       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	102	19	add
173	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(     "     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(     "     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "       ");        }        if(input!=    null)    {    throw    new    IllegalArgumentException(       "       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	102	19	add
174	[BUG]  [BUGGY]  CharSequence  input  =  input.getValue();  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                  ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  CharSequence  input  =  input.getValue();  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	CharSequence  input  =  input.getValue();	  char[]    input    =    input.getValue();    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	50	None	replace
175	[BUG]  [BUGGY]  Char[]  input  =  input.getValue();  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  Char[]  input  =  input.getValue();  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	Char[]  input  =  input.getValue();	  char[]    input    =    input.getValue();    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
176	[BUG]  [BUGGY]  char[]  input  =  input.getKey();  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                      ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  char[]  input  =  input.getKey();  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	char[]  input  =  input.getKey();	  char[]    input    =    input.getValue();    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	50	None	replace
177	[BUG]  [BUGGY]  if(out  ==  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null. ");  }  [CE]  cannot  find  symbol  pos  [FE]    IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(out  ==  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null. ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	if(out  ==  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null. ");  }	          if(input    ==    null)    {    throw    new    IllegalArgumentException(       "Input    input    is    null.       ");    }    if(input!=    null)    {    throw    new    IllegalArgumentException(   "Input    input    is    null.       ");    }    	non-compiled	[CE]  cannot  find  symbol  pos	72	None	replace
178	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input.length()    ==    0)    {    out.write('n');    }    if(input.length()  >=  0)  {  out.write('n');  }  if(input.length()  ==  0)  {  out.write('n');  }  if(input.length()  >=  0)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	add	                if(input.length()        ==        0)        {        out.write('n');        }        if(input.length()    >=    0)    {    out.write('n');    }    if(input.length()  ==  0)  {  out.write('n');  }  if(input.length()  >=  0)  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	30	19	add
179	[BUG]  [BUGGY]          if(input.length()    ==    0)    {    out.write('n');    }    if(input.length()  >=  0)  {  out.write('n');  }  if(input.length()  ==  0)  {  out.write('n');  }  if(input.length()  >=  0)  {  out.write('n');  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input.length()    ==    0)    {    out.write('n');    }    if(input.length()  >=  0)  {  out.write('n');  }  if(input.length()  ==  0)  {  out.write('n');  }  if(input.length()  >=  0)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	                if(input.length()        ==        0)        {        out.write('n');        }        if(input.length()    >=    0)    {    out.write('n');    }    if(input.length()  ==  0)  {  out.write('n');  }  if(input.length()  >=  0)  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	30	19	add
180	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input.length()    ==    0)    {    out.write('n');    }    if(input.length()  >=  0)  {  out.write('n');  }  if(input.length()  ==  0)  {  out.write('n');  }  if(input.length()!=  0)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	add	                if(input.length()        ==        0)        {        out.write('n');        }        if(input.length()    >=    0)    {    out.write('n');    }    if(input.length()  ==  0)  {  out.write('n');  }  if(input.length()!=  0)  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	30	19	add
181	[BUG]  [BUGGY]          if(input.length()    ==    0)    {    out.write('n');    }    if(input.length()  >=  0)  {  out.write('n');  }  if(input.length()  ==  0)  {  out.write('n');  }  if(input.length()!=  0)  {  out.write('n');  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input.length()    ==    0)    {    out.write('n');    }    if(input.length()  >=  0)  {  out.write('n');  }  if(input.length()  ==  0)  {  out.write('n');  }  if(input.length()!=  0)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	                if(input.length()        ==        0)        {        out.write('n');        }        if(input.length()    >=    0)    {    out.write('n');    }    if(input.length()  ==  0)  {  out.write('n');  }  if(input.length()!=  0)  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	30	19	add
182	[BUG]  [BUGGY]          if(input.length()    ==    0)    {    out.write('n');    }    if(input.length()  >=  0)  {  out.write('n');  }  if(input.length()  ==  0)  {  out.write('n');  }  if(input.length()  >>  0)  {  out.write('n');  }  [CE]  incompatible  types  [FE]        ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input.length()    ==    0)    {    out.write('n');    }    if(input.length()  >=  0)  {  out.write('n');  }  if(input.length()  ==  0)  {  out.write('n');  }  if(input.length()  >>  0)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	                if(input.length()        ==        0)        {        out.write('n');        }        if(input.length()    >=    0)    {    out.write('n');    }    if(input.length()  ==  0)  {  out.write('n');  }  if(input.length()  >>  0)  {  out.write('n');  }	  	non-compiled	[CE]  incompatible  types	30	None	add
183	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input.length()    ==    0)    {    out.write('n');    }    if(input.length()  >=  0)  {  out.write('n');  }  if(input.length()!=  0)  {  out.write('n');  }  if(input.length()  >=  0)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	add	                if(input.length()        ==        0)        {        out.write('n');        }        if(input.length()    >=    0)    {    out.write('n');    }    if(input.length()!=  0)  {  out.write('n');  }  if(input.length()  >=  0)  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	30	19	add
184	[BUG]  [BUGGY]          if(input.length()    ==    0)    {    out.write('n');    }    if(input.length()  >=  0)  {  out.write('n');  }  if(input.length()!=  0)  {  out.write('n');  }  if(input.length()  >=  0)  {  out.write('n');  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input.length()    ==    0)    {    out.write('n');    }    if(input.length()  >=  0)  {  out.write('n');  }  if(input.length()!=  0)  {  out.write('n');  }  if(input.length()  >=  0)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	                if(input.length()        ==        0)        {        out.write('n');        }        if(input.length()    >=    0)    {    out.write('n');    }    if(input.length()!=  0)  {  out.write('n');  }  if(input.length()  >=  0)  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	30	19	add
185	[BUG]  [BUGGY]  Integer  input  =  input.length()  -  1;  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  Integer  input  =  input.length()  -  1;  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	Integer  input  =  input.length()  -  1;	  Integer    input    =    input.length();    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	141	None	replace
186	[BUG]  [BUGGY]  Integer  input  =  input.length()  +  1;  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]              ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  Integer  input  =  input.length()  +  1;  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	Integer  input  =  input.length()  +  1;	  Integer    input    =    input.length();    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	141	None	replace
187	[BUG]  [BUGGY]  Integer  input  =  input.length()  -  2;  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  Integer  input  =  input.length()  -  2;  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	Integer  input  =  input.length()  -  2;	  Integer    input    =    input.length();    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	141	None	replace
188	[BUG]  [BUGGY]  if(input.length()  ==  0)  {  out.write(input.charAt(0));  out.write(input.charAt(0));  }  [CE]  cannot  find  symbol  pos  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(input.length()  ==  0)  {  out.write(input.charAt(0));  out.write(input.charAt(0));  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	if(input.length()  ==  0)  {  out.write(input.charAt(0));  out.write(input.charAt(0));  }	          out.write(input.charAt(0));    out.write(input.charAt(0));    	non-compiled	[CE]  cannot  find  symbol  pos	105	None	replace
189	[BUG]  [BUGGY]  if(input.length()  >  0)  {  out.write(input.charAt(0));  out.write(input.charAt(0));  }  [CE]  cannot  find  symbol  pos  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(input.length()  >  0)  {  out.write(input.charAt(0));  out.write(input.charAt(0));  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	if(input.length()  >  0)  {  out.write(input.charAt(0));  out.write(input.charAt(0));  }	          out.write(input.charAt(0));    out.write(input.charAt(0));    	non-compiled	[CE]  cannot  find  symbol  pos	105	None	replace
190	[BUG]  [BUGGY]  if(input.length()!=  0)  {  out.write(input.charAt(0));  out.write(input.charAt(0));  }  [CE]  cannot  find  symbol  pos  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(input.length()!=  0)  {  out.write(input.charAt(0));  out.write(input.charAt(0));  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	if(input.length()!=  0)  {  out.write(input.charAt(0));  out.write(input.charAt(0));  }	          out.write(input.charAt(0));    out.write(input.charAt(0));    	non-compiled	[CE]  cannot  find  symbol  pos	105	None	replace
191	[BUG]  [BUGGY]  out.write(input.substring(0,  input.length()  +  1));  [CE]  cannot  find  symbol  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  out.write(input.substring(0,  input.length()  +  1));  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	out.write(input.substring(0,  input.length()  +  1));	  out.write(input.substring(0,    input.length()));    	non-compiled	[CE]  cannot  find  symbol	147	None	replace
192	[BUG]  [BUGGY]  out.write(input.substring(0,  input.length()  -  2));  [CE]  cannot  find  symbol  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  out.write(input.substring(0,  input.length()  -  2));  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	out.write(input.substring(0,  input.length()  -  2));	  out.write(input.substring(0,    input.length()));    	non-compiled	[CE]  cannot  find  symbol	147	None	replace
193	[BUG]  [BUGGY]  int  pos  =  input.length()  +  output.length();  [CE]  cannot  find  symbol  output  [FE]        AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =  input.length()  +  output.length();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	int  pos  =  input.length()  +  output.length();	  int    pos    =    input.length()    +    out.length();    	non-compiled	[CE]  cannot  find  symbol  output	138	None	replace
194	[BUG]  [BUGGY]  int  pos  =  input.length()  +  this.out.length();  [CE]  cannot  find  symbol  out  [FE]          AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =  input.length()  +  this.out.length();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	int  pos  =  input.length()  +  this.out.length();	  int    pos    =    input.length()    +    out.length();    	non-compiled	[CE]  cannot  find  symbol  out	138	None	replace
195	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =  input.length()  +  input.length();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	add	int  pos  =  input.length()  +  input.length();	  int    pos    =    input.length()    +    out.length();    	compilable	  [FE]  AssertionFailedError  	138	19	replace
196	[BUG]  [BUGGY]  int  pos  =  input.length()  +  input.length();  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =  input.length()  +  input.length();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	int  pos  =  input.length()  +  input.length();	  int    pos    =    input.length()    +    out.length();    	compilable	  [FE]  AssertionFailedError  	138	19	replace
197	[BUG]  [BUGGY]  if(input.length()  >  0)  {  out.write(input.charAt(0));  out.write(input.charAt(2));  }  [CE]  cannot  find  symbol  pos  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(input.length()  >  0)  {  out.write(input.charAt(0));  out.write(input.charAt(2));  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	if(input.length()  >  0)  {  out.write(input.charAt(0));  out.write(input.charAt(2));  }	          out.write(input.charAt(0));    out.write(input.charAt(2));    	non-compiled	[CE]  cannot  find  symbol  pos	135	None	replace
198	[BUG]  [BUGGY]  if(input.length()  ==  0)  {  out.write(input.charAt(0));  out.write(input.charAt(2));  }  [CE]  cannot  find  symbol  pos  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(input.length()  ==  0)  {  out.write(input.charAt(0));  out.write(input.charAt(2));  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	if(input.length()  ==  0)  {  out.write(input.charAt(0));  out.write(input.charAt(2));  }	          out.write(input.charAt(0));    out.write(input.charAt(2));    	non-compiled	[CE]  cannot  find  symbol  pos	135	None	replace
199	[BUG]  [BUGGY]  if(input.length()  ==  0)  {  out.write(input.charAt(0));  out.write(input.charAt(2));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  pos  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(input.length()  ==  0)  {  out.write(input.charAt(0));  out.write(input.charAt(2));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	if(input.length()  ==  0)  {  out.write(input.charAt(0));  out.write(input.charAt(2));  }  else  {  throw  new  IllegalArgumentException( " ");  }	          out.write(input.charAt(0));    out.write(input.charAt(2));    	non-compiled	[CE]  cannot  find  symbol  pos	135	None	replace
200	[BUG]  [BUGGY]  out.write(input.length()  -  1);  [CE]  cannot  find  symbol  pos  [FE]        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  out.write(input.length()  -  1);  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	out.write(input.length()  -  1);	  out.write(input.length());    	non-compiled	[CE]  cannot  find  symbol  pos	23	None	replace
201	[BUG]  [BUGGY]  out.write(input.length()  +  1);  [CE]  cannot  find  symbol  pos  [FE]          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  out.write(input.length()  +  1);  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	out.write(input.length()  +  1);	  out.write(input.length());    	non-compiled	[CE]  cannot  find  symbol  pos	23	None	replace
202	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(     "     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	add	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(       "       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  ComparisonFailure  	100	1	add
203	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(     "     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(     "     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(       "       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  ComparisonFailure  	100	1	add
204	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(     "     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	add	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(       "       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  ComparisonFailure  	100	1	add
205	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(     "     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(     "     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(       "       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  ComparisonFailure  	100	1	add
206	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input.length()    ==    0)    {    out.write('n');    }    if(input.length()  ==  0)  {  out.write('n');  }  if(input.length()  ==  0)  {  out.write('n');  }  if(input.length()  ==  0)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	add	                if(input.length()        ==        0)        {        out.write('n');        }        if(input.length()    ==    0)    {    out.write('n');    }    if(input.length()  ==  0)  {  out.write('n');  }  if(input.length()  ==  0)  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	26	10	add
207	[BUG]  [BUGGY]          if(input.length()    ==    0)    {    out.write('n');    }    if(input.length()  ==  0)  {  out.write('n');  }  if(input.length()  ==  0)  {  out.write('n');  }  if(input.length()  ==  0)  {  out.write('n');  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input.length()    ==    0)    {    out.write('n');    }    if(input.length()  ==  0)  {  out.write('n');  }  if(input.length()  ==  0)  {  out.write('n');  }  if(input.length()  ==  0)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	                if(input.length()        ==        0)        {        out.write('n');        }        if(input.length()    ==    0)    {    out.write('n');    }    if(input.length()  ==  0)  {  out.write('n');  }  if(input.length()  ==  0)  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	26	10	add
208	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input.length()    ==    0)    {    out.write('n');    }    if(input.length()  ==  0)  {  out.write('n');  }  if(input.length()  ==  0)  {  out.write('n');  }  if(input.length()!=  0)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	add	                if(input.length()        ==        0)        {        out.write('n');        }        if(input.length()    ==    0)    {    out.write('n');    }    if(input.length()  ==  0)  {  out.write('n');  }  if(input.length()!=  0)  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	26	19	add
209	[BUG]  [BUGGY]          if(input.length()    ==    0)    {    out.write('n');    }    if(input.length()  ==  0)  {  out.write('n');  }  if(input.length()  ==  0)  {  out.write('n');  }  if(input.length()!=  0)  {  out.write('n');  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input.length()    ==    0)    {    out.write('n');    }    if(input.length()  ==  0)  {  out.write('n');  }  if(input.length()  ==  0)  {  out.write('n');  }  if(input.length()!=  0)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	                if(input.length()        ==        0)        {        out.write('n');        }        if(input.length()    ==    0)    {    out.write('n');    }    if(input.length()  ==  0)  {  out.write('n');  }  if(input.length()!=  0)  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	26	19	add
210	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input.length()    ==    0)    {    out.write('n');    }    if(input.length()  ==  0)  {  out.write('n');  }  if(input.length()!=  0)  {  out.write('n');  }  if(input.length()  ==  0)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	add	                if(input.length()        ==        0)        {        out.write('n');        }        if(input.length()    ==    0)    {    out.write('n');    }    if(input.length()!=  0)  {  out.write('n');  }  if(input.length()  ==  0)  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	26	19	add
211	[BUG]  [BUGGY]          if(input.length()    ==    0)    {    out.write('n');    }    if(input.length()  ==  0)  {  out.write('n');  }  if(input.length()!=  0)  {  out.write('n');  }  if(input.length()  ==  0)  {  out.write('n');  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input.length()    ==    0)    {    out.write('n');    }    if(input.length()  ==  0)  {  out.write('n');  }  if(input.length()!=  0)  {  out.write('n');  }  if(input.length()  ==  0)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	                if(input.length()        ==        0)        {        out.write('n');        }        if(input.length()    ==    0)    {    out.write('n');    }    if(input.length()!=  0)  {  out.write('n');  }  if(input.length()  ==  0)  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	26	19	add
212	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input.length()    ==    0)    {    out.write('n');    }    if(input.length()  ==  0)  {  out.write('n');  }  if(input.length()  ==  0)  {  out.write('n');  }  if(input.length()  >=  0)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	add	                if(input.length()        ==        0)        {        out.write('n');        }        if(input.length()    ==    0)    {    out.write('n');    }    if(input.length()  ==  0)  {  out.write('n');  }  if(input.length()  >=  0)  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	26	19	add
213	[BUG]  [BUGGY]          if(input.length()    ==    0)    {    out.write('n');    }    if(input.length()  ==  0)  {  out.write('n');  }  if(input.length()  ==  0)  {  out.write('n');  }  if(input.length()  >=  0)  {  out.write('n');  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input.length()    ==    0)    {    out.write('n');    }    if(input.length()  ==  0)  {  out.write('n');  }  if(input.length()  ==  0)  {  out.write('n');  }  if(input.length()  >=  0)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	                if(input.length()        ==        0)        {        out.write('n');        }        if(input.length()    ==    0)    {    out.write('n');    }    if(input.length()  ==  0)  {  out.write('n');  }  if(input.length()  >=  0)  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	26	19	add
214	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input!=    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	add	                if(input!=        null)        {        out.write('n');        }        if(input    ==    null)    {    out.write('n');    }    if(input!=  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	15	19	add
215	[BUG]  [BUGGY]          if(input!=    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input!=    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	                if(input!=        null)        {        out.write('n');        }        if(input    ==    null)    {    out.write('n');    }    if(input!=  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	15	19	add
216	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input!=    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	add	                if(input!=        null)        {        out.write('n');        }        if(input    ==    null)    {    out.write('n');    }    if(input!=  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	15	19	add
217	[BUG]  [BUGGY]          if(input!=    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input!=    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	                if(input!=        null)        {        out.write('n');        }        if(input    ==    null)    {    out.write('n');    }    if(input!=  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	15	19	add
218	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input!=    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	add	                if(input!=        null)        {        out.write('n');        }        if(input    ==    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	15	19	add
219	[BUG]  [BUGGY]          if(input!=    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input!=    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	                if(input!=        null)        {        out.write('n');        }        if(input    ==    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	15	19	add
220	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input!=    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	add	                if(input!=        null)        {        out.write('n');        }        if(input    ==    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	15	19	add
221	[BUG]  [BUGGY]          if(input!=    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input!=    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	                if(input!=        null)        {        out.write('n');        }        if(input    ==    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	15	19	add
222	[BUG]  [BUGGY]  int  outputLength  =  input.length();  [CE]  cannot  find  symbol  pos  [FE]          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  outputLength  =  input.length();  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	int  outputLength  =  input.length();	  int    inputLength    =    input.length()    +    1;    	non-compiled	[CE]  cannot  find  symbol  pos	116	None	replace
223	[BUG]  [BUGGY]  int  inputLength  =  output.length();  [CE]  cannot  find  symbol  output  [FE]            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  inputLength  =  output.length();  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	int  inputLength  =  output.length();	  int    inputLength    =    input.length()    +    1;    	non-compiled	[CE]  cannot  find  symbol  output	116	None	replace
224	[BUG]  [BUGGY]          int    inputLength    =    input.length();    int  outputLength  =  input.length();  int  inputLength  =  input.length();  int  outputLength  =  input.length();  [CE]  variable  inputLength  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          int    inputLength    =    input.length();    int  outputLength  =  input.length();  int  inputLength  =  input.length();  int  outputLength  =  input.length();  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	                int        inputLength        =        input.length();        int    outputLength    =    input.length();    int  inputLength  =  input.length();  int  outputLength  =  input.length();	  	non-compiled	[CE]  variable  inputLength  is  already  defined  in  method  translate(CharSequence,Writer)	41	None	add
225	[BUG]  [BUGGY]          int    inputLength    =    input.length();    int  outputLength  =  input.length();  Integer  inputLength  =  input.length();  int  outputLength  =  input.length();  [CE]  variable  inputLength  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]      ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          int    inputLength    =    input.length();    int  outputLength  =  input.length();  Integer  inputLength  =  input.length();  int  outputLength  =  input.length();  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	                int        inputLength        =        input.length();        int    outputLength    =    input.length();    Integer  inputLength  =  input.length();  int  outputLength  =  input.length();	  	non-compiled	[CE]  variable  inputLength  is  already  defined  in  method  translate(CharSequence,Writer)	41	None	add
226	[BUG]  [BUGGY]          int    inputLength    =    input.length();    int  outputLength  =  input.length();  int  outputLength  =  input.length();  int  outputLength  =  input.length();  [CE]  variable  outputLength  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]        ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          int    inputLength    =    input.length();    int  outputLength  =  input.length();  int  outputLength  =  input.length();  int  outputLength  =  input.length();  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	                int        inputLength        =        input.length();        int    outputLength    =    input.length();    int  outputLength  =  input.length();  int  outputLength  =  input.length();	  	non-compiled	[CE]  variable  outputLength  is  already  defined  in  method  translate(CharSequence,Writer)	41	None	add
227	[BUG]  [BUGGY]          int    inputLength    =    input.length();    int  outputLength  =  input.length();  int  inputLength  =  outputLength;  int  outputLength  =  input.length();  [CE]  variable  inputLength  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]          ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          int    inputLength    =    input.length();    int  outputLength  =  input.length();  int  inputLength  =  outputLength;  int  outputLength  =  input.length();  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	                int        inputLength        =        input.length();        int    outputLength    =    input.length();    int  inputLength  =  outputLength;  int  outputLength  =  input.length();	  	non-compiled	[CE]  variable  inputLength  is  already  defined  in  method  translate(CharSequence,Writer)	41	None	add
228	[BUG]  [BUGGY]  int  pos  =  input.length()  +  1;  int  pos  =  input.length()  +  1;  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]    AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =  input.length()  +  1;  int  pos  =  input.length()  +  1;  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	int    pos    =    input.length()    +    1;    int  pos  =  input.length()  +  1;	  	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	3	None	add
229	[BUG]  [BUGGY]  int  pos  =  input.length()  +  1;  Integer  pos  =  input.length()  +  1;  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]      AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =  input.length()  +  1;  Integer  pos  =  input.length()  +  1;  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	int    pos    =    input.length()    +    1;    Integer  pos  =  input.length()  +  1;	  	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	3	None	add
230	[BUG]  [BUGGY]  int  pos  =  input.length()  +  1;  Int  pos  =  input.length()  +  1;  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =  input.length()  +  1;  Int  pos  =  input.length()  +  1;  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	int    pos    =    input.length()    +    1;    Int  pos  =  input.length()  +  1;	  	non-compiled	[CE]  cannot  find  symbol	3	None	add
231	[BUG]  [BUGGY]  int  pos  =  input.length()  +  1;  pos  =  input.length()  +  1;  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]          AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =  input.length()  +  1;  pos  =  input.length()  +  1;  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	int    pos    =    input.length()    +    1;    pos  =  input.length()  +  1;	  	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	3	None	add
232	[BUG]  [BUGGY]  Int  pos  =  input.length();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  Int  pos  =  input.length();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	Int  pos  =  input.length();	  int    pos    =    input.length();    Int    pos    =    input.length();    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
233	[BUG]  [BUGGY]  int  pos  =  2;  int  pos  =  2;  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]    AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =  2;  int  pos  =  2;  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	int    pos    =    2;    int  pos  =  2;	  	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	136	None	add
234	[BUG]  [BUGGY]  int  pos  =  2;  Int  pos  =  2;  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =  2;  Int  pos  =  2;  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	int    pos    =    2;    Int  pos  =  2;	  	non-compiled	[CE]  cannot  find  symbol	136	None	add
235	[BUG]  [BUGGY]  int  pos  =  2;  Integer  pos  =  2;  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]        AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =  2;  Integer  pos  =  2;  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	int    pos    =    2;    Integer  pos  =  2;	  	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	136	None	add
236	[BUG]  [BUGGY]  int  pos  =  2;  pos  =  2;  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]          AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =  2;  pos  =  2;  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	int    pos    =    2;    pos  =  2;	  	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	136	None	add
237	[BUG]  [BUGGY]  if(input.length()  ==  0)  {  if(input  ==  null)  {  out.write('n');  }  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(input.length()  ==  0)  {  if(input  ==  null)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	if(input.length()  ==  0)  {  if(input  ==  null)  {  out.write('n');  }	          if(input    ==    null)    {    out.write('n');    }    if(input    ==    null)    {    out.write('n');    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
238	[BUG]  [BUGGY]  if(input.length()  >  0)  {  if(input  ==  null)  {  out.write('n');  }  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(input.length()  >  0)  {  if(input  ==  null)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	if(input.length()  >  0)  {  if(input  ==  null)  {  out.write('n');  }	          if(input    ==    null)    {    out.write('n');    }    if(input    ==    null)    {    out.write('n');    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
239	[BUG]  [BUGGY]  Char  pos  =(input!=  null)?  0  :  input.length();  [CE]  cannot  find  symbol  [FE]        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  Char  pos  =(input!=  null)?  0  :  input.length();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	Char  pos  =(input!=  null)?  0  :  input.length();	  char    pos    =(input!=    null)?    0    :    input.length();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
240	[BUG]  [BUGGY]  String  pos  =(input!=  null)?  0  :  input.length();  [CE]  incompatible  types  [FE]          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  String  pos  =(input!=  null)?  0  :  input.length();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	String  pos  =(input!=  null)?  0  :  input.length();	  char    pos    =(input!=    null)?    0    :    input.length();    	non-compiled	[CE]  incompatible  types	7	None	replace
241	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()!=  0)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null. ");  }  [CE]  cannot  find  symbol  pos  [FE]        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(input  ==  null  ||  input.length()!=  0)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null. ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	if(input  ==  null  ||  input.length()!=  0)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null. ");  }	  if(input    ==    null    ||    input.length()    ==    0)    {    throw    new    IllegalArgumentException(   "The    Writer    must    be    null.   ");    }    	non-compiled	[CE]  cannot  find  symbol  pos	153	None	replace
242	[BUG]  [BUGGY]  if(input!=  null  ||  input.length()  ==  0)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null. ");  }  [CE]  cannot  find  symbol  pos  [FE]          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(input!=  null  ||  input.length()  ==  0)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null. ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	if(input!=  null  ||  input.length()  ==  0)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null. ");  }	  if(input    ==    null    ||    input.length()    ==    0)    {    throw    new    IllegalArgumentException(   "The    Writer    must    be    null.   ");    }    	non-compiled	[CE]  cannot  find  symbol  pos	153	None	replace
243	[BUG]  [BUGGY]  out.write(Integer.toString(input.length()  +  1));  [CE]  cannot  find  symbol  pos  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  out.write(Integer.toString(input.length()  +  1));  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	out.write(Integer.toString(input.length()  +  1));	  out.write(Integer.toString(input.length()));    	non-compiled	[CE]  cannot  find  symbol  pos	126	None	replace
244	[BUG]  [BUGGY]  out.write(Integer.toString(input,  input.length()));  [CE]  no  suitable  method  found  for  toString(CharSequence,int)  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  out.write(Integer.toString(input,  input.length()));  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	out.write(Integer.toString(input,  input.length()));	  out.write(Integer.toString(input.length()));    	non-compiled	[CE]  no  suitable  method  found  for  toString(CharSequence,int)	126	None	replace
245	[BUG]  [BUGGY]  CharSequence  input  =  input.getOutputChars();  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]              ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  CharSequence  input  =  input.getOutputChars();  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	CharSequence  input  =  input.getOutputChars();	  char[]    input    =    input.getOutputChars();    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	118	None	replace
246	[BUG]  [BUGGY]  Char[]  input  =  input.getOutputChars();  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  Char[]  input  =  input.getOutputChars();  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	Char[]  input  =  input.getOutputChars();	  char[]    input    =    input.getOutputChars();    	non-compiled	[CE]  cannot  find  symbol	118	None	replace
247	[BUG]  [BUGGY]  char[]  input  =  input.getChars();  out.write(input.charAt(0));  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  char[]  input  =  input.getChars();  out.write(input.charAt(0));  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	char[]  input  =  input.getChars();  out.write(input.charAt(0));	          out.write(input.charAt(0));    char[]    input    =    input.getChars();    out.write(input.charAt(0));    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	108	None	replace
248	[BUG]  [BUGGY]  char[]  input  =  input.getChars();  out.write(input.charAt(1));  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  char[]  input  =  input.getChars();  out.write(input.charAt(1));  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	char[]  input  =  input.getChars();  out.write(input.charAt(1));	          out.write(input.charAt(0));    char[]    input    =    input.getChars();    out.write(input.charAt(0));    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	108	None	replace
249	[BUG]  [BUGGY]  int  pos  =  input.length()  -  2;  int  pos  =  input.length()  -  2;  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]    AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =  input.length()  -  2;  int  pos  =  input.length()  -  2;  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	int    pos    =    input.length()    -    2;    int  pos  =  input.length()  -  2;	  	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	5	None	add
250	[BUG]  [BUGGY]  int  pos  =  input.length()  -  2;  Int  pos  =  input.length()  -  2;  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =  input.length()  -  2;  Int  pos  =  input.length()  -  2;  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	int    pos    =    input.length()    -    2;    Int  pos  =  input.length()  -  2;	  	non-compiled	[CE]  cannot  find  symbol	5	None	add
251	[BUG]  [BUGGY]  int  pos  =  input.length()  -  2;  Integer  pos  =  input.length()  -  2;  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]        AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =  input.length()  -  2;  Integer  pos  =  input.length()  -  2;  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	int    pos    =    input.length()    -    2;    Integer  pos  =  input.length()  -  2;	  	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	5	None	add
252	[BUG]  [BUGGY]  int  pos  =  input.length()  -  2;  pos  =  input.length()  -  2;  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]          AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =  input.length()  -  2;  pos  =  input.length()  -  2;  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	int    pos    =    input.length()    -    2;    pos  =  input.length()  -  2;	  	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	5	None	add
253	[BUG]  [BUGGY]  if(input!=  null)  {  throw  new  IllegalArgumentException( " "));  }  [CE]  [FE]          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(input!=  null)  {  throw  new  IllegalArgumentException( " "));  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	if(input!=  null)  {  throw  new  IllegalArgumentException( " "));  }	  if(input    ==    null)    {    throw    new    IllegalArgumentException(   "   "));    }    	non-compiled	[CE]  	76	None	replace
254	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	add	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        not        be        null.       ");        }        if(input!=    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }	  	compilable	  [FE]  IllegalArgumentException  	56	19	add
255	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        not        be        null.       ");        }        if(input!=    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }	  	compilable	  [FE]  IllegalArgumentException  	56	19	add
256	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	add	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        not        be        null.       ");        }        if(input!=    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }	  	compilable	  [FE]  IllegalArgumentException  	56	19	add
257	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        not        be        null.       ");        }        if(input!=    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }	  	compilable	  [FE]  IllegalArgumentException  	56	19	add
258	[BUG]  [BUGGY]  out  =  input.length();  [CE]  incompatible  types  [FE]                  ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  out  =  input.length();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	out  =  input.length();	  pos    =    input.length();    	non-compiled	[CE]  incompatible  types	33	None	replace
259	[BUG]  [BUGGY]  if(input.length()  >  0)  {  int  pos  =  input.length();  int  pos  =  input.length());  }  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(input.length()  >  0)  {  int  pos  =  input.length();  int  pos  =  input.length());  }  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	if(input.length()  >  0)  {  int  pos  =  input.length();  int  pos  =  input.length());  }	  int    pos    =    input.length();    int    pos    =    input.length());    	non-compiled	[CE]  ';'  expected	155	None	replace
260	[BUG]  [BUGGY]  if(input.length()  >  0)  {  int  pos  =  input.length();  int  pos  =  input.length());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(input.length()  >  0)  {  int  pos  =  input.length();  int  pos  =  input.length());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	if(input.length()  >  0)  {  int  pos  =  input.length();  int  pos  =  input.length());  }  else  {  throw  new  IllegalArgumentException( " ");  }	  int    pos    =    input.length();    int    pos    =    input.length());    	non-compiled	[CE]  	155	None	replace
261	[BUG]  [BUGGY]  if(input.length()  >  0)  {  int  pos  =  input.length();  int  pos  =  input.length();  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]              AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(input.length()  >  0)  {  int  pos  =  input.length();  int  pos  =  input.length();  }  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	if(input.length()  >  0)  {  int  pos  =  input.length();  int  pos  =  input.length();  }	  int    pos    =    input.length();    int    pos    =    input.length());    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	155	None	replace
262	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   ",     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( ",   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	add	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   ",       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( ",   ");  }	  	compilable	  [FE]  ComparisonFailure  	151	1	add
263	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   ",     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( ",   ");  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   ",     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( ",   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   ",       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( ",   ");  }	  	compilable	  [FE]  ComparisonFailure  	151	1	add
264	[BUG]  [BUGGY]  String  pos  =  input.length();  [CE]  incompatible  types  [FE]          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  String  pos  =  input.length();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	String  pos  =  input.length();	  char    pos    =    input.length();    	non-compiled	[CE]  incompatible  types	21	None	replace
265	[BUG]  [BUGGY]  Char  pos  =  input.length();  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  Char  pos  =  input.length();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	Char  pos  =  input.length();	  char    pos    =    input.length();    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
266	[BUG]  [BUGGY]  Char  pos  =  0;  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  Char  pos  =  0;  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	Char  pos  =  0;	  char    pos    =    0;    Char    pos    =    0;    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
267	[BUG]  [BUGGY]  String  pos  =  0;  String  pos  =  0;  [CE]  incompatible  types  [FE]                ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  String  pos  =  0;  String  pos  =  0;  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	String  pos  =  0;  String  pos  =  0;	  char    pos    =    0;    Char    pos    =    0;    	non-compiled	[CE]  incompatible  types	92	None	replace
268	[BUG]  [BUGGY]  Character  pos  =  0;  [CE]  inconvertible  types  [FE]                  ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  Character  pos  =  0;  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	Character  pos  =  0;	  char    pos    =    0;    Char    pos    =    0;    	non-compiled	[CE]  inconvertible  types	92	None	replace
269	[BUG]  [BUGGY]  Thread.currentThread().interrupt(out);  [CE]  method  interrupt  in  class  Thread  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  Thread.currentThread().interrupt(out);  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	Thread.currentThread().interrupt(out);	  Thread.currentThread().interrupt();    	non-compiled	[CE]  method  interrupt  in  class  Thread  cannot  be  applied  to  given  types;	37	None	replace
270	[BUG]  [BUGGY]  Thread.currentThread().interrupt(input);  [CE]  method  interrupt  in  class  Thread  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  Thread.currentThread().interrupt(input);  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	Thread.currentThread().interrupt(input);	  Thread.currentThread().interrupt();    	non-compiled	[CE]  method  interrupt  in  class  Thread  cannot  be  applied  to  given  types;	37	None	replace
271	[BUG]  [BUGGY]  Thread.currentThread().interrupt(out,  input);  [CE]  method  interrupt  in  class  Thread  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  Thread.currentThread().interrupt(out,  input);  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	Thread.currentThread().interrupt(out,  input);	  Thread.currentThread().interrupt();    	non-compiled	[CE]  method  interrupt  in  class  Thread  cannot  be  applied  to  given  types;	37	None	replace
272	[BUG]  [BUGGY]  out.write(Integer.toString(input.length()),  input.length());  [CE]  no  suitable  method  found  for  write(String,int)  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  out.write(Integer.toString(input.length()),  input.length());  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	out.write(Integer.toString(input.length()),  input.length());	  out.write(Integer.toString(input.length()    -    1));    	non-compiled	[CE]  no  suitable  method  found  for  write(String,int)	127	None	replace
273	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "Input    input    is    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "Input  input  is  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null.   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	add	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "Input        input        is        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "Input    input    is    null..   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null.   ");  }	  	compilable	  [FE]  ComparisonFailure  	73	1	add
274	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "Input    input    is    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "Input  input  is  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null.   ");  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "Input    input    is    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "Input  input  is  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null.   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "Input        input        is        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "Input    input    is    null..   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null.   ");  }	  	compilable	  [FE]  ComparisonFailure  	73	1	add
275	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "Input    input    is    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "Input  input  is  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null.. ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	add	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "Input        input        is        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "Input    input    is    null..   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null.. ");  }	  	compilable	  [FE]  ComparisonFailure  	73	1	add
276	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "Input    input    is    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "Input  input  is  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null.. ");  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "Input    input    is    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "Input  input  is  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null.. ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "Input        input        is        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "Input    input    is    null..   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null.. ");  }	  	compilable	  [FE]  ComparisonFailure  	73	1	add
277	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "Input    input    is    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "Input  input  is  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null..   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	add	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "Input        input        is        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "Input    input    is    null..   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null..   ");  }	  	compilable	  [FE]  ComparisonFailure  	73	1	add
278	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "Input    input    is    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "Input  input  is  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null..   ");  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "Input    input    is    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "Input  input  is  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null..   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "Input        input        is        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "Input    input    is    null..   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null..   ");  }	  	compilable	  [FE]  ComparisonFailure  	73	1	add
279	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "Input    input    is    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "Input  input  is  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null.. ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null.   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	add	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "Input        input        is        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "Input    input    is    null..   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null.. ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null.   ");  }	  	compilable	  [FE]  IllegalArgumentException  	73	19	add
280	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "Input    input    is    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "Input  input  is  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null.. ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null.   ");  }  [FE]  IllegalArgumentException  [FE]          ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "Input    input    is    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "Input  input  is  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null.. ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null.   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "Input        input        is        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "Input    input    is    null..   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null.. ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null.   ");  }	  	compilable	  [FE]  IllegalArgumentException  	73	19	add
281	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()!=  0)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }  [CE]  cannot  find  symbol  pos  [FE]        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(input  ==  null  ||  input.length()!=  0)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	if(input  ==  null  ||  input.length()!=  0)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }	  if(input    ==    null    ||    input.length()    ==    0)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null.   ");    }    	non-compiled	[CE]  cannot  find  symbol  pos	161	None	replace
282	[BUG]  [BUGGY]  if(input!=  null  ||  input.length()  ==  0)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }  [CE]  cannot  find  symbol  pos  [FE]          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(input!=  null  ||  input.length()  ==  0)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	if(input!=  null  ||  input.length()  ==  0)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }	  if(input    ==    null    ||    input.length()    ==    0)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null.   ");    }    	non-compiled	[CE]  cannot  find  symbol  pos	161	None	replace
283	[BUG]  [BUGGY]  If(input  ==  null  ||  input.length()  ==  0)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }  [CE]  [FE]            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  If(input  ==  null  ||  input.length()  ==  0)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	If(input  ==  null  ||  input.length()  ==  0)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }	  if(input    ==    null    ||    input.length()    ==    0)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null.   ");    }    	non-compiled	[CE]  	161	None	replace
284	[BUG]  [BUGGY]  char  pos  =  input.charAt(0,  input.length());  [CE]  method  charAt  in  interface  CharSequence  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  char  pos  =  input.charAt(0,  input.length());  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	char  pos  =  input.charAt(0,  input.length());	  char    pos    =    input.charAt(0);    	non-compiled	[CE]  method  charAt  in  interface  CharSequence  cannot  be  applied  to  given  types;	20	None	replace
285	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  char  pos  =  input.charAt(input.length()  -  1);  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	add	char  pos  =  input.charAt(input.length()  -  1);	  char    pos    =    input.charAt(0);    	compilable	  [FE]  AssertionFailedError  	20	19	replace
286	[BUG]  [BUGGY]  char  pos  =  input.charAt(input.length()  -  1);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  char  pos  =  input.charAt(input.length()  -  1);  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	char  pos  =  input.charAt(input.length()  -  1);	  char    pos    =    input.charAt(0);    	compilable	  [FE]  AssertionFailedError  	20	19	replace
287	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	add	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    be    null..   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }	  	compilable	  [FE]  ComparisonFailure  	96	1	add
288	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    be    null..   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }	  	compilable	  [FE]  ComparisonFailure  	96	1	add
289	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null..   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	add	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    be    null..   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null..   ");  }	  	compilable	  [FE]  ComparisonFailure  	96	1	add
290	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null..   ");  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null..   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    be    null..   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null..   ");  }	  	compilable	  [FE]  ComparisonFailure  	96	1	add
291	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	add	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    be    null..   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }	  	compilable	  [FE]  ComparisonFailure  	96	1	add
292	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    be    null..   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }	  	compilable	  [FE]  ComparisonFailure  	96	1	add
293	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.  [CE]  unclosed  string  literal  [FE]          ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    be    null..   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.	  	non-compiled	[CE]  unclosed  string  literal	96	None	add
294	[BUG]  [BUGGY]  if(input.length()  >  0)  {  if(input.length()  >=  0)  {  out.write('n');  }  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(input.length()  >  0)  {  if(input.length()  >=  0)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	if(input.length()  >  0)  {  if(input.length()  >=  0)  {  out.write('n');  }	          if(input.length()    ==    0)    {    out.write('n');    }    if(input.length()    >=    0)    {    out.write('n');    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
295	[BUG]  [BUGGY]  if(input.length()  ==  0)  {  aughtExceptionHandler.throwAsIOException( " ");  }  [CE]  cannot  find  symbol  aughtExceptionHandler  [FE]          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(input.length()  ==  0)  {  aughtExceptionHandler.throwAsIOException( " ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	if(input.length()  ==  0)  {  aughtExceptionHandler.throwAsIOException( " ");  }	  aughtExceptionHandler.throwAsIOException(   "   ");    	non-compiled	[CE]  cannot  find  symbol  aughtExceptionHandler	35	None	replace
296	[BUG]  [BUGGY]  if(input.length()  ==  0)  {  input.throwAsIOException( " ");  }  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(input.length()  ==  0)  {  input.throwAsIOException( " ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	if(input.length()  ==  0)  {  input.throwAsIOException( " ");  }	  aughtExceptionHandler.throwAsIOException(   "   ");    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
297	[BUG]  [BUGGY]  pt.throwAsIOException( " ");  [CE]  cannot  find  symbol  pt  [FE]              ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  pt.throwAsIOException( " ");  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	pt.throwAsIOException( " ");	  aughtExceptionHandler.throwAsIOException(   "   ");    	non-compiled	[CE]  cannot  find  symbol  pt	35	None	replace
298	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =(input!=  null)?  1  :  input.length();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	add	int  pos  =(input!=  null)?  1  :  input.length();	  int    pos    =(input    ==    null)?    1    :    input.length();    	compilable	  [FE]  AssertionFailedError  	9	19	replace
299	[BUG]  [BUGGY]  int  pos  =(input!=  null)?  1  :  input.length();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =(input!=  null)?  1  :  input.length();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	int  pos  =(input!=  null)?  1  :  input.length();	  int    pos    =(input    ==    null)?    1    :    input.length();    	compilable	  [FE]  AssertionFailedError  	9	19	replace
300	[BUG]  [BUGGY]  int  pos  =  input.lastIndexOf('.',  out);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =  input.lastIndexOf('.',  out);  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	int  pos  =  input.lastIndexOf('.',  out);	  int    pos    =    input.lastIndexOf('.');    	non-compiled	[CE]  cannot  find  symbol	157	None	replace
301	[BUG]  [BUGGY]  int  pos  =  input.lastIndexOf('.',  0,  input.length());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =  input.lastIndexOf('.',  0,  input.length());  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	int  pos  =  input.lastIndexOf('.',  0,  input.length());	  int    pos    =    input.lastIndexOf('.');    	non-compiled	[CE]  cannot  find  symbol	157	None	replace
302	[BUG]  [BUGGY]  int  pos  =  input.lastIndexOf('.',  pos);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =  input.lastIndexOf('.',  pos);  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	int  pos  =  input.lastIndexOf('.',  pos);	  int    pos    =    input.lastIndexOf('.');    	non-compiled	[CE]  cannot  find  symbol	157	None	replace
303	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input!=    null)    {    out.write('n');    }    if(input!=  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	add	                if(input!=        null)        {        out.write('n');        }        if(input!=    null)    {    out.write('n');    }    if(input!=  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	13	19	add
304	[BUG]  [BUGGY]          if(input!=    null)    {    out.write('n');    }    if(input!=  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input!=    null)    {    out.write('n');    }    if(input!=  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	                if(input!=        null)        {        out.write('n');        }        if(input!=    null)    {    out.write('n');    }    if(input!=  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	13	19	add
305	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input!=    null)    {    out.write('n');    }    if(input!=  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	add	                if(input!=        null)        {        out.write('n');        }        if(input!=    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	13	19	add
306	[BUG]  [BUGGY]          if(input!=    null)    {    out.write('n');    }    if(input!=  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input!=    null)    {    out.write('n');    }    if(input!=  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	                if(input!=        null)        {        out.write('n');        }        if(input!=    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	13	19	add
307	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input!=    null)    {    out.write('n');    }    if(input!=  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	add	                if(input!=        null)        {        out.write('n');        }        if(input!=    null)    {    out.write('n');    }    if(input!=  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	13	19	add
308	[BUG]  [BUGGY]          if(input!=    null)    {    out.write('n');    }    if(input!=  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input!=    null)    {    out.write('n');    }    if(input!=  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	                if(input!=        null)        {        out.write('n');        }        if(input!=    null)    {    out.write('n');    }    if(input!=  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	13	19	add
309	[BUG]  [BUGGY]          if(input!=    null)    {    out.write('n');    }    if(input!=  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  if(input  >=  null)  {  out.write('n');  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]          ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input!=    null)    {    out.write('n');    }    if(input!=  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  if(input  >=  null)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	                if(input!=        null)        {        out.write('n');        }        if(input!=    null)    {    out.write('n');    }    if(input!=  null)  {  out.write('n');  }  if(input  >=  null)  {  out.write('n');  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	13	None	add
310	[BUG]  [BUGGY]  out.write(input.charAt(0),  input.length()  -  1);  [CE]  no  suitable  method  found  for  write(char,int)  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  out.write(input.charAt(0),  input.length()  -  1);  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	out.write(input.charAt(0),  input.length()  -  1);	  out.write(input.charAt(0),    input.length());    	non-compiled	[CE]  no  suitable  method  found  for  write(char,int)	10	None	replace
311	[BUG]  [BUGGY]  out.write(input.charAt(0),  input.length()  +  1);  [CE]  no  suitable  method  found  for  write(char,int)  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  out.write(input.charAt(0),  input.length()  +  1);  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	out.write(input.charAt(0),  input.length()  +  1);	  out.write(input.charAt(0),    input.length());    	non-compiled	[CE]  no  suitable  method  found  for  write(char,int)	10	None	replace
312	[BUG]  [BUGGY]  out.write(input.charAt(0),  input.length()  -  1,  input.length());  [CE]  no  suitable  method  found  for  write(char,int,int)  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  out.write(input.charAt(0),  input.length()  -  1,  input.length());  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	out.write(input.charAt(0),  input.length()  -  1,  input.length());	  out.write(input.charAt(0),    input.length());    	non-compiled	[CE]  no  suitable  method  found  for  write(char,int,int)	10	None	replace
313	[BUG]  [BUGGY]  String  pos  =  0;  [CE]  incompatible  types  [FE]                ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  String  pos  =  0;  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	String  pos  =  0;	  char    pos    =    0;    String    pos    =    0;    	non-compiled	[CE]  incompatible  types	93	None	replace
314	[BUG]  [BUGGY]  int  pos  =  0;  String  pos  =  0;  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                  ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =  0;  String  pos  =  0;  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	int  pos  =  0;  String  pos  =  0;	  char    pos    =    0;    String    pos    =    0;    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	93	None	replace
315	[BUG]  [BUGGY]  Integer  pos  =  0;  String  pos  =  0;  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                    ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  Integer  pos  =  0;  String  pos  =  0;  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	Integer  pos  =  0;  String  pos  =  0;	  char    pos    =    0;    String    pos    =    0;    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	93	None	replace
316	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]              AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =  0;  pos  =  0;  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	add	int  pos  =  0;  pos  =  0;	  int    pos    =    1;    pos    =    1;    	compilable	  [FE]  ComparisonFailure  	68	1	replace
317	[BUG]  [BUGGY]  int  pos  =  0;  pos  =  0;  [FE]  ComparisonFailure  [FE]              AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =  0;  pos  =  0;  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	int  pos  =  0;  pos  =  0;	  int    pos    =    1;    pos    =    1;    	compilable	  [FE]  ComparisonFailure  	68	1	replace
318	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =  0;  pos  =  1;  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	add	int  pos  =  0;  pos  =  1;	  int    pos    =    1;    pos    =    1;    	compilable	  [FE]  AssertionFailedError  	68	19	replace
319	[BUG]  [BUGGY]  int  pos  =  0;  pos  =  1;  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =  0;  pos  =  1;  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	int  pos  =  0;  pos  =  1;	  int    pos    =    1;    pos    =    1;    	compilable	  [FE]  AssertionFailedError  	68	19	replace
320	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                  AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =  1;  pos  =  0;  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	add	int  pos  =  1;  pos  =  0;	  int    pos    =    1;    pos    =    1;    	compilable	  [FE]  ComparisonFailure  	68	1	replace
321	[BUG]  [BUGGY]  int  pos  =  1;  pos  =  0;  [FE]  ComparisonFailure  [FE]                  AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =  1;  pos  =  0;  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	int  pos  =  1;  pos  =  0;	  int    pos    =    1;    pos    =    1;    	compilable	  [FE]  ComparisonFailure  	68	1	replace
322	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =  2;  pos  =  1;  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	add	int  pos  =  2;  pos  =  1;	  int    pos    =    1;    pos    =    1;    	compilable	  [FE]  AssertionFailedError  	68	19	replace
323	[BUG]  [BUGGY]  int  pos  =  2;  pos  =  1;  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =  2;  pos  =  1;  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	int  pos  =  2;  pos  =  1;	  int    pos    =    1;    pos    =    1;    	compilable	  [FE]  AssertionFailedError  	68	19	replace
324	[BUG]  [BUGGY]  if(input  ==  null)  {  out.write( "null ");  }  [CE]  cannot  find  symbol  pos  [FE]        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(input  ==  null)  {  out.write( "null ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	if(input  ==  null)  {  out.write( "null ");  }	  if(input!=    null)    {    out.write(   "null   ");    }    	non-compiled	[CE]  cannot  find  symbol  pos	156	None	replace
325	[BUG]  [BUGGY]  if(out!=  null)  {  out.write( "null ");  }  [CE]  cannot  find  symbol  pos  [FE]          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(out!=  null)  {  out.write( "null ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	if(out!=  null)  {  out.write( "null ");  }	  if(input!=    null)    {    out.write(   "null   ");    }    	non-compiled	[CE]  cannot  find  symbol  pos	156	None	replace
326	[BUG]  [BUGGY]  CharSequence  input  =  input.getChars(pos);  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  CharSequence  input  =  input.getChars(pos);  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	CharSequence  input  =  input.getChars(pos);	  CharSequence    input    =    input.getChars();    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	49	None	replace
327	[BUG]  [BUGGY]  CharSequence  input  =  input.getChars(),  out);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  CharSequence  input  =  input.getChars(),  out);  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	CharSequence  input  =  input.getChars(),  out);	  CharSequence    input    =    input.getChars();    	non-compiled	[CE]  ';'  expected	49	None	replace
328	[BUG]  [BUGGY]  OutputStream  input  =  new  FileOutputStream(input.getBytes(),  out);  [CE]  cannot  find  symbol  [FE]        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  OutputStream  input  =  new  FileOutputStream(input.getBytes(),  out);  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	OutputStream  input  =  new  FileOutputStream(input.getBytes(),  out);	  OutputStream    input    =    new    FileOutputStream(input.getBytes());    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
329	[BUG]  [BUGGY]  OutputStream  input  =  new  FileOutputStream(input,  out.getBytes());  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  OutputStream  input  =  new  FileOutputStream(input,  out.getBytes());  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	OutputStream  input  =  new  FileOutputStream(input,  out.getBytes());	  OutputStream    input    =    new    FileOutputStream(input.getBytes());    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
330	[BUG]  [BUGGY]  OutputStream  input  =  new  FileOutputStream(out.getBytes());  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  OutputStream  input  =  new  FileOutputStream(out.getBytes());  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	OutputStream  input  =  new  FileOutputStream(out.getBytes());	  OutputStream    input    =    new    FileOutputStream(input.getBytes());    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
331	[BUG]  [BUGGY]  int  pos  =(input  ==  null)?  1  :  input.length();  int  pos  =(input  ==  null)?  1  :  input.length();  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]    AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =(input  ==  null)?  1  :  input.length();  int  pos  =(input  ==  null)?  1  :  input.length();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	int    pos    =(input    ==    null)?    1    :    input.length();    int  pos  =(input  ==  null)?  1  :  input.length();	  	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	8	None	add
332	[BUG]  [BUGGY]  int  pos  =(input  ==  null)?  1  :  input.length();  int  pos  =(input!=  null)?  1  :  input.length();  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]      AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =(input  ==  null)?  1  :  input.length();  int  pos  =(input!=  null)?  1  :  input.length();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	int    pos    =(input    ==    null)?    1    :    input.length();    int  pos  =(input!=  null)?  1  :  input.length();	  	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	8	None	add
333	[BUG]  [BUGGY]  int  pos  =(input  ==  null)?  1  :  input.length();  Int  pos  =(input  ==  null)?  1  :  input.length();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =(input  ==  null)?  1  :  input.length();  Int  pos  =(input  ==  null)?  1  :  input.length();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	int    pos    =(input    ==    null)?    1    :    input.length();    Int  pos  =(input  ==  null)?  1  :  input.length();	  	non-compiled	[CE]  cannot  find  symbol	8	None	add
334	[BUG]  [BUGGY]  int  pos  =(input  ==  null)?  1  :  input.length();  int  pos  =(input  ==  null)?  1  :  input.length());  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =(input  ==  null)?  1  :  input.length();  int  pos  =(input  ==  null)?  1  :  input.length());  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	int    pos    =(input    ==    null)?    1    :    input.length();    int  pos  =(input  ==  null)?  1  :  input.length());	  	non-compiled	[CE]  ';'  expected	8	None	add
335	[BUG]  [BUGGY]  int  pos  =  0;  String  pos  =  input.length();  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =  0;  String  pos  =  input.length();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	int  pos  =  0;  String  pos  =  input.length();	  char    pos    =    0;    String    pos    =    input.length();    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	143	None	replace
336	[BUG]  [BUGGY]  Integer  pos  =  0;  String  pos  =  input.length();  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  Integer  pos  =  0;  String  pos  =  input.length();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	Integer  pos  =  0;  String  pos  =  input.length();	  char    pos    =    0;    String    pos    =    input.length();    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	143	None	replace
337	[BUG]  [BUGGY]  int  pos  =(input  ==  null)?  0  :  input.length());  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =(input  ==  null)?  0  :  input.length());  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	int  pos  =(input  ==  null)?  0  :  input.length());	  int    pos    =(input    ==    null)?    0    :    input.length();    int    pos    =(input    ==    null)?    0    :    input.length());    	non-compiled	[CE]  ';'  expected	163	None	replace
338	[BUG]  [BUGGY]  int  pos  =  0;  Character  pos  =  0;  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =  0;  Character  pos  =  0;  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	int  pos  =  0;  Character  pos  =  0;	  char    pos    =    0;    Character    pos    =    0;    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	90	None	replace
339	[BUG]  [BUGGY]  Integer  pos  =  0;  Character  pos  =  0;  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  Integer  pos  =  0;  Character  pos  =  0;  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	Integer  pos  =  0;  Character  pos  =  0;	  char    pos    =    0;    Character    pos    =    0;    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	90	None	replace
340	[BUG]  [BUGGY]  while(out!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }  [CE]  cannot  find  symbol  pos  [FE]        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  while(out!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	while(out!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }	  if(out    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null.   ");    }    	non-compiled	[CE]  cannot  find  symbol  pos	132	None	replace
341	[BUG]  [BUGGY]  if(input.length()  <  0)  {  out.write('n');  }  [CE]  cannot  find  symbol  pos  [FE]            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(input.length()  <  0)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	if(input.length()  <  0)  {  out.write('n');  }	  if(input.length()    >    0)    {    out.write('n');    }    	non-compiled	[CE]  cannot  find  symbol  pos	25	None	replace
342	[BUG]  [BUGGY]  Int  inputLength  =  input.length();  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  Int  inputLength  =  input.length();  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	Int  inputLength  =  input.length();	          int    inputLength    =    input.length();    Int    inputLength    =    input.length();    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
343	[BUG]  [BUGGY]  int  pos  =  0;  int  pos  =  0;  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =  0;  int  pos  =  0;  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	int  pos  =  0;  int  pos  =  0;	  char    pos    =    0;    char    pos    =    0;    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	89	None	replace
344	[BUG]  [BUGGY]  ||  input!=  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null. ");  }  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  ||  input!=  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null. ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	||  input!=  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null. ");  }	  ||    input    ==    null)    {    throw    new    IllegalArgumentException(   "Input    input    is    null.   ");    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
345	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    }    if(input!=  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	add	                if(input        ==        null)        {        out.write('n');        }        if(input!=    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	81	19	add
346	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write('n');    }    if(input!=  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    }    if(input!=  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	                if(input        ==        null)        {        out.write('n');        }        if(input!=    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	81	19	add
347	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    }    if(input!=  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	add	                if(input        ==        null)        {        out.write('n');        }        if(input!=    null)    {    out.write('n');    }    if(input!=  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	81	19	add
348	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write('n');    }    if(input!=  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    }    if(input!=  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	                if(input        ==        null)        {        out.write('n');        }        if(input!=    null)    {    out.write('n');    }    if(input!=  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	81	19	add
349	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write('n');    }    if(input!=  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  if(input  >=  null)  {  out.write('n');  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]        ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    }    if(input!=  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  if(input  >=  null)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	                if(input        ==        null)        {        out.write('n');        }        if(input!=    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  }  if(input  >=  null)  {  out.write('n');  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	81	None	add
350	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write('n');    }    if(input!=  null)  {  out.write('n');  }  If(input  ==  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    }    if(input!=  null)  {  out.write('n');  }  If(input  ==  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	                if(input        ==        null)        {        out.write('n');        }        if(input!=    null)    {    out.write('n');    }    If(input  ==  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }	  	non-compiled	[CE]  ';'  expected	81	None	add
351	[BUG]  [BUGGY]  int  pos  =(input  ==  null)?  0  :  input.length()  +  1;  int  pos  =(input  ==  null)?  0  :  input.length()  +  1;  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]    AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =(input  ==  null)?  0  :  input.length()  +  1;  int  pos  =(input  ==  null)?  0  :  input.length()  +  1;  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	int    pos    =(input    ==    null)?    0    :    input.length()    +    1;    int  pos  =(input  ==  null)?  0  :  input.length()  +  1;	  	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	113	None	add
352	[BUG]  [BUGGY]  int  pos  =(input  ==  null)?  0  :  input.length()  +  1;  int  pos  =(input!=  null)?  0  :  input.length()  +  1;  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]      AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =(input  ==  null)?  0  :  input.length()  +  1;  int  pos  =(input!=  null)?  0  :  input.length()  +  1;  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	int    pos    =(input    ==    null)?    0    :    input.length()    +    1;    int  pos  =(input!=  null)?  0  :  input.length()  +  1;	  	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	113	None	add
353	[BUG]  [BUGGY]  int  pos  =(input  ==  null)?  0  :  input.length()  +  1;  Int  pos  =(input  ==  null)?  0  :  input.length()  +  1;  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =(input  ==  null)?  0  :  input.length()  +  1;  Int  pos  =(input  ==  null)?  0  :  input.length()  +  1;  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	int    pos    =(input    ==    null)?    0    :    input.length()    +    1;    Int  pos  =(input  ==  null)?  0  :  input.length()  +  1;	  	non-compiled	[CE]  cannot  find  symbol	113	None	add
354	[BUG]  [BUGGY]  int  pos  =(input  ==  null)?  0  :  input.length()  +  1;  Integer  pos  =(input  ==  null)?  0  :  input.length()  +  1;  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]          AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =(input  ==  null)?  0  :  input.length()  +  1;  Integer  pos  =(input  ==  null)?  0  :  input.length()  +  1;  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	int    pos    =(input    ==    null)?    0    :    input.length()    +    1;    Integer  pos  =(input  ==  null)?  0  :  input.length()  +  1;	  	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	113	None	add
355	[BUG]  [BUGGY]  int  pos  =(input  ==  null)?  0  :  input.length()  +  1;  pos  =(input  ==  null)?  0  :  input.length()  +  1;  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]            AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =(input  ==  null)?  0  :  input.length()  +  1;  pos  =(input  ==  null)?  0  :  input.length()  +  1;  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	int    pos    =(input    ==    null)?    0    :    input.length()    +    1;    pos  =(input  ==  null)?  0  :  input.length()  +  1;	  	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	113	None	add
356	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input.length()    ==    0)    {    out.write('n');    }    if(input.length()!=  0)  {  out.write('n');  }  if(input.length()  ==  0)  {  out.write('n');  }  if(input.length()!=  0)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	add	                if(input.length()        ==        0)        {        out.write('n');        }        if(input.length()!=    0)    {    out.write('n');    }    if(input.length()  ==  0)  {  out.write('n');  }  if(input.length()!=  0)  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	28	19	add
357	[BUG]  [BUGGY]          if(input.length()    ==    0)    {    out.write('n');    }    if(input.length()!=  0)  {  out.write('n');  }  if(input.length()  ==  0)  {  out.write('n');  }  if(input.length()!=  0)  {  out.write('n');  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input.length()    ==    0)    {    out.write('n');    }    if(input.length()!=  0)  {  out.write('n');  }  if(input.length()  ==  0)  {  out.write('n');  }  if(input.length()!=  0)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	                if(input.length()        ==        0)        {        out.write('n');        }        if(input.length()!=    0)    {    out.write('n');    }    if(input.length()  ==  0)  {  out.write('n');  }  if(input.length()!=  0)  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	28	19	add
358	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input.length()    ==    0)    {    out.write('n');    }    if(input.length()!=  0)  {  out.write('n');  }  if(input.length()  ==  0)  {  out.write('n');  }  if(input.length()  >=  0)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	add	                if(input.length()        ==        0)        {        out.write('n');        }        if(input.length()!=    0)    {    out.write('n');    }    if(input.length()  ==  0)  {  out.write('n');  }  if(input.length()  >=  0)  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	28	19	add
359	[BUG]  [BUGGY]          if(input.length()    ==    0)    {    out.write('n');    }    if(input.length()!=  0)  {  out.write('n');  }  if(input.length()  ==  0)  {  out.write('n');  }  if(input.length()  >=  0)  {  out.write('n');  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input.length()    ==    0)    {    out.write('n');    }    if(input.length()!=  0)  {  out.write('n');  }  if(input.length()  ==  0)  {  out.write('n');  }  if(input.length()  >=  0)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	                if(input.length()        ==        0)        {        out.write('n');        }        if(input.length()!=    0)    {    out.write('n');    }    if(input.length()  ==  0)  {  out.write('n');  }  if(input.length()  >=  0)  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	28	19	add
360	[BUG]  [BUGGY]          if(input.length()    ==    0)    {    out.write('n');    }    if(input.length()!=  0)  {  out.write('n');  }  if(input.length()  ==  0)  {  out.write('n');  }  if(input.length()  >>  0)  {  out.write('n');  }  [CE]  incompatible  types  [FE]        ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input.length()    ==    0)    {    out.write('n');    }    if(input.length()!=  0)  {  out.write('n');  }  if(input.length()  ==  0)  {  out.write('n');  }  if(input.length()  >>  0)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	                if(input.length()        ==        0)        {        out.write('n');        }        if(input.length()!=    0)    {    out.write('n');    }    if(input.length()  ==  0)  {  out.write('n');  }  if(input.length()  >>  0)  {  out.write('n');  }	  	non-compiled	[CE]  incompatible  types	28	None	add
361	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input.length()    ==    0)    {    out.write('n');    }    if(input.length()!=  0)  {  out.write('n');  }  if(input.length()!=  0)  {  out.write('n');  }  if(input.length()!=  0)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	add	                if(input.length()        ==        0)        {        out.write('n');        }        if(input.length()!=    0)    {    out.write('n');    }    if(input.length()!=  0)  {  out.write('n');  }  if(input.length()!=  0)  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	28	19	add
362	[BUG]  [BUGGY]          if(input.length()    ==    0)    {    out.write('n');    }    if(input.length()!=  0)  {  out.write('n');  }  if(input.length()!=  0)  {  out.write('n');  }  if(input.length()!=  0)  {  out.write('n');  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input.length()    ==    0)    {    out.write('n');    }    if(input.length()!=  0)  {  out.write('n');  }  if(input.length()!=  0)  {  out.write('n');  }  if(input.length()!=  0)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	                if(input.length()        ==        0)        {        out.write('n');        }        if(input.length()!=    0)    {    out.write('n');    }    if(input.length()!=  0)  {  out.write('n');  }  if(input.length()!=  0)  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	28	19	add
363	[BUG]  [BUGGY]  pos  =(input  ==  null)?  0  :  input.length();  [CE]  cannot  find  symbol  pos  [FE]              AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  pos  =(input  ==  null)?  0  :  input.length();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	pos  =(input  ==  null)?  0  :  input.length();	  int    pos    =(input    ==    null)?    0    :    input.length();    pos    =(input    ==    null)?    0    :    input.length();    	non-compiled	[CE]  cannot  find  symbol  pos	61	None	replace
364	[BUG]  [BUGGY]  out.write(Integer.toString(input.substring(0,  input.length()  -  1));  [CE]  ')'  expected  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  out.write(Integer.toString(input.substring(0,  input.length()  -  1));  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	out.write(Integer.toString(input.substring(0,  input.length()  -  1));	  out.write(input.substring(0,    input.length()    -    1));    	non-compiled	[CE]  ')'  expected	146	None	replace
365	[BUG]  [BUGGY]  if(input.length()  ==  1)  {  out.write(input.charAt(0));  out.write(input.charAt(1));  }  [CE]  cannot  find  symbol  pos  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(input.length()  ==  1)  {  out.write(input.charAt(0));  out.write(input.charAt(1));  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	if(input.length()  ==  1)  {  out.write(input.charAt(0));  out.write(input.charAt(1));  }	          out.write(input.charAt(0));    out.write(input.charAt(1));    	non-compiled	[CE]  cannot  find  symbol  pos	107	None	replace
366	[BUG]  [BUGGY]  if(input.length()  ==  1)  {  out.write(input.charAt(0));  out.write(input.charAt(1));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  pos  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(input.length()  ==  1)  {  out.write(input.charAt(0));  out.write(input.charAt(1));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	if(input.length()  ==  1)  {  out.write(input.charAt(0));  out.write(input.charAt(1));  }  else  {  throw  new  IllegalArgumentException( " ");  }	          out.write(input.charAt(0));    out.write(input.charAt(1));    	non-compiled	[CE]  cannot  find  symbol  pos	107	None	replace
367	[BUG]  [BUGGY]  if(input.length()  ==  1)  {  out.write(input.charAt(0));  out.write(input.charAt(1));  }  else  {  return;  }  [CE]  cannot  find  symbol  pos  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(input.length()  ==  1)  {  out.write(input.charAt(0));  out.write(input.charAt(1));  }  else  {  return;  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	if(input.length()  ==  1)  {  out.write(input.charAt(0));  out.write(input.charAt(1));  }  else  {  return;  }	          out.write(input.charAt(0));    out.write(input.charAt(1));    	non-compiled	[CE]  cannot  find  symbol  pos	107	None	replace
368	[BUG]  [BUGGY]  If(input  ==  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null. ");  }  [CE]  [FE]          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  If(input  ==  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null. ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	If(input  ==  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null. ");  }	  if(input!=    null)    {    throw    new    IllegalArgumentException(   "Input    input    is    null.   ");    }    	non-compiled	[CE]  	63	None	replace
369	[BUG]  [BUGGY]  while(input!=  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null. ");  }  [CE]  cannot  find  symbol  pos  [FE]            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  while(input!=  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null. ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	while(input!=  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null. ");  }	  if(input!=    null)    {    throw    new    IllegalArgumentException(   "Input    input    is    null.   ");    }    	non-compiled	[CE]  cannot  find  symbol  pos	63	None	replace
370	[BUG]  [BUGGY]  If(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Input  input  is  null. ");  }  [CE]  [FE]        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  If(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Input  input  is  null. ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	If(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Input  input  is  null. ");  }	  if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Input    input    is    null.   ");    }    	non-compiled	[CE]  	119	None	replace
371	[BUG]  [BUGGY]  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Input  input  must  not  be  null. ");  }  [CE]  cannot  find  symbol  pos  [FE]          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Input  input  must  not  be  null. ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Input  input  must  not  be  null. ");  }	  if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Input    input    is    null.   ");    }    	non-compiled	[CE]  cannot  find  symbol  pos	119	None	replace
372	[BUG]  [BUGGY]  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Input  input  is  null. ");  }  [CE]  cannot  find  symbol  pos  [FE]            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Input  input  is  null. ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Input  input  is  null. ");  }	  if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Input    input    is    null.   ");    }    	non-compiled	[CE]  cannot  find  symbol  pos	119	None	replace
373	[BUG]  [BUGGY]  out.write(Integer.toString(input.charAt(0)),  input.length());  [CE]  no  suitable  method  found  for  write(String,int)  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  out.write(Integer.toString(input.charAt(0)),  input.length());  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	out.write(Integer.toString(input.charAt(0)),  input.length());	  out.write(Integer.toString(input.charAt(0)));    	non-compiled	[CE]  no  suitable  method  found  for  write(String,int)	125	None	replace
374	[BUG]  [BUGGY]  out.write(Integer.toString(input.charAt(0)),  pos);  [CE]  cannot  find  symbol  pos  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  out.write(Integer.toString(input.charAt(0)),  pos);  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	out.write(Integer.toString(input.charAt(0)),  pos);	  out.write(Integer.toString(input.charAt(0)));    	non-compiled	[CE]  cannot  find  symbol  pos	125	None	replace
375	[BUG]  [BUGGY]  out.write(Integer.toString(input.charAt(0),  input.length()));  [CE]  cannot  find  symbol  pos  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  out.write(Integer.toString(input.charAt(0),  input.length()));  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	out.write(Integer.toString(input.charAt(0),  input.length()));	  out.write(Integer.toString(input.charAt(0)));    	non-compiled	[CE]  cannot  find  symbol  pos	125	None	replace
376	[BUG]  [BUGGY]  out.write( ".s.IFJDCS ".charAt(0));  [CE]  cannot  find  symbol  pos  [FE]        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  out.write( ".s.IFJDCS ".charAt(0));  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	out.write( ".s.IFJDCS ".charAt(0));	  out.write(   "null   ");    	non-compiled	[CE]  cannot  find  symbol  pos	122	None	replace
377	[BUG]  [BUGGY]  out.write( ".s.IFJDCS ".length());  [CE]  cannot  find  symbol  pos  [FE]          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  out.write( ".s.IFJDCS ".length());  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	out.write( ".s.IFJDCS ".length());	  out.write(   "null   ");    	non-compiled	[CE]  cannot  find  symbol  pos	122	None	replace
378	[BUG]  [BUGGY]  out.write( ".s.IFJDCS ".getBytes());  [CE]  no  suitable  method  found  for  write(byte[])  [FE]            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  out.write( ".s.IFJDCS ".getBytes());  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	out.write( ".s.IFJDCS ".getBytes());	  out.write(   "null   ");    	non-compiled	[CE]  no  suitable  method  found  for  write(byte[])	122	None	replace
379	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   ".     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( ". ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( ".   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	add	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   ".       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( ". ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( ".   ");  }	  	compilable	  [FE]  ComparisonFailure  	149	1	add
380	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   ".     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( ". ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( ".   ");  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   ".     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( ". ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( ".   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   ".       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( ". ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( ".   ");  }	  	compilable	  [FE]  ComparisonFailure  	149	1	add
381	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   ".     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( " ".   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( ".   ");  }  [CE]  <identifier>  expected  [FE]      ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   ".     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( " ".   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( ".   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   ".       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( " ".   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( ".   ");  }	  	non-compiled	[CE]  <identifier>  expected	149	None	add
382	[BUG]  [BUGGY]  out.write( ".s.IFJDCS ".toString());  [CE]  cannot  find  symbol  pos  [FE]        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  out.write( ".s.IFJDCS ".toString());  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	out.write( ".s.IFJDCS ".toString());	  out.write(   "null   ");    	non-compiled	[CE]  cannot  find  symbol  pos	122	None	replace
383	[BUG]  [BUGGY]  int  inputLength  =  input.length();  Int  outputLength  =  input.length();  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  inputLength  =  input.length();  Int  outputLength  =  input.length();  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	int  inputLength  =  input.length();  Int  outputLength  =  input.length();	          int    inputLength    =    input.length();    Int    inputLength    =    input.length();    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
384	[BUG]  [BUGGY]  if(out!=  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null. ");  }  [CE]  cannot  find  symbol  pos  [FE]          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(out!=  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null. ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	if(out!=  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null. ");  }	  if(input!=    null)    {    throw    new    IllegalArgumentException(   "Input    input    is    null.   ");    }    	non-compiled	[CE]  cannot  find  symbol  pos	63	None	replace
385	[BUG]  [BUGGY]  char  pos  =  input.charAt(0,  input.length()  -  1);  [CE]  method  charAt  in  interface  CharSequence  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  char  pos  =  input.charAt(0,  input.length()  -  1);  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	char  pos  =  input.charAt(0,  input.length()  -  1);	  char    pos    =    input.charAt(0);    	non-compiled	[CE]  method  charAt  in  interface  CharSequence  cannot  be  applied  to  given  types;	20	None	replace
386	[BUG]  [BUGGY]  out.write('n');  if(input.length()!=  0)  {  out.write('n');  }  [CE]  cannot  find  symbol  pos  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  out.write('n');  if(input.length()!=  0)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	out.write('n');  if(input.length()!=  0)  {  out.write('n');  }	          if(input.length()    ==    0)    {    out.write('n');    }    if(input.length()!=    0)    {    out.write('n');    }    	non-compiled	[CE]  cannot  find  symbol  pos	29	None	replace
387	[BUG]  [BUGGY]  if(input!=  null)  {  if(input  ==  null)  {  out.write('n');  }  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(input!=  null)  {  if(input  ==  null)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	if(input!=  null)  {  if(input  ==  null)  {  out.write('n');  }	          if(input.length()    ==    0)    {    out.write('n');    }    if(input.length()!=    0)    {    out.write('n');    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
388	[BUG]  [BUGGY]  OutputFactory  outputFactory  =  input.getOutputFactory();  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  OutputFactory  outputFactory  =  input.getOutputFactory();  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	OutputFactory  outputFactory  =  input.getOutputFactory();	          if(input!=    null)    {    out.write('n');    }    if(input    >=    null)    {    out.write('n');    }    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
389	[BUG]  [BUGGY]  if(out!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null. ");  }  [CE]  cannot  find  symbol  pos  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(out!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null. ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	if(out!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null. ");  }	          if(input    ==    null)    {    throw    new    IllegalArgumentException(       "The    Writer    must    be    null.       ");    }    if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    be    null..   ");    }    	non-compiled	[CE]  cannot  find  symbol  pos	97	None	replace
390	[BUG]  [BUGGY]  if(out!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }  [CE]  cannot  find  symbol  pos  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(out!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	if(out!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }	          if(input    ==    null)    {    throw    new    IllegalArgumentException(       "The    Writer    must    not    be    null.       ");    }    if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null.       ");    }    	non-compiled	[CE]  cannot  find  symbol  pos	53	None	replace
391	[BUG]  [BUGGY]  int  pos  =(input  ==  null)?  1  :  input.length();  pos  =(input  ==  null)?  1  :  input.length();  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]    AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =(input  ==  null)?  1  :  input.length();  pos  =(input  ==  null)?  1  :  input.length();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	int    pos    =(input    ==    null)?    1    :    input.length();    pos  =(input  ==  null)?  1  :  input.length();	  	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	8	None	add
392	[BUG]  [BUGGY]  Char[]  input  =  inputStream.getChars();  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  Char[]  input  =  inputStream.getChars();  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	Char[]  input  =  inputStream.getChars();	  Char[]    input    =    input.getChars();    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
393	[BUG]  [BUGGY]  Char[]  input  =  input.getString();  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  Char[]  input  =  input.getString();  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	Char[]  input  =  input.getString();	  Char[]    input    =    input.getChars();    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
394	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input!=  nu  [CE]  [FE]    IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input!=  nu  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        be        null.       ");        }        if(input!=    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    be    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input!=  nu	  	non-compiled	[CE]  	98	None	add
395	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input!=  null)  {  throw  new  Il  [CE]  '('  or  '['  expected  [FE]      IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input!=  null)  {  throw  new  Il  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        be        null.       ");        }        if(input!=    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    be    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input!=  null)  {  throw  new  Il	  	non-compiled	[CE]  '('  or  '['  expected	98	None	add
396	[BUG]  [BUGGY]  if(out!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  pos  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(out!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	if(out!=  null)  {  throw  new  IllegalArgumentException( " ");  }	          if(input    ==    null)    {    throw    new    IllegalArgumentException(       "       ");    }    if(input    ==    null)    {    throw    new    IllegalArgumentException(   ",       ");    }    	non-compiled	[CE]  cannot  find  symbol  pos	152	None	replace
397	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(1));  out.write(input.charAt(0));  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	add	                out.write(input.charAt(0));        out.write(input.charAt(1));    out.write(input.charAt(0));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	106	19	add
398	[BUG]  [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(1));  out.write(input.charAt(0));  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(1));  out.write(input.charAt(0));  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	                out.write(input.charAt(0));        out.write(input.charAt(1));    out.write(input.charAt(0));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	106	19	add
399	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input!=  nu  [CE]  [FE]    IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input!=  nu  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        not        be        null.       ");        }        if(input!=    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input!=  nu	  	non-compiled	[CE]  	56	None	add
400	[BUG]  [BUGGY]  if(out  ==  null  ||  input.length()  ==  0)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }  [CE]  cannot  find  symbol  pos  [FE]        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(out  ==  null  ||  input.length()  ==  0)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	if(out  ==  null  ||  input.length()  ==  0)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }	  if(input    ==    null    ||    input.length()    ==    0)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null.   ");    }    	non-compiled	[CE]  cannot  find  symbol  pos	161	None	replace
401	[BUG]  [BUGGY]  out.write(input.charAt(0),  input.length()  -  2);  [CE]  no  suitable  method  found  for  write(char,int)  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  out.write(input.charAt(0),  input.length()  -  2);  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	out.write(input.charAt(0),  input.length()  -  2);	  out.write(input.charAt(0),    input.length());    	non-compiled	[CE]  no  suitable  method  found  for  write(char,int)	10	None	replace
402	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(0));  out.write(input.charAt(0));  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	add	                out.write(input.charAt(0));        out.write(input.charAt(0));    out.write(input.charAt(0));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	104	19	add
403	[BUG]  [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(0));  out.write(input.charAt(0));  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(0));  out.write(input.charAt(0));  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	                out.write(input.charAt(0));        out.write(input.charAt(0));    out.write(input.charAt(0));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	104	19	add
404	[BUG]  [BUGGY]  out.write(Integer.toString(input.substring(0,  input.length()));  [CE]  ')'  expected  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  out.write(Integer.toString(input.substring(0,  input.length()));  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	out.write(Integer.toString(input.substring(0,  input.length()));	  out.write(input.substring(0,    input.length()));    	non-compiled	[CE]  ')'  expected	147	None	replace
405	[BUG]  [BUGGY]  out.write(Integer.substring(0,  input.length()));  [CE]  cannot  find  symbol  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  out.write(Integer.substring(0,  input.length()));  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	out.write(Integer.substring(0,  input.length()));	  out.write(input.substring(0,    input.length()));    	non-compiled	[CE]  cannot  find  symbol	147	None	replace
406	[BUG]  [BUGGY]  int  pos  =  1;  int  pos  =  0;  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]        AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =  1;  int  pos  =  0;  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	int  pos  =  1;  int  pos  =  0;	  int    pos    =    1;    int    pos    =    2;    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	129	None	replace
407	[BUG]  [BUGGY]  if(out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  [CE]  cannot  find  symbol  pos  [FE]        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	if(out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }	  if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null   ");    }    	non-compiled	[CE]  cannot  find  symbol  pos	162	None	replace
408	[BUG]  [BUGGY]  out.write(Integer.substring(0,  input.length()  -  1));  [CE]  cannot  find  symbol  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  out.write(Integer.substring(0,  input.length()  -  1));  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	out.write(Integer.substring(0,  input.length()  -  1));	  out.write(input.substring(0,    input.length()    -    1));    	non-compiled	[CE]  cannot  find  symbol	146	None	replace
409	[BUG]  [BUGGY]          int    inputLength    =    input.length();    int  outputLength  =  input.length();  int  inputLength  =  outputLength.length();  int  outputLength  =  input.length();  [CE]  variable  inputLength  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          int    inputLength    =    input.length();    int  outputLength  =  input.length();  int  inputLength  =  outputLength.length();  int  outputLength  =  input.length();  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	                int        inputLength        =        input.length();        int    outputLength    =    input.length();    int  inputLength  =  outputLength.length();  int  outputLength  =  input.length();	  	non-compiled	[CE]  variable  inputLength  is  already  defined  in  method  translate(CharSequence,Writer)	41	None	add
410	[BUG]  [BUGGY]  int  pos  =(input!=  null)?  0  :  input.length();  Int  pos  =(input  ==  null)?  0  :  input.length();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =(input!=  null)?  0  :  input.length();  Int  pos  =(input  ==  null)?  0  :  input.length();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	int  pos  =(input!=  null)?  0  :  input.length();  Int  pos  =(input  ==  null)?  0  :  input.length();	  int    pos    =(input    ==    null)?    0    :    input.length();    Int    pos    =(input    ==    null)?    0    :    input.length();    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
411	[BUG]  [BUGGY]  float  pos  =(input!=  null)?  0  :  input.length();  [CE]  no  suitable  method  found  for  translate(CharSequence,float,Writer)  [FE]            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  float  pos  =(input!=  null)?  0  :  input.length();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	float  pos  =(input!=  null)?  0  :  input.length();	  int    pos    =(input!=    null)?    0    :    input.length();    int    pos    =(input    >>    null)?    0    :    input.length();    	non-compiled	[CE]  no  suitable  method  found  for  translate(CharSequence,float,Writer)	45	None	replace
412	[BUG]  [BUGGY]  char  inputLength  =  input.length();  Int  int  inputLength  =  input.length();  [CE]  not  a  statement  [FE]          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  char  inputLength  =  input.length();  Int  int  inputLength  =  input.length();  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	char  inputLength  =  input.length();  Int  int  inputLength  =  input.length();	          int    inputLength    =    input.length();    Int    int    inputLength    =    input.length();    	non-compiled	[CE]  not  a  statement	39	None	replace
413	[BUG]  [BUGGY]  Int  int  inputLength  =  input.length();  [CE]  not  a  statement  [FE]            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  Int  int  inputLength  =  input.length();  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	Int  int  inputLength  =  input.length();	          int    inputLength    =    input.length();    Int    int    inputLength    =    input.length();    	non-compiled	[CE]  not  a  statement	39	None	replace
414	[BUG]  [BUGGY]  int  pos  =  0;  Integer  pos  =  0;  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]            AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =  0;  Integer  pos  =  0;  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	int  pos  =  0;  Integer  pos  =  0;	  int    pos    =    1;    Integer    pos    =    1;    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	67	None	replace
415	[BUG]  [BUGGY]  int  pos  =  0;  Integer  pos  =  1;  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]              AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =  0;  Integer  pos  =  1;  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	int  pos  =  0;  Integer  pos  =  1;	  int    pos    =    1;    Integer    pos    =    1;    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	67	None	replace
416	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(2));  out.write(input.charAt(0));  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	add	                out.write(input.charAt(0));        out.write(input.charAt(2));    out.write(input.charAt(0));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	134	19	add
417	[BUG]  [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(2));  out.write(input.charAt(0));  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          out.write(input.charAt(0));    out.write(input.charAt(2));  out.write(input.charAt(0));  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	                out.write(input.charAt(0));        out.write(input.charAt(2));    out.write(input.charAt(0));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	134	19	add
418	[BUG]  [BUGGY]  out.write(Integer.toHexString(input.charAt(0)));  [CE]  cannot  find  symbol  pos  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  out.write(Integer.toHexString(input.charAt(0)));  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	out.write(Integer.toHexString(input.charAt(0)));	          out.write(input.charAt(0));    out.write(input.charAt(2));    	non-compiled	[CE]  cannot  find  symbol  pos	135	None	replace
419	[BUG]  [BUGGY]  int  pos  =  input.length();  String  pos  =  input.length();  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]        AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =  input.length();  String  pos  =  input.length();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	int  pos  =  input.length();  String  pos  =  input.length();	  int    pos    =    input.length();    char    pos    =    input.length();    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	154	None	replace
420	[BUG]  [BUGGY]  char  inputLength  =  input.length();  int  outputLength  =  input.length();  [CE]  possible  loss  of  precision  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  char  inputLength  =  input.length();  int  outputLength  =  input.length();  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	char  inputLength  =  input.length();  int  outputLength  =  input.length();	          int    inputLength    =    input.length();    int    outputLength    =    input.length();    	non-compiled	[CE]  possible  loss  of  precision	42	None	replace
421	[BUG]  [BUGGY]  if(inputLength  >  0)  {  int  inputLength  =  input.length();  int  outputLength  =  input.length();  }  else  {  out.write(inputLength);  return;  }  [CE]  cannot  find  symbol  inputLength  [FE]      ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(inputLength  >  0)  {  int  inputLength  =  input.length();  int  outputLength  =  input.length();  }  else  {  out.write(inputLength);  return;  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	if(inputLength  >  0)  {  int  inputLength  =  input.length();  int  outputLength  =  input.length();  }  else  {  out.write(inputLength);  return;  }	          int    inputLength    =    input.length();    int    outputLength    =    input.length();    	non-compiled	[CE]  cannot  find  symbol  inputLength	42	None	replace
422	[BUG]  [BUGGY]  if(out  ==  null  ||  input.length()  ==  0)  {  throw  new  IllegalArgumentException( "Input  input  is  null. ");  }  [CE]  cannot  find  symbol  pos  [FE]        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(out  ==  null  ||  input.length()  ==  0)  {  throw  new  IllegalArgumentException( "Input  input  is  null. ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	if(out  ==  null  ||  input.length()  ==  0)  {  throw  new  IllegalArgumentException( "Input  input  is  null. ");  }	  if(input    ==    null    ||    input.length()    ==    0)    {    throw    new    IllegalArgumentException(   "Input    input    is    null.   ");    }    	non-compiled	[CE]  cannot  find  symbol  pos	148	None	replace
423	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "Input    input    is    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "Input  input  is  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null.   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	add	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "Input        input        is        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "Input    input    is    null..   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null.   ");  }	  	compilable	  [FE]  ComparisonFailure  	73	1	add
424	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "Input    input    is    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "Input  input  is  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null.   ");  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "Input    input    is    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "Input  input  is  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null.   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "Input        input        is        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "Input    input    is    null..   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null.   ");  }	  	compilable	  [FE]  ComparisonFailure  	73	1	add
425	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "Input    input    is    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "Input  input  is  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null.   ");  }  if(input  ==  null)  {  throw  new  Il  [CE]  '('  or  '['  expected  [FE]      ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "Input    input    is    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "Input  input  is  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null.   ");  }  if(input  ==  null)  {  throw  new  Il  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "Input        input        is        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "Input    input    is    null..   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null.   ");  }  if(input  ==  null)  {  throw  new  Il	  	non-compiled	[CE]  '('  or  '['  expected	73	None	add
426	[BUG]  [BUGGY]  float  pos  =(input  ==  null)?  0  :  input.length();  [CE]  no  suitable  method  found  for  translate(CharSequence,float,Writer)  [FE]          AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  float  pos  =(input  ==  null)?  0  :  input.length();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	float  pos  =(input  ==  null)?  0  :  input.length();	  int    pos    =(input    ==    null)?    0    :    input.length();    int    pos    =(input!=    null)?    0    :    input.length();    	non-compiled	[CE]  no  suitable  method  found  for  translate(CharSequence,float,Writer)	59	None	replace
427	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "Input    input    is    null.     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(   "Input  input  is  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null.   ");  }  if(input!=  null)  {  throw  new  Il  [CE]  '('  or  '['  expected  [FE]    IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "Input    input    is    null.     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(   "Input  input  is  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null.   ");  }  if(input!=  null)  {  throw  new  Il  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "Input        input        is        null.       ");        }        if(input!=    null)    {    throw    new    IllegalArgumentException(   "Input    input    is    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null.   ");  }  if(input!=  null)  {  throw  new  Il	  	non-compiled	[CE]  '('  or  '['  expected	71	None	add
428	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    }    if(input!=  null)  {  out.write('n');  }  if(out  ==  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	add	                if(input        ==        null)        {        out.write('n');        }        if(input!=    null)    {    out.write('n');    }    if(out  ==  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	81	19	add
429	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write('n');    }    if(input!=  null)  {  out.write('n');  }  if(out  ==  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    }    if(input!=  null)  {  out.write('n');  }  if(out  ==  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	                if(input        ==        null)        {        out.write('n');        }        if(input!=    null)    {    out.write('n');    }    if(out  ==  null)  {  out.write('n');  }  if(input!=  null)  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	81	19	add
430	[BUG]  [BUGGY]  if(out.length()  ==  0)  {  input.throwAsIOException( " ");  }  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(out.length()  ==  0)  {  input.throwAsIOException( " ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	if(out.length()  ==  0)  {  input.throwAsIOException( " ");  }	  aughtExceptionHandler.throwAsIOException(   "   ");    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
431	[BUG]  [BUGGY]  out.throwAsIOException( " ");  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  out.throwAsIOException( " ");  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	out.throwAsIOException( " ");	  aughtExceptionHandler.throwAsIOException(   "   ");    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
432	[BUG]  [BUGGY]  if(out.length()  ==  0)  {  aughtExceptionHandler.throwAsIOException( " ");  }  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(out.length()  ==  0)  {  aughtExceptionHandler.throwAsIOException( " ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	if(out.length()  ==  0)  {  aughtExceptionHandler.throwAsIOException( " ");  }	  aughtExceptionHandler.throwAsIOException(   "   ");    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
433	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  if(input  ==  nu  [CE]  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  if(input  ==  nu  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        not        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null..   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  if(input  ==  nu	  	non-compiled	[CE]  	54	None	add
434	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.  [CE]  unclosed  string  literal  [FE]      ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        not        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null..   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.	  	non-compiled	[CE]  unclosed  string  literal	54	None	add
435	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  nu  [CE]  [FE]        ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  nu  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        not        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null..   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  nu	  	non-compiled	[CE]  	54	None	add
436	[BUG]  [BUGGY]  if(input  ==  null)  {  if(input!=  null)  {  out.write('n');  }  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(input  ==  null)  {  if(input!=  null)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	if(input  ==  null)  {  if(input!=  null)  {  out.write('n');  }	          if(input!=    null)    {    out.write('n');    }    if(input    ==    null)    {    out.write('n');    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
437	[BUG]  [BUGGY]  if(out  ==  null  ||  input.length()  ==  0)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null. ");  }  [CE]  cannot  find  symbol  pos  [FE]        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(out  ==  null  ||  input.length()  ==  0)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null. ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	if(out  ==  null  ||  input.length()  ==  0)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null. ");  }	  if(input    ==    null    ||    input.length()    ==    0)    {    throw    new    IllegalArgumentException(   "The    Writer    must    be    null.   ");    }    	non-compiled	[CE]  cannot  find  symbol  pos	153	None	replace
438	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   ",     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	add	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   ",       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }	  	compilable	  [FE]  ComparisonFailure  	151	1	add
439	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   ",     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   ",     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   ",       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }	  	compilable	  [FE]  ComparisonFailure  	151	1	add
440	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   ",     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException(   ",   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	add	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   ",       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException(   ",   ");  }	  	compilable	  [FE]  ComparisonFailure  	151	1	add
441	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   ",     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException(   ",   ");  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   ",     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException(   ",   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   ",       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException(   ",   ");  }	  	compilable	  [FE]  ComparisonFailure  	151	1	add
442	[BUG]  [BUGGY]  int  inputPos  =  input.length()  +  out.length();  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  inputPos  =  input.length()  +  out.length();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	int  inputPos  =  input.length()  +  out.length();	  int    inputPos    =    input.length();    	non-compiled	[CE]  cannot  find  symbol	124	None	replace
443	[BUG]  [BUGGY]  if(out  ==  null)  {  throw  new  IllegalArgumentException( "The  Input  input  is  null. ");  }  [CE]  cannot  find  symbol  pos  [FE]        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(out  ==  null)  {  throw  new  IllegalArgumentException( "The  Input  input  is  null. ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	if(out  ==  null)  {  throw  new  IllegalArgumentException( "The  Input  input  is  null. ");  }	  if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Input    input    is    null.   ");    }    	non-compiled	[CE]  cannot  find  symbol  pos	119	None	replace
444	[BUG]  [BUGGY]  if(input!=  null)  {  int  pos  =  input.length();  int  pos  =  input.length();  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]          AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(input!=  null)  {  int  pos  =  input.length();  int  pos  =  input.length();  }  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	if(input!=  null)  {  int  pos  =  input.length();  int  pos  =  input.length();  }	  int    pos    =    input.length();    int    pos    =    input.length());    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	155	None	replace
445	[BUG]  [BUGGY]  if(input!=  null)  {  int  pos  =  input.length();  int  pos  =  input.length());  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(input!=  null)  {  int  pos  =  input.length();  int  pos  =  input.length());  }  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	if(input!=  null)  {  int  pos  =  input.length();  int  pos  =  input.length());  }	  int    pos    =    input.length();    int    pos    =    input.length());    	non-compiled	[CE]  ';'  expected	155	None	replace
446	[BUG]  [BUGGY]  if(input!=  null)  {  int  pos  =  input.length();  int  pos  =  input.length();  }  else  {  out.write('n');  return;  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]              AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(input!=  null)  {  int  pos  =  input.length();  int  pos  =  input.length();  }  else  {  out.write('n');  return;  }  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	if(input!=  null)  {  int  pos  =  input.length();  int  pos  =  input.length();  }  else  {  out.write('n');  return;  }	  int    pos    =    input.length();    int    pos    =    input.length());    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	155	None	replace
447	[BUG]  [BUGGY]  char[]  input  =  output.getValues();  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  char[]  input  =  output.getValues();  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	char[]  input  =  output.getValues();	  char[]    input    =    input.getValues();    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	160	None	replace
448	[BUG]  [BUGGY]  out.write(input,  0);  [CE]  no  suitable  method  found  for  write(CharSequence,int)  [FE]          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  out.write(input,  0);  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	out.write(input,  0);	  out.write(input);    	non-compiled	[CE]  no  suitable  method  found  for  write(CharSequence,int)	123	None	replace
449	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input  ==  nu  [CE]  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input  ==  nu  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    be    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input  ==  nu	  	non-compiled	[CE]  	94	None	add
450	[BUG]  [BUGGY]  OutputFactory  inputFactory  =  getOutputFactory();  [CE]  cannot  find  symbol  [FE]        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  OutputFactory  inputFactory  =  getOutputFactory();  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	OutputFactory  inputFactory  =  getOutputFactory();	  OutputFactory    outputFactory    =    getOutputFactory();    	non-compiled	[CE]  cannot  find  symbol	130	None	replace
451	[BUG]  [BUGGY]  int  pos  =  2;  int  pos  =  3;  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]    AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =  2;  int  pos  =  3;  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	int    pos    =    2;    int  pos  =  3;	  	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	136	None	add
452	[BUG]  [BUGGY]  if(input!=  null)  {  if(input.length()  ==  1)  {  out.write('n');  }  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(input!=  null)  {  if(input.length()  ==  1)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	if(input!=  null)  {  if(input.length()  ==  1)  {  out.write('n');  }	          if(input.length()    ==    0)    {    out.write('n');    }    if(input.length()    {    0)    {    out.write('n');    }    	non-compiled	[CE]  illegal  start  of  expression	140	None	replace
453	[BUG]  [BUGGY]  out.write('n');  if(input.length()  ==  0)  {  out.write('n');  }  [CE]  cannot  find  symbol  pos  [FE]            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  out.write('n');  if(input.length()  ==  0)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	out.write('n');  if(input.length()  ==  0)  {  out.write('n');  }	          if(input.length()    ==    0)    {    out.write('n');    }    if(input.length()    {    0)    {    out.write('n');    }    	non-compiled	[CE]  cannot  find  symbol  pos	140	None	replace
454	[BUG]  [BUGGY]  Integer  input  =  output.length();  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  Integer  input  =  output.length();  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	Integer  input  =  output.length();	  Integer    input    =    input.length();    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	141	None	replace
455	[BUG]  [BUGGY]  char  pos  =  input.charAt(input.length);  [CE]  cannot  find  symbol  length  [FE]            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  char  pos  =  input.charAt(input.length);  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	char  pos  =  input.charAt(input.length);	  char    pos    =    input.charAt(pos);    	non-compiled	[CE]  cannot  find  symbol  length	22	None	replace
456	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(     "     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	add	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "       ");        }        if(input!=    null)    {    throw    new    IllegalArgumentException(       "       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	102	19	add
457	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(     "     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(     "     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "       ");        }        if(input!=    null)    {    throw    new    IllegalArgumentException(       "       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	102	19	add
458	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(     "     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( " ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	add	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "       ");        }        if(input!=    null)    {    throw    new    IllegalArgumentException(       "       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( " ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	102	19	add
459	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(     "     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( " ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(     "     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( " ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "       ");        }        if(input!=    null)    {    throw    new    IllegalArgumentException(       "       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( " ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	102	19	add
460	[BUG]  [BUGGY]  char[]  input  =  input.getOutputBuffer();  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]              ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  char[]  input  =  input.getOutputBuffer();  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	char[]  input  =  input.getOutputBuffer();	  char[]    input    =    input.getOutputChars();    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	118	None	replace
461	[BUG]  [BUGGY]  out.write(Integer.toString(input.length()  -  1),  input.length());  [CE]  no  suitable  method  found  for  write(String,int)  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  out.write(Integer.toString(input.length()  -  1),  input.length());  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	out.write(Integer.toString(input.length()  -  1),  input.length());	  out.write(Integer.toString(input.length()    -    1));    	non-compiled	[CE]  no  suitable  method  found  for  write(String,int)	127	None	replace
462	[BUG]  [BUGGY]  float  pos  =  input.length();  int  pos  =  output.length();  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]            AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  float  pos  =  input.length();  int  pos  =  output.length();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	float  pos  =  input.length();  int  pos  =  output.length();	  int    pos    =    input.length();    int    pos    =    output.length();    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	87	None	replace
463	[BUG]  [BUGGY]  Integer  pos  =  input.length();  int  pos  =  output.length();  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]              AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  Integer  pos  =  input.length();  int  pos  =  output.length();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	Integer  pos  =  input.length();  int  pos  =  output.length();	  int    pos    =    input.length();    int    pos    =    output.length();    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	87	None	replace
464	[BUG]  [BUGGY]  char[]  input  =  input.getInputBuffer();  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]              ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  char[]  input  =  input.getInputBuffer();  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	char[]  input  =  input.getInputBuffer();	  char[]    input    =    input.getInputChars();    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	159	None	replace
465	[BUG]  [BUGGY]  char[]  input  =  input.getInputValues();  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  char[]  input  =  input.getInputValues();  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	char[]  input  =  input.getInputValues();	  char[]    input    =    input.getInputChars();    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	159	None	replace
466	[BUG]  [BUGGY]  char[]  input  =  input.getInputValue();  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                  ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  char[]  input  =  input.getInputValue();  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	char[]  input  =  input.getInputValue();	  char[]    input    =    input.getInputChars();    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	159	None	replace
467	[BUG]  [BUGGY]  int  pos  =(input  ==  null)?  0  :  input.length();  Int  pos  =(input!=  null)?  0  :  input.length();  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =(input  ==  null)?  0  :  input.length();  Int  pos  =(input!=  null)?  0  :  input.length();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	int  pos  =(input  ==  null)?  0  :  input.length();  Int  pos  =(input!=  null)?  0  :  input.length();	  int    pos    =(input!=    null)?    0    :    input.length();    Int    pos    =(input!=    null)?    0    :    input.length();    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
468	[BUG]  [BUGGY]          if(input.length()    ==    0)    {    out.write('n');    }    if(input.length()  ==  0)  {  out.write('n');  }  if(input.length()  ==  0)  {  out.write('n');  }  if(input.length()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input.length()    ==    0)    {    out.write('n');    }    if(input.length()  ==  0)  {  out.write('n');  }  if(input.length()  ==  0)  {  out.write('n');  }  if(input.length()  ==  0)  {  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	                if(input.length()        ==        0)        {        out.write('n');        }        if(input.length()    ==    0)    {    out.write('n');    }    if(input.length()  ==  0)  {  out.write('n');  }  if(input.length()  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	26	None	add
469	[BUG]  [BUGGY]  if(input!=  null)  {  out.write( ".null ");  }  [CE]  cannot  find  symbol  pos  [FE]        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(input!=  null)  {  out.write( ".null ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	if(input!=  null)  {  out.write( ".null ");  }	  if(input!=    null)    {    out.write(   "null   ");    }    	non-compiled	[CE]  cannot  find  symbol  pos	156	None	replace
470	[BUG]  [BUGGY]  char  pos  =  input.charAt(0);  char  pos  =  input.charAt((0));  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]    AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  char  pos  =  input.charAt(0);  char  pos  =  input.charAt((0));  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	char    pos    =    input.charAt(0);    char  pos  =  input.charAt((0));	  	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	19	None	add
471	[BUG]  [BUGGY]          if(input!=    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  }  if(input  >=  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input!=    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  }  if(input  >=  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	                if(input!=        null)        {        out.write('n');        }        if(input    ==    null)    {    out.write('n');    }    if(input  >=  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	15	None	add
472	[BUG]  [BUGGY]  char  pos  =  input;  [CE]  incompatible  types  [FE]          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  char  pos  =  input;  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	char  pos  =  input;	  char    pos    =    0;    Character    pos    =    0;    	non-compiled	[CE]  incompatible  types	90	None	replace
473	[BUG]  [BUGGY]  OutputStream  output  =  input.getOutputStream();  [CE]  cannot  find  symbol  [FE]        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  OutputStream  output  =  input.getOutputStream();  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	OutputStream  output  =  input.getOutputStream();	  OutputStream    input    =    output.getOutputStream();    	non-compiled	[CE]  cannot  find  symbol	131	None	replace
474	[BUG]  [BUGGY]  int  pos  =  input.indexOf('.');  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =  input.indexOf('.');  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	int  pos  =  input.indexOf('.');	  int    pos    =    input.lastIndexOf('.');    	non-compiled	[CE]  cannot  find  symbol	157	None	replace
475	[BUG]  [BUGGY]  int  pos  =  input.lastIndexOf('.')+  1;  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =  input.lastIndexOf('.')+  1;  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	int  pos  =  input.lastIndexOf('.')+  1;	  int    pos    =    input.lastIndexOf('.');    	non-compiled	[CE]  cannot  find  symbol	157	None	replace
476	[BUG]  [BUGGY]  Integer  pos  =(input  ==  null)?  0  :  input.length();  int  pos  =(input  ==  null)?  0  :  input.length();  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]        AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  Integer  pos  =(input  ==  null)?  0  :  input.length();  int  pos  =(input  ==  null)?  0  :  input.length();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	Integer  pos  =(input  ==  null)?  0  :  input.length();  int  pos  =(input  ==  null)?  0  :  input.length();	  int    pos    =(input    ==    null)?    0    :    input.length();    int    pos    =(input    ==    null)?    0    :    input.length());    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	163	None	replace
477	[BUG]  [BUGGY]  out.write(input.toCharArray());  [CE]  cannot  find  symbol  [FE]        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  out.write(input.toCharArray());  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	out.write(input.toCharArray());	  out.write(input.length());    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
478	[BUG]  [BUGGY]  out.write(input.toChars());  [CE]  cannot  find  symbol  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  out.write(input.toChars());  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	out.write(input.toChars());	          out.write(input.charAt(0));    char[]    input    =    input.toChars();    	non-compiled	[CE]  cannot  find  symbol	144	None	replace
479	[BUG]  [BUGGY]  if(out  ==  null  ||  input.length()  ==  0)  {  out.write('n');  }  [CE]  cannot  find  symbol  pos  [FE]        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(out  ==  null  ||  input.length()  ==  0)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	if(out  ==  null  ||  input.length()  ==  0)  {  out.write('n');  }	  if(input    ==    null    ||    input.length()    ==    0)    {    out.write('n');    }    	non-compiled	[CE]  cannot  find  symbol  pos	158	None	replace
480	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()  >=  0)  {  out.write('n');  }  [CE]  cannot  find  symbol  pos  [FE]          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(input  ==  null  ||  input.length()  >=  0)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	if(input  ==  null  ||  input.length()  >=  0)  {  out.write('n');  }	  if(input    ==    null    ||    input.length()    ==    0)    {    out.write('n');    }    	non-compiled	[CE]  cannot  find  symbol  pos	158	None	replace
481	[BUG]  [BUGGY]  int  pos  =  output.length();  Int  pos  =  input.length();  [CE]  cannot  find  symbol  output  [FE]          AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =  output.length();  Int  pos  =  input.length();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	int  pos  =  output.length();  Int  pos  =  input.length();	  int    pos    =    input.length();    Int    pos    =    input.length();    	non-compiled	[CE]  cannot  find  symbol  output	86	None	replace
482	[BUG]  [BUGGY]  if(out.length()  >  0)  {  out.write('n');  }  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(out.length()  >  0)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	if(out.length()  >  0)  {  out.write('n');  }	  if(input.length()    >    0)    {    out.write('n');    }    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
483	[BUG]  [BUGGY]  out.write(Integer.toString(input.length()  -  2));  [CE]  cannot  find  symbol  pos  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  out.write(Integer.toString(input.length()  -  2));  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	out.write(Integer.toString(input.length()  -  2));	  out.write(Integer.toString(input.length()));    	non-compiled	[CE]  cannot  find  symbol  pos	126	None	replace
484	[BUG]  [BUGGY]  int  pos  =  out.length()  +  input.length();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =  out.length()  +  input.length();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	int  pos  =  out.length()  +  input.length();	  int    pos    =    input.length()    +    out.length();    	non-compiled	[CE]  cannot  find  symbol	138	None	replace
485	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  }  if(out  ==  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	add	                if(input        ==        null)        {        out.write('n');        }        if(input    ==    null)    {    out.write('n');    }    if(out  ==  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	79	1	add
486	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  }  if(out  ==  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    }    if(input  ==  null)  {  out.write('n');  }  if(out  ==  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	                if(input        ==        null)        {        out.write('n');        }        if(input    ==    null)    {    out.write('n');    }    if(out  ==  null)  {  out.write('n');  }  if(input  ==  null)  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	79	1	add
487	[BUG]  [BUGGY]  out.write('n',  input.length()  -  1);  [CE]  no  suitable  method  found  for  write(char,int)  [FE]          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  out.write('n',  input.length()  -  1);  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	out.write('n',  input.length()  -  1);	  out.write('n');    	non-compiled	[CE]  no  suitable  method  found  for  write(char,int)	24	None	replace
488	[BUG]  [BUGGY]  float  pos  =  input.length();  [CE]  no  suitable  method  found  for  translate(CharSequence,float,Writer)  [FE]        AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  float  pos  =  input.length();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	float  pos  =  input.length();	  int    pos    =    input.length();    int    pos    =    input.length();    	non-compiled	[CE]  no  suitable  method  found  for  translate(CharSequence,float,Writer)	85	None	replace
489	[BUG]  [BUGGY]  OutputFactory  outputFactory  =  out.getOutputFactory();  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  OutputFactory  outputFactory  =  out.getOutputFactory();  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	OutputFactory  outputFactory  =  out.getOutputFactory();	          if(input    ==    null)    {    out.write('n');    }    If(input    ==    null)    {    out.write('n');    }    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
490	[BUG]  [BUGGY]  out.write(Integer.toString(input)+  input.length());  [CE]  no  suitable  method  found  for  toString(CharSequence)  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  out.write(Integer.toString(input)+  input.length());  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	out.write(Integer.toString(input)+  input.length());	  out.write(input.charAt(0)    +    input.length());    	non-compiled	[CE]  no  suitable  method  found  for  toString(CharSequence)	11	None	replace
491	[BUG]  [BUGGY]  ||  out  ==  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null. ");  }  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  ||  out  ==  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null. ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	||  out  ==  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null. ");  }	  ||    input    ==    null)    {    throw    new    IllegalArgumentException(   "Input    input    is    null.   ");    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
492	[BUG]  [BUGGY]  &&  input  ==  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null. ");  }  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  &&  input  ==  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null. ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	&&  input  ==  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null. ");  }	  ||    input    ==    null)    {    throw    new    IllegalArgumentException(   "Input    input    is    null.   ");    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
493	[BUG]  [BUGGY]  out.write( "n ");  [CE]  cannot  find  symbol  pos  [FE]              ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  out.write( "n ");  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	out.write( "n ");	          if(input.length()    ==    0)    {    out.write('n');    }    If(input.length()    ==    0)    {    out.write('n');    }    	non-compiled	[CE]  cannot  find  symbol  pos	32	None	replace
494	[BUG]  [BUGGY]  char[]  input  =  output.getValue();  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                  ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  char[]  input  =  output.getValue();  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	char[]  input  =  output.getValue();	  char[]    input    =    input.getValue();    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	50	None	replace
495	[BUG]  [BUGGY]  CharSequence  input  =  output.getChars();  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  CharSequence  input  =  output.getChars();  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	CharSequence  input  =  output.getChars();	  CharSequence    input    =    input.getChars();    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	49	None	replace
496	[BUG]  [BUGGY]  CharSequence  output  =  input.getChars();  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  CharSequence  output  =  input.getChars();  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	CharSequence  output  =  input.getChars();	  CharSequence    input    =    input.getChars();    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
497	[BUG]  [BUGGY]  Character  input  =  input.length();  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]              ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  Character  input  =  input.length();  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	Character  input  =  input.length();	  char    input    =    input.length();    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	78	None	replace
498	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input  ==  nu  [CE]  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input  ==  nu  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    be    null..   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input  ==  nu	  	non-compiled	[CE]  	96	None	add
499	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }  if(input  ==  nu  [CE]  [FE]      ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }  if(input  ==  nu  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    be    null..   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }  if(input  ==  nu	  	non-compiled	[CE]  	96	None	add
500	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.  [CE]  unclosed  string  literal  [FE]        ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    be    null..   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.	  	non-compiled	[CE]  unclosed  string  literal	96	None	add
501	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  nu  [CE]  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  nu  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        not        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  nu	  	non-compiled	[CE]  	52	None	add
502	[BUG]  [BUGGY]  int  pos  =  0;  int  pos  =  1;  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]        AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =  0;  int  pos  =  1;  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	int  pos  =  0;  int  pos  =  1;	  int    pos    =    1;    int    pos    =    1;    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	65	None	replace
503	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   ".     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( ".   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	add	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   ".       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( ".   ");  }	  	compilable	  [FE]  ComparisonFailure  	149	1	add
504	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   ".     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( ".   ");  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   ".     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( ".   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   ".       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( ".   ");  }	  	compilable	  [FE]  ComparisonFailure  	149	1	add
505	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   ".     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( " ".   ");  }  [CE]  unclosed  string  literal  [FE]      ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   ".     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( " ".   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   ".       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( " ".   ");  }	  	non-compiled	[CE]  unclosed  string  literal	149	None	add
506	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   ".     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( ". ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( ".   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	add	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   ".       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( ". ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( ".   ");  }	  	compilable	  [FE]  ComparisonFailure  	149	1	add
507	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   ".     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( ". ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( ".   ");  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   ".     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( ". ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( ".   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   ".       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( ". ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( ".   ");  }	  	compilable	  [FE]  ComparisonFailure  	149	1	add
508	[BUG]  [BUGGY]  if(input!=  null)  {  out.write('n');  }  while(input  ==  null)  {  out.write('n');  }  [CE]  cannot  find  symbol  pos  [FE]        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(input!=  null)  {  out.write('n');  }  while(input  ==  null)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	if(input!=  null)  {  out.write('n');  }  while(input  ==  null)  {  out.write('n');  }	          if(input    ==    null)    {    out.write('n');    }    while(input    ==    null)    {    out.write('n');    	non-compiled	[CE]  cannot  find  symbol  pos	142	None	replace
509	[BUG]  [BUGGY]  if(input  ==  null)  {  out.write('n');  }  while(input!=  null)  {  out.write('n');  }  [CE]  cannot  find  symbol  pos  [FE]          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(input  ==  null)  {  out.write('n');  }  while(input!=  null)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	if(input  ==  null)  {  out.write('n');  }  while(input!=  null)  {  out.write('n');  }	          if(input    ==    null)    {    out.write('n');    }    while(input    ==    null)    {    out.write('n');    	non-compiled	[CE]  cannot  find  symbol  pos	142	None	replace
510	[BUG]  [BUGGY]  if(input!=  null)  {  out.write('n');  }  while(input!=  null)  {  out.write('n');  }  [CE]  cannot  find  symbol  pos  [FE]            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(input!=  null)  {  out.write('n');  }  while(input!=  null)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	if(input!=  null)  {  out.write('n');  }  while(input!=  null)  {  out.write('n');  }	          if(input    ==    null)    {    out.write('n');    }    while(input    ==    null)    {    out.write('n');    	non-compiled	[CE]  cannot  find  symbol  pos	142	None	replace
511	[BUG]  [BUGGY]  if(input  ==  null)  {  if(input.length()  ==  0)  {  out.write('n');  }  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(input  ==  null)  {  if(input.length()  ==  0)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	if(input  ==  null)  {  if(input.length()  ==  0)  {  out.write('n');  }	          if(input.length()    ==    0)    {    out.write('n');    }    if(input.length()    ==    0)    {    out.write('n');    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
512	[BUG]  [BUGGY]  Char[]  input  =  input.getChildren();  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  Char[]  input  =  input.getChildren();  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	Char[]  input  =  input.getChildren();	  Char[]    input    =    input.getChars();    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
513	[BUG]  [BUGGY]  Character  pos  =  input.length();  [CE]  incompatible  types  [FE]          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  Character  pos  =  input.length();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	Character  pos  =  input.length();	  char    pos    =    input.length();    	non-compiled	[CE]  incompatible  types	21	None	replace
514	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  pos  [FE]          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(input  ==  null  ||  input.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	if(input  ==  null  ||  input.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(input    ==    null)    {    throw    new    IllegalArgumentException(   "   "));    }    	non-compiled	[CE]  cannot  find  symbol  pos	76	None	replace
515	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()  ==  0)  {  throw  new  IllegalArgumentException( " "));  }  [CE]  [FE]            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(input  ==  null  ||  input.length()  ==  0)  {  throw  new  IllegalArgumentException( " "));  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	if(input  ==  null  ||  input.length()  ==  0)  {  throw  new  IllegalArgumentException( " "));  }	  if(input    ==    null)    {    throw    new    IllegalArgumentException(   "   "));    }    	non-compiled	[CE]  	76	None	replace
516	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =(input  ==  null)?  -1  :  input.length();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	add	int  pos  =(input  ==  null)?  -1  :  input.length();	  int    pos    =(input    ==    null)?    1    :    input.length();    	compilable	  [FE]  AssertionFailedError  	9	19	replace
517	[BUG]  [BUGGY]  int  pos  =(input  ==  null)?  -1  :  input.length();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =(input  ==  null)?  -1  :  input.length();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	int  pos  =(input  ==  null)?  -1  :  input.length();	  int    pos    =(input    ==    null)?    1    :    input.length();    	compilable	  [FE]  AssertionFailedError  	9	19	replace
518	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()  <  =  0)  {  out.write('n');  }  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(input  ==  null  ||  input.length()  <  =  0)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	if(input  ==  null  ||  input.length()  <  =  0)  {  out.write('n');  }	  if(input    ==    null    ||    input.length()    ==    0)    {    out.write('n');    }    	non-compiled	[CE]  illegal  start  of  expression	158	None	replace
519	[BUG]  [BUGGY]  out.write(input.charAt(0),  input.charAt(pos));  [CE]  cannot  find  symbol  pos  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  out.write(input.charAt(0),  input.charAt(pos));  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	out.write(input.charAt(0),  input.charAt(pos));	  out.write(input.charAt(0),    input.length());    	non-compiled	[CE]  cannot  find  symbol  pos	10	None	replace
520	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()  <  0)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null. ");  }  [CE]  cannot  find  symbol  pos  [FE]        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(input  ==  null  ||  input.length()  <  0)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null. ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	if(input  ==  null  ||  input.length()  <  0)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null. ");  }	  if(input    ==    null    ||    input.length()    ==    0)    {    throw    new    IllegalArgumentException(   "The    Writer    must    be    null.   ");    }    	non-compiled	[CE]  cannot  find  symbol  pos	153	None	replace
521	[BUG]  [BUGGY]  if(input.length()  ==  0)  {  out.write(input.charAt(0));  out.write(input.charAt(0));  }  else  {  out.write(input.charAt(0));  }  [CE]  cannot  find  symbol  pos  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(input.length()  ==  0)  {  out.write(input.charAt(0));  out.write(input.charAt(0));  }  else  {  out.write(input.charAt(0));  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	if(input.length()  ==  0)  {  out.write(input.charAt(0));  out.write(input.charAt(0));  }  else  {  out.write(input.charAt(0));  }	          out.write(input.charAt(0));    out.write(input.charAt(0));    	non-compiled	[CE]  cannot  find  symbol  pos	105	None	replace
522	[BUG]  [BUGGY]  if(input.length()  ==  0)  {  out.write(input.charAt(0));  out.write(input.charAt(0));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  pos  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(input.length()  ==  0)  {  out.write(input.charAt(0));  out.write(input.charAt(0));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	if(input.length()  ==  0)  {  out.write(input.charAt(0));  out.write(input.charAt(0));  }  else  {  throw  new  IllegalArgumentException( " ");  }	          out.write(input.charAt(0));    out.write(input.charAt(0));    	non-compiled	[CE]  cannot  find  symbol  pos	105	None	replace
523	[BUG]  [BUGGY]  out.write(input.toString());  [CE]  cannot  find  symbol  pos  [FE]        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  out.write(input.toString());  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	out.write(input.toString());	  out.write(input.length());    	non-compiled	[CE]  cannot  find  symbol  pos	23	None	replace
524	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "Input    input    is    null.     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(   "Input  input  is  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null.. ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null.   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	add	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "Input        input        is        null.       ");        }        if(input!=    null)    {    throw    new    IllegalArgumentException(   "Input    input    is    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null.. ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null.   ");  }	  	compilable	  [FE]  IllegalArgumentException  	71	19	add
525	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "Input    input    is    null.     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(   "Input  input  is  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null.. ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null.   ");  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "Input    input    is    null.     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(   "Input  input  is  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null.. ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null.   ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "Input        input        is        null.       ");        }        if(input!=    null)    {    throw    new    IllegalArgumentException(   "Input    input    is    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null.. ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "Input  input  is  null.   ");  }	  	compilable	  [FE]  IllegalArgumentException  	71	19	add
526	[BUG]  [BUGGY]  int  pos  =  input.length()  +  1;  char  pos  =  input.length()  +  1;  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]    AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =  input.length()  +  1;  char  pos  =  input.length()  +  1;  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	int    pos    =    input.length()    +    1;    char  pos  =  input.length()  +  1;	  	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	3	None	add
527	[BUG]  [BUGGY]  int  pos  =  input.length()  +  1;  int  pos  =  input.length()  +  2;  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]      AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =  input.length()  +  1;  int  pos  =  input.length()  +  2;  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	int    pos    =    input.length()    +    1;    int  pos  =  input.length()  +  2;	  	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	3	None	add
528	[BUG]  [BUGGY]  ||  input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  ||  input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	||  input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }	  ||    input    ==    null)    {    throw    new    IllegalArgumentException(   "Input    input    is    null.   ");    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
529	[BUG]  [BUGGY]  if(out!=  null)  {  out.write('n');  }  [CE]  cannot  find  symbol  pos  [FE]              ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(out!=  null)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	if(out!=  null)  {  out.write('n');  }	          if(input    ==    null)    {    out.write('n');    }    if(input    >=    null)    {    out.write('n');    }    	non-compiled	[CE]  cannot  find  symbol  pos	84	None	replace
530	[BUG]  [BUGGY]  int  pos  =  input.length()  -  1;  char  pos  =  input.length()  -  1;  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]    AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =  input.length()  -  1;  char  pos  =  input.length()  -  1;  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	int    pos    =    input.length()    -    1;    char  pos  =  input.length()  -  1;	  	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	1	None	add
531	[BUG]  [BUGGY]  int  pos  =  input.length()  -  1;  int  pos  =  input.length()  -  2;  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]      AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =  input.length()  -  1;  int  pos  =  input.length()  -  2;  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	int    pos    =    input.length()    -    1;    int  pos  =  input.length()  -  2;	  	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	1	None	add
532	[BUG]  [BUGGY]  OutputStream  input  =  new  FileOutputStream(output.getBytes());  [CE]  cannot  find  symbol  [FE]        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  OutputStream  input  =  new  FileOutputStream(output.getBytes());  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	OutputStream  input  =  new  FileOutputStream(output.getBytes());	  OutputStream    input    =    new    FileOutputStream(input.getBytes());    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
533	[BUG]  [BUGGY]  if(out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }  [CE]  cannot  find  symbol  pos  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	if(out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }	          if(input    ==    null)    {    throw    new    IllegalArgumentException(       "The    Writer    must    be    null.       ");    }    if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    be    null..   ");    }    	non-compiled	[CE]  cannot  find  symbol  pos	97	None	replace
534	[BUG]  [BUGGY]  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }  [CE]  cannot  find  symbol  pos  [FE]      ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }	          if(input    ==    null)    {    throw    new    IllegalArgumentException(       "The    Writer    must    be    null.       ");    }    if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    be    null..   ");    }    	non-compiled	[CE]  cannot  find  symbol  pos	97	None	replace
535	[BUG]  [BUGGY]  out.write(Integer.toString(input,  input.charAt(0)));  [CE]  no  suitable  method  found  for  toString(CharSequence,char)  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  out.write(Integer.toString(input,  input.charAt(0)));  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	out.write(Integer.toString(input,  input.charAt(0)));	  out.write(Integer.toString(input.charAt(0)));    	non-compiled	[CE]  no  suitable  method  found  for  toString(CharSequence,char)	125	None	replace
536	[BUG]  [BUGGY]  out.write(Integer.toString(input.charAt(0)),  input.charAt(0));  [CE]  no  suitable  method  found  for  write(String,char)  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  out.write(Integer.toString(input.charAt(0)),  input.charAt(0));  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	out.write(Integer.toString(input.charAt(0)),  input.charAt(0));	  out.write(Integer.toString(input.charAt(0)));    	non-compiled	[CE]  no  suitable  method  found  for  write(String,char)	125	None	replace
537	[BUG]  [BUGGY]          int    inputLength    =    input.length();    int  outputLength  =  input.length();  Int  inputLength  =  input.length();  int  outputLength  =  input.length();  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          int    inputLength    =    input.length();    int  outputLength  =  input.length();  Int  inputLength  =  input.length();  int  outputLength  =  input.length();  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	                int        inputLength        =        input.length();        int    outputLength    =    input.length();    Int  inputLength  =  input.length();  int  outputLength  =  input.length();	  	non-compiled	[CE]  cannot  find  symbol	41	None	add
538	[BUG]  [BUGGY]          int    inputLength    =    input.length();    int  outputLength  =  input.length();  int  inputLength  =  output.length();  int  outputLength  =  input.length();  [CE]  variable  inputLength  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]      ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          int    inputLength    =    input.length();    int  outputLength  =  input.length();  int  inputLength  =  output.length();  int  outputLength  =  input.length();  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	                int        inputLength        =        input.length();        int    outputLength    =    input.length();    int  inputLength  =  output.length();  int  outputLength  =  input.length();	  	non-compiled	[CE]  variable  inputLength  is  already  defined  in  method  translate(CharSequence,Writer)	41	None	add
539	[BUG]  [BUGGY]  if(input!=  null)  {  out.write(Integer.toString(input.length()));  }  [CE]  cannot  find  symbol  pos  [FE]        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(input!=  null)  {  out.write(Integer.toString(input.length()));  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	if(input!=  null)  {  out.write(Integer.toString(input.length()));  }	  if(input!=    null)    {    out.write(   "null   ");    }    	non-compiled	[CE]  cannot  find  symbol  pos	156	None	replace
540	[BUG]  [BUGGY]  char  pos  =  input.charAt(position);  [CE]  cannot  find  symbol  position  [FE]            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  char  pos  =  input.charAt(position);  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	char  pos  =  input.charAt(position);	  char    pos    =    input.charAt(pos);    	non-compiled	[CE]  cannot  find  symbol  position	22	None	replace
541	[BUG]  [BUGGY]  Thread.currentThread().interrupt(out,  pos);  [CE]  cannot  find  symbol  pos  [FE]              ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  Thread.currentThread().interrupt(out,  pos);  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	Thread.currentThread().interrupt(out,  pos);	  Thread.currentThread().interrupt();    	non-compiled	[CE]  cannot  find  symbol  pos	37	None	replace
542	[BUG]  [BUGGY]  CharSequence  input  =  input.toChars();  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  CharSequence  input  =  input.toChars();  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	CharSequence  input  =  input.toChars();	          out.write(input.charAt(0));    char[]    input    =    input.toChars();    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	144	None	replace
543	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(this,  output);  [CE]  cannot  find  symbol  output  [FE]        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  Thread.currentThread().setContextClassLoader(this,  output);  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	Thread.currentThread().setContextClassLoader(this,  output);	  Thread.currentThread().setContextClassLoader(this);    	non-compiled	[CE]  cannot  find  symbol  output	34	None	replace
544	[BUG]  [BUGGY]  int  inputLength  =  input.length();  char[]  inputLength  =  input.getChars(inputLength);  [CE]  variable  inputLength  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  inputLength  =  input.length();  char[]  inputLength  =  input.getChars(inputLength);  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	int  inputLength  =  input.length();  char[]  inputLength  =  input.getChars(inputLength);	          int    inputLength    =    input.length();    char[]    inputLength    =    input.length();    	non-compiled	[CE]  variable  inputLength  is  already  defined  in  method  translate(CharSequence,Writer)	120	None	replace
545	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(     "     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( " ".);  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(     "     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( " ".);  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(       "       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( " ".);  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  <identifier>  expected	100	None	add
546	[BUG]  [BUGGY]  if(input.length()  ==  0)  {  out.write(input.charAt(0));  out.write(input.charAt(2));  }  else  {  out.write(input.charAt(0));  }  [CE]  cannot  find  symbol  pos  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(input.length()  ==  0)  {  out.write(input.charAt(0));  out.write(input.charAt(2));  }  else  {  out.write(input.charAt(0));  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	if(input.length()  ==  0)  {  out.write(input.charAt(0));  out.write(input.charAt(2));  }  else  {  out.write(input.charAt(0));  }	          out.write(input.charAt(0));    out.write(input.charAt(2));    	non-compiled	[CE]  cannot  find  symbol  pos	135	None	replace
547	[BUG]  [BUGGY]  int  pos  =(input  ==  null)?  1  :  input.length();  int  pos  =(input  ==  null)?  2  :  input.length();  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]    AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =(input  ==  null)?  1  :  input.length();  int  pos  =(input  ==  null)?  2  :  input.length();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	int    pos    =(input    ==    null)?    1    :    input.length();    int  pos  =(input  ==  null)?  2  :  input.length();	  	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	8	None	add
548	[BUG]  [BUGGY]  out.write(Integer.toString(pos));  [CE]  cannot  find  symbol  pos  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  out.write(Integer.toString(pos));  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	out.write(Integer.toString(pos));	          out.write(input.charAt(0));    char[]    input    =    input.getChars();    out.write(input.charAt(0));    	non-compiled	[CE]  cannot  find  symbol  pos	108	None	replace
549	[BUG]  [BUGGY]  if(out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  [CE]  cannot  find  symbol  pos  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	if(out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }	          if(input    ==    null)    {    throw    new    IllegalArgumentException(       "The    Writer    must    not    be    null.       ");    }    if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null..   ");    }    	non-compiled	[CE]  cannot  find  symbol  pos	55	None	replace
550	[BUG]  [BUGGY]  if(input.length()  >  0)  {  input.throwAsIOException( " ");  }  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(input.length()  >  0)  {  input.throwAsIOException( " ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	if(input.length()  >  0)  {  input.throwAsIOException( " ");  }	  aughtExceptionHandler.throwAsIOException(   "   ");    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
551	[BUG]  [BUGGY]  int  pos  =  input.lastIndexOf('.',  pt);  [CE]  cannot  find  symbol  pt  [FE]        AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =  input.lastIndexOf('.',  pt);  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	int  pos  =  input.lastIndexOf('.',  pt);	  int    pos    =    input.lastIndexOf('.');    	non-compiled	[CE]  cannot  find  symbol  pt	157	None	replace
552	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(     "     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( " ".);  }  if(input!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]    IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(     "     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( " ".);  }  if(input!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "       ");        }        if(input!=    null)    {    throw    new    IllegalArgumentException(       "       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( " ".);  }  if(input!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  <identifier>  expected	102	None	add
553	[BUG]  [BUGGY]  Character  pos  =(input!=  null)?  0  :  input.length();  [CE]  incompatible  types  [FE]        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  Character  pos  =(input!=  null)?  0  :  input.length();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	Character  pos  =(input!=  null)?  0  :  input.length();	  char    pos    =(input!=    null)?    0    :    input.length();    	non-compiled	[CE]  incompatible  types	7	None	replace
554	[BUG]  [BUGGY]  if(input!=  null)  {  int  pos  =  input.length();  int  pos  =(input  ==  null)?  0  :  input.length();  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]        AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(input!=  null)  {  int  pos  =  input.length();  int  pos  =(input  ==  null)?  0  :  input.length();  }  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	if(input!=  null)  {  int  pos  =  input.length();  int  pos  =(input  ==  null)?  0  :  input.length();  }	  int    pos    =(input    ==    null)?    0    :    input.length();    int    pos    =(input    ==    null)?    0    :    input.length());    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	163	None	replace
555	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()  <  0)  {  throw  new  IllegalArgumentException( "Input  input  is  null. ");  }  [CE]  cannot  find  symbol  pos  [FE]        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(input  ==  null  ||  input.length()  <  0)  {  throw  new  IllegalArgumentException( "Input  input  is  null. ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	if(input  ==  null  ||  input.length()  <  0)  {  throw  new  IllegalArgumentException( "Input  input  is  null. ");  }	  if(input    ==    null    ||    input.length()    ==    0)    {    throw    new    IllegalArgumentException(   "Input    input    is    null.   ");    }    	non-compiled	[CE]  cannot  find  symbol  pos	148	None	replace
556	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()  >=  0)  {  throw  new  IllegalArgumentException( "Input  input  is  null. ");  }  [CE]  cannot  find  symbol  pos  [FE]          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(input  ==  null  ||  input.length()  >=  0)  {  throw  new  IllegalArgumentException( "Input  input  is  null. ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	if(input  ==  null  ||  input.length()  >=  0)  {  throw  new  IllegalArgumentException( "Input  input  is  null. ");  }	  if(input    ==    null    ||    input.length()    ==    0)    {    throw    new    IllegalArgumentException(   "Input    input    is    null.   ");    }    	non-compiled	[CE]  cannot  find  symbol  pos	148	None	replace
557	[BUG]  [BUGGY]  out.write(input.substring(0,  input.length()  -  1);  [CE]  ')'  expected  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  out.write(input.substring(0,  input.length()  -  1);  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	out.write(input.substring(0,  input.length()  -  1);	  out.write(input.substring(1));    	non-compiled	[CE]  ')'  expected	12	None	replace
558	[BUG]  [BUGGY]  if(input!=  null)  {  int  pos  =  input.length();  int  pos  =  input.length();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]          AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(input!=  null)  {  int  pos  =  input.length();  int  pos  =  input.length();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	if(input!=  null)  {  int  pos  =  input.length();  int  pos  =  input.length();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  int    pos    =    input.length();    int    pos    =    input.length());    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	155	None	replace
559	[BUG]  [BUGGY]  if(input!=  null)  {  int  pos  =  input.length();  int  pos  =  input.length();  }  else  {  out.write('n');  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]            AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(input!=  null)  {  int  pos  =  input.length();  int  pos  =  input.length();  }  else  {  out.write('n');  }  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	if(input!=  null)  {  int  pos  =  input.length();  int  pos  =  input.length();  }  else  {  out.write('n');  }	  int    pos    =    input.length();    int    pos    =    input.length());    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	155	None	replace
560	[BUG]  [BUGGY]  CharSequence  input  =  input.getInput();  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  CharSequence  input  =  input.getInput();  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	CharSequence  input  =  input.getInput();	  CharSequence    input    =    input.getChars();    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	49	None	replace
561	[BUG]  [BUGGY]  CharSequence  input  =  input.getAssignedChars();  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                  ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  CharSequence  input  =  input.getAssignedChars();  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	CharSequence  input  =  input.getAssignedChars();	  CharSequence    input    =    input.getChars();    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	49	None	replace
562	[BUG]  [BUGGY]  if(input.length()  ==  0)  {  out.write('n');  }  else  {  out.write(input.charAt(0));  }  [CE]  cannot  find  symbol  pos  [FE]              ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(input.length()  ==  0)  {  out.write('n');  }  else  {  out.write(input.charAt(0));  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	if(input.length()  ==  0)  {  out.write('n');  }  else  {  out.write(input.charAt(0));  }	          if(input.length()    ==    0)    {    out.write('n');    }    If(input.length()    ==    0)    {    out.write('n');    }    	non-compiled	[CE]  cannot  find  symbol  pos	32	None	replace
563	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()  <  0)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }  [CE]  cannot  find  symbol  pos  [FE]        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(input  ==  null  ||  input.length()  <  0)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	if(input  ==  null  ||  input.length()  <  0)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }	  if(input    ==    null    ||    input.length()    ==    0)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null.   ");    }    	non-compiled	[CE]  cannot  find  symbol  pos	161	None	replace
564	[BUG]  [BUGGY]  int  input  =  input.charAt(0);  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  input  =  input.charAt(0);  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	int  input  =  input.charAt(0);	          out.write(input.charAt(0));    int    input    =    input.charAt(0);    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	145	None	replace
565	[BUG]  [BUGGY]  if(input.length()  ==  1)  {  out.write(input.charAt(0));  out.write(input.charAt(1));  }  else  {  out.write(input.charAt(0));  }  [CE]  cannot  find  symbol  pos  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  if(input.length()  ==  1)  {  out.write(input.charAt(0));  out.write(input.charAt(1));  }  else  {  out.write(input.charAt(0));  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	if(input.length()  ==  1)  {  out.write(input.charAt(0));  out.write(input.charAt(1));  }  else  {  out.write(input.charAt(0));  }	          out.write(input.charAt(0));    out.write(input.charAt(1));    	non-compiled	[CE]  cannot  find  symbol  pos	107	None	replace
566	[BUG]  [BUGGY]  int  pos  =  input.length()  -  2;  char  pos  =  input.length()  -  2;  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]    AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =  input.length()  -  2;  char  pos  =  input.length()  -  2;  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	int    pos    =    input.length()    -    2;    char  pos  =  input.length()  -  2;	  	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	5	None	add
567	[BUG]  [BUGGY]  Int  pos  =  1;  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  Int  pos  =  1;  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	Int  pos  =  1;	  int    pos    =    1;    Int    pos    =    1;    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
568	[BUG]  [BUGGY]  Char  input  =  input.charAt(0);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  Char  input  =  input.charAt(0);  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	Char  input  =  input.charAt(0);	  char    input    =    input.length();    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
569	[BUG]  [BUGGY]  out.write(input.charAt(0));  int  input  =  input.getChars();  [CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  out.write(input.charAt(0));  int  input  =  input.getChars();  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	out.write(input.charAt(0));  int  input  =  input.getChars();	          out.write(input.charAt(0));    char[]    input    =    input.getChars();    	non-compiled	[CE]  variable  input  is  already  defined  in  method  translate(CharSequence,Writer)	110	None	replace
570	[BUG]  [BUGGY]  int  pos  =(input  >=  null)?  0  :  input.length();  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]              ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =(input  >=  null)?  0  :  input.length();  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	int  pos  =(input  >=  null)?  0  :  input.length();	  int    pos    =(input!=    null)?    0    :    input.length();    int    pos    =(input    >=    null)?    0    :    input.length();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	46	None	replace
571	[BUG]  [BUGGY]  out.write(Input.substring(0,  input.length()  -  1));  [CE]  cannot  find  symbol  Input  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  out.write(Input.substring(0,  input.length()  -  1));  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	out.write(Input.substring(0,  input.length()  -  1));	  out.write(input.substring(0,    input.length()    -    1));    	non-compiled	[CE]  cannot  find  symbol  Input	146	None	replace
572	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input.length()    ==    0)    {    out.write('n');    }    if(input.length()  >=  0)  {  out.write('n');  }  if(input.length()  ==  0)  {  out.write('n');  }  if(input.length()  <  0)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	add	                if(input.length()        ==        0)        {        out.write('n');        }        if(input.length()    >=    0)    {    out.write('n');    }    if(input.length()  ==  0)  {  out.write('n');  }  if(input.length()  <  0)  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	30	19	add
573	[BUG]  [BUGGY]          if(input.length()    ==    0)    {    out.write('n');    }    if(input.length()  >=  0)  {  out.write('n');  }  if(input.length()  ==  0)  {  out.write('n');  }  if(input.length()  <  0)  {  out.write('n');  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input.length()    ==    0)    {    out.write('n');    }    if(input.length()  >=  0)  {  out.write('n');  }  if(input.length()  ==  0)  {  out.write('n');  }  if(input.length()  <  0)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	                if(input.length()        ==        0)        {        out.write('n');        }        if(input.length()    >=    0)    {    out.write('n');    }    if(input.length()  ==  0)  {  out.write('n');  }  if(input.length()  <  0)  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	30	19	add
574	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input.length()    ==    0)    {    out.write('n');    }    if(input.length()  >=  0)  {  out.write('n');  }  if(input.length()  >=  0)  {  out.write('n');  }  if(input.length()  >=  0)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	add	                if(input.length()        ==        0)        {        out.write('n');        }        if(input.length()    >=    0)    {    out.write('n');    }    if(input.length()  >=  0)  {  out.write('n');  }  if(input.length()  >=  0)  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	30	19	add
575	[BUG]  [BUGGY]          if(input.length()    ==    0)    {    out.write('n');    }    if(input.length()  >=  0)  {  out.write('n');  }  if(input.length()  >=  0)  {  out.write('n');  }  if(input.length()  >=  0)  {  out.write('n');  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]          if(input.length()    ==    0)    {    out.write('n');    }    if(input.length()  >=  0)  {  out.write('n');  }  if(input.length()  >=  0)  {  out.write('n');  }  if(input.length()  >=  0)  {  out.write('n');  }  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	                if(input.length()        ==        0)        {        out.write('n');        }        if(input.length()    >=    0)    {    out.write('n');    }    if(input.length()  >=  0)  {  out.write('n');  }  if(input.length()  >=  0)  {  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	30	19	add
576	[BUG]  [BUGGY]  Output  output  =  input.getOutput();  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  Output  output  =  input.getOutput();  [BUGGY]      int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	Output  output  =  input.getOutput();	          if(input!=    null)    {    out.write('n');    }    if(input    ==    null)    {    out.write('n');    }    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
577	[BUG]  [BUGGY]  int  pos  =  0;  Char  pos  =  0;  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }      [BUGGY]  int  pos  =  0;  Char  pos  =  0;  [BUGGY]      int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	82	82	1	replace	int  pos  =  0;  Char  pos  =  0;	  char    pos    =    0;    Char    pos    =    0;    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
