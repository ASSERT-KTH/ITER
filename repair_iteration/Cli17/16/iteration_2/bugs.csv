bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.keySet().iterator();  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }    [BUGGY]  Iterator  <  String>  iter  =  options.keySet().iterator();  [BUGGY]    else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	Iterator  <  String>  iter  =  options.keySet().iterator();	      Iterator    <    String>    iter    =    options.entrySet().iterator();    	non-compiled	[CE]  <identifier>  expected	14	None	replace
2	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.values().iterator();  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }    [BUGGY]  Iterator  <  String>  iter  =  options.values().iterator();  [BUGGY]    else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	Iterator  <  String>  iter  =  options.values().iterator();	      Iterator    <    String>    iter    =    options.entrySet().iterator();    	non-compiled	[CE]  <identifier>  expected	14	None	replace
3	[BUG]  [BUGGY]  Option  options  =  currentOption.getOptions();  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }    [BUGGY]  Option  options  =  currentOption.getOptions();  [BUGGY]    else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	Option  options  =  currentOption.getOptions();	      Option    options    =    options.getOptions();    	non-compiled	[CE]  <identifier>  expected	10	None	replace
4	[BUG]  [BUGGY]  Option  options  =  options.getOption(tokenLength);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }    [BUGGY]  Option  options  =  options.getOption(tokenLength);  [BUGGY]    else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	Option  options  =  options.getOption(tokenLength);	      Option    options    =    options.getOptions();    	non-compiled	[CE]  <identifier>  expected	10	None	replace
5	[BUG]  [BUGGY]  Option  options  =  options.getOptions(tokenLength);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }    [BUGGY]  Option  options  =  options.getOptions(tokenLength);  [BUGGY]    else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	Option  options  =  options.getOptions(tokenLength);	      Option    options    =    options.getOptions();    	non-compiled	[CE]  <identifier>  expected	10	None	replace
6	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  currentOption.iterator();  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }    [BUGGY]  Iterator  <  String>  iter  =  currentOption.iterator();  [BUGGY]    else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	Iterator  <  String>  iter  =  currentOption.iterator();	      Iterator    <    String>    iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	2	None	replace
7	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  this.arguments.iterator();  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }    [BUGGY]  Iterator  <  String>  iter  =  this.arguments.iterator();  [BUGGY]    else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	Iterator  <  String>  iter  =  this.arguments.iterator();	      Iterator    <    String>    iter    =    arguments.iterator();    	non-compiled	[CE]  <identifier>  expected	5	None	replace
8	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  options.hasOption(tokenLength))  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }    [BUGGY]  else  if(options.hasOption(token)&&  options.hasOption(tokenLength))  {  [BUGGY]    {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(options.hasOption(token)&&  options.hasOption(tokenLength))  {	  else    if(options.hasOption(token)||    options.hasOption(tokenLength))    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
9	[BUG]  [BUGGY]  else  if(options.hasOption(token)||  options.hasOption(tokenLength  +  2))  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }    [BUGGY]  else  if(options.hasOption(token)||  options.hasOption(tokenLength  +  2))  {  [BUGGY]    {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(options.hasOption(token)||  options.hasOption(tokenLength  +  2))  {	  else    if(options.hasOption(token)||    options.hasOption(tokenLength))    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
10	[BUG]  [BUGGY]  else  if(options.hasOption(token)||  options.hasOption(tokenLength  +  1))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }    [BUGGY]  else  if(options.hasOption(token)||  options.hasOption(tokenLength  +  1))  {  [BUGGY]    {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(options.hasOption(token)||  options.hasOption(tokenLength  +  1))  {	  else    if(options.hasOption(token)||    options.hasOption(tokenLength))    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
11	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||!options.hasOption(token))  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }    [BUGGY]  else  if(stopAtNonOption  ||!options.hasOption(token))  {  [BUGGY]    {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(stopAtNonOption  ||!options.hasOption(token))  {	  else    if(!options.hasOption(token))    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
12	[BUG]  [BUGGY]  else  if(!options.hasOption(tokenLength))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }    [BUGGY]  else  if(!options.hasOption(tokenLength))  {  [BUGGY]    {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(!options.hasOption(tokenLength))  {	  else    if(!options.hasOption(token))    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
13	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||!options.hasOption(tokenLength))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }    [BUGGY]  else  if(stopAtNonOption  ||!options.hasOption(tokenLength))  {  [BUGGY]    {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(stopAtNonOption  ||!options.hasOption(tokenLength))  {	  else    if(!options.hasOption(token))    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
14	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  arguments.length  >  2)  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }    [BUGGY]  else  if(stopAtNonOption  &&  arguments.length  >  2)  {  [BUGGY]    {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(stopAtNonOption  &&  arguments.length  >  2)  {	  else    if(stopAtNonOption)    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
15	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  arguments.length  <  2)  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }    [BUGGY]  else  if(stopAtNonOption  ||  arguments.length  <  2)  {  [BUGGY]    {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(stopAtNonOption  ||  arguments.length  <  2)  {	  else    if(stopAtNonOption)    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
16	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  arguments.length  >  1)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }    [BUGGY]  else  if(stopAtNonOption  &&  arguments.length  >  1)  {  [BUGGY]    {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(stopAtNonOption  &&  arguments.length  >  1)  {	  else    if(stopAtNonOption)    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
17	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  tokenLength  ==  2)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }    [BUGGY]  else  if(stopAtNonOption  ||  tokenLength  ==  2)  {  [BUGGY]    {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(stopAtNonOption  ||  tokenLength  ==  2)  {	  else    if(stopAtNonOption)    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
18	[BUG]  [BUGGY]  else  if(options.hasOption(token))  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }    [BUGGY]  else  if(options.hasOption(token))  {  tokens.add(token);  }  [BUGGY]    else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(options.hasOption(token))  {  tokens.add(token);  }	      tokens.add(token);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
19	[BUG]  [BUGGY]  else  if(options.hasOption(token))  {  tokens.add(token);  }  else  {  options.put(token,  stopAtNonOption);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }    [BUGGY]  else  if(options.hasOption(token))  {  tokens.add(token);  }  else  {  options.put(token,  stopAtNonOption);  }  [BUGGY]    else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(options.hasOption(token))  {  tokens.add(token);  }  else  {  options.put(token,  stopAtNonOption);  }	      tokens.add(token);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
20	[BUG]  [BUGGY]  else  if(options.hasOption(token)||  options.hasOption(token))  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }    [BUGGY]  else  if(options.hasOption(token)||  options.hasOption(token))  {  tokens.add(token);  }  [BUGGY]    else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(options.hasOption(token)||  options.hasOption(token))  {  tokens.add(token);  }	      tokens.add(token);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
21	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  stopAtNonOption  ==  true)  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }    [BUGGY]  else  if(options.hasOption(token)&&  stopAtNonOption  ==  true)  {  [BUGGY]    {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(options.hasOption(token)&&  stopAtNonOption  ==  true)  {	  else    if(options.hasOption(token)&&    stopAtNonOption    ==    false)    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
22	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  stopAtNonOption!=  false)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }    [BUGGY]  else  if(options.hasOption(token)&&  stopAtNonOption!=  false)  {  [BUGGY]    {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(options.hasOption(token)&&  stopAtNonOption!=  false)  {	  else    if(options.hasOption(token)&&    stopAtNonOption    ==    false)    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
23	[BUG]  [BUGGY]  else  if(options.hasOption(token)||  stopAtNonOption  ==  false)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }    [BUGGY]  else  if(options.hasOption(token)||  stopAtNonOption  ==  false)  {  [BUGGY]    {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(options.hasOption(token)||  stopAtNonOption  ==  false)  {	  else    if(options.hasOption(token)&&    stopAtNonOption    ==    false)    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
24	[BUG]  [BUGGY]  else  if(options.hasOption(tokenLength)||  options.hasOption(tokenLength))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }    [BUGGY]  else  if(options.hasOption(tokenLength)||  options.hasOption(tokenLength))  {  [BUGGY]    {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(options.hasOption(tokenLength)||  options.hasOption(tokenLength))  {	  else    if(options.hasOption(tokenLength))    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
25	[BUG]  [BUGGY]  else  if(options.hasOption(tokenLength  +  2))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }    [BUGGY]  else  if(options.hasOption(tokenLength  +  2))  {  [BUGGY]    {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(options.hasOption(tokenLength  +  2))  {	  else    if(options.hasOption(tokenLength))    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
26	[BUG]  [BUGGY]  else  if(options.hasOption(tokenLength)&&  stopAtNonOption)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }    [BUGGY]  else  if(options.hasOption(tokenLength)&&  stopAtNonOption)  {  [BUGGY]    {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(options.hasOption(tokenLength)&&  stopAtNonOption)  {	  else    if(options.hasOption(tokenLength))    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
27	[BUG]  [BUGGY]  else  if(options.hasOption(tokenLength  +  1))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }    [BUGGY]  else  if(options.hasOption(tokenLength  +  1))  {  [BUGGY]    {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(options.hasOption(tokenLength  +  1))  {	  else    if(options.hasOption(tokenLength))    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
28	[BUG]  [BUGGY]  else  if(options.hasOption(token)||  token.startsWith( "-   "))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }    [BUGGY]  else  if(options.hasOption(token)||  token.startsWith( "-   "))  {  [BUGGY]    {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(options.hasOption(token)||  token.startsWith( "-   "))  {	  else    if(options.hasOption(token)&&    token.startsWith(   "-   "))    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
29	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  token.startsWith( "- ")||  tokenLength  ==  2)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }    [BUGGY]  else  if(options.hasOption(token)&&  token.startsWith( "- ")||  tokenLength  ==  2)  {  [BUGGY]    {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(options.hasOption(token)&&  token.startsWith( "- ")||  tokenLength  ==  2)  {	  else    if(options.hasOption(token)&&    token.startsWith(   "-   "))    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
30	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  token.startsWith( "- ")||  tokenLength  <  2)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }    [BUGGY]  else  if(options.hasOption(token)&&  token.startsWith( "- ")||  tokenLength  <  2)  {  [BUGGY]    {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(options.hasOption(token)&&  token.startsWith( "- ")||  tokenLength  <  2)  {	  else    if(options.hasOption(token)&&    token.startsWith(   "-   "))    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
31	[BUG]  [BUGGY]  Iterator  iter  =  arguments.iterator();  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }    [BUGGY]  Iterator  iter  =  arguments.iterator();  [BUGGY]    else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	Iterator  iter  =  arguments.iterator();	      Iterator    iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
32	[BUG]  [BUGGY]  Iterator  iter  =  options.values().iterator();  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }    [BUGGY]  Iterator  iter  =  options.values().iterator();  [BUGGY]    else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	Iterator  iter  =  options.values().iterator();	      Iterator    iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
33	[BUG]  [BUGGY]  Iterator  iter  =  tokens.iterator();  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }    [BUGGY]  Iterator  iter  =  tokens.iterator();  [BUGGY]    else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	Iterator  iter  =  tokens.iterator();	      Iterator    iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
34	[BUG]  [BUGGY]  Option  option  =  options.getOption(token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }    [BUGGY]  Option  option  =  options.getOption(token,  stopAtNonOption);  [BUGGY]    else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	Option  option  =  options.getOption(token,  stopAtNonOption);	      Option    option    =    options.getOption(token);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
35	[BUG]  [BUGGY]  Option  option  =  options.getOption(tokenLength);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }    [BUGGY]  Option  option  =  options.getOption(tokenLength);  [BUGGY]    else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	Option  option  =  options.getOption(tokenLength);	      Option    option    =    options.getOption(token);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
36	[BUG]  [BUGGY]  Option  option  =  options.getOption(token)+  1;  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }    [BUGGY]  Option  option  =  options.getOption(token)+  1;  [BUGGY]    else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	Option  option  =  options.getOption(token)+  1;	      Option    option    =    options.getOption(token);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
37	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  tokenLength  ==  1)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }    [BUGGY]  else  if(options.hasOption(token)&&  tokenLength  ==  1)  {  [BUGGY]    {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(options.hasOption(token)&&  tokenLength  ==  1)  {	  else    if(options.hasOption(token)&&    tokenLength    ==    2)    {    	non-compiled	[CE]  <identifier>  expected	18	None	replace
38	[BUG]  [BUGGY]  else  if(options.hasOption(token)||  tokenLength  ==  2)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }    [BUGGY]  else  if(options.hasOption(token)||  tokenLength  ==  2)  {  [BUGGY]    {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(options.hasOption(token)||  tokenLength  ==  2)  {	  else    if(options.hasOption(token)&&    tokenLength    ==    2)    {    	non-compiled	[CE]  <identifier>  expected	18	None	replace
39	[BUG]  [BUGGY]  else  if(options.hasOption(token)||  stopAtNonOption)  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }    [BUGGY]  else  if(options.hasOption(token)||  stopAtNonOption)  {  [BUGGY]    {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(options.hasOption(token)||  stopAtNonOption)  {	  else    if(options.hasOption(token)&&    stopAtNonOption)    {    	non-compiled	[CE]  <identifier>  expected	16	None	replace
40	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  stopAtNonOption  ||  arguments.contains(token))  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }    [BUGGY]  else  if(options.hasOption(token)&&  stopAtNonOption  ||  arguments.contains(token))  {  [BUGGY]    {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(options.hasOption(token)&&  stopAtNonOption  ||  arguments.contains(token))  {	  else    if(options.hasOption(token)&&    stopAtNonOption)    {    	non-compiled	[CE]  <identifier>  expected	16	None	replace
41	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  stopAtNonOption  ||  arguments.size()  ==  2)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }    [BUGGY]  else  if(options.hasOption(token)&&  stopAtNonOption  ||  arguments.size()  ==  2)  {  [BUGGY]    {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(options.hasOption(token)&&  stopAtNonOption  ||  arguments.size()  ==  2)  {	  else    if(options.hasOption(token)&&    stopAtNonOption)    {    	non-compiled	[CE]  <identifier>  expected	16	None	replace
42	[BUG]  [BUGGY]  Option  options  =  currentOption.getOption(token);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }    [BUGGY]  Option  options  =  currentOption.getOption(token);  [BUGGY]    else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	Option  options  =  currentOption.getOption(token);	      Option    options    =    options.getOption(token);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
43	[BUG]  [BUGGY]  Option  options  =  options.getOption(token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }    [BUGGY]  Option  options  =  options.getOption(token,  stopAtNonOption);  [BUGGY]    else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	Option  options  =  options.getOption(token,  stopAtNonOption);	      Option    options    =    options.getOption(token);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
44	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  tokenLength  >  2)  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }    [BUGGY]  else  if(options.hasOption(token)&&  tokenLength  >  2)  {  [BUGGY]    {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(options.hasOption(token)&&  tokenLength  >  2)  {	  else    if(options.hasOption(token)&&    tokenLength    <    2)    {    	non-compiled	[CE]  <identifier>  expected	17	None	replace
45	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  tokenLength  >=  2)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }    [BUGGY]  else  if(options.hasOption(token)&&  tokenLength  >=  2)  {  [BUGGY]    {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(options.hasOption(token)&&  tokenLength  >=  2)  {	  else    if(options.hasOption(token)&&    tokenLength    <    2)    {    	non-compiled	[CE]  <identifier>  expected	17	None	replace
46	[BUG]  [BUGGY]  else  if(!options.hasOption(token)&&  stopAtNonOption  ==  false)  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }    [BUGGY]  else  if(!options.hasOption(token)&&  stopAtNonOption  ==  false)  {  [BUGGY]    {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(!options.hasOption(token)&&  stopAtNonOption  ==  false)  {	  else    if(!options.hasOption(token))    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
47	[BUG]  [BUGGY]  else  if(options.hasOption(tokenLength)||  stopAtNonOption)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }    [BUGGY]  else  if(options.hasOption(tokenLength)||  stopAtNonOption)  {  [BUGGY]    {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(options.hasOption(tokenLength)||  stopAtNonOption)  {	  else    if(options.hasOption(tokenLength))    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
48	[BUG]  [BUGGY]  Ilerator  <  String>  iter  =  options.iterator();  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }    [BUGGY]  Ilerator  <  String>  iter  =  options.iterator();  [BUGGY]    else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	Ilerator  <  String>  iter  =  options.iterator();	      Iterator    <    String>    iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	2	None	replace
49	[BUG]  [BUGGY]  Iterator  iter  =  options.keySet().iterator();  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }    [BUGGY]  Iterator  iter  =  options.keySet().iterator();  [BUGGY]    else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	Iterator  iter  =  options.keySet().iterator();	      Iterator    iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
50	[BUG]  [BUGGY]  Ilerator  iter  =  options.iterator();  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }    [BUGGY]  Ilerator  iter  =  options.iterator();  [BUGGY]    else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	Ilerator  iter  =  options.iterator();	      Iterator    iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
51	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  tokenLength  >  2)  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }    [BUGGY]  else  if(stopAtNonOption  &&  tokenLength  >  2)  {  [BUGGY]    {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(stopAtNonOption  &&  tokenLength  >  2)  {	  else    if(stopAtNonOption)    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
52	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  tokenLength  >  1)  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }    [BUGGY]  else  if(stopAtNonOption  &&  tokenLength  >  1)  {  [BUGGY]    {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(stopAtNonOption  &&  tokenLength  >  1)  {	  else    if(stopAtNonOption)    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
53	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  tokenLength  ==  2)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }    [BUGGY]  else  if(stopAtNonOption  &&  tokenLength  ==  2)  {  [BUGGY]    {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(stopAtNonOption  &&  tokenLength  ==  2)  {	  else    if(stopAtNonOption)    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
54	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  stopAtNonOption  ||  options.hasOption(tokenLength))  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }    [BUGGY]  else  if(options.hasOption(token)&&  stopAtNonOption  ||  options.hasOption(tokenLength))  {  [BUGGY]    {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(options.hasOption(token)&&  stopAtNonOption  ||  options.hasOption(tokenLength))  {	  else    if(options.hasOption(token)&&    stopAtNonOption)    {    	non-compiled	[CE]  <identifier>  expected	16	None	replace
55	[BUG]  [BUGGY]  tokens.add(tokenLength);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }    [BUGGY]  tokens.add(tokenLength);  [BUGGY]    else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	tokens.add(tokenLength);	      tokens.add(token);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
56	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  tokenLength!=  2)  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }    [BUGGY]  else  if(options.hasOption(token)&&  tokenLength!=  2)  {  [BUGGY]    {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(options.hasOption(token)&&  tokenLength!=  2)  {	  else    if(options.hasOption(token)&&    tokenLength    <    2)    {    	non-compiled	[CE]  <identifier>  expected	17	None	replace
57	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  token.startsWith( "-- "))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }    [BUGGY]  else  if(options.hasOption(token)&&  token.startsWith( "-- "))  {  [BUGGY]    {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(options.hasOption(token)&&  token.startsWith( "-- "))  {	  else    if(options.hasOption(token)&&    token.startsWith(   "-   "))    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
58	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  stopAtNonOption.startsWith( "- "))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }    [BUGGY]  else  if(options.hasOption(token)&&  stopAtNonOption.startsWith( "- "))  {  [BUGGY]    {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(options.hasOption(token)&&  stopAtNonOption.startsWith( "- "))  {	  else    if(options.hasOption(token)&&    token.startsWith(   "-   "))    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
59	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  stopAtNonOption  ==  2)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }    [BUGGY]  else  if(options.hasOption(token)&&  stopAtNonOption  ==  2)  {  [BUGGY]    {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(options.hasOption(token)&&  stopAtNonOption  ==  2)  {	  else    if(options.hasOption(token)&&    tokenLength    ==    2)    {    	non-compiled	[CE]  <identifier>  expected	18	None	replace
60	[BUG]  [BUGGY]  Option  options  =  options.getOption(token)||  options.hasOption(token);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }    [BUGGY]  Option  options  =  options.getOption(token)||  options.hasOption(token);  [BUGGY]    else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	Option  options  =  options.getOption(token)||  options.hasOption(token);	      Option    options    =    options.getOption(token);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
61	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  this.options.iterator();  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }    [BUGGY]  Iterator  <  String>  iter  =  this.options.iterator();  [BUGGY]    else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	Iterator  <  String>  iter  =  this.options.iterator();	      Iterator    <    String>    iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	2	None	replace
62	[BUG]  [BUGGY]  else  if(options.hasOption(tokenLength)&&  token.startsWith( "- "))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }    [BUGGY]  else  if(options.hasOption(tokenLength)&&  token.startsWith( "- "))  {  [BUGGY]    {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(options.hasOption(tokenLength)&&  token.startsWith( "- "))  {	  else    if(options.hasOption(tokenLength))    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
63	[BUG]  [BUGGY]  tokens.add(token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }    [BUGGY]  tokens.add(token,  stopAtNonOption);  [BUGGY]    else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	tokens.add(token,  stopAtNonOption);	      tokens.add(token);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
64	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  stopAtNonOption  >=  false)  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }    [BUGGY]  else  if(options.hasOption(token)&&  stopAtNonOption  >=  false)  {  [BUGGY]    {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(options.hasOption(token)&&  stopAtNonOption  >=  false)  {	  else    if(options.hasOption(token)&&    stopAtNonOption    ==    false)    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
65	[BUG]  [BUGGY]  else  if(tokenLength  ==  2)  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }    [BUGGY]  else  if(tokenLength  ==  2)  {  [BUGGY]    {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(tokenLength  ==  2)  {	  else    if(stopAtNonOption)    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
66	[BUG]  [BUGGY]  else  if(!options.hasOption(token)&&  tokenLength  >  2)  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }    [BUGGY]  else  if(!options.hasOption(token)&&  tokenLength  >  2)  {  [BUGGY]    {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(!options.hasOption(token)&&  tokenLength  >  2)  {	  else    if(!options.hasOption(token))    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
67	[BUG]  [BUGGY]  Iterator  iter  =  this.options.iterator();  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }    [BUGGY]  Iterator  iter  =  this.options.iterator();  [BUGGY]    else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	Iterator  iter  =  this.options.iterator();	      Iterator    iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
68	[BUG]  [BUGGY]  Option  option  =  options.getOption(token)||  options.hasOption(token);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }    [BUGGY]  Option  option  =  options.getOption(token)||  options.hasOption(token);  [BUGGY]    else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	Option  option  =  options.getOption(token)||  options.hasOption(token);	      Option    option    =    options.getOption(token);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
