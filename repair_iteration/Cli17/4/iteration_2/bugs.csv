bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  PosixParser  currentOption  =(PosixParser)this.options.get(value  +  1);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  void  process(String  value)  {    [BUGGY]  PosixParser  currentOption  =(PosixParser)this.options.get(value  +  1);  [BUGGY]    if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	PosixParser  currentOption  =(PosixParser)this.options.get(value  +  1);	      PosixParser    currentOption    =(PosixParser)this.options.get(value);    	non-compiled	[CE]  	11	None	replace
2	[BUG]  [BUGGY]  PosixParser  currentOption  =(PosixParser)this.options.get(value  -  1);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  void  process(String  value)  {    [BUGGY]  PosixParser  currentOption  =(PosixParser)this.options.get(value  -  1);  [BUGGY]    if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	PosixParser  currentOption  =(PosixParser)this.options.get(value  -  1);	      PosixParser    currentOption    =(PosixParser)this.options.get(value);    	non-compiled	[CE]  	11	None	replace
3	[BUG]  [BUGGY]  PosixParser  currentOption  =(PosixParser)this.options.get(0);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  void  process(String  value)  {    [BUGGY]  PosixParser  currentOption  =(PosixParser)this.options.get(0);  [BUGGY]    if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	PosixParser  currentOption  =(PosixParser)this.options.get(0);	      PosixParser    currentOption    =(PosixParser)this.options.get(value);    	non-compiled	[CE]  	11	None	replace
4	[BUG]  [BUGGY]  currentOption  =  null;  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  void  process(String  value)  {    [BUGGY]  currentOption  =  null;  [BUGGY]    if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	currentOption  =  null;	      if(!stopAtNonOption)    {    currentOption    =    null;    }    	non-compiled	[CE]  	7	None	replace
5	[BUG]  [BUGGY]  ||!stopAtNonOption)  {  currentOption  =  null;  }  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  void  process(String  value)  {    [BUGGY]  ||!stopAtNonOption)  {  currentOption  =  null;  }  [BUGGY]    if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	||!stopAtNonOption)  {  currentOption  =  null;  }	      if(!stopAtNonOption)    {    currentOption    =    null;    }    	non-compiled	[CE]  	7	None	replace
6	[BUG]  [BUGGY]  if(stopAtNonOption)  {  currentOption  =  null;  }  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  void  process(String  value)  {    [BUGGY]  if(stopAtNonOption)  {  currentOption  =  null;  }  [BUGGY]    if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	if(stopAtNonOption)  {  currentOption  =  null;  }	      if(!stopAtNonOption)    {    currentOption    =    null;    }    	non-compiled	[CE]  	7	None	replace
7	[BUG]  [BUGGY]  tokens.add(value);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  void  process(String  value)  {    [BUGGY]  tokens.add(value);  [BUGGY]    if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	tokens.add(value);	      if(!stopAtNonOption)    {    tokens.add(value);    }    	non-compiled	[CE]  	9	None	replace
8	[BUG]  [BUGGY]  Option  currentOption  =  options.get(value);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  void  process(String  value)  {    [BUGGY]  Option  currentOption  =  options.get(value);  [BUGGY]    if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	Option  currentOption  =  options.get(value);	      if(!stopAtNonOption)    {    tokens.add(value);    }    	non-compiled	[CE]  	9	None	replace
9	[BUG]  [BUGGY]  options.add(value);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    private  void  process(String  value)  {    [BUGGY]  options.add(value);  [BUGGY]    if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	options.add(value);	      if(!stopAtNonOption)    {    tokens.add(value);    }    	non-compiled	[CE]  	9	None	replace
10	[BUG]  [BUGGY]  if(options!=  null)  {  Option  currentOption  =  options.getOption(value);  }  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  void  process(String  value)  {    [BUGGY]  if(options!=  null)  {  Option  currentOption  =  options.getOption(value);  }  [BUGGY]    if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	if(options!=  null)  {  Option  currentOption  =  options.getOption(value);  }	      Option    currentOption    =    options.getOption(value);    	non-compiled	[CE]  	5	None	replace
11	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(value  +  1);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  void  process(String  value)  {    [BUGGY]  Option  currentOption  =  options.getOption(value  +  1);  [BUGGY]    if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	Option  currentOption  =  options.getOption(value  +  1);	      Option    currentOption    =    options.getOption(value);    	non-compiled	[CE]  	5	None	replace
12	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(value,  value);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  void  process(String  value)  {    [BUGGY]  Option  currentOption  =  options.getOption(value,  value);  [BUGGY]    if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	Option  currentOption  =  options.getOption(value,  value);	      Option    currentOption    =    options.getOption(value);    	non-compiled	[CE]  	5	None	replace
13	[BUG]  [BUGGY]  Option  currentOption  =  option.getOption(value,  true);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  void  process(String  value)  {    [BUGGY]  Option  currentOption  =  option.getOption(value,  true);  [BUGGY]    if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	Option  currentOption  =  option.getOption(value,  true);	      Option    currentOption    =    option.getOption(value);    	non-compiled	[CE]  	15	None	replace
14	[BUG]  [BUGGY]  Option  currentOption  =  option.getOption(value  +  1);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  void  process(String  value)  {    [BUGGY]  Option  currentOption  =  option.getOption(value  +  1);  [BUGGY]    if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	Option  currentOption  =  option.getOption(value  +  1);	      Option    currentOption    =    option.getOption(value);    	non-compiled	[CE]  	15	None	replace
15	[BUG]  [BUGGY]  if(value!=  null  ||  currentOption.hasArgs())  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  void  process(String  value)  {    [BUGGY]  if(value!=  null  ||  currentOption.hasArgs())  {  [BUGGY]    {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	if(value!=  null  ||  currentOption.hasArgs())  {	  if(currentOption!=    null    &&    currentOption.hasArgs())    {    	non-compiled	[CE]  	14	None	replace
16	[BUG]  [BUGGY]  if(value!=  null  &&  currentOption.hasArgs())  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  void  process(String  value)  {    [BUGGY]  if(value!=  null  &&  currentOption.hasArgs())  {  [BUGGY]    {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	if(value!=  null  &&  currentOption.hasArgs())  {	  if(currentOption!=    null    &&    currentOption.hasArgs())    {    	non-compiled	[CE]  	14	None	replace
17	[BUG]  [BUGGY]  if(currentOption!=  null  ||  currentOption.hasArgs())  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  void  process(String  value)  {    [BUGGY]  if(currentOption!=  null  ||  currentOption.hasArgs())  {  [BUGGY]    {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	if(currentOption!=  null  ||  currentOption.hasArgs())  {	  if(currentOption!=    null    &&    currentOption.hasArgs())    {    	non-compiled	[CE]  	14	None	replace
18	[BUG]  [BUGGY]  tokens.add(value);  currentOption  =  null;  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  void  process(String  value)  {    [BUGGY]  tokens.add(value);  currentOption  =  null;  [BUGGY]    {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	tokens.add(value);  currentOption  =  null;	      	non-compiled	[CE]  	4	None	replace
19	[BUG]  [BUGGY]  if(value  ==  null  ||  currentOption.hasArg())  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  void  process(String  value)  {    [BUGGY]  if(value  ==  null  ||  currentOption.hasArg())  {  [BUGGY]    {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	if(value  ==  null  ||  currentOption.hasArg())  {	  if(value!=    null    ||    currentOption.hasArg())    {    	non-compiled	[CE]  	1	None	replace
20	[BUG]  [BUGGY]  PosixParser  currentOption  =(PosixParser)this.tokens.get(value);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  void  process(String  value)  {    [BUGGY]  PosixParser  currentOption  =(PosixParser)this.tokens.get(value);  [BUGGY]    if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	PosixParser  currentOption  =(PosixParser)this.tokens.get(value);	      PosixParser    currentOption    =(PosixParser)tokens.get(value);    	non-compiled	[CE]  	12	None	replace
21	[BUG]  [BUGGY]  PosixParser  currentOption  =(PosixParser)tokens.get(value  +  1);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  void  process(String  value)  {    [BUGGY]  PosixParser  currentOption  =(PosixParser)tokens.get(value  +  1);  [BUGGY]    if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	PosixParser  currentOption  =(PosixParser)tokens.get(value  +  1);	      PosixParser    currentOption    =(PosixParser)tokens.get(value);    	non-compiled	[CE]  	12	None	replace
22	[BUG]  [BUGGY]  PosixParser  currentOption  =(PosixParser)tokens.get(key);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  void  process(String  value)  {    [BUGGY]  PosixParser  currentOption  =(PosixParser)tokens.get(key);  [BUGGY]    if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	PosixParser  currentOption  =(PosixParser)tokens.get(key);	      PosixParser    currentOption    =(PosixParser)tokens.get(value);    	non-compiled	[CE]  	12	None	replace
23	[BUG]  [BUGGY]  While(!stopAtNonOption)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  void  process(String  value)  {    [BUGGY]  While(!stopAtNonOption)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	While(!stopAtNonOption)  {  throw  new  IllegalStateException( " ");  }	      if(!stopAtNonOption)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	8	None	replace
24	[BUG]  [BUGGY]  While(stopAtNonOption)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  void  process(String  value)  {    [BUGGY]  While(stopAtNonOption)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	While(stopAtNonOption)  {  throw  new  IllegalStateException( " ");  }	      if(!stopAtNonOption)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	8	None	replace
25	[BUG]  [BUGGY]  While(!stopAtNonOption  &&  value.length()  >  0)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  void  process(String  value)  {    [BUGGY]  While(!stopAtNonOption  &&  value.length()  >  0)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	While(!stopAtNonOption  &&  value.length()  >  0)  {  throw  new  IllegalStateException( " ");  }	      if(!stopAtNonOption)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	8	None	replace
26	[BUG]  [BUGGY]  if(options!=  null)  {  Options  currentOption  =  options.getOption(value);  }  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  void  process(String  value)  {    [BUGGY]  if(options!=  null)  {  Options  currentOption  =  options.getOption(value);  }  [BUGGY]    if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	if(options!=  null)  {  Options  currentOption  =  options.getOption(value);  }	      Options    currentOption    =    options.getOption(value);    	non-compiled	[CE]  	10	None	replace
27	[BUG]  [BUGGY]  if(options!=  null)  {  Options  currentOption  =  options.getOption(value);  }  else  {  tokens.add(value);  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  void  process(String  value)  {    [BUGGY]  if(options!=  null)  {  Options  currentOption  =  options.getOption(value);  }  else  {  tokens.add(value);  }  [BUGGY]    if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	if(options!=  null)  {  Options  currentOption  =  options.getOption(value);  }  else  {  tokens.add(value);  }	      Options    currentOption    =    options.getOption(value);    	non-compiled	[CE]  	10	None	replace
28	[BUG]  [BUGGY]  Option  currentOption  =  options.process(value);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  void  process(String  value)  {    [BUGGY]  Option  currentOption  =  options.process(value);  [BUGGY]    if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	Option  currentOption  =  options.process(value);	      Option    currentOption    =    options.findOption(value);    	non-compiled	[CE]  	13	None	replace
29	[BUG]  [BUGGY]  Option  currentOption  =  options.stopAtNonOption(value);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  void  process(String  value)  {    [BUGGY]  Option  currentOption  =  options.stopAtNonOption(value);  [BUGGY]    if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	Option  currentOption  =  options.stopAtNonOption(value);	      Option    currentOption    =    options.findOption(value);    	non-compiled	[CE]  	13	None	replace
30	[BUG]  [BUGGY]  Option  currentOption  =  options.stopAtNonOption();  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  void  process(String  value)  {    [BUGGY]  Option  currentOption  =  options.stopAtNonOption();  [BUGGY]    if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	Option  currentOption  =  options.stopAtNonOption();	      Option    currentOption    =    options.findOption(value);    	non-compiled	[CE]  	13	None	replace
31	[BUG]  [BUGGY]  While(!stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  void  process(String  value)  {    [BUGGY]  While(!stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	While(!stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }	      if(!stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	6	None	replace
32	[BUG]  [BUGGY]  While(stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  void  process(String  value)  {    [BUGGY]  While(stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	While(stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }	      if(!stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	6	None	replace
33	[BUG]  [BUGGY]  While(!stopAtNonOption  &&  value.length()  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  void  process(String  value)  {    [BUGGY]  While(!stopAtNonOption  &&  value.length()  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	While(!stopAtNonOption  &&  value.length()  >  0)  {  throw  new  IllegalArgumentException( " ");  }	      if(!stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	6	None	replace
34	[BUG]  [BUGGY]  PosixParser  currentOption  =(PosixParser)this.options.get(key);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  void  process(String  value)  {    [BUGGY]  PosixParser  currentOption  =(PosixParser)this.options.get(key);  [BUGGY]    if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	PosixParser  currentOption  =(PosixParser)this.options.get(key);	      PosixParser    currentOption    =(PosixParser)this.options.get(value);    	non-compiled	[CE]  	11	None	replace
35	[BUG]  [BUGGY]  Option  currentOption  =  option.getOption(value,  null);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  void  process(String  value)  {    [BUGGY]  Option  currentOption  =  option.getOption(value,  null);  [BUGGY]    if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	Option  currentOption  =  option.getOption(value,  null);	      Option    currentOption    =    option.getOption(value);    	non-compiled	[CE]  	15	None	replace
36	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(value,  true);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  void  process(String  value)  {    [BUGGY]  Option  currentOption  =  options.getOption(value,  true);  [BUGGY]    if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	Option  currentOption  =  options.getOption(value,  true);	      Option    currentOption    =    options.getOption(value);    	non-compiled	[CE]  	5	None	replace
37	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(value)+  1;  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  void  process(String  value)  {    [BUGGY]  Option  currentOption  =  options.getOption(value)+  1;  [BUGGY]    if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	Option  currentOption  =  options.getOption(value)+  1;	      Option    currentOption    =    options.getOption(value);    	non-compiled	[CE]  	5	None	replace
38	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(value);  currentOption  =  null;  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  void  process(String  value)  {    [BUGGY]  if(stopAtNonOption)  {  tokens.add(value);  currentOption  =  null;  }  [BUGGY]    if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	if(stopAtNonOption)  {  tokens.add(value);  currentOption  =  null;  }	      if(!stopAtNonOption)    {    currentOption    =    null;    }    	non-compiled	[CE]  	7	None	replace
39	[BUG]  [BUGGY]  if(stopAtNonOption  ||  currentOption!=  null)  {  currentOption  =  null;  }  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  void  process(String  value)  {    [BUGGY]  if(stopAtNonOption  ||  currentOption!=  null)  {  currentOption  =  null;  }  [BUGGY]    if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	if(stopAtNonOption  ||  currentOption!=  null)  {  currentOption  =  null;  }	      if(!stopAtNonOption)    {    currentOption    =    null;    }    	non-compiled	[CE]  	7	None	replace
40	[BUG]  [BUGGY]  if(options!=  null)  {  Options  currentOption  =  options.getOption(value);  if(currentOption!=  null)  {  tokens.add(value);  }  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  void  process(String  value)  {    [BUGGY]  if(options!=  null)  {  Options  currentOption  =  options.getOption(value);  if(currentOption!=  null)  {  tokens.add(value);  }  [BUGGY]    if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	if(options!=  null)  {  Options  currentOption  =  options.getOption(value);  if(currentOption!=  null)  {  tokens.add(value);  }	      Options    currentOption    =    options.getOption(value);    	non-compiled	[CE]  	10	None	replace
41	[BUG]  [BUGGY]  if(value  ==  null  ||  currentOption.hasArgs())  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  void  process(String  value)  {    [BUGGY]  if(value  ==  null  ||  currentOption.hasArgs())  {  [BUGGY]    {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	if(value  ==  null  ||  currentOption.hasArgs())  {	  if(value!=    null    ||    currentOption.hasArg())    {    	non-compiled	[CE]  	1	None	replace
42	[BUG]  [BUGGY]  safeTest(stopAtNonOption)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  void  process(String  value)  {    [BUGGY]  safeTest(stopAtNonOption)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	safeTest(stopAtNonOption)  {  throw  new  IllegalStateException( " ");  }	      if(!stopAtNonOption)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	8	None	replace
43	[BUG]  [BUGGY]  While(!stopAtNonOption  &&  value!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  void  process(String  value)  {    [BUGGY]  While(!stopAtNonOption  &&  value!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	While(!stopAtNonOption  &&  value!=  null)  {  throw  new  IllegalStateException( " ");  }	      if(!stopAtNonOption)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	8	None	replace
44	[BUG]  [BUGGY]  safeTest(stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  void  process(String  value)  {    [BUGGY]  safeTest(stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	safeTest(stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }	      if(!stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	6	None	replace
45	[BUG]  [BUGGY]  While(!stopAtNonOption)  {  tokens.add(value);  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  void  process(String  value)  {    [BUGGY]  While(!stopAtNonOption)  {  tokens.add(value);  }  [BUGGY]    if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	While(!stopAtNonOption)  {  tokens.add(value);  }	      if(!stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	6	None	replace
46	[BUG]  [BUGGY]  While(!stopAtNonOption)  {  tokens.add(value);  currentOption  =  null;  }  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  void  process(String  value)  {    [BUGGY]  While(!stopAtNonOption)  {  tokens.add(value);  currentOption  =  null;  }  [BUGGY]    if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	While(!stopAtNonOption)  {  tokens.add(value);  currentOption  =  null;  }	      if(!stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	6	None	replace
47	[BUG]  [BUGGY]  if(currentOption  ==  null  ||  currentOption.hasArg())  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  void  process(String  value)  {    [BUGGY]  if(currentOption  ==  null  ||  currentOption.hasArg())  {  [BUGGY]    {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	if(currentOption  ==  null  ||  currentOption.hasArg())  {	  if(currentOption!=    null    ||    currentOption.hasArg())    {    	non-compiled	[CE]  	2	None	replace
48	[BUG]  [BUGGY]  if(currentOption  ==  null  ||  currentOption.hasArgs())  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  void  process(String  value)  {    [BUGGY]  if(currentOption  ==  null  ||  currentOption.hasArgs())  {  [BUGGY]    {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	if(currentOption  ==  null  ||  currentOption.hasArgs())  {	  if(currentOption!=    null    ||    currentOption.hasArg())    {    	non-compiled	[CE]  	2	None	replace
49	[BUG]  [BUGGY]  if(value  ==  null  &&  currentOption.hasArg())  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  void  process(String  value)  {    [BUGGY]  if(value  ==  null  &&  currentOption.hasArg())  {  [BUGGY]    {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	if(value  ==  null  &&  currentOption.hasArg())  {	  if(value!=    null    &&    currentOption.hasArg())    {    	non-compiled	[CE]  	3	None	replace
50	[BUG]  [BUGGY]  PosixParser  currentOption  =(PosixParser)tokens.get(value  -  1);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  void  process(String  value)  {    [BUGGY]  PosixParser  currentOption  =(PosixParser)tokens.get(value  -  1);  [BUGGY]    if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	PosixParser  currentOption  =(PosixParser)tokens.get(value  -  1);	      PosixParser    currentOption    =(PosixParser)tokens.get(value);    	non-compiled	[CE]  	12	None	replace
51	[BUG]  [BUGGY]  if(options.getOption(value)!=  null)  {  Options  currentOption  =  options.getOption(value);  }  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  void  process(String  value)  {    [BUGGY]  if(options.getOption(value)!=  null)  {  Options  currentOption  =  options.getOption(value);  }  [BUGGY]    if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	if(options.getOption(value)!=  null)  {  Options  currentOption  =  options.getOption(value);  }	      Options    currentOption    =    options.getOption(value);    	non-compiled	[CE]  	10	None	replace
52	[BUG]  [BUGGY]  if(options.getOption(value)!=  null)  {  Options  currentOption  =  options.getOption(value);  if(currentOption!=  null)  {  tokens.add(value);  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  void  process(String  value)  {    [BUGGY]  if(options.getOption(value)!=  null)  {  Options  currentOption  =  options.getOption(value);  if(currentOption!=  null)  {  tokens.add(value);  }  [BUGGY]    if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	if(options.getOption(value)!=  null)  {  Options  currentOption  =  options.getOption(value);  if(currentOption!=  null)  {  tokens.add(value);  }	      Options    currentOption    =    options.getOption(value);    	non-compiled	[CE]  	10	None	replace
53	[BUG]  [BUGGY]  if(currentOption!=  null  &&  currentOption.hasValues())  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  void  process(String  value)  {    [BUGGY]  if(currentOption!=  null  &&  currentOption.hasValues())  {  [BUGGY]    {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	if(currentOption!=  null  &&  currentOption.hasValues())  {	  if(currentOption!=    null    &&    currentOption.hasArgs())    {    	non-compiled	[CE]  	14	None	replace
54	[BUG]  [BUGGY]  Thread.currentThread().interrupt();  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  void  process(String  value)  {    [BUGGY]  Thread.currentThread().interrupt();  [BUGGY]    if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	Thread.currentThread().interrupt();	      if(!stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	6	None	replace
55	[BUG]  [BUGGY]  While(!stopAtNonOption)  {  throw  new  IllegalArgumentException( " ".equals(value));  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  void  process(String  value)  {    [BUGGY]  While(!stopAtNonOption)  {  throw  new  IllegalArgumentException( " ".equals(value));  }  [BUGGY]    if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	While(!stopAtNonOption)  {  throw  new  IllegalArgumentException( " ".equals(value));  }	      if(!stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	6	None	replace
56	[BUG]  [BUGGY]  Option  currentOption  =  option.process(value);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  void  process(String  value)  {    [BUGGY]  Option  currentOption  =  option.process(value);  [BUGGY]    if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	Option  currentOption  =  option.process(value);	      Option    currentOption    =    option.getOption(value);    	non-compiled	[CE]  	15	None	replace
57	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(value,  null);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  void  process(String  value)  {    [BUGGY]  Option  currentOption  =  options.getOption(value,  null);  [BUGGY]    if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	Option  currentOption  =  options.getOption(value,  null);	      Option    currentOption    =    options.getOption(value);    	non-compiled	[CE]  	5	None	replace
58	[BUG]  [BUGGY]  safeMultiply(getValue(),  value)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  void  process(String  value)  {    [BUGGY]  safeMultiply(getValue(),  value)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	safeMultiply(getValue(),  value)  {  throw  new  IllegalStateException( " ");  }	      if(!stopAtNonOption)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	8	None	replace
59	[BUG]  [BUGGY]  While(!stopAtNonOption)  {  throw  new  IllegalStateException( " ".equals(value));  }  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  void  process(String  value)  {    [BUGGY]  While(!stopAtNonOption)  {  throw  new  IllegalStateException( " ".equals(value));  }  [BUGGY]    if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	While(!stopAtNonOption)  {  throw  new  IllegalStateException( " ".equals(value));  }	      if(!stopAtNonOption)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	8	None	replace
