bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(token);  if(currentOption!=  null)  {  tokens.add(currentOption);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {    [BUGGY]  Option  currentOption  =  options.getOption(token);  if(currentOption!=  null)  {  tokens.add(currentOption);  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	Option  currentOption  =  options.getOption(token);  if(currentOption!=  null)  {  tokens.add(currentOption);  }	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
2	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(tokenLength);  tokens.add(currentOption);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {    [BUGGY]  Option  currentOption  =  options.getOption(tokenLength);  tokens.add(currentOption);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	Option  currentOption  =  options.getOption(tokenLength);  tokens.add(currentOption);	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
3	[BUG]  [BUGGY]  accept(token,  stopAtNonOption,  arguments);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {    [BUGGY]  accept(token,  stopAtNonOption,  arguments);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	accept(token,  stopAtNonOption,  arguments);	  accept(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
4	[BUG]  [BUGGY]  accept(arguments,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {    [BUGGY]  accept(arguments,  stopAtNonOption);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	accept(arguments,  stopAtNonOption);	  accept(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
5	[BUG]  [BUGGY]  accept(options,  token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {    [BUGGY]  accept(options,  token,  stopAtNonOption);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	accept(options,  token,  stopAtNonOption);	  accept(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
6	[BUG]  [BUGGY]  accept(token,  stopAtNonOption,  arguments.length);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {    [BUGGY]  accept(token,  stopAtNonOption,  arguments.length);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	accept(token,  stopAtNonOption,  arguments.length);	  accept(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
7	[BUG]  [BUGGY]  tokens.add(token,  stopAtNonOption,  options);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {    [BUGGY]  tokens.add(token,  stopAtNonOption,  options);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	tokens.add(token,  stopAtNonOption,  options);	  burstToken(token,    stopAtNonOption,    options);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
8	[BUG]  [BUGGY]  acceptToken(token,  stopAtNonOption,  options);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {    [BUGGY]  acceptToken(token,  stopAtNonOption,  options);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	acceptToken(token,  stopAtNonOption,  options);	  burstToken(token,    stopAtNonOption,    options);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
9	[BUG]  [BUGGY]  burstToken(token,  options);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {    [BUGGY]  burstToken(token,  options);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	burstToken(token,  options);	  burstToken(token,    stopAtNonOption,    options);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
10	[BUG]  [BUGGY]  Iterator  iter  =  options.keySet().iterator();  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {    [BUGGY]  Iterator  iter  =  options.keySet().iterator();  [BUGGY]    burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	Iterator  iter  =  options.keySet().iterator();	      iter.remove();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
11	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {    [BUGGY]  Option  currentOption  =  options.getOption(token,  stopAtNonOption);  [BUGGY]    burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	Option  currentOption  =  options.getOption(token,  stopAtNonOption);	      Option    currentOption    =    options.getOption(token);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
12	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(token)+  1;  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {    [BUGGY]  Option  currentOption  =  options.getOption(token)+  1;  [BUGGY]    burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	Option  currentOption  =  options.getOption(token)+  1;	      Option    currentOption    =    options.getOption(token);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
13	[BUG]  [BUGGY]  tokens.add(token,  stopAtNonOption  &&  arguments.length  >  0);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {    [BUGGY]  tokens.add(token,  stopAtNonOption  &&  arguments.length  >  0);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	tokens.add(token,  stopAtNonOption  &&  arguments.length  >  0);	  tokens.add(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
14	[BUG]  [BUGGY]  tokens.add(token,  stopAtNonOption  +  1);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {    [BUGGY]  tokens.add(token,  stopAtNonOption  +  1);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	tokens.add(token,  stopAtNonOption  +  1);	  tokens.add(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
15	[BUG]  [BUGGY]  tokens.add(token,  stopAtNonOption)+  1;  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {    [BUGGY]  tokens.add(token,  stopAtNonOption)+  1;  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	tokens.add(token,  stopAtNonOption)+  1;	  tokens.add(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
16	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.values().iterator();  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {    [BUGGY]  Iterator  <  String>  iter  =  options.values().iterator();  [BUGGY]    burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	Iterator  <  String>  iter  =  options.values().iterator();	      Iterator    <    String>    iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	7	None	replace
17	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  arguments.iterator();  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {    [BUGGY]  Iterator  <  String>  iter  =  arguments.iterator();  [BUGGY]    burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	Iterator  <  String>  iter  =  arguments.iterator();	      Iterator    <    String>    iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	7	None	replace
18	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  currentOption.iterator();  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {    [BUGGY]  Iterator  <  String>  iter  =  currentOption.iterator();  [BUGGY]    burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	Iterator  <  String>  iter  =  currentOption.iterator();	      Iterator    <    String>    iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	7	None	replace
19	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  tokens.add(currentOption);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {    [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  tokens.add(currentOption);  }  [BUGGY]    burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  tokens.add(currentOption);  }	      Option    currentOption    =    options.getOption(token);    tokens.add(currentOption);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
20	[BUG]  [BUGGY]  tokens.add(options.getOption(token));  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {    [BUGGY]  tokens.add(options.getOption(token));  [BUGGY]    burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	tokens.add(options.getOption(token));	      Option    currentOption    =    options.getOption(token);    tokens.add(currentOption);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
21	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(tokenLength  +  1);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {    [BUGGY]  Option  currentOption  =  options.getOption(tokenLength  +  1);  [BUGGY]    burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	Option  currentOption  =  options.getOption(tokenLength  +  1);	      Option    currentOption    =    options.getOption(tokenLength);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
22	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(tokenLength  -  1);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {    [BUGGY]  Option  currentOption  =  options.getOption(tokenLength  -  1);  [BUGGY]    burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	Option  currentOption  =  options.getOption(tokenLength  -  1);	      Option    currentOption    =    options.getOption(tokenLength);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
23	[BUG]  [BUGGY]  burstToken(token,  options.stopAtNonOption,  arguments);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {    [BUGGY]  burstToken(token,  options.stopAtNonOption,  arguments);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	burstToken(token,  options.stopAtNonOption,  arguments);	  burstToken(token,    stopAtNonOption,    arguments);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
24	[BUG]  [BUGGY]  acceptToken(token,  stopAtNonOption,  arguments);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {    [BUGGY]  acceptToken(token,  stopAtNonOption,  arguments);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	acceptToken(token,  stopAtNonOption,  arguments);	  burstToken(token,    stopAtNonOption,    arguments);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
25	[BUG]  [BUGGY]  tokens.add(token,  stopAtNonOption,  arguments);  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {    [BUGGY]  tokens.add(token,  stopAtNonOption,  arguments);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	tokens.add(token,  stopAtNonOption,  arguments);	  burstToken(token,    stopAtNonOption,    arguments);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
26	[BUG]  [BUGGY]  tokens.add(tokenLength);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {    [BUGGY]  tokens.add(tokenLength);  [BUGGY]    burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	tokens.add(tokenLength);	      tokens.add(token);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
27	[BUG]  [BUGGY]  tokens.add( "n ");  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {    [BUGGY]  tokens.add( "n ");  [BUGGY]    burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	tokens.add( "n ");	      tokens.add(token);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
28	[BUG]  [BUGGY]  Iterator  iter  =  arguments.iterator();  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {    [BUGGY]  Iterator  iter  =  arguments.iterator();  [BUGGY]    burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	Iterator  iter  =  arguments.iterator();	      Iterator    iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	10	None	replace
29	[BUG]  [BUGGY]  Iterator  iter  =  tokens.iterator();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {    [BUGGY]  Iterator  iter  =  tokens.iterator();  [BUGGY]    burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	Iterator  iter  =  tokens.iterator();	      Iterator    iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	10	None	replace
30	[BUG]  [BUGGY]  Iterator  iter  =  options.values().iterator();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {    [BUGGY]  Iterator  iter  =  options.values().iterator();  [BUGGY]    burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	Iterator  iter  =  options.values().iterator();	      Iterator    iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	10	None	replace
31	[BUG]  [BUGGY]  acceptToken(token,  options.stopAtNonOption);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {    [BUGGY]  acceptToken(token,  options.stopAtNonOption);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	acceptToken(token,  options.stopAtNonOption);	  acceptToken(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
32	[BUG]  [BUGGY]  acceptToken(token,  options);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {    [BUGGY]  acceptToken(token,  options);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	acceptToken(token,  options);	  acceptToken(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
33	[BUG]  [BUGGY]  burstToken(token,  stopAtNonOption,  arguments,  eatTheRest);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {    [BUGGY]  burstToken(token,  stopAtNonOption,  arguments,  eatTheRest);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	burstToken(token,  stopAtNonOption,  arguments,  eatTheRest);	  burstToken(token,    stopAtNonOption,    arguments);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
34	[BUG]  [BUGGY]  burstToken(token,  stopAtNonOption,  arguments,  tokenLength);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {    [BUGGY]  burstToken(token,  stopAtNonOption,  arguments,  tokenLength);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	burstToken(token,  stopAtNonOption,  arguments,  tokenLength);	  burstToken(token,    stopAtNonOption,    arguments);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
35	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.iterator();  tokens.add(token);  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {    [BUGGY]  Iterator  <  String>  iter  =  options.iterator();  tokens.add(token);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	Iterator  <  String>  iter  =  options.iterator();  tokens.add(token);	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
36	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(tokenLength,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {    [BUGGY]  Option  currentOption  =  options.getOption(tokenLength,  stopAtNonOption);  [BUGGY]    burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	Option  currentOption  =  options.getOption(tokenLength,  stopAtNonOption);	      Option    currentOption    =    options.getOption(tokenLength);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
37	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.keySet().iterator();  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {    [BUGGY]  Iterator  <  String>  iter  =  options.keySet().iterator();  [BUGGY]    burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	Iterator  <  String>  iter  =  options.keySet().iterator();	      Iterator    <    String>    iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	7	None	replace
38	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  currentOption.options.iterator();  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {    [BUGGY]  Iterator  <  String>  iter  =  currentOption.options.iterator();  [BUGGY]    burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	Iterator  <  String>  iter  =  currentOption.options.iterator();	      Iterator    <    String>    iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	7	None	replace
39	[BUG]  [BUGGY]  iter.add(token);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {    [BUGGY]  iter.add(token);  [BUGGY]    burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	iter.add(token);	      iter.remove();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
40	[BUG]  [BUGGY]  Iterator  iter  =  currentOption.options.iterator();  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {    [BUGGY]  Iterator  iter  =  currentOption.options.iterator();  [BUGGY]    burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	Iterator  iter  =  currentOption.options.iterator();	      Iterator    iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	10	None	replace
41	[BUG]  [BUGGY]  accept(token,  stopAtNonOption,  options);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {    [BUGGY]  accept(token,  stopAtNonOption,  options);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	accept(token,  stopAtNonOption,  options);	  accept(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
42	[BUG]  [BUGGY]  accept(token,  stopAtNonOption,  options.size());  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {    [BUGGY]  accept(token,  stopAtNonOption,  options.size());  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	accept(token,  stopAtNonOption,  options.size());	  accept(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
43	[BUG]  [BUGGY]  acceptToken(token,  stopAtNonOption,  options.size());  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {    [BUGGY]  acceptToken(token,  stopAtNonOption,  options.size());  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	acceptToken(token,  stopAtNonOption,  options.size());	  acceptToken(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
44	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  tokens.iterator();  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {    [BUGGY]  Iterator  <  String>  iter  =  tokens.iterator();  [BUGGY]    burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	Iterator  <  String>  iter  =  tokens.iterator();	      Iterator    <    String>    iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	7	None	replace
45	[BUG]  [BUGGY]  tokens.add( "- ");  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {    [BUGGY]  tokens.add( "- ");  [BUGGY]    burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	tokens.add( "- ");	      tokens.add(token);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
46	[BUG]  [BUGGY]  accept(throwAtNonOption,  token);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {    [BUGGY]  accept(throwAtNonOption,  token);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	accept(throwAtNonOption,  token);	  accept(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
47	[BUG]  [BUGGY]  accept(storage,  token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {    [BUGGY]  accept(storage,  token,  stopAtNonOption);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	accept(storage,  token,  stopAtNonOption);	  accept(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
48	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.iterator();  while(iter.hasNext())  {  tokens.add(iter.next());  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {    [BUGGY]  Iterator  <  String>  iter  =  options.iterator();  while(iter.hasNext())  {  tokens.add(iter.next());  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	Iterator  <  String>  iter  =  options.iterator();  while(iter.hasNext())  {  tokens.add(iter.next());	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
49	[BUG]  [BUGGY]  burstToken(token,  arguments,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {    [BUGGY]  burstToken(token,  arguments,  stopAtNonOption);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	burstToken(token,  arguments,  stopAtNonOption);	  burstToken(token,    stopAtNonOption,    arguments);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
50	[BUG]  [BUGGY]  burstToken(token,  stopAtNonOption,  arguments,  options);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {    [BUGGY]  burstToken(token,  stopAtNonOption,  arguments,  options);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	burstToken(token,  stopAtNonOption,  arguments,  options);	  burstToken(token,    stopAtNonOption,    arguments);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
51	[BUG]  [BUGGY]  tokens.add(token,  stopAtNonOption  &&  arguments.length);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {    [BUGGY]  tokens.add(token,  stopAtNonOption  &&  arguments.length);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	tokens.add(token,  stopAtNonOption  &&  arguments.length);	  tokens.add(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
52	[BUG]  [BUGGY]  Iterator  iter  =  options.getOptions().iterator();  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {    [BUGGY]  Iterator  iter  =  options.getOptions().iterator();  [BUGGY]    burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	Iterator  iter  =  options.getOptions().iterator();	      iter.remove();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
53	[BUG]  [BUGGY]  burstToken(token,  options,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {    [BUGGY]  burstToken(token,  options,  stopAtNonOption);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	burstToken(token,  options,  stopAtNonOption);	  burstToken(token,    stopAtNonOption,    options);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
