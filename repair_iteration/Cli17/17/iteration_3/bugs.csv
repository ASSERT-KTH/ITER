bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Integer  tokenLength  =  options.get(token.length()  -  1);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Integer  tokenLength  =  options.get(token.length()  -  1);  [BUGGY]      int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	Integer  tokenLength  =  options.get(token.length()  -  1);	  Integer    tokenLength    =    options.get(token.length());    	non-compiled	[CE]  <identifier>  expected	4	None	replace
2	[BUG]  [BUGGY]  Integer  tokenLength  =  options.get(token.length()  -  2);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Integer  tokenLength  =  options.get(token.length()  -  2);  [BUGGY]      int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	Integer  tokenLength  =  options.get(token.length()  -  2);	  Integer    tokenLength    =    options.get(token.length());    	non-compiled	[CE]  <identifier>  expected	4	None	replace
3	[BUG]  [BUGGY]  Integer  tokenLength  =  options.get(token.length()  +  1);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Integer  tokenLength  =  options.get(token.length()  +  1);  [BUGGY]      int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	Integer  tokenLength  =  options.get(token.length()  +  1);	  Integer    tokenLength    =    options.get(token.length());    	non-compiled	[CE]  <identifier>  expected	4	None	replace
4	[BUG]  [BUGGY]  Integer  tokenLength  =  options.get(token.length()  +  2);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Integer  tokenLength  =  options.get(token.length()  +  2);  [BUGGY]      int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	Integer  tokenLength  =  options.get(token.length()  +  2);	  Integer    tokenLength    =    options.get(token.length());    	non-compiled	[CE]  <identifier>  expected	4	None	replace
5	[BUG]  [BUGGY]  int  tokenLength  =  argument.length();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  int  tokenLength  =  argument.length();  [BUGGY]        if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	int  tokenLength  =  argument.length();	  int    tokenLength    =    arguments.length()    -    2;    	non-compiled	[CE]  <identifier>  expected	11	None	replace
6	[BUG]  [BUGGY]  Integer  tokenLength  =  arguments.length();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Integer  tokenLength  =  arguments.length();  [BUGGY]        if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	Integer  tokenLength  =  arguments.length();	  int    tokenLength    =    arguments.length()    -    2;    	non-compiled	[CE]  <identifier>  expected	11	None	replace
7	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  tokens.iterator();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Iterator  <  String>  iter  =  tokens.iterator();  [BUGGY]      int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	Iterator  <  String>  iter  =  tokens.iterator();	  Iterator    <    String>    iter    =    currentOption.iterator();    	non-compiled	[CE]  <identifier>  expected	24	None	replace
8	[BUG]  [BUGGY]  Integer  tokenLength  =  options.get(token.length  -  1);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Integer  tokenLength  =  options.get(token.length  -  1);  [BUGGY]      int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	Integer  tokenLength  =  options.get(token.length  -  1);	  Integer    tokenLength    =    options.get(token.length);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
9	[BUG]  [BUGGY]  Int  tokenLength  =  arguments.length();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Int  tokenLength  =  arguments.length();  [BUGGY]        if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	Int  tokenLength  =  arguments.length();	  Int    tokenLength    =    token.length();    	non-compiled	[CE]  <identifier>  expected	33	None	replace
10	[BUG]  [BUGGY]  Int  tokenLength  =  token.length()  -  2;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Int  tokenLength  =  token.length()  -  2;  [BUGGY]        if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	Int  tokenLength  =  token.length()  -  2;	  Int    tokenLength    =    token.length();    	non-compiled	[CE]  <identifier>  expected	33	None	replace
11	[BUG]  [BUGGY]  Integer  tokenLength  =  token.length()  -  1;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Integer  tokenLength  =  token.length()  -  1;  [BUGGY]        if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	Integer  tokenLength  =  token.length()  -  1;	  Int    tokenLength    =    token.length();    	non-compiled	[CE]  <identifier>  expected	33	None	replace
12	[BUG]  [BUGGY]  Integer  token  =  options.getOption(token)/  stopAtNonOption;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Integer  token  =  options.getOption(token)/  stopAtNonOption;  [BUGGY]      int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	Integer  token  =  options.getOption(token)/  stopAtNonOption;	  Integer    token    =    options.getOption(token)+    stopAtNonOption;    	non-compiled	[CE]  <identifier>  expected	44	None	replace
13	[BUG]  [BUGGY]  Integer  token  =  options.getOption(token)+  arguments;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Integer  token  =  options.getOption(token)+  arguments;  [BUGGY]      int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	Integer  token  =  options.getOption(token)+  arguments;	  Integer    token    =    options.getOption(token)+    stopAtNonOption;    	non-compiled	[CE]  <identifier>  expected	44	None	replace
14	[BUG]  [BUGGY]  Integer  token  =  options.getOption(token)+  2;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Integer  token  =  options.getOption(token)+  2;  [BUGGY]      int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	Integer  token  =  options.getOption(token)+  2;	  Integer    token    =    options.getOption(token)+    stopAtNonOption;    	non-compiled	[CE]  <identifier>  expected	44	None	replace
15	[BUG]  [BUGGY]  Integer  tokenLength  =  options.get(0).getOptionLength();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Integer  tokenLength  =  options.get(0).getOptionLength();  [BUGGY]      int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	Integer  tokenLength  =  options.get(0).getOptionLength();	  Integer    tokenLength    =    options.get(token).getOptionLength();    	non-compiled	[CE]  <identifier>  expected	30	None	replace
16	[BUG]  [BUGGY]  Integer  tokenLength  =  options.get(token).getValueLength();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Integer  tokenLength  =  options.get(token).getValueLength();  [BUGGY]      int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	Integer  tokenLength  =  options.get(token).getValueLength();	  Integer    tokenLength    =    options.get(token).getOptionLength();    	non-compiled	[CE]  <identifier>  expected	30	None	replace
17	[BUG]  [BUGGY]  Integer  tokenLength  =  options.get(token).getSingleHyphen();  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Integer  tokenLength  =  options.get(token).getSingleHyphen();  [BUGGY]      int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	Integer  tokenLength  =  options.get(token).getSingleHyphen();	  Integer    tokenLength    =    options.get(token).getOptionLength();    	non-compiled	[CE]  <identifier>  expected	30	None	replace
18	[BUG]  [BUGGY]  Integer  tokenLength  =  options.get(token).getKey();  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Integer  tokenLength  =  options.get(token).getKey();  [BUGGY]      int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	Integer  tokenLength  =  options.get(token).getKey();	  Integer    tokenLength    =    options.get(token).getOptionLength();    	non-compiled	[CE]  <identifier>  expected	30	None	replace
19	[BUG]  [BUGGY]  Integer  tokenLength  =  options.getIntValue(token,  1);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Integer  tokenLength  =  options.getIntValue(token,  1);  [BUGGY]      int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	Integer  tokenLength  =  options.getIntValue(token,  1);	  Integer    tokenLength    =    options.getIntValue(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
20	[BUG]  [BUGGY]  Integer  tokenLength  =  options.getIntValue(token,  2);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Integer  tokenLength  =  options.getIntValue(token,  2);  [BUGGY]      int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	Integer  tokenLength  =  options.getIntValue(token,  2);	  Integer    tokenLength    =    options.getIntValue(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
21	[BUG]  [BUGGY]  Integer  tokenLength  =  options.getIntValue(token,  0);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Integer  tokenLength  =  options.getIntValue(token,  0);  [BUGGY]      int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	Integer  tokenLength  =  options.getIntValue(token,  0);	  Integer    tokenLength    =    options.getIntValue(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
22	[BUG]  [BUGGY]  Integer  tokenLength  =  options.getIntValue(token,  stopAtNonOption,  arguments);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Integer  tokenLength  =  options.getIntValue(token,  stopAtNonOption,  arguments);  [BUGGY]      int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	Integer  tokenLength  =  options.getIntValue(token,  stopAtNonOption,  arguments);	  Integer    tokenLength    =    options.getIntValue(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
23	[BUG]  [BUGGY]  Integer  tokenLength  =  options.get(0).intValue();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Integer  tokenLength  =  options.get(0).intValue();  [BUGGY]      int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	Integer  tokenLength  =  options.get(0).intValue();	  Integer    tokenLength    =    options.get(0);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
24	[BUG]  [BUGGY]  Integer  tokenLength  =  options.get(1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Integer  tokenLength  =  options.get(1);  [BUGGY]      int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	Integer  tokenLength  =  options.get(1);	  Integer    tokenLength    =    options.get(0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
25	[BUG]  [BUGGY]  int  tokenLength  =  arguments.length  /  2;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  int  tokenLength  =  arguments.length  /  2;  [BUGGY]        if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	int  tokenLength  =  arguments.length  /  2;	  int    tokenLength    =    arguments.length    -    2;    	non-compiled	[CE]  <identifier>  expected	26	None	replace
26	[BUG]  [BUGGY]  Iterator  <  Option>  iter  =  currentOption.iterator();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Iterator  <  Option>  iter  =  currentOption.iterator();  [BUGGY]      int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	Iterator  <  Option>  iter  =  currentOption.iterator();	  Iterator    iter    =    currentOption.iterator();    	non-compiled	[CE]  <identifier>  expected	3	None	replace
27	[BUG]  [BUGGY]  Iterator  iter  =  this.currentOption.iterator();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Iterator  iter  =  this.currentOption.iterator();  [BUGGY]      int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	Iterator  iter  =  this.currentOption.iterator();	  Iterator    iter    =    currentOption.iterator();    	non-compiled	[CE]  <identifier>  expected	3	None	replace
28	[BUG]  [BUGGY]  tokens.add( "- "  +  token);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  tokens.add( "- "  +  token);  [BUGGY]      int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	tokens.add( "- "  +  token);	  tokens.add(   "-   ");    	non-compiled	[CE]  <identifier>  expected	14	None	replace
29	[BUG]  [BUGGY]  int  tokenLength  =  arguments.length  -  1  +  1;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  int  tokenLength  =  arguments.length  -  1  +  1;  [BUGGY]        if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	int  tokenLength  =  arguments.length  -  1  +  1;	  int    tokenLength    =    arguments.length    -    1;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
30	[BUG]  [BUGGY]  int  tokenLength  =  arguments.length  /  1;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  int  tokenLength  =  arguments.length  /  1;  [BUGGY]        if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	int  tokenLength  =  arguments.length  /  1;	  int    tokenLength    =    arguments.length    -    1;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
31	[BUG]  [BUGGY]  Integer  token  =  options.getOption(token,  stopAtNonOption,  arguments);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Integer  token  =  options.getOption(token,  stopAtNonOption,  arguments);  [BUGGY]      int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	Integer  token  =  options.getOption(token,  stopAtNonOption,  arguments);	  Integer    token    =    options.getOption(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
32	[BUG]  [BUGGY]  Integer  token  =  options.getOption(token,  0);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Integer  token  =  options.getOption(token,  0);  [BUGGY]      int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	Integer  token  =  options.getOption(token,  0);	  Integer    token    =    options.getOption(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
33	[BUG]  [BUGGY]  Integer  token  =  options.getOption(token,  1);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Integer  token  =  options.getOption(token,  1);  [BUGGY]      int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	Integer  token  =  options.getOption(token,  1);	  Integer    token    =    options.getOption(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
34	[BUG]  [BUGGY]  Integer  token  =  options.getOption(token,  2);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Integer  token  =  options.getOption(token,  2);  [BUGGY]      int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	Integer  token  =  options.getOption(token,  2);	  Integer    token    =    options.getOption(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
35	[BUG]  [BUGGY]  Integer  token  =  options.get(token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Integer  token  =  options.get(token,  stopAtNonOption);  [BUGGY]      int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	Integer  token  =  options.get(token,  stopAtNonOption);	  Integer    token    =    options.get(token);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
36	[BUG]  [BUGGY]  Integer  token  =  options.get(0);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Integer  token  =  options.get(0);  [BUGGY]      int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	Integer  token  =  options.get(0);	  Integer    token    =    options.get(token);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
37	[BUG]  [BUGGY]  Integer  token  =  options.get(token)+  1;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Integer  token  =  options.get(token)+  1;  [BUGGY]      int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	Integer  token  =  options.get(token)+  1;	  Integer    token    =    options.get(token);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
38	[BUG]  [BUGGY]  tokenLength  =  token.length()  -  1;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  tokenLength  =  token.length()  -  1;  [BUGGY]        if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	tokenLength  =  token.length()  -  1;	  tokenLength    =    token.length();    	non-compiled	[CE]  <identifier>  expected	19	None	replace
39	[BUG]  [BUGGY]  tokenLength  =  token.length()  -  2;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  tokenLength  =  token.length()  -  2;  [BUGGY]        if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	tokenLength  =  token.length()  -  2;	  tokenLength    =    token.length();    	non-compiled	[CE]  <identifier>  expected	19	None	replace
40	[BUG]  [BUGGY]  tokenLength  =  token.length()  +  1;  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  tokenLength  =  token.length()  +  1;  [BUGGY]        if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	tokenLength  =  token.length()  +  1;	  tokenLength    =    token.length();    	non-compiled	[CE]  <identifier>  expected	19	None	replace
41	[BUG]  [BUGGY]  tokenLength  =  token.length()  +  2;  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  tokenLength  =  token.length()  +  2;  [BUGGY]        if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	tokenLength  =  token.length()  +  2;	  tokenLength    =    token.length();    	non-compiled	[CE]  <identifier>  expected	19	None	replace
42	[BUG]  [BUGGY]  Integer  token  =  options.getOption(token)/  1;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Integer  token  =  options.getOption(token)/  1;  [BUGGY]      int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	Integer  token  =  options.getOption(token)/  1;	  Integer    token    =    options.getOption(token)+    1;    	non-compiled	[CE]  <identifier>  expected	47	None	replace
43	[BUG]  [BUGGY]  Integer  token  =  options.getOption(token)-  1;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Integer  token  =  options.getOption(token)-  1;  [BUGGY]      int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	Integer  token  =  options.getOption(token)-  1;	  Integer    token    =    options.getOption(token)+    1;    	non-compiled	[CE]  <identifier>  expected	47	None	replace
44	[BUG]  [BUGGY]  Integer  tokenLength  =  token.length()  -  2;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Integer  tokenLength  =  token.length()  -  2;  [BUGGY]        if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	Integer  tokenLength  =  token.length()  -  2;	  Integer    tokenLength    =    token.length();    	non-compiled	[CE]  <identifier>  expected	21	None	replace
45	[BUG]  [BUGGY]  Integer  tokenLength  =  token.length()  +  1;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Integer  tokenLength  =  token.length()  +  1;  [BUGGY]        if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	Integer  tokenLength  =  token.length()  +  1;	  Integer    tokenLength    =    token.length();    	non-compiled	[CE]  <identifier>  expected	21	None	replace
46	[BUG]  [BUGGY]  Integer  token  =  options.getIntValue(token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Integer  token  =  options.getIntValue(token,  stopAtNonOption);  [BUGGY]      int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	Integer  token  =  options.getIntValue(token,  stopAtNonOption);	  Integer    token    =    options.getIntValue(token);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
47	[BUG]  [BUGGY]  Integer  token  =  options.getIntValue(token)+  1;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Integer  token  =  options.getIntValue(token)+  1;  [BUGGY]      int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	Integer  token  =  options.getIntValue(token)+  1;	  Integer    token    =    options.getIntValue(token);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
48	[BUG]  [BUGGY]  Integer  token  =  options.getLongValue(token);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Integer  token  =  options.getLongValue(token);  [BUGGY]      int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	Integer  token  =  options.getLongValue(token);	  Integer    token    =    options.getIntValue(token);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
49	[BUG]  [BUGGY]  Integer  tokenLength  =  options.get(token)/  1;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Integer  tokenLength  =  options.get(token)/  1;  [BUGGY]      int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	Integer  tokenLength  =  options.get(token)/  1;	  Integer    tokenLength    =    options.get(token)+    1;    	non-compiled	[CE]  <identifier>  expected	40	None	replace
50	[BUG]  [BUGGY]  Integer  tokenLength  =  options.get(token)+  2;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Integer  tokenLength  =  options.get(token)+  2;  [BUGGY]      int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	Integer  tokenLength  =  options.get(token)+  2;	  Integer    tokenLength    =    options.get(token)+    1;    	non-compiled	[CE]  <identifier>  expected	40	None	replace
51	[BUG]  [BUGGY]  Integer  tokenLength  =  options.get(token)-  1;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Integer  tokenLength  =  options.get(token)-  1;  [BUGGY]      int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	Integer  tokenLength  =  options.get(token)-  1;	  Integer    tokenLength    =    options.get(token)+    1;    	non-compiled	[CE]  <identifier>  expected	40	None	replace
52	[BUG]  [BUGGY]  Iterator  iter  =  tokens.iterator();  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Iterator  iter  =  tokens.iterator();  [BUGGY]      int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	Iterator  iter  =  tokens.iterator();	  Iterator    iter    =    this.options.iterator();    	non-compiled	[CE]  <identifier>  expected	49	None	replace
53	[BUG]  [BUGGY]  tokens.add(token)+  arguments;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  tokens.add(token)+  arguments;  [BUGGY]      int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	tokens.add(token)+  arguments;	  tokens.add(token)+    stopAtNonOption;    	non-compiled	[CE]  <identifier>  expected	45	None	replace
54	[BUG]  [BUGGY]  tokens.add(token)/  stopAtNonOption;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  tokens.add(token)/  stopAtNonOption;  [BUGGY]      int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	tokens.add(token)/  stopAtNonOption;	  tokens.add(token)+    stopAtNonOption;    	non-compiled	[CE]  <identifier>  expected	45	None	replace
55	[BUG]  [BUGGY]  tokens.add(token)+  eatTheRest;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  tokens.add(token)+  eatTheRest;  [BUGGY]      int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	tokens.add(token)+  eatTheRest;	  tokens.add(token)+    stopAtNonOption;    	non-compiled	[CE]  <identifier>  expected	45	None	replace
56	[BUG]  [BUGGY]  Integer  token  =  options.getOptionToken(token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Integer  token  =  options.getOptionToken(token,  stopAtNonOption);  [BUGGY]      int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	Integer  token  =  options.getOptionToken(token,  stopAtNonOption);	  Integer    token    =    options.getOptionToken(token);    	non-compiled	[CE]  <identifier>  expected	43	None	replace
57	[BUG]  [BUGGY]  int  tokenLength  =  arguments.length  +  2;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  int  tokenLength  =  arguments.length  +  2;  [BUGGY]        if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	int  tokenLength  =  arguments.length  +  2;	  int    tokenLength    =    arguments.length    +    1;    	non-compiled	[CE]  <identifier>  expected	27	None	replace
58	[BUG]  [BUGGY]  token  =(token.startsWith( "- ")||  token.startsWith( "- "))?  tokenLength  :  null;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  token  =(token.startsWith( "- ")||  token.startsWith( "- "))?  tokenLength  :  null;  [BUGGY]        if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	token  =(token.startsWith( "- ")||  token.startsWith( "- "))?  tokenLength  :  null;	  token    =(token.startsWith(   "-   ")||    token.startsWith(   "-   "))?    token    :    null;    	non-compiled	[CE]  <identifier>  expected	20	None	replace
59	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  currentOption.arguments.iterator();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Iterator  <  String>  iter  =  currentOption.arguments.iterator();  [BUGGY]      int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	Iterator  <  String>  iter  =  currentOption.arguments.iterator();	  Iterator    <    String>    iter    =    this.arguments.iterator();    	non-compiled	[CE]  <identifier>  expected	25	None	replace
60	[BUG]  [BUGGY]  int  tokenLength  =  options.length  -  1;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  int  tokenLength  =  options.length  -  1;  [BUGGY]        if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	int  tokenLength  =  options.length  -  1;	  int    tokenLength    =    options.length;    	non-compiled	[CE]  <identifier>  expected	38	None	replace
61	[BUG]  [BUGGY]  int  tokenLength  =  options.length  -  2;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  int  tokenLength  =  options.length  -  2;  [BUGGY]        if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	int  tokenLength  =  options.length  -  2;	  int    tokenLength    =    options.length;    	non-compiled	[CE]  <identifier>  expected	38	None	replace
62	[BUG]  [BUGGY]  tokens.add(token)+  2;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  tokens.add(token)+  2;  [BUGGY]      int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	tokens.add(token)+  2;	  tokens.add(token)+    1;    	non-compiled	[CE]  <identifier>  expected	15	None	replace
63	[BUG]  [BUGGY]  tokens.add(token)/  1;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  tokens.add(token)/  1;  [BUGGY]      int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	tokens.add(token)/  1;	  tokens.add(token)+    1;    	non-compiled	[CE]  <identifier>  expected	15	None	replace
64	[BUG]  [BUGGY]  tokens.add(token)+  0;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  tokens.add(token)+  0;  [BUGGY]      int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	tokens.add(token)+  0;	  tokens.add(token)+    1;    	non-compiled	[CE]  <identifier>  expected	15	None	replace
65	[BUG]  [BUGGY]  Integer  tokenLength  =  options.getValueLength()  +  1;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Integer  tokenLength  =  options.getValueLength()  +  1;  [BUGGY]      int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	Integer  tokenLength  =  options.getValueLength()  +  1;	  Integer    tokenLength    =    options.getValueLength();    	non-compiled	[CE]  <identifier>  expected	50	None	replace
66	[BUG]  [BUGGY]  Integer  tokenLength  =  options.getIntValueLength();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Integer  tokenLength  =  options.getIntValueLength();  [BUGGY]      int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	Integer  tokenLength  =  options.getIntValueLength();	  Integer    tokenLength    =    options.getValueLength();    	non-compiled	[CE]  <identifier>  expected	50	None	replace
67	[BUG]  [BUGGY]  Integer  tokenLength  =  options.getValueLength()  -  1;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Integer  tokenLength  =  options.getValueLength()  -  1;  [BUGGY]      int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	Integer  tokenLength  =  options.getValueLength()  -  1;	  Integer    tokenLength    =    options.getValueLength();    	non-compiled	[CE]  <identifier>  expected	50	None	replace
68	[BUG]  [BUGGY]  Iterator  <  Option>  iter  =  currentOptions.iterator();  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Iterator  <  Option>  iter  =  currentOptions.iterator();  [BUGGY]      int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	Iterator  <  Option>  iter  =  currentOptions.iterator();	  Iterator    iter    =    currentOptions.iterator();    	non-compiled	[CE]  <identifier>  expected	31	None	replace
69	[BUG]  [BUGGY]  Iterator  iter  =  this.currentOptions.iterator();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Iterator  iter  =  this.currentOptions.iterator();  [BUGGY]      int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	Iterator  iter  =  this.currentOptions.iterator();	  Iterator    iter    =    currentOptions.iterator();    	non-compiled	[CE]  <identifier>  expected	31	None	replace
70	[BUG]  [BUGGY]  Integer  tokenLength  =  options.getRawOffset()  -  1;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Integer  tokenLength  =  options.getRawOffset()  -  1;  [BUGGY]      int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	Integer  tokenLength  =  options.getRawOffset()  -  1;	  Integer    tokenLength    =    options.getOptionLength()    -    1;    	non-compiled	[CE]  <identifier>  expected	35	None	replace
71	[BUG]  [BUGGY]  Integer  tokenLength  =  options.getLongValue();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Integer  tokenLength  =  options.getLongValue();  [BUGGY]      int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	Integer  tokenLength  =  options.getLongValue();	  Integer    tokenLength    =    options.getIntValue();    	non-compiled	[CE]  <identifier>  expected	29	None	replace
72	[BUG]  [BUGGY]  Integer  tokenLength  =  options.getIntValue()  +  1;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Integer  tokenLength  =  options.getIntValue()  +  1;  [BUGGY]      int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	Integer  tokenLength  =  options.getIntValue()  +  1;	  Integer    tokenLength    =    options.getIntValue();    	non-compiled	[CE]  <identifier>  expected	29	None	replace
73	[BUG]  [BUGGY]  Integer  tokenLength  =  options.getIntValue()  -  1;  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Integer  tokenLength  =  options.getIntValue()  -  1;  [BUGGY]      int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	Integer  tokenLength  =  options.getIntValue()  -  1;	  Integer    tokenLength    =    options.getIntValue();    	non-compiled	[CE]  <identifier>  expected	29	None	replace
74	[BUG]  [BUGGY]  Integer  tokenLength  =  options.getIntValue(token)/  1;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Integer  tokenLength  =  options.getIntValue(token)/  1;  [BUGGY]      int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	Integer  tokenLength  =  options.getIntValue(token)/  1;	  Integer    tokenLength    =    options.getIntValue(token)-    1;    	non-compiled	[CE]  <identifier>  expected	42	None	replace
75	[BUG]  [BUGGY]  Integer  tokenLength  =  options.getIntValue(token)-  2;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Integer  tokenLength  =  options.getIntValue(token)-  2;  [BUGGY]      int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	Integer  tokenLength  =  options.getIntValue(token)-  2;	  Integer    tokenLength    =    options.getIntValue(token)-    1;    	non-compiled	[CE]  <identifier>  expected	42	None	replace
76	[BUG]  [BUGGY]  Iterator  iter  =  options.entrySet().iterator();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Iterator  iter  =  options.entrySet().iterator();  [BUGGY]      int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	Iterator  iter  =  options.entrySet().iterator();	  Iterator    iter    =    options.values().iterator();    	non-compiled	[CE]  <identifier>  expected	2	None	replace
77	[BUG]  [BUGGY]  tokens.add(token,  stopAtNonOption  +  1);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  tokens.add(token,  stopAtNonOption  +  1);  [BUGGY]      int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	tokens.add(token,  stopAtNonOption  +  1);	  tokens.add(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
78	[BUG]  [BUGGY]  tokens.add(token,  stopAtNonOption)+  1;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  tokens.add(token,  stopAtNonOption)+  1;  [BUGGY]      int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	tokens.add(token,  stopAtNonOption)+  1;	  tokens.add(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
79	[BUG]  [BUGGY]  token  =  stopAtNonOption?  token  :  stopAtNonOption;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  token  =  stopAtNonOption?  token  :  stopAtNonOption;  [BUGGY]        if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	token  =  stopAtNonOption?  token  :  stopAtNonOption;	  token    =    stopAtNonOption?    stopAtNonOption    :    token;    	non-compiled	[CE]  <identifier>  expected	36	None	replace
80	[BUG]  [BUGGY]  token  =  stopAtNonOption?  null  :  token;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  token  =  stopAtNonOption?  null  :  token;  [BUGGY]        if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	token  =  stopAtNonOption?  null  :  token;	  token    =    stopAtNonOption?    stopAtNonOption    :    token;    	non-compiled	[CE]  <identifier>  expected	36	None	replace
81	[BUG]  [BUGGY]  token  =  stopAtNonOption?  token  :  null;  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  token  =  stopAtNonOption?  token  :  null;  [BUGGY]        if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	token  =  stopAtNonOption?  token  :  null;	  token    =    stopAtNonOption?    stopAtNonOption    :    token;    	non-compiled	[CE]  <identifier>  expected	36	None	replace
82	[BUG]  [BUGGY]  Iterator  iter  =  this.arguments.iterator();  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Iterator  iter  =  this.arguments.iterator();  [BUGGY]      int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	Iterator  iter  =  this.arguments.iterator();	  Iterator    iter    =    arguments.iterator();    	non-compiled	[CE]  <identifier>  expected	1	None	replace
83	[BUG]  [BUGGY]  Ilerator  <  String>  iter  =  options.iterator();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Ilerator  <  String>  iter  =  options.iterator();  [BUGGY]      int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	Ilerator  <  String>  iter  =  options.iterator();	  Ilerator    <    String>    iter    =    options.keySet().iterator();    	non-compiled	[CE]  <identifier>  expected	41	None	replace
84	[BUG]  [BUGGY]  Ilerator  <  String>  iter  =  options.values().iterator();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Ilerator  <  String>  iter  =  options.values().iterator();  [BUGGY]      int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	Ilerator  <  String>  iter  =  options.values().iterator();	  Ilerator    <    String>    iter    =    options.keySet().iterator();    	non-compiled	[CE]  <identifier>  expected	41	None	replace
85	[BUG]  [BUGGY]  int  tokenLength  =  options.length();  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  int  tokenLength  =  options.length();  [BUGGY]        if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	int  tokenLength  =  options.length();	  int    tokenLength    =    arguments.length()    -    1;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
86	[BUG]  [BUGGY]  Integer  tokenLength  =  options.get(token,  stopAtNonOption  +  1);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Integer  tokenLength  =  options.get(token,  stopAtNonOption  +  1);  [BUGGY]      int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	Integer  tokenLength  =  options.get(token,  stopAtNonOption  +  1);	  Integer    tokenLength    =    options.get(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
87	[BUG]  [BUGGY]  Integer  tokenLength  =  options.get(token,  eatTheRest);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Integer  tokenLength  =  options.get(token,  eatTheRest);  [BUGGY]      int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	Integer  tokenLength  =  options.get(token,  eatTheRest);	  Integer    tokenLength    =    options.get(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
88	[BUG]  [BUGGY]  Integer  tokenLength  =  options.get(token,  1);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Integer  tokenLength  =  options.get(token,  1);  [BUGGY]      int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	Integer  tokenLength  =  options.get(token,  1);	  Integer    tokenLength    =    options.get(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
89	[BUG]  [BUGGY]  Integer  tokenLength  =  options.get(token,  stopAtNonOption  -  1);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Integer  tokenLength  =  options.get(token,  stopAtNonOption  -  1);  [BUGGY]      int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	Integer  tokenLength  =  options.get(token,  stopAtNonOption  -  1);	  Integer    tokenLength    =    options.get(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
90	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  this.currentOptions.iterator();  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Iterator  <  String>  iter  =  this.currentOptions.iterator();  [BUGGY]      int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	Iterator  <  String>  iter  =  this.currentOptions.iterator();	  Iterator    <    String>    iter    =    currentOptions.iterator();    	non-compiled	[CE]  <identifier>  expected	37	None	replace
91	[BUG]  [BUGGY]  tokens.add(Token.EMPTY,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  tokens.add(Token.EMPTY,  stopAtNonOption);  [BUGGY]      int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	tokens.add(Token.EMPTY,  stopAtNonOption);	  tokens.add(Token.EMPTY);    	non-compiled	[CE]  <identifier>  expected	48	None	replace
92	[BUG]  [BUGGY]  Integer  tokenLength  =  options.getLength()  +  1;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Integer  tokenLength  =  options.getLength()  +  1;  [BUGGY]      int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	Integer  tokenLength  =  options.getLength()  +  1;	  Integer    tokenLength    =    options.getLength();    	non-compiled	[CE]  <identifier>  expected	28	None	replace
93	[BUG]  [BUGGY]  Integer  tokenLength  =  arguments.getLength();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Integer  tokenLength  =  arguments.getLength();  [BUGGY]      int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	Integer  tokenLength  =  arguments.getLength();	  Integer    tokenLength    =    options.getLength();    	non-compiled	[CE]  <identifier>  expected	28	None	replace
94	[BUG]  [BUGGY]  Integer  tokenLength  =  options.getLength()  -  1;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Integer  tokenLength  =  options.getLength()  -  1;  [BUGGY]      int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	Integer  tokenLength  =  options.getLength()  -  1;	  Integer    tokenLength    =    options.getLength();    	non-compiled	[CE]  <identifier>  expected	28	None	replace
95	[BUG]  [BUGGY]  Integer  tokenLength  =  options.getIntValue(token)+  2;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Integer  tokenLength  =  options.getIntValue(token)+  2;  [BUGGY]      int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	Integer  tokenLength  =  options.getIntValue(token)+  2;	  Integer    tokenLength    =    options.getIntValue(token)+    1;    	non-compiled	[CE]  <identifier>  expected	23	None	replace
96	[BUG]  [BUGGY]  Integer  token  =  options.getOptionValue(token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Integer  token  =  options.getOptionValue(token,  stopAtNonOption);  [BUGGY]      int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	Integer  token  =  options.getOptionValue(token,  stopAtNonOption);	  Integer    token    =    options.getOptionValue(token);    	non-compiled	[CE]  <identifier>  expected	46	None	replace
97	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.getOptions().iterator();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Iterator  <  String>  iter  =  options.getOptions().iterator();  [BUGGY]      int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	Iterator  <  String>  iter  =  options.getOptions().iterator();	  Iterator    <    String>    iter    =    currentOption.iterator();    	non-compiled	[CE]  <identifier>  expected	24	None	replace
98	[BUG]  [BUGGY]  Integer  tokenLength  =  options.getIntValue(token)-  1  +  1;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Integer  tokenLength  =  options.getIntValue(token)-  1  +  1;  [BUGGY]      int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	Integer  tokenLength  =  options.getIntValue(token)-  1  +  1;	  Integer    tokenLength    =    options.getIntValue(token)-    1;    	non-compiled	[CE]  <identifier>  expected	42	None	replace
99	[BUG]  [BUGGY]  Integer  tokenLength  =  options.get(token.length  -  2);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Integer  tokenLength  =  options.get(token.length  -  2);  [BUGGY]      int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	Integer  tokenLength  =  options.get(token.length  -  2);	  Integer    tokenLength    =    options.get(token.length);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
100	[BUG]  [BUGGY]  Integer  tokenLength  =  options.get(token.length  +  1);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Integer  tokenLength  =  options.get(token.length  +  1);  [BUGGY]      int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	Integer  tokenLength  =  options.get(token.length  +  1);	  Integer    tokenLength    =    options.get(token.length);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
101	[BUG]  [BUGGY]  int  tokenLength  =  options.length  +  1;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  int  tokenLength  =  options.length  +  1;  [BUGGY]        if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	int  tokenLength  =  options.length  +  1;	  int    tokenLength    =    options.length;    	non-compiled	[CE]  <identifier>  expected	38	None	replace
102	[BUG]  [BUGGY]  Integer  tokenLength  =  options.get(options.size()  -  1);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Integer  tokenLength  =  options.get(options.size()  -  1);  [BUGGY]      int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	Integer  tokenLength  =  options.get(options.size()  -  1);	  Integer    tokenLength    =    options.get(0);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
103	[BUG]  [BUGGY]  Integer  token  =  options.getIntValue(token)+  stopAtNonOption;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Integer  token  =  options.getIntValue(token)+  stopAtNonOption;  [BUGGY]      int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	Integer  token  =  options.getIntValue(token)+  stopAtNonOption;	  Integer    token    =    options.getIntValue(token);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
104	[BUG]  [BUGGY]  Integer  tokenLength  =  options.getOffsetLength();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Integer  tokenLength  =  options.getOffsetLength();  [BUGGY]      int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	Integer  tokenLength  =  options.getOffsetLength();	  Integer    tokenLength    =    options.getOptionLength()    -    1;    	non-compiled	[CE]  <identifier>  expected	35	None	replace
105	[BUG]  [BUGGY]  Iterator  <  Option>  iter  =  options.iterator();  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Iterator  <  Option>  iter  =  options.iterator();  [BUGGY]      int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	Iterator  <  Option>  iter  =  options.iterator();	  Iterator    iter    =    currentOptions.iterator();    	non-compiled	[CE]  <identifier>  expected	31	None	replace
106	[BUG]  [BUGGY]  Ilerator  iter  =  options.iterator();  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Ilerator  iter  =  options.iterator();  [BUGGY]      int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	Ilerator  iter  =  options.iterator();	  Iterator    iter    =    this.options.iterator();    	non-compiled	[CE]  <identifier>  expected	49	None	replace
107	[BUG]  [BUGGY]  Ilerator  iter  =  options.keySet().iterator();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Ilerator  iter  =  options.keySet().iterator();  [BUGGY]      int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	Ilerator  iter  =  options.keySet().iterator();	  Iterator    iter    =    options.keySet().iterator();    	non-compiled	[CE]  <identifier>  expected	32	None	replace
108	[BUG]  [BUGGY]  Integer  tokenLength  =  options.getLength()  +  2;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Integer  tokenLength  =  options.getLength()  +  2;  [BUGGY]      int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	Integer  tokenLength  =  options.getLength()  +  2;	  Integer    tokenLength    =    options.getLength();    	non-compiled	[CE]  <identifier>  expected	28	None	replace
109	[BUG]  [BUGGY]  tokens.add(token)+  stopAtNonOption  +  1;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  tokens.add(token)+  stopAtNonOption  +  1;  [BUGGY]      int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	tokens.add(token)+  stopAtNonOption  +  1;	  tokens.add(token)+    stopAtNonOption;    	non-compiled	[CE]  <identifier>  expected	45	None	replace
110	[BUG]  [BUGGY]  Integer  token  =  options.getOption(token)+  stopAtNonOption  +  1;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Integer  token  =  options.getOption(token)+  stopAtNonOption  +  1;  [BUGGY]      int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	Integer  token  =  options.getOption(token)+  stopAtNonOption  +  1;	  Integer    token    =    options.getOption(token)+    stopAtNonOption;    	non-compiled	[CE]  <identifier>  expected	44	None	replace
111	[BUG]  [BUGGY]  tokens.add( "- ",  stopAtNonOption);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  tokens.add( "- ",  stopAtNonOption);  [BUGGY]      int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	tokens.add( "- ",  stopAtNonOption);	  tokens.add(   "-   ");    	non-compiled	[CE]  <identifier>  expected	14	None	replace
112	[BUG]  [BUGGY]  tokens.add( "-- ");  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  tokens.add( "-- ");  [BUGGY]      int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	tokens.add( "-- ");	  tokens.add(   "-   ");    	non-compiled	[CE]  <identifier>  expected	14	None	replace
113	[BUG]  [BUGGY]  Integer  token  =  options.getOption(token,  stopAtNonOption  +  1);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Integer  token  =  options.getOption(token,  stopAtNonOption  +  1);  [BUGGY]      int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	Integer  token  =  options.getOption(token,  stopAtNonOption  +  1);	  Integer    token    =    options.getOption(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
114	[BUG]  [BUGGY]  Integer  tokenLength  =  options.get(token).getOptionLength()  +  1;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Integer  tokenLength  =  options.get(token).getOptionLength()  +  1;  [BUGGY]      int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	Integer  tokenLength  =  options.get(token).getOptionLength()  +  1;	  Integer    tokenLength    =    options.get(token).getOptionLength();    	non-compiled	[CE]  <identifier>  expected	30	None	replace
115	[BUG]  [BUGGY]  Integer  tokenLength  =  options.getIntValue(token)+  3;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Integer  tokenLength  =  options.getIntValue(token)+  3;  [BUGGY]      int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	Integer  tokenLength  =  options.getIntValue(token)+  3;	  Integer    tokenLength    =    options.getIntValue(token)+    1;    	non-compiled	[CE]  <identifier>  expected	23	None	replace
116	[BUG]  [BUGGY]  token  =(token.startsWith( "- ")||  token.startsWith( "-- "))?  token  :  null;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  token  =(token.startsWith( "- ")||  token.startsWith( "-- "))?  token  :  null;  [BUGGY]        if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	token  =(token.startsWith( "- ")||  token.startsWith( "-- "))?  token  :  null;	  token    =(token.startsWith(   "-   ")||    token.startsWith(   "-   "))?    token    :    null;    	non-compiled	[CE]  <identifier>  expected	20	None	replace
117	[BUG]  [BUGGY]  List  <  String>  iter  =  options.keySet().iterator();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  List  <  String>  iter  =  options.keySet().iterator();  [BUGGY]      int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	List  <  String>  iter  =  options.keySet().iterator();	  Ilerator    <    String>    iter    =    options.keySet().iterator();    	non-compiled	[CE]  <identifier>  expected	41	None	replace
118	[BUG]  [BUGGY]  Int  tokenLength  =  token.length()  -  1;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Int  tokenLength  =  token.length()  -  1;  [BUGGY]        if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	Int  tokenLength  =  token.length()  -  1;	  Int    tokenLength    =    token.length();    	non-compiled	[CE]  <identifier>  expected	33	None	replace
119	[BUG]  [BUGGY]  Int  tokenLength  =  token.length()  +  1;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Int  tokenLength  =  token.length()  +  1;  [BUGGY]        if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	Int  tokenLength  =  token.length()  +  1;	  Int    tokenLength    =    token.length();    	non-compiled	[CE]  <identifier>  expected	33	None	replace
120	[BUG]  [BUGGY]  Integer  tokenLength  =  options.getIntValue(token,  stopAtNonOption  +  1);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Integer  tokenLength  =  options.getIntValue(token,  stopAtNonOption  +  1);  [BUGGY]      int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	Integer  tokenLength  =  options.getIntValue(token,  stopAtNonOption  +  1);	  Integer    tokenLength    =    options.getIntValue(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
121	[BUG]  [BUGGY]  Integer  tokenLength  =  options.getIntValue(token,  stopAtNonOption  -  1);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Integer  tokenLength  =  options.getIntValue(token,  stopAtNonOption  -  1);  [BUGGY]      int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	Integer  tokenLength  =  options.getIntValue(token,  stopAtNonOption  -  1);	  Integer    tokenLength    =    options.getIntValue(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
122	[BUG]  [BUGGY]  Integer  tokenLength  =  options.getIntValue(token,  stopAtNonOption)+  1;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Integer  tokenLength  =  options.getIntValue(token,  stopAtNonOption)+  1;  [BUGGY]      int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	Integer  tokenLength  =  options.getIntValue(token,  stopAtNonOption)+  1;	  Integer    tokenLength    =    options.getIntValue(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
123	[BUG]  [BUGGY]  Integer  token  =  options.get(token)+  stopAtNonOption;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Integer  token  =  options.get(token)+  stopAtNonOption;  [BUGGY]      int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	Integer  token  =  options.get(token)+  stopAtNonOption;	  Integer    token    =    options.get(token);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
124	[BUG]  [BUGGY]  Ilerator  iter  =  options.values().iterator();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Ilerator  iter  =  options.values().iterator();  [BUGGY]      int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	Ilerator  iter  =  options.values().iterator();	  Iterator    iter    =    options.values().iterator();    	non-compiled	[CE]  <identifier>  expected	2	None	replace
125	[BUG]  [BUGGY]  tokens.add( "- ".equals(token));  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  tokens.add( "- ".equals(token));  [BUGGY]      int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	tokens.add( "- ".equals(token));	  tokens.add(   "-   ");    	non-compiled	[CE]  <identifier>  expected	14	None	replace
126	[BUG]  [BUGGY]  tokenLength  -=  token.length();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  tokenLength  -=  token.length();  [BUGGY]        if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	tokenLength  -=  token.length();	  tokenLength    =    token.length();    	non-compiled	[CE]  <identifier>  expected	19	None	replace
127	[BUG]  [BUGGY]  Integer  tokenLength  =  options.get(token,  stopAtNonOption)+  1;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Integer  tokenLength  =  options.get(token,  stopAtNonOption)+  1;  [BUGGY]      int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	Integer  tokenLength  =  options.get(token,  stopAtNonOption)+  1;	  Integer    tokenLength    =    options.get(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
128	[BUG]  [BUGGY]  Iterator  <  String>  iter  =(this.arguments!=  null)?  this.arguments.iterator()  :  tokens.iterator();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Iterator  <  String>  iter  =(this.arguments!=  null)?  this.arguments.iterator()  :  tokens.iterator();  [BUGGY]      int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	Iterator  <  String>  iter  =(this.arguments!=  null)?  this.arguments.iterator()  :  tokens.iterator();	  Iterator    <    String>    iter    =    this.arguments.iterator();    	non-compiled	[CE]  <identifier>  expected	25	None	replace
129	[BUG]  [BUGGY]  Integer  token  =  options.getOption(token,  stopAtNonOption)+  1;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Integer  token  =  options.getOption(token,  stopAtNonOption)+  1;  [BUGGY]      int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	Integer  token  =  options.getOption(token,  stopAtNonOption)+  1;	  Integer    token    =    options.getOption(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
130	[BUG]  [BUGGY]  Integer  token  =  options.getOptionKey(token);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Integer  token  =  options.getOptionKey(token);  [BUGGY]      int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	Integer  token  =  options.getOptionKey(token);	  Integer    token    =    options.getOptionValue(token);    	non-compiled	[CE]  <identifier>  expected	46	None	replace
131	[BUG]  [BUGGY]  Integer  tokenLength  =  options.get(token).getLength();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Integer  tokenLength  =  options.get(token).getLength();  [BUGGY]      int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	Integer  tokenLength  =  options.get(token).getLength();	  Integer    tokenLength    =    options.get(token).getOptionLength();    	non-compiled	[CE]  <identifier>  expected	30	None	replace
132	[BUG]  [BUGGY]  Integer  token  =  options.getOption(token)-  stopAtNonOption;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Integer  token  =  options.getOption(token)-  stopAtNonOption;  [BUGGY]      int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	Integer  token  =  options.getOption(token)-  stopAtNonOption;	  Integer    token    =    options.getOption(token)+    stopAtNonOption;    	non-compiled	[CE]  <identifier>  expected	44	None	replace
133	[BUG]  [BUGGY]  Integer  token  =  options.getOption(token)+  arguments.length;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Integer  token  =  options.getOption(token)+  arguments.length;  [BUGGY]      int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	Integer  token  =  options.getOption(token)+  arguments.length;	  Integer    token    =    options.getOption(token)+    stopAtNonOption;    	non-compiled	[CE]  <identifier>  expected	44	None	replace
134	[BUG]  [BUGGY]  Integer  token  =  options.getOptionToken(token)+  1;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Integer  token  =  options.getOptionToken(token)+  1;  [BUGGY]      int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	Integer  token  =  options.getOptionToken(token)+  1;	  Integer    token    =    options.getOptionToken(token);    	non-compiled	[CE]  <identifier>  expected	43	None	replace
135	[BUG]  [BUGGY]  token  =(token.startsWith( ".- ")||  token.startsWith( ".- "))?  token  :  null;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  token  =(token.startsWith( ".- ")||  token.startsWith( ".- "))?  token  :  null;  [BUGGY]        if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	token  =(token.startsWith( ".- ")||  token.startsWith( ".- "))?  token  :  null;	  token    =(token.startsWith(   "-   ")||    token.startsWith(   "-   "))?    token    :    null;    	non-compiled	[CE]  <identifier>  expected	20	None	replace
136	[BUG]  [BUGGY]  Integer  tokenLength  =  options.get(0).length();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Integer  tokenLength  =  options.get(0).length();  [BUGGY]      int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	Integer  tokenLength  =  options.get(0).length();	  Integer    tokenLength    =    options.get(0);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
137	[BUG]  [BUGGY]  Integer  tokenLength  =  options.get( "- ");  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Integer  tokenLength  =  options.get( "- ");  [BUGGY]      int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	Integer  tokenLength  =  options.get( "- ");	  Integer    tokenLength    =    options.getLength();    	non-compiled	[CE]  <identifier>  expected	28	None	replace
138	[BUG]  [BUGGY]  Integer  tokenLength  =  options.getValueLength(token);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Integer  tokenLength  =  options.getValueLength(token);  [BUGGY]      int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	Integer  tokenLength  =  options.getValueLength(token);	  Integer    tokenLength    =    options.getValueLength();    	non-compiled	[CE]  <identifier>  expected	50	None	replace
139	[BUG]  [BUGGY]  Integer  tokenLength  =  options.getColumnLength();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Integer  tokenLength  =  options.getColumnLength();  [BUGGY]      int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	Integer  tokenLength  =  options.getColumnLength();	  Integer    tokenLength    =    options.getIntValue();    	non-compiled	[CE]  <identifier>  expected	29	None	replace
140	[BUG]  [BUGGY]  Integer  tokenLength  =  options.getIntValue(token,  stopAtNonOption,  2);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Integer  tokenLength  =  options.getIntValue(token,  stopAtNonOption,  2);  [BUGGY]      int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	Integer  tokenLength  =  options.getIntValue(token,  stopAtNonOption,  2);	  Integer    tokenLength    =    options.getIntValue(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
141	[BUG]  [BUGGY]  Integer  tokenLength  =  options.getIntValue(token,  stopAtNonOption,  1);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Integer  tokenLength  =  options.getIntValue(token,  stopAtNonOption,  1);  [BUGGY]      int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	Integer  tokenLength  =  options.getIntValue(token,  stopAtNonOption,  1);	  Integer    tokenLength    =    options.getIntValue(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
142	[BUG]  [BUGGY]  token  =  stopAtNonOption?  token  :  StopAtNonOption;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  token  =  stopAtNonOption?  token  :  StopAtNonOption;  [BUGGY]        if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	132	132	1	replace	token  =  stopAtNonOption?  token  :  StopAtNonOption;	  token    =    stopAtNonOption?    stopAtNonOption    :    token;    	non-compiled	[CE]  <identifier>  expected	36	None	replace
