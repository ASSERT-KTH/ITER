bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  While(stopAtNonOption)  {  tokens.add( "-- ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]    }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(   "--   ");    [BUGGY]  While(stopAtNonOption)  {  tokens.add( "-- ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	215	215	1	replace	While(stopAtNonOption)  {  tokens.add( "-- ");  }  else  {  throw  new  IllegalArgumentException( " ");  }	      if(stopAtNonOption)    {    tokens.add(   "--   ");    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	7	None	replace
2	[BUG]  [BUGGY]  While(currentOption.hasArgs())  {  tokens.add( "-- ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(   "--   ");    [BUGGY]  While(currentOption.hasArgs())  {  tokens.add( "-- ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	215	215	1	replace	While(currentOption.hasArgs())  {  tokens.add( "-- ");  }  else  {  throw  new  IllegalArgumentException( " ");  }	      if(stopAtNonOption)    {    tokens.add(   "--   ");    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	7	None	replace
3	[BUG]  [BUGGY]  While(currentOption.hasArg())  {  tokens.add( "-- ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]              AssertionFailedError    [CONTEXT]    }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(   "--   ");    [BUGGY]  While(currentOption.hasArg())  {  tokens.add( "-- ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	215	215	1	replace	While(currentOption.hasArg())  {  tokens.add( "-- ");  }  else  {  throw  new  IllegalArgumentException( " ");  }	      if(stopAtNonOption)    {    tokens.add(   "--   ");    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	7	None	replace
4	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add( "-- ");  }  else  {  stopAtNonOption  =  true;  tokens.add( "-- ");  }  [CE]  [FE]                AssertionFailedError    [CONTEXT]    }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(   "--   ");    [BUGGY]  if(stopAtNonOption)  {  tokens.add( "-- ");  }  else  {  stopAtNonOption  =  true;  tokens.add( "-- ");  }  [BUGGY]    }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	215	215	1	replace	if(stopAtNonOption)  {  tokens.add( "-- ");  }  else  {  stopAtNonOption  =  true;  tokens.add( "-- ");  }	      	non-compiled	[CE]  	5	None	replace
5	[BUG]  [BUGGY]  While(stopAtNonOption)  {  tokens.add( "-- ");  }  [CE]  [FE]        AssertionFailedError    [CONTEXT]    }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(   "--   ");    [BUGGY]  While(stopAtNonOption)  {  tokens.add( "-- ");  }  [BUGGY]    tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	215	215	1	replace	While(stopAtNonOption)  {  tokens.add( "-- ");  }	      if(stopAtNonOption)    {    tokens.add(   "--   ");    }    	non-compiled	[CE]  	6	None	replace
6	[BUG]  [BUGGY]  While(stopAtNonOption  &&  currentOption.hasArgs())  {  tokens.add( "-- ");  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]    }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(   "--   ");    [BUGGY]  While(stopAtNonOption  &&  currentOption.hasArgs())  {  tokens.add( "-- ");  }  [BUGGY]    tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	215	215	1	replace	While(stopAtNonOption  &&  currentOption.hasArgs())  {  tokens.add( "-- ");  }	      if(stopAtNonOption)    {    tokens.add(   "--   ");    }    	non-compiled	[CE]  	6	None	replace
7	[BUG]  [BUGGY]  While(stopAtNonOption  &&  currentOption.hasArg())  {  tokens.add( "-- ");  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(   "--   ");    [BUGGY]  While(stopAtNonOption  &&  currentOption.hasArg())  {  tokens.add( "-- ");  }  [BUGGY]    tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	215	215	1	replace	While(stopAtNonOption  &&  currentOption.hasArg())  {  tokens.add( "-- ");  }	      if(stopAtNonOption)    {    tokens.add(   "--   ");    }    	non-compiled	[CE]  	6	None	replace
8	[BUG]  [BUGGY]  tokens.add('-'  +  value);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(   "--   ");    [BUGGY]  tokens.add('-'  +  value);  [BUGGY]    }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	215	215	1	replace	tokens.add('-'  +  value);	  tokens.add('-');    	non-compiled	[CE]  	12	None	replace
9	[BUG]  [BUGGY]  tokens.add(this.stopAtNonOption.toString());  [CE]  [FE]        AssertionFailedError    [CONTEXT]    }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(   "--   ");    [BUGGY]  tokens.add(this.stopAtNonOption.toString());  [BUGGY]    tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	215	215	1	replace	tokens.add(this.stopAtNonOption.toString());	      tokens.add(currentOption.toString());    	non-compiled	[CE]  	9	None	replace
10	[BUG]  [BUGGY]  tokens.add(value.toString());  [CE]  [FE]          AssertionFailedError    [CONTEXT]    }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(   "--   ");    [BUGGY]  tokens.add(value.toString());  [BUGGY]    tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	215	215	1	replace	tokens.add(value.toString());	      tokens.add(currentOption.toString());    	non-compiled	[CE]  	9	None	replace
11	[BUG]  [BUGGY]  tokens.add( "- "  +  currentOption.getValue());  [CE]  [FE]          AssertionFailedError    [CONTEXT]    }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(   "--   ");    [BUGGY]  tokens.add( "- "  +  currentOption.getValue());  [BUGGY]    }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	215	215	1	replace	tokens.add( "- "  +  currentOption.getValue());	  tokens.add(   "-   ");    	non-compiled	[CE]  	2	None	replace
12	[BUG]  [BUGGY]  tokens.add( "- "  +  currentOption.getName());  [CE]  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(   "--   ");    [BUGGY]  tokens.add( "- "  +  currentOption.getName());  [BUGGY]    }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	215	215	1	replace	tokens.add( "- "  +  currentOption.getName());	  tokens.add(   "-   ");    	non-compiled	[CE]  	2	None	replace
13	[BUG]  [BUGGY]  tokens.add( "- ",  currentOption.getValue());  [CE]  [FE]              AssertionFailedError    [CONTEXT]    }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(   "--   ");    [BUGGY]  tokens.add( "- ",  currentOption.getValue());  [BUGGY]    }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	215	215	1	replace	tokens.add( "- ",  currentOption.getValue());	  tokens.add(   "-   ");    	non-compiled	[CE]  	2	None	replace
14	[BUG]  [BUGGY]  tokens.add( "-- ");  }  else  {  stopAtNonOption  =  false;  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(   "--   ");    [BUGGY]  tokens.add( "-- ");  }  else  {  stopAtNonOption  =  false;  }  [BUGGY]    tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	215	215	1	replace	tokens.add( "-- ");  }  else  {  stopAtNonOption  =  false;  }	      if(stopAtNonOption)    {    tokens.add(   "--   ");    }    else    {    stopAtNonOption    =    false;    }    	non-compiled	[CE]  	8	None	replace
15	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption( "stopAtNonOption ");  [CE]  [FE]              AssertionFailedError    [CONTEXT]    }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(   "--   ");    [BUGGY]  Option  currentOption  =  options.getOption( "stopAtNonOption ");  [BUGGY]    tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	215	215	1	replace	Option  currentOption  =  options.getOption( "stopAtNonOption ");	      if(stopAtNonOption)    {    tokens.add(   "--   ");    }    else    {    stopAtNonOption    =    false;    }    	non-compiled	[CE]  	8	None	replace
16	[BUG]  [BUGGY]  tokens.add( "-- "  +  currentOption.getName());  [CE]  [FE]        AssertionFailedError    [CONTEXT]    }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(   "--   ");    [BUGGY]  tokens.add( "-- "  +  currentOption.getName());  [BUGGY]    }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	215	215	1	replace	tokens.add( "-- "  +  currentOption.getName());	  tokens.add(   "--   ");    	non-compiled	[CE]  	1	None	replace
17	[BUG]  [BUGGY]  tokens.add( "-- "  +  currentOption.getValue());  [CE]  [FE]          AssertionFailedError    [CONTEXT]    }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(   "--   ");    [BUGGY]  tokens.add( "-- "  +  currentOption.getValue());  [BUGGY]    }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	215	215	1	replace	tokens.add( "-- "  +  currentOption.getValue());	  tokens.add(   "--   ");    	non-compiled	[CE]  	1	None	replace
18	[BUG]  [BUGGY]  tokens.add( "-- ",  currentOption.hasArg());  [CE]  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(   "--   ");    [BUGGY]  tokens.add( "-- ",  currentOption.hasArg());  [BUGGY]    }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	215	215	1	replace	tokens.add( "-- ",  currentOption.hasArg());	  tokens.add(   "--   ");    	non-compiled	[CE]  	1	None	replace
19	[BUG]  [BUGGY]  tokens.add(currentOption.getArg(),  value);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(   "--   ");    [BUGGY]  tokens.add(currentOption.getArg(),  value);  [BUGGY]    tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	215	215	1	replace	tokens.add(currentOption.getArg(),  value);	      tokens.add(currentOption.getArg());    	non-compiled	[CE]  	10	None	replace
20	[BUG]  [BUGGY]  tokens.add(value.getValue());  [CE]  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(   "--   ");    [BUGGY]  tokens.add(value.getValue());  [BUGGY]    }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	215	215	1	replace	tokens.add(value.getValue());	  tokens.add(currentOption.getValue());    	non-compiled	[CE]  	3	None	replace
21	[BUG]  [BUGGY]  tokens.add(currentOption.getValue(),  value);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(   "--   ");    [BUGGY]  tokens.add(currentOption.getValue(),  value);  [BUGGY]    }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	215	215	1	replace	tokens.add(currentOption.getValue(),  value);	  tokens.add(currentOption.getValue());    	non-compiled	[CE]  	3	None	replace
22	[BUG]  [BUGGY]  tokens.add(currentOption.getValue()  + "- ");  [CE]  [FE]                AssertionFailedError    [CONTEXT]    }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(   "--   ");    [BUGGY]  tokens.add(currentOption.getValue()  + "- ");  [BUGGY]    }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	215	215	1	replace	tokens.add(currentOption.getValue()  + "- ");	  tokens.add(currentOption.getValue());    	non-compiled	[CE]  	3	None	replace
23	[BUG]  [BUGGY]  tokens.add(getValue());  [CE]  [FE]              AssertionFailedError    [CONTEXT]    }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(   "--   ");    [BUGGY]  tokens.add(getValue());  [BUGGY]    }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	215	215	1	replace	tokens.add(getValue());	  tokens.add(currentOption);    	non-compiled	[CE]  	4	None	replace
24	[BUG]  [BUGGY]  parent!=  null  &&  currentOption.hasArg())  {  tokens.add( "-- ");  }  else  {  stopAtNonOption  =  false;  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(   "--   ");    [BUGGY]  parent!=  null  &&  currentOption.hasArg())  {  tokens.add( "-- ");  }  else  {  stopAtNonOption  =  false;  }  [BUGGY]    tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	215	215	1	replace	parent!=  null  &&  currentOption.hasArg())  {  tokens.add( "-- ");  }  else  {  stopAtNonOption  =  false;  }	      if(stopAtNonOption)    {    tokens.add(   "--   ");    }    else    {    stopAtNonOption    =    false;    }    	non-compiled	[CE]  	8	None	replace
25	[BUG]  [BUGGY]  parent!=  null  &&  currentOption.hasArgs())  {  tokens.add( "-- ");  }  else  {  stopAtNonOption  =  false;  }  [CE]  [FE]              AssertionFailedError    [CONTEXT]    }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(   "--   ");    [BUGGY]  parent!=  null  &&  currentOption.hasArgs())  {  tokens.add( "-- ");  }  else  {  stopAtNonOption  =  false;  }  [BUGGY]    tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	215	215	1	replace	parent!=  null  &&  currentOption.hasArgs())  {  tokens.add( "-- ");  }  else  {  stopAtNonOption  =  false;  }	      if(stopAtNonOption)    {    tokens.add(   "--   ");    }    else    {    stopAtNonOption    =    false;    }    	non-compiled	[CE]  	8	None	replace
26	[BUG]  [BUGGY]  tokens.add( "-- "  +  value);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(   "--   ");    [BUGGY]  tokens.add( "-- "  +  value);  [BUGGY]    }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	215	215	1	replace	tokens.add( "-- "  +  value);	  tokens.add(   "-   ");    	non-compiled	[CE]  	2	None	replace
27	[BUG]  [BUGGY]  tokens.add(this.stopAtNonOption,  value);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(   "--   ");    [BUGGY]  tokens.add(this.stopAtNonOption,  value);  [BUGGY]    }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	215	215	1	replace	tokens.add(this.stopAtNonOption,  value);	  tokens.add(this.stopAtNonOption);    	non-compiled	[CE]  	11	None	replace
28	[BUG]  [BUGGY]  tokens.add(currentOption.getValue()  +  1);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(   "--   ");    [BUGGY]  tokens.add(currentOption.getValue()  +  1);  [BUGGY]    }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	215	215	1	replace	tokens.add(currentOption.getValue()  +  1);	  tokens.add(currentOption.getValue());    	non-compiled	[CE]  	3	None	replace
29	[BUG]  [BUGGY]  safeToken(stopAtNonOption)  {  tokens.add( "-- ");  }  [CE]  [FE]        AssertionFailedError    [CONTEXT]    }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(   "--   ");    [BUGGY]  safeToken(stopAtNonOption)  {  tokens.add( "-- ");  }  [BUGGY]    tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	215	215	1	replace	safeToken(stopAtNonOption)  {  tokens.add( "-- ");  }	      if(stopAtNonOption)    {    tokens.add(   "--   ");    }    	non-compiled	[CE]  	6	None	replace
30	[BUG]  [BUGGY]  tors.add( "-- ");  [CE]  [FE]          AssertionFailedError    [CONTEXT]    }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(   "--   ");    [BUGGY]  tors.add( "-- ");  [BUGGY]    tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	215	215	1	replace	tors.add( "-- ");	      if(stopAtNonOption)    {    tokens.add(   "--   ");    }    	non-compiled	[CE]  	6	None	replace
31	[BUG]  [BUGGY]  safeToken(stopAtNonOption)  {  tokens.add( "-- ",  currentOption);  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(   "--   ");    [BUGGY]  safeToken(stopAtNonOption)  {  tokens.add( "-- ",  currentOption);  }  [BUGGY]    tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	215	215	1	replace	safeToken(stopAtNonOption)  {  tokens.add( "-- ",  currentOption);  }	      if(stopAtNonOption)    {    tokens.add(   "--   ");    }    	non-compiled	[CE]  	6	None	replace
32	[BUG]  [BUGGY]  tokens.add( "-- ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]    }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(   "--   ");    [BUGGY]  tokens.add( "-- ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	215	215	1	replace	tokens.add( "-- ");  }  else  {  throw  new  IllegalArgumentException( " ");  }	      if(stopAtNonOption)    {    tokens.add(   "--   ");    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	7	None	replace
33	[BUG]  [BUGGY]  [Delete]  [CE]  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(   "--   ");    [BUGGY]  [Delete]  [BUGGY]    tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	215	215	1	replace	[Delete]	      if(stopAtNonOption)    {    tokens.add(   "--   ");    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	7	None	replace
34	[BUG]  [BUGGY]  tokens.add( ".s.IFJDCS ".charAt(currentOption.getIndex()));  [CE]  [FE]              AssertionFailedError    [CONTEXT]    }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(   "--   ");    [BUGGY]  tokens.add( ".s.IFJDCS ".charAt(currentOption.getIndex()));  [BUGGY]    tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	215	215	1	replace	tokens.add( ".s.IFJDCS ".charAt(currentOption.getIndex()));	      if(stopAtNonOption)    {    tokens.add(   "--   ");    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	7	None	replace
35	[BUG]  [BUGGY]  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]    }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(   "--   ");    [BUGGY]  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	215	215	1	replace	}  else  {  throw  new  IllegalArgumentException( " ");  }	      if(stopAtNonOption)    {    tokens.add(   "--   ");    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	7	None	replace
36	[BUG]  [BUGGY]  ators.add( "-- ");  [CE]  [FE]        AssertionFailedError    [CONTEXT]    }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(   "--   ");    [BUGGY]  ators.add( "-- ");  [BUGGY]    tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	215	215	1	replace	ators.add( "-- ");	      if(stopAtNonOption)    {    tokens.add(   "--   ");    }    	non-compiled	[CE]  	6	None	replace
37	[BUG]  [BUGGY]  tokens.add( ",-- ");  [CE]  [FE]          AssertionFailedError    [CONTEXT]    }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(   "--   ");    [BUGGY]  tokens.add( ",-- ");  [BUGGY]    tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	215	215	1	replace	tokens.add( ",-- ");	      if(stopAtNonOption)    {    tokens.add(   "--   ");    }    	non-compiled	[CE]  	6	None	replace
38	[BUG]  [BUGGY]  tokens.add( "-- ");  else  {  stopAtNonOption  =  false;  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(   "--   ");    [BUGGY]  tokens.add( "-- ");  else  {  stopAtNonOption  =  false;  }  [BUGGY]    tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	215	215	1	replace	tokens.add( "-- ");  else  {  stopAtNonOption  =  false;  }	      if(stopAtNonOption)    {    tokens.add(   "--   ");    }    else    {    stopAtNonOption    =    false;    }    	non-compiled	[CE]  	8	None	replace
39	[BUG]  [BUGGY]  parent!=  null  &&  currentOption.hasArg();  tokens.add( "-- ");  [CE]  [FE]              AssertionFailedError    [CONTEXT]    }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(   "--   ");    [BUGGY]  parent!=  null  &&  currentOption.hasArg();  tokens.add( "-- ");  [BUGGY]    tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	215	215	1	replace	parent!=  null  &&  currentOption.hasArg();  tokens.add( "-- ");	      if(stopAtNonOption)    {    tokens.add(   "--   ");    }    else    {    stopAtNonOption    =    false;    }    	non-compiled	[CE]  	8	None	replace
40	[BUG]  [BUGGY]  tokens.add(currentOption.toString(),  value);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(   "--   ");    [BUGGY]  tokens.add(currentOption.toString(),  value);  [BUGGY]    tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	215	215	1	replace	tokens.add(currentOption.toString(),  value);	      tokens.add(currentOption.toString());    	non-compiled	[CE]  	9	None	replace
41	[BUG]  [BUGGY]  tokens.add( "- ",  currentOption);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(   "--   ");    [BUGGY]  tokens.add( "- ",  currentOption);  [BUGGY]    }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	215	215	1	replace	tokens.add( "- ",  currentOption);	  tokens.add(   "-   ");    	non-compiled	[CE]  	2	None	replace
42	[BUG]  [BUGGY]  tokens.add(this.stopAtNonOption.getValue());  [CE]  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(   "--   ");    [BUGGY]  tokens.add(this.stopAtNonOption.getValue());  [BUGGY]    }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	215	215	1	replace	tokens.add(this.stopAtNonOption.getValue());	  tokens.add(currentOption.getValue());    	non-compiled	[CE]  	3	None	replace
43	[BUG]  [BUGGY]  tokens.add( "-- ",  currentOption);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(   "--   ");    [BUGGY]  tokens.add( "-- ",  currentOption);  [BUGGY]    }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	215	215	1	replace	tokens.add( "-- ",  currentOption);	  tokens.add(   "--   ");    	non-compiled	[CE]  	1	None	replace
