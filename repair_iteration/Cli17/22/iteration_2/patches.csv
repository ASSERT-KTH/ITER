bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  tokens.add( "--null ");  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.add( "--null ");  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	tokens.add( "--null ");	  tokens.add(   "--n   ");    	non-compiled	[CE]  <identifier>  expected	2	None	replace
2	[BUG]  [BUGGY]  if(!eatTheRest)  {  tokens  =  new  ArrayList  <  Option>();  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  if(!eatTheRest)  {  tokens  =  new  ArrayList  <  Option>();  currentOption  =  null;  }  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	if(!eatTheRest)  {  tokens  =  new  ArrayList  <  Option>();  currentOption  =  null;  }	  if(eatTheRest)    {    tokens    =    new    ArrayList    <    Option>();    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	42	None	replace
3	[BUG]  [BUGGY]  tokens  =  new  ArrayList  <  Option>(size()  -  1);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens  =  new  ArrayList  <  Option>(size()  -  1);  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	tokens  =  new  ArrayList  <  Option>(size()  -  1);	  tokens    =    new    ArrayList    <    Option>(size());    	non-compiled	[CE]  <identifier>  expected	47	None	replace
4	[BUG]  [BUGGY]  tokens  =  new  ArrayList  <  Option>(size()  +  1);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens  =  new  ArrayList  <  Option>(size()  +  1);  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	tokens  =  new  ArrayList  <  Option>(size()  +  1);	  tokens    =    new    ArrayList    <    Option>(size());    	non-compiled	[CE]  <identifier>  expected	47	None	replace
5	[BUG]  [BUGGY]  tokens  =  new  LinkedList  <  Option>(size());  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens  =  new  LinkedList  <  Option>(size());  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	tokens  =  new  LinkedList  <  Option>(size());	  tokens    =    new    ArrayList    <    Option>(size());    	non-compiled	[CE]  <identifier>  expected	47	None	replace
6	[BUG]  [BUGGY]  currentOption  =  options;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  currentOption  =  options;  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	currentOption  =  options;	  currentOption    =    null;    	non-compiled	[CE]  <identifier>  expected	33	None	replace
7	[BUG]  [BUGGY]  currentOption  =  new  Option();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  currentOption  =  new  Option();  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	currentOption  =  new  Option();	  currentOption    =    null;    	non-compiled	[CE]  <identifier>  expected	33	None	replace
8	[BUG]  [BUGGY]  currentOption  =  option;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  currentOption  =  option;  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	currentOption  =  option;	  currentOption    =    null;    	non-compiled	[CE]  <identifier>  expected	33	None	replace
9	[BUG]  [BUGGY]  tokens.add( "this ");  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.add( "this ");  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	tokens.add( "this ");	  tokens.add(   "none   ");    	non-compiled	[CE]  <identifier>  expected	35	None	replace
10	[BUG]  [BUGGY]  tokens.add( "# ");  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.add( "# ");  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	tokens.add( "# ");	  tokens.add(   "none   ");    	non-compiled	[CE]  <identifier>  expected	35	None	replace
11	[BUG]  [BUGGY]  ||!eatTheRest)  {  eatTheRest  =  true;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  ||!eatTheRest)  {  eatTheRest  =  true;  }  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	||!eatTheRest)  {  eatTheRest  =  true;  }	  if(!eatTheRest)    {    eatTheRest    =    true;    }    	non-compiled	[CE]  <identifier>  expected	44	None	replace
12	[BUG]  [BUGGY]  if(!eatTheRest)  {  eatTheRest  =  false;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  if(!eatTheRest)  {  eatTheRest  =  false;  }  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	if(!eatTheRest)  {  eatTheRest  =  false;  }	  if(!eatTheRest)    {    eatTheRest    =    true;    }    	non-compiled	[CE]  <identifier>  expected	44	None	replace
13	[BUG]  [BUGGY]  ||!eatTheRest)  {  eatTheRest  =  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  ||!eatTheRest)  {  eatTheRest  =  false;  }  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	||!eatTheRest)  {  eatTheRest  =  false;  }	  if(!eatTheRest)    {    eatTheRest    =    true;    }    	non-compiled	[CE]  <identifier>  expected	44	None	replace
14	[BUG]  [BUGGY]  if(!eatTheRest)  {  if(eatTheRest)  {  currentOption  =  null;  tokens.clear();  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  if(!eatTheRest)  {  if(eatTheRest)  {  currentOption  =  null;  tokens.clear();  currentOption  =  null;  }  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	if(!eatTheRest)  {  if(eatTheRest)  {  currentOption  =  null;  tokens.clear();  currentOption  =  null;  }	  if(eatTheRest)    {    currentOption    =    null;    tokens.clear();    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	56	None	replace
15	[BUG]  [BUGGY]  if(!eatTheRest)  {  if(eatTheRest)  {  currentOption  =  null;  tokens.clear();  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  if(!eatTheRest)  {  if(eatTheRest)  {  currentOption  =  null;  tokens.clear();  }  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	if(!eatTheRest)  {  if(eatTheRest)  {  currentOption  =  null;  tokens.clear();  }	  if(eatTheRest)    {    currentOption    =    null;    tokens.clear();    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	56	None	replace
16	[BUG]  [BUGGY]  if(!eatTheRest)  {  tokens.clear();  currentOption  =  null;  }  else  {  options.addAll(options);  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  if(!eatTheRest)  {  tokens.clear();  currentOption  =  null;  }  else  {  options.addAll(options);  }  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	if(!eatTheRest)  {  tokens.clear();  currentOption  =  null;  }  else  {  options.addAll(options);  }	  if(eatTheRest)    {    tokens.clear();    currentOption    =    null;    }    else    {    options.addAll(options);    }    	non-compiled	[CE]  <identifier>  expected	54	None	replace
17	[BUG]  [BUGGY]  tokens.add( "-- ");  currentOption  =  new  Option();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.add( "-- ");  currentOption  =  new  Option();  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	tokens.add( "-- ");  currentOption  =  new  Option();	  tokens.add(   "--   ");    currentOption    =    null;    	non-compiled	[CE]  <identifier>  expected	40	None	replace
18	[BUG]  [BUGGY]  tokens.add( "-- ");  currentOption  =  new  ArrayList();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.add( "-- ");  currentOption  =  new  ArrayList();  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	tokens.add( "-- ");  currentOption  =  new  ArrayList();	  tokens.add(   "--   ");    currentOption    =    null;    	non-compiled	[CE]  <identifier>  expected	40	None	replace
19	[BUG]  [BUGGY]  tokens.add( "-- ");  currentOption  =  options;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.add( "-- ");  currentOption  =  options;  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	tokens.add( "-- ");  currentOption  =  options;	  tokens.add(   "--   ");    currentOption    =    null;    	non-compiled	[CE]  <identifier>  expected	40	None	replace
20	[BUG]  [BUGGY]  if(!eatTheRest)  {  eatTheRest  =  false;  }  else  {  tokens.clear();  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  if(!eatTheRest)  {  eatTheRest  =  false;  }  else  {  tokens.clear();  currentOption  =  null;  }  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	if(!eatTheRest)  {  eatTheRest  =  false;  }  else  {  tokens.clear();  currentOption  =  null;  }	  if(!eatTheRest)    {    eatTheRest    =    true;    }    else    {    tokens.clear();    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
21	[BUG]  [BUGGY]  tokens.add( "[ ");  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.add( "[ ");  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	tokens.add( "[ ");	  tokens.add(   "       ");    	non-compiled	[CE]  <identifier>  expected	13	None	replace
22	[BUG]  [BUGGY]  ||  currentOption!=  null)  {  eatTheRest  =  true;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  ||  currentOption!=  null)  {  eatTheRest  =  true;  }  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	||  currentOption!=  null)  {  eatTheRest  =  true;  }	  if(eatTheRest!=    null)    {    eatTheRest    =    true;    }    	non-compiled	[CE]  <identifier>  expected	50	None	replace
23	[BUG]  [BUGGY]  if(currentOption!=  null)  {  tokens.clear();  eatTheRest  =  true;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  if(currentOption!=  null)  {  tokens.clear();  eatTheRest  =  true;  }  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	if(currentOption!=  null)  {  tokens.clear();  eatTheRest  =  true;  }	  if(eatTheRest!=    null)    {    eatTheRest    =    true;    }    	non-compiled	[CE]  <identifier>  expected	50	None	replace
24	[BUG]  [BUGGY]  tokens.add( "-- "  +  this.options);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.add( "-- "  +  this.options);  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	tokens.add( "-- "  +  this.options);	  tokens.add(   "--   ".equals(this.options));    	non-compiled	[CE]  <identifier>  expected	52	None	replace
25	[BUG]  [BUGGY]  tokens.add( "-- ").equals(this.options);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.add( "-- ").equals(this.options);  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	tokens.add( "-- ").equals(this.options);	  tokens.add(   "--   ".equals(this.options));    	non-compiled	[CE]  <identifier>  expected	52	None	replace
26	[BUG]  [BUGGY]  tokens.add( "-- ").equals(this.options));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.add( "-- ").equals(this.options));  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	tokens.add( "-- ").equals(this.options));	  tokens.add(   "--   ".equals(this.options));    	non-compiled	[CE]  <identifier>  expected	52	None	replace
27	[BUG]  [BUGGY]  tokens.add( "-1 ");  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.add( "-1 ");  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	tokens.add( "-1 ");	  tokens.add(   "-00   ");    	non-compiled	[CE]  <identifier>  expected	6	None	replace
28	[BUG]  [BUGGY]  tokens.add( "0000 ");  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.add( "0000 ");  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	tokens.add( "0000 ");	  tokens.add(   "00   ");    	non-compiled	[CE]  <identifier>  expected	5	None	replace
29	[BUG]  [BUGGY]  if(!eatTheRest)  {  tokens  =  new  LinkedList  <  Option>();  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  if(!eatTheRest)  {  tokens  =  new  LinkedList  <  Option>();  currentOption  =  null;  }  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	if(!eatTheRest)  {  tokens  =  new  LinkedList  <  Option>();  currentOption  =  null;  }	  tokens    =    new    LinkedList    <    Option>();    currentOption    =    null;    	non-compiled	[CE]  <identifier>  expected	20	None	replace
30	[BUG]  [BUGGY]  tokens  =  new  LinkedList  <  Option>();  currentOption  =  new  ArrayList  <  Option>();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens  =  new  LinkedList  <  Option>();  currentOption  =  new  ArrayList  <  Option>();  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	tokens  =  new  LinkedList  <  Option>();  currentOption  =  new  ArrayList  <  Option>();	  tokens    =    new    LinkedList    <    Option>();    currentOption    =    null;    	non-compiled	[CE]  <identifier>  expected	20	None	replace
31	[BUG]  [BUGGY]  tokens.add( "1 ");  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.add( "1 ");  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	tokens.add( "1 ");	  tokens.add(   "0   ");    	non-compiled	[CE]  <identifier>  expected	4	None	replace
32	[BUG]  [BUGGY]  tokens.set( "this ");  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.set( "this ");  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	tokens.set( "this ");	  tokens.remove(   "this   ");    	non-compiled	[CE]  <identifier>  expected	43	None	replace
33	[BUG]  [BUGGY]  tokens.remove( "this. ");  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.remove( "this. ");  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	tokens.remove( "this. ");	  tokens.remove(   "this   ");    	non-compiled	[CE]  <identifier>  expected	43	None	replace
34	[BUG]  [BUGGY]  if(currentOption  ==  null)  {  eatTheRest  =  true;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  if(currentOption  ==  null)  {  eatTheRest  =  true;  }  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	if(currentOption  ==  null)  {  eatTheRest  =  true;  }	  if(eatTheRest    ==    false)    {    eatTheRest    =    true;    }    	non-compiled	[CE]  <identifier>  expected	49	None	replace
35	[BUG]  [BUGGY]  ||  currentOption  ==  null)  {  eatTheRest  =  true;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  ||  currentOption  ==  null)  {  eatTheRest  =  true;  }  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	||  currentOption  ==  null)  {  eatTheRest  =  true;  }	  if(eatTheRest    ==    false)    {    eatTheRest    =    true;    }    	non-compiled	[CE]  <identifier>  expected	49	None	replace
36	[BUG]  [BUGGY]  if(currentOption  ==  null)  {  eatTheRest  =  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  if(currentOption  ==  null)  {  eatTheRest  =  false;  }  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	if(currentOption  ==  null)  {  eatTheRest  =  false;  }	  if(eatTheRest    ==    false)    {    eatTheRest    =    true;    }    	non-compiled	[CE]  <identifier>  expected	49	None	replace
37	[BUG]  [BUGGY]  tokens.add( "-- "  +  this.currentOption);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.add( "-- "  +  this.currentOption);  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	tokens.add( "-- "  +  this.currentOption);	  tokens.add(   "--   "    +    currentOption);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
38	[BUG]  [BUGGY]  tokens.add( "-- "  +  getValue());  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.add( "-- "  +  getValue());  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	tokens.add( "-- "  +  getValue());	  tokens.add(   "--   "    +    currentOption);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
39	[BUG]  [BUGGY]  if(currentOption!=  null)  {  eatTheRest  =  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  if(currentOption!=  null)  {  eatTheRest  =  false;  }  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	if(currentOption!=  null)  {  eatTheRest  =  false;  }	  if(currentOption!=    null)    {    eatTheRest    =    true;    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
40	[BUG]  [BUGGY]  if(!eatTheRest)  {  if(currentOption!=  null)  {  tokens.clear();  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  if(!eatTheRest)  {  if(currentOption!=  null)  {  tokens.clear();  currentOption  =  null;  }  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	if(!eatTheRest)  {  if(currentOption!=  null)  {  tokens.clear();  currentOption  =  null;  }	  if(eatTheRest)    {    if(currentOption!=    null)    {    tokens.clear();    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	41	None	replace
41	[BUG]  [BUGGY]  if(currentOption!=  null)  {  if(eatTheRest)  {  tokens.clear();  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  if(currentOption!=  null)  {  if(eatTheRest)  {  tokens.clear();  currentOption  =  null;  }  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	if(currentOption!=  null)  {  if(eatTheRest)  {  tokens.clear();  currentOption  =  null;  }	  if(eatTheRest)    {    if(currentOption!=    null)    {    tokens.clear();    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	41	None	replace
42	[BUG]  [BUGGY]  if(!eatTheRest)  {  if(currentOption  ==  null)  {  tokens.clear();  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  if(!eatTheRest)  {  if(currentOption  ==  null)  {  tokens.clear();  currentOption  =  null;  }  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	if(!eatTheRest)  {  if(currentOption  ==  null)  {  tokens.clear();  currentOption  =  null;  }	  if(eatTheRest)    {    if(currentOption!=    null)    {    tokens.clear();    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	41	None	replace
43	[BUG]  [BUGGY]  tokens.add( "$0 ");  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.add( "$0 ");  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	tokens.add( "$0 ");	  tokens.add(   "$00   ");    	non-compiled	[CE]  <identifier>  expected	7	None	replace
44	[BUG]  [BUGGY]  tokens.add( "$000 ");  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.add( "$000 ");  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	tokens.add( "$000 ");	  tokens.add(   "$00   ");    	non-compiled	[CE]  <identifier>  expected	7	None	replace
45	[BUG]  [BUGGY]  tokens.add( "$0000 ");  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.add( "$0000 ");  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	tokens.add( "$0000 ");	  tokens.add(   "$00   ");    	non-compiled	[CE]  <identifier>  expected	7	None	replace
46	[BUG]  [BUGGY]  tokens.add(new  Option( "current "));  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.add(new  Option( "current "));  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	tokens.add(new  Option( "current "));	  tokens.add(new    Option(   "position   "));    	non-compiled	[CE]  <identifier>  expected	48	None	replace
47	[BUG]  [BUGGY]  tokens.add(new  Option( "options "));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.add(new  Option( "options "));  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	tokens.add(new  Option( "options "));	  tokens.add(new    Option(   "position   "));    	non-compiled	[CE]  <identifier>  expected	48	None	replace
48	[BUG]  [BUGGY]  tokens.add(new  Option( "size "));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.add(new  Option( "size "));  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	tokens.add(new  Option( "size "));	  tokens.add(new    Option(   "position   "));    	non-compiled	[CE]  <identifier>  expected	48	None	replace
49	[BUG]  [BUGGY]  if(currentOption!=  null)  {  eatTheRest  =  false;  }  else  {  tokens.clear();  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  if(currentOption!=  null)  {  eatTheRest  =  false;  }  else  {  tokens.clear();  currentOption  =  null;  }  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	if(currentOption!=  null)  {  eatTheRest  =  false;  }  else  {  tokens.clear();  currentOption  =  null;  }	  eatTheRest    =    false;    	non-compiled	[CE]  <identifier>  expected	14	None	replace
50	[BUG]  [BUGGY]  if(currentOption  ==  null)  {  eatTheRest  =  false;  }  else  {  tokens.clear();  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  if(currentOption  ==  null)  {  eatTheRest  =  false;  }  else  {  tokens.clear();  currentOption  =  null;  }  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	if(currentOption  ==  null)  {  eatTheRest  =  false;  }  else  {  tokens.clear();  currentOption  =  null;  }	  eatTheRest    =    false;    	non-compiled	[CE]  <identifier>  expected	14	None	replace
51	[BUG]  [BUGGY]  tokens  =  new  ArrayList  <  Option>();  currentOption  =  new  ArrayList  <  Option>();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens  =  new  ArrayList  <  Option>();  currentOption  =  new  ArrayList  <  Option>();  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	tokens  =  new  ArrayList  <  Option>();  currentOption  =  new  ArrayList  <  Option>();	  tokens    =    new    ArrayList    <    Option>();    currentOption    =    null;    	non-compiled	[CE]  <identifier>  expected	19	None	replace
52	[BUG]  [BUGGY]  tokens.add( "- "  +  currentOption);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.add( "- "  +  currentOption);  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	tokens.add( "- "  +  currentOption);	  tokens.add(   "-   ");    	non-compiled	[CE]  <identifier>  expected	12	None	replace
53	[BUG]  [BUGGY]  tokens.add( "-n ");  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.add( "-n ");  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	tokens.add( "-n ");	  tokens.add(   "-   ");    	non-compiled	[CE]  <identifier>  expected	12	None	replace
54	[BUG]  [BUGGY]  tokens  =  new  TreeSet  <  Option>();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens  =  new  TreeSet  <  Option>();  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	tokens  =  new  TreeSet  <  Option>();	  tokens    =    new    LinkedList    <    Option>();    	non-compiled	[CE]  <identifier>  expected	8	None	replace
55	[BUG]  [BUGGY]  tokens  =  new  LinkedList  <  Option>(options.size());  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens  =  new  LinkedList  <  Option>(options.size());  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	tokens  =  new  LinkedList  <  Option>(options.size());	  tokens    =    new    LinkedList    <    Option>();    	non-compiled	[CE]  <identifier>  expected	8	None	replace
56	[BUG]  [BUGGY]  tokens.add( "[null] ");  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.add( "[null] ");  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	tokens.add( "[null] ");	  tokens.add(   "null   ");    	non-compiled	[CE]  <identifier>  expected	11	None	replace
57	[BUG]  [BUGGY]  tokens.add( "  <  null> ");  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.add( "  <  null> ");  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	tokens.add( "  <  null> ");	  tokens.add(   "null   ");    	non-compiled	[CE]  <identifier>  expected	11	None	replace
58	[BUG]  [BUGGY]  tokens.remove( "____________________________________________________________________  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.remove( "____________________________________________________________________  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	tokens.remove( "____________________________________________________________________	  tokens.remove(   "eatTheRest   ");    	non-compiled	[CE]  <identifier>  expected	51	None	replace
59	[BUG]  [BUGGY]  tokens.remove( "_____________________________________________________________________  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.remove( "_____________________________________________________________________  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	tokens.remove( "_____________________________________________________________________	  tokens.remove(   "eatTheRest   ");    	non-compiled	[CE]  <identifier>  expected	51	None	replace
60	[BUG]  [BUGGY]  tokens.remove( "______________________________________________________________________  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.remove( "______________________________________________________________________  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	tokens.remove( "______________________________________________________________________	  tokens.remove(   "eatTheRest   ");    	non-compiled	[CE]  <identifier>  expected	51	None	replace
61	[BUG]  [BUGGY]  tokens.remove( "___________________________________________________________________  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.remove( "___________________________________________________________________  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	tokens.remove( "___________________________________________________________________	  tokens.remove(   "eatTheRest   ");    	non-compiled	[CE]  <identifier>  expected	51	None	replace
62	[BUG]  [BUGGY]  tokens.remove();  currentOption  =  null;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.remove();  currentOption  =  null;  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	tokens.remove();  currentOption  =  null;	  if(currentOption!=    null)    {    tokens.remove();    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	24	None	replace
63	[BUG]  [BUGGY]  tokens  =  new  ArrayList  <  Option>(options.size()  +  1);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens  =  new  ArrayList  <  Option>(options.size()  +  1);  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	tokens  =  new  ArrayList  <  Option>(options.size()  +  1);	  tokens    =    new    ArrayList    <    Option>(options.size());    	non-compiled	[CE]  <identifier>  expected	9	None	replace
64	[BUG]  [BUGGY]  tokens  =  new  ArrayList  <  Option>(options.size()  -  1);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens  =  new  ArrayList  <  Option>(options.size()  -  1);  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	tokens  =  new  ArrayList  <  Option>(options.size()  -  1);	  tokens    =    new    ArrayList    <    Option>(options.size());    	non-compiled	[CE]  <identifier>  expected	9	None	replace
65	[BUG]  [BUGGY]  tokens.add(new  Option( "Operation ")));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.add(new  Option( "Operation ")));  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	tokens.add(new  Option( "Operation ")));	  tokens.add(new    Option(   "Operation   "));    	non-compiled	[CE]  <identifier>  expected	22	None	replace
66	[BUG]  [BUGGY]  tokens  =  new  LinkedList  <  Option>(options);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens  =  new  LinkedList  <  Option>(options);  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	tokens  =  new  LinkedList  <  Option>(options);	  tokens    =    new    ArrayList    <    Option>(options);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
67	[BUG]  [BUGGY]  tokens  =  new  ArrayList  <  Option>(options,  currentOption);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens  =  new  ArrayList  <  Option>(options,  currentOption);  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	tokens  =  new  ArrayList  <  Option>(options,  currentOption);	  tokens    =    new    ArrayList    <    Option>(options);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
68	[BUG]  [BUGGY]  if(!eatTheRest)  {  tokens.clear();  currentOption  =  new  Option(this);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  if(!eatTheRest)  {  tokens.clear();  currentOption  =  new  Option(this);  }  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	if(!eatTheRest)  {  tokens.clear();  currentOption  =  new  Option(this);  }	  tokens.clear();    currentOption    =    new    Option(this);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
69	[BUG]  [BUGGY]  tokens.clear();  currentOption  =  new  Option(this,  options);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.clear();  currentOption  =  new  Option(this,  options);  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	tokens.clear();  currentOption  =  new  Option(this,  options);	  tokens.clear();    currentOption    =    new    Option(this);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
70	[BUG]  [BUGGY]  if(!eatTheRest)  {  tokens.clear();  currentOption  =  new  Option(this);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  if(!eatTheRest)  {  tokens.clear();  currentOption  =  new  Option(this);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	if(!eatTheRest)  {  tokens.clear();  currentOption  =  new  Option(this);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  tokens.clear();    currentOption    =    new    Option(this);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
71	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens.size();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens.size();  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	TokenBuffer  tokens  =  new  TokenBuffer(tokens.size();	  TokenBuffer    tokens    =    new    TokenBuffer(tokens.size()    -    2);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
72	[BUG]  [BUGGY]  tokens.addAll(this.options);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.addAll(this.options);  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	tokens.addAll(this.options);	  tokens.addAll(tokens);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
73	[BUG]  [BUGGY]  tokens.addAll(options);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.addAll(options);  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	tokens.addAll(options);	  tokens.addAll(tokens);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
74	[BUG]  [BUGGY]  tokens.addAll(Arrays.asList(tokens));  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.addAll(Arrays.asList(tokens));  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	tokens.addAll(Arrays.asList(tokens));	  tokens.addAll(tokens);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
75	[BUG]  [BUGGY]  tokens.addAll(Arrays.asList(options));  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.addAll(Arrays.asList(options));  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	tokens.addAll(Arrays.asList(options));	  tokens.addAll(tokens);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
76	[BUG]  [BUGGY]  if(!eatTheRest)  {  tokens.clear();  currentOption  =  null;  }  else  {  options.add(option);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  if(!eatTheRest)  {  tokens.clear();  currentOption  =  null;  }  else  {  options.add(option);  }  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	if(!eatTheRest)  {  tokens.clear();  currentOption  =  null;  }  else  {  options.add(option);  }	  if(eatTheRest)    {    tokens.clear();    currentOption    =    null;    }    else    {    options.add(option);    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
77	[BUG]  [BUGGY]  if(currentOption!=  null)  {  if(!eatTheRest)  {  eatTheRest  =  true;  }  else  {  tokens.clear();  System.arraycopy(currentOption,  0,  tokens.size()  -  1,  tokens.size());  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  if(currentOption!=  null)  {  if(!eatTheRest)  {  eatTheRest  =  true;  }  else  {  tokens.clear();  System.arraycopy(currentOption,  0,  tokens.size()  -  1,  tokens.size());  currentOption  =  null;  }  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	if(currentOption!=  null)  {  if(!eatTheRest)  {  eatTheRest  =  true;  }  else  {  tokens.clear();  System.arraycopy(currentOption,  0,  tokens.size()  -  1,  tokens.size());  currentOption  =  null;  }	  if(!eatTheRest)    {    eatTheRest    =    true;    }    else    {    tokens.clear();    System.arraycopy(currentOption,    0,    tokens.size()    -    1,    tokens.size());    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
78	[BUG]  [BUGGY]  tokens.clear();  System.arraycopy(currentOption,  0,  tokens.size()  -  1,  tokens.size());  currentOption  =  null;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.clear();  System.arraycopy(currentOption,  0,  tokens.size()  -  1,  tokens.size());  currentOption  =  null;  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	tokens.clear();  System.arraycopy(currentOption,  0,  tokens.size()  -  1,  tokens.size());  currentOption  =  null;	  if(!eatTheRest)    {    eatTheRest    =    true;    }    else    {    tokens.clear();    System.arraycopy(currentOption,    0,    tokens.size()    -    1,    tokens.size());    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
79	[BUG]  [BUGGY]  if(currentOption!=  null)  {  if(!eatTheRest)  {  eatTheRest  =  true;  }  else  {  tokens.clear();  System.arraycopy(currentOption,  0,  tokens.size()  -  1,  tokens.size());  currentOption  =  null;  }  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  if(currentOption!=  null)  {  if(!eatTheRest)  {  eatTheRest  =  true;  }  else  {  tokens.clear();  System.arraycopy(currentOption,  0,  tokens.size()  -  1,  tokens.size());  currentOption  =  null;  }  }  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	if(currentOption!=  null)  {  if(!eatTheRest)  {  eatTheRest  =  true;  }  else  {  tokens.clear();  System.arraycopy(currentOption,  0,  tokens.size()  -  1,  tokens.size());  currentOption  =  null;  }  }	  if(!eatTheRest)    {    eatTheRest    =    true;    }    else    {    tokens.clear();    System.arraycopy(currentOption,    0,    tokens.size()    -    1,    tokens.size());    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
80	[BUG]  [BUGGY]  if(!eatTheRest)  {  if(currentOption!=  null)  {  eatTheRest  =  true;  }  else  {  tokens.clear();  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  if(!eatTheRest)  {  if(currentOption!=  null)  {  eatTheRest  =  true;  }  else  {  tokens.clear();  currentOption  =  null;  }  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	if(!eatTheRest)  {  if(currentOption!=  null)  {  eatTheRest  =  true;  }  else  {  tokens.clear();  currentOption  =  null;  }	  if(currentOption!=    null)    {    eatTheRest    =    true;    }    else    {    tokens.clear();    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
81	[BUG]  [BUGGY]  if(!eatTheRest)  {  if(currentOption!=  null)  {  eatTheRest  =  true;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  if(!eatTheRest)  {  if(currentOption!=  null)  {  eatTheRest  =  true;  }  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	if(!eatTheRest)  {  if(currentOption!=  null)  {  eatTheRest  =  true;  }	  if(currentOption!=    null)    {    eatTheRest    =    true;    }    else    {    tokens.clear();    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
82	[BUG]  [BUGGY]  s.clear();  currentOption  =  null;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  s.clear();  currentOption  =  null;  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	s.clear();  currentOption  =  null;	  if(eatTheRest)    {    tokens.clear();    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	39	None	replace
83	[BUG]  [BUGGY]  tokens.clear();  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.clear();  currentOption  =  null;  }  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	tokens.clear();  currentOption  =  null;  }	  if(eatTheRest)    {    tokens.clear();    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	39	None	replace
84	[BUG]  [BUGGY]  tokens  =  new  ArrayList  <  Option>(tokens.size()  +  1);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens  =  new  ArrayList  <  Option>(tokens.size()  +  1);  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	tokens  =  new  ArrayList  <  Option>(tokens.size()  +  1);	  tokens    =    new    ArrayList    <    Option>(tokens.size());    	non-compiled	[CE]  <identifier>  expected	46	None	replace
85	[BUG]  [BUGGY]  tokens  =  new  ArrayList  <  Option>(tokens.size()  -  1);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens  =  new  ArrayList  <  Option>(tokens.size()  -  1);  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	tokens  =  new  ArrayList  <  Option>(tokens.size()  -  1);	  tokens    =    new    ArrayList    <    Option>(tokens.size());    	non-compiled	[CE]  <identifier>  expected	46	None	replace
86	[BUG]  [BUGGY]  tokens  =  new  LinkedList  <  Option>(tokens.size());  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens  =  new  LinkedList  <  Option>(tokens.size());  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	tokens  =  new  LinkedList  <  Option>(tokens.size());	  tokens    =    new    ArrayList    <    Option>(tokens.size());    	non-compiled	[CE]  <identifier>  expected	46	None	replace
87	[BUG]  [BUGGY]  tokens.add( "-- "  +  currentOption.getName());  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.add( "-- "  +  currentOption.getName());  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	tokens.add( "-- "  +  currentOption.getName());	  tokens.add(   "--   ".equals(currentOption.getName()));    	non-compiled	[CE]  <identifier>  expected	53	None	replace
88	[BUG]  [BUGGY]  tokens.add( "-- ".equals(currentOption.getText()));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.add( "-- ".equals(currentOption.getText()));  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	tokens.add( "-- ".equals(currentOption.getText()));	  tokens.add(   "--   ".equals(currentOption.getName()));    	non-compiled	[CE]  <identifier>  expected	53	None	replace
89	[BUG]  [BUGGY]  if(!eatTheRest)  {  tokens.remove();  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  if(!eatTheRest)  {  tokens.remove();  currentOption  =  null;  }  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	if(!eatTheRest)  {  tokens.remove();  currentOption  =  null;  }	  if(!eatTheRest)    {    tokens.clear();    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	38	None	replace
90	[BUG]  [BUGGY]  if(!eatTheRest)  {  tokens.clear();  currentOption  =  new  ArrayList();  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  if(!eatTheRest)  {  tokens.clear();  currentOption  =  new  ArrayList();  }  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	if(!eatTheRest)  {  tokens.clear();  currentOption  =  new  ArrayList();  }	  tokens.clear();    currentOption    =    new    ArrayList();    	non-compiled	[CE]  <identifier>  expected	27	None	replace
91	[BUG]  [BUGGY]  if(!eatTheRest)  {  tokens.clear();  currentOption  =  new  ArrayList();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  if(!eatTheRest)  {  tokens.clear();  currentOption  =  new  ArrayList();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	if(!eatTheRest)  {  tokens.clear();  currentOption  =  new  ArrayList();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  tokens.clear();    currentOption    =    new    ArrayList();    	non-compiled	[CE]  <identifier>  expected	27	None	replace
92	[BUG]  [BUGGY]  options.clear();  currentOption  =  new  ArrayList();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  options.clear();  currentOption  =  new  ArrayList();  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	options.clear();  currentOption  =  new  ArrayList();	  tokens.clear();    currentOption    =    new    ArrayList();    	non-compiled	[CE]  <identifier>  expected	27	None	replace
93	[BUG]  [BUGGY]  tokens.add(currentOption);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.add(currentOption);  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	tokens.add(currentOption);	  tokens.remove(0);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
94	[BUG]  [BUGGY]  tokens.add(0,  currentOption);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.add(0,  currentOption);  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	tokens.add(0,  currentOption);	  tokens.remove(0);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
95	[BUG]  [BUGGY]  tokens.clear();  currentOption  =  new  Options(options);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.clear();  currentOption  =  new  Options(options);  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	tokens.clear();  currentOption  =  new  Options(options);	  tokens.clear();    currentOption    =    new    Options();    	non-compiled	[CE]  <identifier>  expected	29	None	replace
96	[BUG]  [BUGGY]  tokens.clear();  currentOption  =  new  Option();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.clear();  currentOption  =  new  Option();  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	tokens.clear();  currentOption  =  new  Option();	  tokens.clear();    currentOption    =    new    Options();    	non-compiled	[CE]  <identifier>  expected	29	None	replace
97	[BUG]  [BUGGY]  if(!eatTheRest)  {  options.clear();  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  if(!eatTheRest)  {  options.clear();  currentOption  =  null;  }  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	if(!eatTheRest)  {  options.clear();  currentOption  =  null;  }	  options.clear();    currentOption    =    null;    	non-compiled	[CE]  <identifier>  expected	23	None	replace
98	[BUG]  [BUGGY]  tokens.add(new  Option( "Option));  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.add(new  Option( "Option));  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	tokens.add(new  Option( "Option));	  tokens.add(new    Option(   "Option   "));    	non-compiled	[CE]  <identifier>  expected	21	None	replace
99	[BUG]  [BUGGY]  tokens.remove(tokens.size()  -  1);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.remove(tokens.size()  -  1);  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	tokens.remove(tokens.size()  -  1);	  tokens.remove(0);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
100	[BUG]  [BUGGY]  tokens.add( ": ");  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.add( ": ");  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	tokens.add( ": ");	  tokens.add(   "       ");    	non-compiled	[CE]  <identifier>  expected	13	None	replace
101	[BUG]  [BUGGY]  tokens.add( "-- ".equals(currentOption.getKey()));  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.add( "-- ".equals(currentOption.getKey()));  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	tokens.add( "-- ".equals(currentOption.getKey()));	  tokens.add(   "--   ".equals(currentOption.getName()));    	non-compiled	[CE]  <identifier>  expected	53	None	replace
102	[BUG]  [BUGGY]  tokens.add( "--neg ");  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.add( "--neg ");  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	tokens.add( "--neg ");	  tokens.add(   "--n   ");    	non-compiled	[CE]  <identifier>  expected	2	None	replace
103	[BUG]  [BUGGY]  tokens.addAll(Arrays.asList(this.options));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.addAll(Arrays.asList(this.options));  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	tokens.addAll(Arrays.asList(this.options));	  tokens.addAll(tokens);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
104	[BUG]  [BUGGY]  tokens.add( "-- "  +  getOptionName());  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.add( "-- "  +  getOptionName());  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	tokens.add( "-- "  +  getOptionName());	  tokens.add(   "--   "    +    currentOption);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
105	[BUG]  [BUGGY]  if(currentOption!=  null)  {  eatTheRest  =  false;  }  else  {  tokens.add(currentOption);  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  if(currentOption!=  null)  {  eatTheRest  =  false;  }  else  {  tokens.add(currentOption);  currentOption  =  null;  }  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	if(currentOption!=  null)  {  eatTheRest  =  false;  }  else  {  tokens.add(currentOption);  currentOption  =  null;  }	  eatTheRest    =    false;    	non-compiled	[CE]  <identifier>  expected	14	None	replace
106	[BUG]  [BUGGY]  currentOption  =  Option.NONE;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  currentOption  =  Option.NONE;  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	currentOption  =  Option.NONE;	  currentOption    =    null;    	non-compiled	[CE]  <identifier>  expected	33	None	replace
107	[BUG]  [BUGGY]  if(!eatTheRest)  {  options.clear();  currentOption  =  null;  }  else  {  tokens.clear();  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  if(!eatTheRest)  {  options.clear();  currentOption  =  null;  }  else  {  tokens.clear();  currentOption  =  null;  }  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	if(!eatTheRest)  {  options.clear();  currentOption  =  null;  }  else  {  tokens.clear();  currentOption  =  null;  }	  options.clear();    currentOption    =    null;    	non-compiled	[CE]  <identifier>  expected	23	None	replace
108	[BUG]  [BUGGY]  tokens.remove( "-- ");  currentOption  =  null;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.remove( "-- ");  currentOption  =  null;  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	tokens.remove( "-- ");  currentOption  =  null;	  tokens.add(   "--   ");    currentOption    =    null;    	non-compiled	[CE]  <identifier>  expected	40	None	replace
109	[BUG]  [BUGGY]  if(!eatTheRest)  {  tokens.clear();  currentOption  =  new  Options();  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  if(!eatTheRest)  {  tokens.clear();  currentOption  =  new  Options();  }  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	if(!eatTheRest)  {  tokens.clear();  currentOption  =  new  Options();  }	  tokens.clear();    currentOption    =    new    Options();    	non-compiled	[CE]  <identifier>  expected	29	None	replace
110	[BUG]  [BUGGY]  if(eatTheRest)  {  tokens.clear();  currentOption  =  new  Options();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  if(eatTheRest)  {  tokens.clear();  currentOption  =  new  Options();  }  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	if(eatTheRest)  {  tokens.clear();  currentOption  =  new  Options();  }	  tokens.clear();    currentOption    =    new    Options();    	non-compiled	[CE]  <identifier>  expected	29	None	replace
111	[BUG]  [BUGGY]  if(!eatTheRest)  {  tokens.clear();  currentOption  =  new  Option();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  if(!eatTheRest)  {  tokens.clear();  currentOption  =  new  Option();  }  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	if(!eatTheRest)  {  tokens.clear();  currentOption  =  new  Option();  }	  tokens.clear();    currentOption    =    new    Options();    	non-compiled	[CE]  <identifier>  expected	29	None	replace
112	[BUG]  [BUGGY]  if(eatTheRest)  {  tokens.clear();  currentOption  =  new  ArrayList();  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  if(eatTheRest)  {  tokens.clear();  currentOption  =  new  ArrayList();  }  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	if(eatTheRest)  {  tokens.clear();  currentOption  =  new  ArrayList();  }	  tokens.clear();    currentOption    =    new    ArrayList();    	non-compiled	[CE]  <identifier>  expected	27	None	replace
113	[BUG]  [BUGGY]  if(eatTheRest)  {  tokens.clear();  currentOption  =  new  ArrayList();  }  else  {  options.add(options);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  if(eatTheRest)  {  tokens.clear();  currentOption  =  new  ArrayList();  }  else  {  options.add(options);  }  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	if(eatTheRest)  {  tokens.clear();  currentOption  =  new  ArrayList();  }  else  {  options.add(options);  }	  tokens.clear();    currentOption    =    new    ArrayList();    	non-compiled	[CE]  <identifier>  expected	27	None	replace
114	[BUG]  [BUGGY]  if(currentOption!=  null)  {  if(!eatTheRest)  {  eatTheRest  =  true;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  if(currentOption!=  null)  {  if(!eatTheRest)  {  eatTheRest  =  true;  }  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	if(currentOption!=  null)  {  if(!eatTheRest)  {  eatTheRest  =  true;  }	  if(!eatTheRest)    {    eatTheRest    =    true;    }    else    {    tokens.clear();    System.arraycopy(currentOption,    0,    tokens.size()    -    1,    tokens.size());    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
115	[BUG]  [BUGGY]  if(!eatTheRest)  {  eatTheRest  =  false;  }  else  {  tokens.clear();  System.arraycopy(currentOption,  0,  tokens.size()  -  1,  tokens.size());  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  if(!eatTheRest)  {  eatTheRest  =  false;  }  else  {  tokens.clear();  System.arraycopy(currentOption,  0,  tokens.size()  -  1,  tokens.size());  currentOption  =  null;  }  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	if(!eatTheRest)  {  eatTheRest  =  false;  }  else  {  tokens.clear();  System.arraycopy(currentOption,  0,  tokens.size()  -  1,  tokens.size());  currentOption  =  null;  }	  if(!eatTheRest)    {    eatTheRest    =    true;    }    else    {    tokens.clear();    System.arraycopy(currentOption,    0,    tokens.size()    -    1,    tokens.size());    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
116	[BUG]  [BUGGY]  if(currentOption  ==  null)  {  eatTheRest  =  true;  }  else  {  tokens.clear();  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  if(currentOption  ==  null)  {  eatTheRest  =  true;  }  else  {  tokens.clear();  currentOption  =  null;  }  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	if(currentOption  ==  null)  {  eatTheRest  =  true;  }  else  {  tokens.clear();  currentOption  =  null;  }	  if(currentOption!=    null)    {    eatTheRest    =    true;    }    else    {    tokens.clear();    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
117	[BUG]  [BUGGY]  tokens.add(new  Option( "this "));  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.add(new  Option( "this "));  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	tokens.add(new  Option( "this "));	  tokens.add(new    Option(   "position   "));    	non-compiled	[CE]  <identifier>  expected	48	None	replace
118	[BUG]  [BUGGY]  tokens  =  new  ArrayList  <  Option>(options,  options.size());  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens  =  new  ArrayList  <  Option>(options,  options.size());  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	tokens  =  new  ArrayList  <  Option>(options,  options.size());	  tokens    =    new    ArrayList    <    Option>(options);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
119	[BUG]  [BUGGY]  tokens.add( "-0 ");  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.add( "-0 ");  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	tokens.add( "-0 ");	  tokens.add(   "0   ");    	non-compiled	[CE]  <identifier>  expected	4	None	replace
120	[BUG]  [BUGGY]  if(!eatTheRest)  {  currentOption  =  null;  tokens.clear();  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  if(!eatTheRest)  {  currentOption  =  null;  tokens.clear();  currentOption  =  null;  }  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	if(!eatTheRest)  {  currentOption  =  null;  tokens.clear();  currentOption  =  null;  }	  if(eatTheRest)    {    currentOption    =    null;    tokens.clear();    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	56	None	replace
121	[BUG]  [BUGGY]  if(eatTheRest)  {  currentOption  =  null;  tokens.remove();  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  if(eatTheRest)  {  currentOption  =  null;  tokens.remove();  currentOption  =  null;  }  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	if(eatTheRest)  {  currentOption  =  null;  tokens.remove();  currentOption  =  null;  }	  if(eatTheRest)    {    currentOption    =    null;    tokens.clear();    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	56	None	replace
122	[BUG]  [BUGGY]  tokens.add( "eatTheRest ");  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.add( "eatTheRest ");  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	tokens.add( "eatTheRest ");	  tokens.remove(   "eatTheRest   ");    	non-compiled	[CE]  <identifier>  expected	51	None	replace
123	[BUG]  [BUGGY]  tokens.remove( "-eatTheRest ");  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.remove( "-eatTheRest ");  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	tokens.remove( "-eatTheRest ");	  tokens.remove(   "eatTheRest   ");    	non-compiled	[CE]  <identifier>  expected	51	None	replace
124	[BUG]  [BUGGY]  tokens.remove( "this.eatTheRest ");  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.remove( "this.eatTheRest ");  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	tokens.remove( "this.eatTheRest ");	  tokens.remove(   "eatTheRest   ");    	non-compiled	[CE]  <identifier>  expected	51	None	replace
125	[BUG]  [BUGGY]  tokens  =  new  java.util.ArrayList  <  Option>();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens  =  new  java.util.ArrayList  <  Option>();  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	tokens  =  new  java.util.ArrayList  <  Option>();	  tokens    =    new    LinkedList    <    Option>();    	non-compiled	[CE]  <identifier>  expected	8	None	replace
126	[BUG]  [BUGGY]  if(eatTheRest)  {  tokens.clear();  currentOption  =  new  Option(this);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  if(eatTheRest)  {  tokens.clear();  currentOption  =  new  Option(this);  }  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	if(eatTheRest)  {  tokens.clear();  currentOption  =  new  Option(this);  }	  tokens.clear();    currentOption    =    new    Option(this);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
127	[BUG]  [BUGGY]  if(eatTheRest)  {  tokens.clear();  currentOption  =  new  Option(this);  }  else  {  options.add(currentOption);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  if(eatTheRest)  {  tokens.clear();  currentOption  =  new  Option(this);  }  else  {  options.add(currentOption);  }  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	if(eatTheRest)  {  tokens.clear();  currentOption  =  new  Option(this);  }  else  {  options.add(currentOption);  }	  tokens.clear();    currentOption    =    new    Option(this);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
128	[BUG]  [BUGGY]  if(eatTheRest)  {  tokens  =  new  ArrayList  <  Option>();  currentOption  =  null;  }  else  {  options.clear();  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  if(eatTheRest)  {  tokens  =  new  ArrayList  <  Option>();  currentOption  =  null;  }  else  {  options.clear();  currentOption  =  null;  }  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	if(eatTheRest)  {  tokens  =  new  ArrayList  <  Option>();  currentOption  =  null;  }  else  {  options.clear();  currentOption  =  null;  }	  tokens    =    new    ArrayList    <    Option>();    currentOption    =    null;    	non-compiled	[CE]  <identifier>  expected	19	None	replace
129	[BUG]  [BUGGY]  if(eatTheRest!=  null)  {  eatTheRest  =  false;  }  else  {  tokens.clear();  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  if(eatTheRest!=  null)  {  eatTheRest  =  false;  }  else  {  tokens.clear();  currentOption  =  null;  }  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	if(eatTheRest!=  null)  {  eatTheRest  =  false;  }  else  {  tokens.clear();  currentOption  =  null;  }	  eatTheRest    =    false;    	non-compiled	[CE]  <identifier>  expected	14	None	replace
130	[BUG]  [BUGGY]  if(eatTheRest  ==  null)  {  eatTheRest  =  false;  }  else  {  tokens.clear();  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  if(eatTheRest  ==  null)  {  eatTheRest  =  false;  }  else  {  tokens.clear();  currentOption  =  null;  }  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	if(eatTheRest  ==  null)  {  eatTheRest  =  false;  }  else  {  tokens.clear();  currentOption  =  null;  }	  eatTheRest    =    false;    	non-compiled	[CE]  <identifier>  expected	14	None	replace
131	[BUG]  [BUGGY]  currentOption  =  options.getOption( "eatTheRest ");  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  currentOption  =  options.getOption( "eatTheRest ");  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	currentOption  =  options.getOption( "eatTheRest ");	  currentOption    =    null;    	non-compiled	[CE]  <identifier>  expected	33	None	replace
132	[BUG]  [BUGGY]  while(eatTheRest!=  null)  {  eatTheRest  =  true;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  while(eatTheRest!=  null)  {  eatTheRest  =  true;  }  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	while(eatTheRest!=  null)  {  eatTheRest  =  true;  }	  if(eatTheRest!=    null)    {    eatTheRest    =    true;    }    	non-compiled	[CE]  <identifier>  expected	50	None	replace
133	[BUG]  [BUGGY]  tokens.addAll(this);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.addAll(this);  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	tokens.addAll(this);	  tokens.addAll(tokens);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
134	[BUG]  [BUGGY]  tokens.addAll(this.tokens);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.addAll(this.tokens);  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	tokens.addAll(this.tokens);	  tokens.addAll(tokens);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
135	[BUG]  [BUGGY]  if(eatTheRest)  {  tokens.remove();  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  if(eatTheRest)  {  tokens.remove();  currentOption  =  null;  }  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	if(eatTheRest)  {  tokens.remove();  currentOption  =  null;  }	  if(currentOption!=    null)    {    tokens.remove();    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	24	None	replace
136	[BUG]  [BUGGY]  if(eatTheRest)  {  currentOption  =  new  Option();  tokens.clear();  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  if(eatTheRest)  {  currentOption  =  new  Option();  tokens.clear();  currentOption  =  null;  }  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	if(eatTheRest)  {  currentOption  =  new  Option();  tokens.clear();  currentOption  =  null;  }	  if(eatTheRest)    {    currentOption    =    null;    tokens.clear();    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	56	None	replace
137	[BUG]  [BUGGY]  tokens.remove( "--eatTheRest ");  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.remove( "--eatTheRest ");  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	tokens.remove( "--eatTheRest ");	  tokens.remove(   "eatTheRest   ");    	non-compiled	[CE]  <identifier>  expected	51	None	replace
138	[BUG]  [BUGGY]  tokens.remove( "eattheRest ");  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.remove( "eattheRest ");  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	tokens.remove( "eattheRest ");	  tokens.remove(   "eatTheRest   ");    	non-compiled	[CE]  <identifier>  expected	51	None	replace
139	[BUG]  [BUGGY]  if(eatTheRest!=  false)  {  eatTheRest  =  true;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  if(eatTheRest!=  false)  {  eatTheRest  =  true;  }  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	if(eatTheRest!=  false)  {  eatTheRest  =  true;  }	  if(eatTheRest    ==    false)    {    eatTheRest    =    true;    }    	non-compiled	[CE]  <identifier>  expected	49	None	replace
140	[BUG]  [BUGGY]  if(eatTheRest)  {  eatTheRest  =  true;  }  else  {  tokens.clear();  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  if(eatTheRest)  {  eatTheRest  =  true;  }  else  {  tokens.clear();  currentOption  =  null;  }  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	if(eatTheRest)  {  eatTheRest  =  true;  }  else  {  tokens.clear();  currentOption  =  null;  }	  if(!eatTheRest)    {    eatTheRest    =    true;    }    else    {    tokens.clear();    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
141	[BUG]  [BUGGY]  tokens.add( "-- "  +  this.eatTheRest);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.add( "-- "  +  this.eatTheRest);  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	tokens.add( "-- "  +  this.eatTheRest);	  tokens.add(   "--   "    +    eatTheRest);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
142	[BUG]  [BUGGY]  tokens.add(new  Option( "eatTheRest "));  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.add(new  Option( "eatTheRest "));  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	tokens.add(new  Option( "eatTheRest "));	  tokens.add(new    Option(   "position   "));    	non-compiled	[CE]  <identifier>  expected	48	None	replace
143	[BUG]  [BUGGY]  tokens.add(new  Option( "size() "));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.add(new  Option( "size() "));  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	tokens.add(new  Option( "size() "));	  tokens.add(new    Option(   "position   "));    	non-compiled	[CE]  <identifier>  expected	48	None	replace
144	[BUG]  [BUGGY]  tokens.add( "$1 ");  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.add( "$1 ");  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	tokens.add( "$1 ");	  tokens.add(   "$00   ");    	non-compiled	[CE]  <identifier>  expected	7	None	replace
145	[BUG]  [BUGGY]  tokens.add( "-- "  +  getKey());  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.add( "-- "  +  getKey());  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	tokens.add( "-- "  +  getKey());	  tokens.add(   "--   "    +    currentOption);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
146	[BUG]  [BUGGY]  System.arraycopy(currentOption,  0,  tokens.size()  -  1,  tokens.size());  currentOption  =  null;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  System.arraycopy(currentOption,  0,  tokens.size()  -  1,  tokens.size());  currentOption  =  null;  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	System.arraycopy(currentOption,  0,  tokens.size()  -  1,  tokens.size());  currentOption  =  null;	  if(!eatTheRest)    {    eatTheRest    =    true;    }    else    {    tokens.clear();    System.arraycopy(currentOption,    0,    tokens.size()    -    1,    tokens.size());    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
147	[BUG]  [BUGGY]  if(!eatTheRest)  {  tokens.add( "-- ");  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  if(!eatTheRest)  {  tokens.add( "-- ");  currentOption  =  null;  }  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	if(!eatTheRest)  {  tokens.add( "-- ");  currentOption  =  null;  }	  if(!eatTheRest)    {    tokens.clear();    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	38	None	replace
148	[BUG]  [BUGGY]  if(eatTheRest)  {  tokens.add( "-- ");  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  if(eatTheRest)  {  tokens.add( "-- ");  currentOption  =  null;  }  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	if(eatTheRest)  {  tokens.add( "-- ");  currentOption  =  null;  }	  if(eatTheRest)    {    tokens.clear();    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	39	None	replace
149	[BUG]  [BUGGY]  tokens.add( "- ".equals(this.options));  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.add( "- ".equals(this.options));  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	tokens.add( "- ".equals(this.options));	  tokens.add(   "-   ");    	non-compiled	[CE]  <identifier>  expected	12	None	replace
150	[BUG]  [BUGGY]  tokens.add( "- ".equals(currentOption.getName()));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.add( "- ".equals(currentOption.getName()));  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	tokens.add( "- ".equals(currentOption.getName()));	  tokens.add(   "-   ");    	non-compiled	[CE]  <identifier>  expected	12	None	replace
151	[BUG]  [BUGGY]  if(eatTheRest)  {  tokens  =  new  LinkedList  <  Option>();  currentOption  =  null;  }  else  {  options.clear();  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  if(eatTheRest)  {  tokens  =  new  LinkedList  <  Option>();  currentOption  =  null;  }  else  {  options.clear();  currentOption  =  null;  }  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	if(eatTheRest)  {  tokens  =  new  LinkedList  <  Option>();  currentOption  =  null;  }  else  {  options.clear();  currentOption  =  null;  }	  tokens    =    new    LinkedList    <    Option>();    currentOption    =    null;    	non-compiled	[CE]  <identifier>  expected	20	None	replace
152	[BUG]  [BUGGY]  tokens.add( "0 ",  new  PosixParser());  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.add( "0 ",  new  PosixParser());  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	tokens.add( "0 ",  new  PosixParser());	  tokens.add(   "0   ");    	non-compiled	[CE]  <identifier>  expected	4	None	replace
153	[BUG]  [BUGGY]  tokens.add(new  Option( "ExternalOption "));  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.add(new  Option( "ExternalOption "));  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	tokens.add(new  Option( "ExternalOption "));	  tokens.add(new    Option(   "Option   "));    	non-compiled	[CE]  <identifier>  expected	21	None	replace
154	[BUG]  [BUGGY]  tokens.add(new  Option( "OPTIMIZATION "));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.add(new  Option( "OPTIMIZATION "));  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	tokens.add(new  Option( "OPTIMIZATION "));	  tokens.add(new    Option(   "Operation   "));    	non-compiled	[CE]  <identifier>  expected	22	None	replace
155	[BUG]  [BUGGY]  tokens.add(new  Option( "Operation "),  true);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.add(new  Option( "Operation "),  true);  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	tokens.add(new  Option( "Operation "),  true);	  tokens.add(new    Option(   "Operation   "));    	non-compiled	[CE]  <identifier>  expected	22	None	replace
156	[BUG]  [BUGGY]  if(eatTheRest)  {  tokens.clear();  currentOption  =  new  Options();  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  if(eatTheRest)  {  tokens.clear();  currentOption  =  new  Options();  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	if(eatTheRest)  {  tokens.clear();  currentOption  =  new  Options();  }  else  {  throw  new  IllegalStateException( " ");  }	  tokens.clear();    currentOption    =    new    Options();    	non-compiled	[CE]  <identifier>  expected	29	None	replace
157	[BUG]  [BUGGY]  if(eatTheRest)  {  tokens.clear();  currentOption  =  new  Options();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  if(eatTheRest)  {  tokens.clear();  currentOption  =  new  Options();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	if(eatTheRest)  {  tokens.clear();  currentOption  =  new  Options();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  tokens.clear();    currentOption    =    new    Options();    	non-compiled	[CE]  <identifier>  expected	29	None	replace
158	[BUG]  [BUGGY]  tokens.add( "-- ");  currentOption  =  new  Options();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.add( "-- ");  currentOption  =  new  Options();  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	tokens.add( "-- ");  currentOption  =  new  Options();	  tokens.add(   "--   ");    currentOption    =    null;    	non-compiled	[CE]  <identifier>  expected	40	None	replace
159	[BUG]  [BUGGY]  while(!eatTheRest)  {  eatTheRest  =  true;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  while(!eatTheRest)  {  eatTheRest  =  true;  }  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	while(!eatTheRest)  {  eatTheRest  =  true;  }	  if(!eatTheRest)    {    eatTheRest    =    true;    }    	non-compiled	[CE]  <identifier>  expected	44	None	replace
160	[BUG]  [BUGGY]  while(!eatTheRest)  {  eatTheRest  =  false;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  while(!eatTheRest)  {  eatTheRest  =  false;  }  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	while(!eatTheRest)  {  eatTheRest  =  false;  }	  if(!eatTheRest)    {    eatTheRest    =    true;    }    	non-compiled	[CE]  <identifier>  expected	44	None	replace
161	[BUG]  [BUGGY]  if(eatTheRest  ==  null)  {  eatTheRest  =  true;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  if(eatTheRest  ==  null)  {  eatTheRest  =  true;  }  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	if(eatTheRest  ==  null)  {  eatTheRest  =  true;  }	  if(currentOption!=    null)    {    eatTheRest    =    true;    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
162	[BUG]  [BUGGY]  if(eatTheRest)  {  tokens.clear();  currentOption  =  new  Option(this);  }  else  {  options.addAll(options);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  if(eatTheRest)  {  tokens.clear();  currentOption  =  new  Option(this);  }  else  {  options.addAll(options);  }  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	if(eatTheRest)  {  tokens.clear();  currentOption  =  new  Option(this);  }  else  {  options.addAll(options);  }	  tokens.clear();    currentOption    =    new    Option(this);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
163	[BUG]  [BUGGY]  tokens.add( "null ",  eatTheRest);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.add( "null ",  eatTheRest);  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	tokens.add( "null ",  eatTheRest);	  tokens.add(   "null   ");    	non-compiled	[CE]  <identifier>  expected	11	None	replace
164	[BUG]  [BUGGY]  tokens.add( "-- ".equals(currentOption.getValue()));  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.add( "-- ".equals(currentOption.getValue()));  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	tokens.add( "-- ".equals(currentOption.getValue()));	  tokens.add(   "--   ".equals(currentOption.getName()));    	non-compiled	[CE]  <identifier>  expected	53	None	replace
165	[BUG]  [BUGGY]  if(eatTheRest)  {  options.clear();  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  if(eatTheRest)  {  options.clear();  currentOption  =  null;  }  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	if(eatTheRest)  {  options.clear();  currentOption  =  null;  }	  options.clear();    currentOption    =    null;    	non-compiled	[CE]  <identifier>  expected	23	None	replace
166	[BUG]  [BUGGY]  if(eatTheRest)  {  options.clear();  currentOption  =  null;  }  else  {  tokens.clear();  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  if(eatTheRest)  {  options.clear();  currentOption  =  null;  }  else  {  tokens.clear();  currentOption  =  null;  }  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	if(eatTheRest)  {  options.clear();  currentOption  =  null;  }  else  {  tokens.clear();  currentOption  =  null;  }	  options.clear();    currentOption    =    null;    	non-compiled	[CE]  <identifier>  expected	23	None	replace
167	[BUG]  [BUGGY]  if(eatTheRest)  {  options.clear();  currentOption  =  null;  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  if(eatTheRest)  {  options.clear();  currentOption  =  null;  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	55	55	1	replace	if(eatTheRest)  {  options.clear();  currentOption  =  null;  }  else  {  throw  new  IllegalStateException( " ");  }	  options.clear();    currentOption    =    null;    	non-compiled	[CE]  <identifier>  expected	23	None	replace
