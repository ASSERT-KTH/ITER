bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(arguments);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();      [BUGGY]  Option  currentOption  =  options.getOption(arguments);  [BUGGY]    while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	106	107	1	replace	Option  currentOption  =  options.getOption(arguments);	      Option    currentOption    =    options.getOption(options);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
2	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(arguments,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();      [BUGGY]  Option  currentOption  =  options.getOption(arguments,  stopAtNonOption);  [BUGGY]    while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	106	107	1	replace	Option  currentOption  =  options.getOption(arguments,  stopAtNonOption);	      Option    currentOption    =    options.getOption(options);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
3	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(this.options);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();      [BUGGY]  Option  currentOption  =  options.getOption(this.options);  [BUGGY]    while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	106	107	1	replace	Option  currentOption  =  options.getOption(this.options);	      Option    currentOption    =    options.getOption(options);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
4	[BUG]  [BUGGY]  Option  currentOption  =  iter.getOption(options);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();      [BUGGY]  Option  currentOption  =  iter.getOption(options);  [BUGGY]    while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	106	107	1	replace	Option  currentOption  =  iter.getOption(options);	      Option    currentOption    =    options.getOption(options);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
5	[BUG]  [BUGGY]  while  (iter.hasNext()  &&  iter.next().equals( "- "))  {  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();      [BUGGY]  while  (iter.hasNext()  &&  iter.next().equals( "- "))  {  [BUGGY]    {  String  token  =  (String)  iter.next();  if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	106	107	1	replace	while  (iter.hasNext()  &&  iter.next().equals( "- "))  {	  while    (iter.hasNext()    &&    iter.next().startsWith(   "-   "))    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
6	[BUG]  [BUGGY]  while  (iter.hasNext()  &&  iter.next().startsWith( "/ "))  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();      [BUGGY]  while  (iter.hasNext()  &&  iter.next().startsWith( "/ "))  {  [BUGGY]    {  String  token  =  (String)  iter.next();  if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	106	107	1	replace	while  (iter.hasNext()  &&  iter.next().startsWith( "/ "))  {	  while    (iter.hasNext()    &&    iter.next().startsWith(   "-   "))    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
7	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption( "stopAtNonOption ",  arguments);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();      [BUGGY]  Option  currentOption  =  options.getOption( "stopAtNonOption ",  arguments);  [BUGGY]    while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	106	107	1	replace	Option  currentOption  =  options.getOption( "stopAtNonOption ",  arguments);	      Option    currentOption    =    options.getOption(   "stopAtNonOption   ");    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
8	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption( "stopAtNonOption. ");  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();      [BUGGY]  Option  currentOption  =  options.getOption( "stopAtNonOption. ");  [BUGGY]    while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	106	107	1	replace	Option  currentOption  =  options.getOption( "stopAtNonOption. ");	      Option    currentOption    =    options.getOption(   "stopAtNonOption   ");    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
9	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  arguments.iterator();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();      [BUGGY]  Iterator  <  String>  iter  =  arguments.iterator();  [BUGGY]    while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	106	107	1	replace	Iterator  <  String>  iter  =  arguments.iterator();	      Iterator    <    String>    iter    =    options.iterator();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
10	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  this.options.iterator();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();      [BUGGY]  Iterator  <  String>  iter  =  this.options.iterator();  [BUGGY]    while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	106	107	1	replace	Iterator  <  String>  iter  =  this.options.iterator();	      Iterator    <    String>    iter    =    options.iterator();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
11	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  arrays.iterator();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();      [BUGGY]  Iterator  <  String>  iter  =  arrays.iterator();  [BUGGY]    while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	106	107	1	replace	Iterator  <  String>  iter  =  arrays.iterator();	      Iterator    <    String>    iter    =    options.iterator();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
12	[BUG]  [BUGGY]  Iterator  iter  =  this.options.iterator();  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();      [BUGGY]  Iterator  iter  =  this.options.iterator();  [BUGGY]    while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	106	107	1	replace	Iterator  iter  =  this.options.iterator();	      Iterator    iter    =    options.iterator();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
13	[BUG]  [BUGGY]  Iterator  iter  =  currentOptions.iterator();  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();      [BUGGY]  Iterator  iter  =  currentOptions.iterator();  [BUGGY]    while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	106	107	1	replace	Iterator  iter  =  currentOptions.iterator();	      Iterator    iter    =    options.iterator();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
14	[BUG]  [BUGGY]  Iterator  <  String>  tokens  =  iter.iterator();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();      [BUGGY]  Iterator  <  String>  tokens  =  iter.iterator();  [BUGGY]    {  String  token  =  (String)  iter.next();  if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	106	107	1	replace	Iterator  <  String>  tokens  =  iter.iterator();	      	non-compiled	[CE]  illegal  start  of  type	3	None	replace
15	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(item);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();      [BUGGY]  Option  currentOption  =  options.getOption(item);  [BUGGY]    {  String  token  =  (String)  iter.next();  if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	106	107	1	replace	Option  currentOption  =  options.getOption(item);	      	non-compiled	[CE]  illegal  start  of  type	3	None	replace
16	[BUG]  [BUGGY]  Iterator  iter  =  Arrays.asList(this.options).iterator();  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();      [BUGGY]  Iterator  iter  =  Arrays.asList(this.options).iterator();  [BUGGY]    while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	106	107	1	replace	Iterator  iter  =  Arrays.asList(this.options).iterator();	      Iterator    iter    =    Arrays.asList(arguments).iterator();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
17	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(arguments[0],  arguments[1]);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();      [BUGGY]  Option  currentOption  =  options.getOption(arguments[0],  arguments[1]);  [BUGGY]    while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	106	107	1	replace	Option  currentOption  =  options.getOption(arguments[0],  arguments[1]);	      Option    currentOption    =    options.getOption(arguments[0]);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
18	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(arguments[1]);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();      [BUGGY]  Option  currentOption  =  options.getOption(arguments[1]);  [BUGGY]    while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	106	107	1	replace	Option  currentOption  =  options.getOption(arguments[1]);	      Option    currentOption    =    options.getOption(arguments[0]);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
19	[BUG]  [BUGGY]  tokens.add(options.getOption( "stopAtNonOption "));  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();      [BUGGY]  tokens.add(options.getOption( "stopAtNonOption "));  [BUGGY]    while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	106	107	1	replace	tokens.add(options.getOption( "stopAtNonOption "));	      Option    currentOption    =    options.getOption(   "stopAtNonOption   ");    tokens.add(currentOption);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
20	[BUG]  [BUGGY]  tokens.add( "stopAtNonOption ");  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();      [BUGGY]  tokens.add( "stopAtNonOption ");  [BUGGY]    while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	106	107	1	replace	tokens.add( "stopAtNonOption ");	      Option    currentOption    =    options.getOption(   "stopAtNonOption   ");    tokens.add(currentOption);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
21	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption( "stopAtNonOption ");  tokens.add(currentOption);  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();      [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption( "stopAtNonOption ");  tokens.add(currentOption);  }  [BUGGY]    while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	106	107	1	replace	if(stopAtNonOption)  {  Option  currentOption  =  options.getOption( "stopAtNonOption ");  tokens.add(currentOption);  }	      Option    currentOption    =    options.getOption(   "stopAtNonOption   ");    tokens.add(currentOption);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
22	[BUG]  [BUGGY]  while(!stopAtNonOption  &&  iter.hasNext()  &&  arguments.length  >  0)  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();      [BUGGY]  while(!stopAtNonOption  &&  iter.hasNext()  &&  arguments.length  >  0)  {  [BUGGY]    {  String  token  =  (String)  iter.next();  if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	106	107	1	replace	while(!stopAtNonOption  &&  iter.hasNext()  &&  arguments.length  >  0)  {	  while(!stopAtNonOption    &&    iter.hasNext())    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
23	[BUG]  [BUGGY]  while(!stopAtNonOption  &&  iter.hasNext()  &&  tokenLength  >  0)  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();      [BUGGY]  while(!stopAtNonOption  &&  iter.hasNext()  &&  tokenLength  >  0)  {  [BUGGY]    {  String  token  =  (String)  iter.next();  if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	106	107	1	replace	while(!stopAtNonOption  &&  iter.hasNext()  &&  tokenLength  >  0)  {	  while(!stopAtNonOption    &&    iter.hasNext())    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
24	[BUG]  [BUGGY]  while(!stopAtNonOption  &&  iter.hasNext()  &&  tokenLength  >  1)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();      [BUGGY]  while(!stopAtNonOption  &&  iter.hasNext()  &&  tokenLength  >  1)  {  [BUGGY]    {  String  token  =  (String)  iter.next();  if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	106	107	1	replace	while(!stopAtNonOption  &&  iter.hasNext()  &&  tokenLength  >  1)  {	  while(!stopAtNonOption    &&    iter.hasNext())    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
25	[BUG]  [BUGGY]  Iterator  iter  =  this.arguments.iterator();  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();      [BUGGY]  Iterator  iter  =  this.arguments.iterator();  [BUGGY]    while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	106	107	1	replace	Iterator  iter  =  this.arguments.iterator();	      Iterator    iter    =    arguments.iterator();    	non-compiled	[CE]  <identifier>  expected	7	None	replace
26	[BUG]  [BUGGY]  Iterator  iter  =  currentOption.iterator();  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();      [BUGGY]  Iterator  iter  =  currentOption.iterator();  [BUGGY]    while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	106	107	1	replace	Iterator  iter  =  currentOption.iterator();	      Iterator    iter    =    arguments.iterator();    	non-compiled	[CE]  <identifier>  expected	7	None	replace
27	[BUG]  [BUGGY]  while(iter.hasNext()  ||  iter.hasNext())  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();      [BUGGY]  while(iter.hasNext()  ||  iter.hasNext())  {  [BUGGY]    {  String  token  =  (String)  iter.next();  if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	106	107	1	replace	while(iter.hasNext()  ||  iter.hasNext())  {	  while    (iter.hasNext()    &&    iter.hasNext())    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
28	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(iter);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();      [BUGGY]  Option  currentOption  =  options.getOption(iter);  [BUGGY]    {  String  token  =  (String)  iter.next();  if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	106	107	1	replace	Option  currentOption  =  options.getOption(iter);	      	non-compiled	[CE]  <identifier>  expected	3	None	replace
29	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(arguments[0]);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();      [BUGGY]  if(stopAtNonOption)  {  tokens.add(arguments[0]);  }  [BUGGY]    {  String  token  =  (String)  iter.next();  if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	106	107	1	replace	if(stopAtNonOption)  {  tokens.add(arguments[0]);  }	      	non-compiled	[CE]  <identifier>  expected	3	None	replace
30	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(options,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();      [BUGGY]  Option  currentOption  =  options.getOption(options,  stopAtNonOption);  [BUGGY]    while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	106	107	1	replace	Option  currentOption  =  options.getOption(options,  stopAtNonOption);	      Option    currentOption    =    options.getOption(options);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
31	[BUG]  [BUGGY]  while(stopAtNonOption  &&  iter.hasNext())  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();      [BUGGY]  while(stopAtNonOption  &&  iter.hasNext())  {  [BUGGY]    {  String  token  =  (String)  iter.next();  if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	106	107	1	replace	while(stopAtNonOption  &&  iter.hasNext())  {	  while(!stopAtNonOption    &&    iter.hasNext())    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
32	[BUG]  [BUGGY]  while(!stopAtNonOption  &&  iter!=  null  &&  iter.hasNext())  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();      [BUGGY]  while(!stopAtNonOption  &&  iter!=  null  &&  iter.hasNext())  {  [BUGGY]    {  String  token  =  (String)  iter.next();  if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	106	107	1	replace	while(!stopAtNonOption  &&  iter!=  null  &&  iter.hasNext())  {	  while(!stopAtNonOption    &&    iter.hasNext())    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
33	[BUG]  [BUGGY]  Ilerator  iter  =  Arrays.asList(arguments).iterator();  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();      [BUGGY]  Ilerator  iter  =  Arrays.asList(arguments).iterator();  [BUGGY]    while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	106	107	1	replace	Ilerator  iter  =  Arrays.asList(arguments).iterator();	      Iterator    iter    =    Arrays.asList(arguments).iterator();    	non-compiled	[CE]  <identifier>  expected	9	None	replace
34	[BUG]  [BUGGY]  Iterator  iter  =  Arrays.asList(options).iterator();  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();      [BUGGY]  Iterator  iter  =  Arrays.asList(options).iterator();  [BUGGY]    while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	106	107	1	replace	Iterator  iter  =  Arrays.asList(options).iterator();	      Iterator    iter    =    Arrays.asList(arguments).iterator();    	non-compiled	[CE]  <identifier>  expected	9	None	replace
35	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(arguments[0],  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();      [BUGGY]  Option  currentOption  =  options.getOption(arguments[0],  stopAtNonOption);  [BUGGY]    while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	106	107	1	replace	Option  currentOption  =  options.getOption(arguments[0],  stopAtNonOption);	      Option    currentOption    =    options.getOption(arguments[0]);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
36	[BUG]  [BUGGY]  while(iter.hasNext()  &&  iter.next())  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();      [BUGGY]  while(iter.hasNext()  &&  iter.next())  {  [BUGGY]    {  String  token  =  (String)  iter.next();  if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	106	107	1	replace	while(iter.hasNext()  &&  iter.next())  {	  while    (iter.hasNext()    &&    iter.hasNext())    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
37	[BUG]  [BUGGY]  Iterator  iter  =  currentOption.arguments.iterator();  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();      [BUGGY]  Iterator  iter  =  currentOption.arguments.iterator();  [BUGGY]    while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	106	107	1	replace	Iterator  iter  =  currentOption.arguments.iterator();	      Iterator    iter    =    arguments.iterator();    	non-compiled	[CE]  <identifier>  expected	7	None	replace
38	[BUG]  [BUGGY]  Iterator  iter  =  tokens.iterator();  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();      [BUGGY]  Iterator  iter  =  tokens.iterator();  [BUGGY]    while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	106	107	1	replace	Iterator  iter  =  tokens.iterator();	      Iterator    iter    =    arguments.iterator();    	non-compiled	[CE]  <identifier>  expected	7	None	replace
39	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  Arrays.asList(arguments).iterator();  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();      [BUGGY]  Iterator  <  String>  iter  =  Arrays.asList(arguments).iterator();  [BUGGY]    while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	106	107	1	replace	Iterator  <  String>  iter  =  Arrays.asList(arguments).iterator();	      Iterator    <    String>    iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	6	None	replace
40	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  currentOption.iterator();  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();      [BUGGY]  Iterator  <  String>  iter  =  currentOption.iterator();  [BUGGY]    while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	106	107	1	replace	Iterator  <  String>  iter  =  currentOption.iterator();	      Iterator    <    String>    iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	6	None	replace
41	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption( "stopAtNonOption ");  tokens.add(currentOption,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();      [BUGGY]  Option  currentOption  =  options.getOption( "stopAtNonOption ");  tokens.add(currentOption,  stopAtNonOption);  [BUGGY]    while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	106	107	1	replace	Option  currentOption  =  options.getOption( "stopAtNonOption ");  tokens.add(currentOption,  stopAtNonOption);	      Option    currentOption    =    options.getOption(   "stopAtNonOption   ");    tokens.add(currentOption);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
42	[BUG]  [BUGGY]  Option  currentOption  =  iter.getOption( "stopAtNonOption ");  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();      [BUGGY]  Option  currentOption  =  iter.getOption( "stopAtNonOption ");  [BUGGY]    while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	106	107	1	replace	Option  currentOption  =  iter.getOption( "stopAtNonOption ");	      Option    currentOption    =    options.getOption(   "stopAtNonOption   ");    	non-compiled	[CE]  <identifier>  expected	5	None	replace
43	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption( "stopAtNonOption ");  tokens.add(currentOption);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();      [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption( "stopAtNonOption ");  tokens.add(currentOption);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	106	107	1	replace	if(stopAtNonOption)  {  Option  currentOption  =  options.getOption( "stopAtNonOption ");  tokens.add(currentOption);  }  else  {  throw  new  IllegalArgumentException( " ");  }	      Option    currentOption    =    options.getOption(   "stopAtNonOption   ");    tokens.add(currentOption);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
44	[BUG]  [BUGGY]  while(iter.hasNext()  ||  iter.next().startsWith( "- "))  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();      [BUGGY]  while(iter.hasNext()  ||  iter.next().startsWith( "- "))  {  [BUGGY]    {  String  token  =  (String)  iter.next();  if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	106	107	1	replace	while(iter.hasNext()  ||  iter.next().startsWith( "- "))  {	  while    (iter.hasNext()    &&    iter.next().startsWith(   "-   "))    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
45	[BUG]  [BUGGY]  while(!stopAtNonOption  &&  iter.hasNext()  ||  iter.hasNext())  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();      [BUGGY]  while(!stopAtNonOption  &&  iter.hasNext()  ||  iter.hasNext())  {  [BUGGY]    {  String  token  =  (String)  iter.next();  if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	106	107	1	replace	while(!stopAtNonOption  &&  iter.hasNext()  ||  iter.hasNext())  {	  while(!stopAtNonOption    &&    iter.hasNext())    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
