bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  currentOption!=  null  &&  currentOption.hasArg()  &&  token.length()!=  (i  +  1))  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);      [BUGGY]  currentOption!=  null  &&  currentOption.hasArg()  &&  token.length()!=  (i  +  1))  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  [BUGGY]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))    {  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	293	294	1	replace	currentOption!=  null  &&  currentOption.hasArg()  &&  token.length()!=  (i  +  1))  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);	  parent!=    null    &&    currentOption.hasArg()    &&    token.length()!=    (i    +    1))    {    tokens.add(   "-   "    +    ch);    currentOption    =    options.getOption(ch);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
2	[BUG]  [BUGGY]  parent!=  null  &&  currentOption.hasArg()  &&  currentOption.length()  ==  (i  +  1))  {  tokens.add(token.substring(i  +  1));  break;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);      [BUGGY]  parent!=  null  &&  currentOption.hasArg()  &&  currentOption.length()  ==  (i  +  1))  {  tokens.add(token.substring(i  +  1));  break;  }  [BUGGY]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))    {  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	293	294	1	replace	parent!=  null  &&  currentOption.hasArg()  &&  currentOption.length()  ==  (i  +  1))  {  tokens.add(token.substring(i  +  1));  break;  }	  parent!=    null    &&    currentOption.hasArg()    &&    currentOption.length()!=    (i    +    1))    {    tokens.add(token.substring(i    +    1));    break;    }    	non-compiled	[CE]  <identifier>  expected	12	None	replace
3	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(ch);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);      [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(ch);  }  [BUGGY]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))    {  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	293	294	1	replace	if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(ch);  }	  Option    currentOption    =    options.getOption(ch);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
4	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(ch);  }  else  {  tokens.add( "- "  +  ch);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);      [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(ch);  }  else  {  tokens.add( "- "  +  ch);  }  [BUGGY]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))    {  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	293	294	1	replace	if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(ch);  }  else  {  tokens.add( "- "  +  ch);  }	  Option    currentOption    =    options.getOption(ch);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
5	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(ch  -  1);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);      [BUGGY]  Option  currentOption  =  options.getOption(ch  -  1);  [BUGGY]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))    {  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	293	294	1	replace	Option  currentOption  =  options.getOption(ch  -  1);	  Option    currentOption    =    options.getOption(ch);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
6	[BUG]  [BUGGY]  if(stopAtNonOption)  {  options.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  break;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);      [BUGGY]  if(stopAtNonOption)  {  options.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  break;  }  [BUGGY]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))    {  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	293	294	1	replace	if(stopAtNonOption)  {  options.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  break;  }	  options.add(   "-   "    +    ch);    currentOption    =    options.getOption(ch);    break;    	non-compiled	[CE]  <identifier>  expected	8	None	replace
7	[BUG]  [BUGGY]  if(stopAtNonOption)  {  options.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);      [BUGGY]  if(stopAtNonOption)  {  options.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  }  [BUGGY]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))    {  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	293	294	1	replace	if(stopAtNonOption)  {  options.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  }	  options.add(   "-   "    +    ch);    currentOption    =    options.getOption(ch);    break;    	non-compiled	[CE]  <identifier>  expected	8	None	replace
8	[BUG]  [BUGGY]  tokens.add( "- "  +  ch);  break;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);      [BUGGY]  tokens.add( "- "  +  ch);  break;  [BUGGY]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))    {  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	293	294	1	replace	tokens.add( "- "  +  ch);  break;	  tokens.add(token.substring(i    +    1));    break;    	non-compiled	[CE]  <identifier>  expected	26	None	replace
9	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add( "-n "  +  ch);  currentOption  =  options.getOption(ch);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);      [BUGGY]  if(stopAtNonOption)  {  tokens.add( "-n "  +  ch);  currentOption  =  options.getOption(ch);  }  [BUGGY]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))    {  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	293	294	1	replace	if(stopAtNonOption)  {  tokens.add( "-n "  +  ch);  currentOption  =  options.getOption(ch);  }	  tokens.add(   "-n   "    +    ch);    currentOption    =    options.getOption(ch);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
10	[BUG]  [BUGGY]  parent!=  null  &&  currentOption.hasArg()  &&  currentOption.length()  ==  (i  +  1))  {  tokens.add(token.substring(i  +  1));  break;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);      [BUGGY]  parent!=  null  &&  currentOption.hasArg()  &&  currentOption.length()  ==  (i  +  1))  {  tokens.add(token.substring(i  +  1));  break;  [BUGGY]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))    {  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	293	294	1	replace	parent!=  null  &&  currentOption.hasArg()  &&  currentOption.length()  ==  (i  +  1))  {  tokens.add(token.substring(i  +  1));  break;	  if(stopAtNonOption)    {    if(currentOption.hasArg()    &&    currentOption.length()    ==    (i    +    1))    {    tokens.add(token.substring(i    +    1));    break;    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
11	[BUG]  [BUGGY]  tokens.add( "- "  +  i  +  1);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);      [BUGGY]  tokens.add( "- "  +  i  +  1);  [BUGGY]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))    {  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	293	294	1	replace	tokens.add( "- "  +  i  +  1);	  tokens.add(   "-   "    +    i);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
12	[BUG]  [BUGGY]  if(stopAtNonOption)  {  options.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);      [BUGGY]  if(stopAtNonOption)  {  options.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))    {  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	293	294	1	replace	if(stopAtNonOption)  {  options.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  options.add(   "-   "    +    ch);    currentOption    =    options.getOption(ch);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
13	[BUG]  [BUGGY]  if(currentOption.hasArg()  &&(token.length()  ==  (i  +  1)))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);      [BUGGY]  if(currentOption.hasArg()  &&(token.length()  ==  (i  +  1)))  {  [BUGGY]      {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	293	294	1	replace	if(currentOption.hasArg()  &&(token.length()  ==  (i  +  1)))  {	  if(currentOption.hasArg()    ||    (token.length()    ==    (i    +    1)))    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
14	[BUG]  [BUGGY]  tokens.add( "- "  +  i);  currentOption  =  option.getOption(ch);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);      [BUGGY]  tokens.add( "- "  +  i);  currentOption  =  option.getOption(ch);  [BUGGY]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))    {  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	293	294	1	replace	tokens.add( "- "  +  i);  currentOption  =  option.getOption(ch);	  tokens.add(   "-   "    +    ch);    currentOption    =    option.getOption(ch);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
15	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  option.getOption(ch);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);      [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  option.getOption(ch);  }  [BUGGY]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))    {  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	293	294	1	replace	if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  option.getOption(ch);  }	  tokens.add(   "-   "    +    ch);    currentOption    =    option.getOption(ch);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
16	[BUG]  [BUGGY]  if(currentOption.hasArg()  &&  currentOption.length()!=  (i  +  1))  {  tokens.add(token.substring(i  +  1));  break;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);      [BUGGY]  if(currentOption.hasArg()  &&  currentOption.length()!=  (i  +  1))  {  tokens.add(token.substring(i  +  1));  break;  }  [BUGGY]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))    {  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	293	294	1	replace	if(currentOption.hasArg()  &&  currentOption.length()!=  (i  +  1))  {  tokens.add(token.substring(i  +  1));  break;  }	  if(stopAtNonOption)    {    if(currentOption.hasArg()    ||    currentOption.length()!=    (i    +    1))    {    tokens.add(token.substring(i    +    1));    break;    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
17	[BUG]  [BUGGY]  if(currentOption.hasArg()  &&  (token.length()!=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);      [BUGGY]  if(currentOption.hasArg()  &&  (token.length()!=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [BUGGY]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))    {  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	293	294	1	replace	if(currentOption.hasArg()  &&  (token.length()!=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }	  if(stopAtNonOption)    {    if(currentOption.hasArg()    ||    currentOption.length()!=    (i    +    1))    {    tokens.add(token.substring(i    +    1));    break;    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
18	[BUG]  [BUGGY]  if(stopAtNonOption)  {  parent!=  null  &&  currentOption.hasArg()  &&  currentOption.length()!=  (i  +  1))  {  tokens.add(token.substring(i  +  1));  break;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);      [BUGGY]  if(stopAtNonOption)  {  parent!=  null  &&  currentOption.hasArg()  &&  currentOption.length()!=  (i  +  1))  {  tokens.add(token.substring(i  +  1));  break;  }  [BUGGY]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))    {  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	293	294	1	replace	if(stopAtNonOption)  {  parent!=  null  &&  currentOption.hasArg()  &&  currentOption.length()!=  (i  +  1))  {  tokens.add(token.substring(i  +  1));  break;  }	  parent!=    null    &&    currentOption.hasArg()    &&    currentOption.length()!=    (i    +    1))    {    tokens.add(token.substring(i    +    1));    break;    	non-compiled	[CE]  <identifier>  expected	13	None	replace
19	[BUG]  [BUGGY]  parent!=  null  &&  currentOption.hasArg()  &&  currentOption.length()  ==  (i  +  1))  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);      [BUGGY]  parent!=  null  &&  currentOption.hasArg()  &&  currentOption.length()  ==  (i  +  1))  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  [BUGGY]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))    {  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	293	294	1	replace	parent!=  null  &&  currentOption.hasArg()  &&  currentOption.length()  ==  (i  +  1))  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);	  parent!=    null    &&    currentOption.hasArg()    &&    currentOption.length()!=    (i    +    1))    {    tokens.add(   "-   "    +    ch);    currentOption    =    options.getOption(ch);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
20	[BUG]  [BUGGY]  currentOption!=  null  &&  currentOption.hasArg()  &&  currentOption.length()!=  (i  +  1))  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);      [BUGGY]  currentOption!=  null  &&  currentOption.hasArg()  &&  currentOption.length()!=  (i  +  1))  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  [BUGGY]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))    {  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	293	294	1	replace	currentOption!=  null  &&  currentOption.hasArg()  &&  currentOption.length()!=  (i  +  1))  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);	  parent!=    null    &&    currentOption.hasArg()    &&    currentOption.length()!=    (i    +    1))    {    tokens.add(   "-   "    +    ch);    currentOption    =    options.getOption(ch);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
21	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- "  +  i);  currentOption  =  options.getOption(ch);  break;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);      [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- "  +  i);  currentOption  =  options.getOption(ch);  break;  }  [BUGGY]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))    {  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	293	294	1	replace	if(stopAtNonOption)  {  tokens.add( "- "  +  i);  currentOption  =  options.getOption(ch);  break;  }	  tokens.add(   "-   "    +    i);    currentOption    =    options.getOption(ch);    break;    	non-compiled	[CE]  <identifier>  expected	21	None	replace
22	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- "  +  i);  currentOption  =  options.getOption(ch);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);      [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- "  +  i);  currentOption  =  options.getOption(ch);  }  [BUGGY]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))    {  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	293	294	1	replace	if(stopAtNonOption)  {  tokens.add( "- "  +  i);  currentOption  =  options.getOption(ch);  }	  tokens.add(   "-   "    +    i);    currentOption    =    options.getOption(ch);    break;    	non-compiled	[CE]  <identifier>  expected	21	None	replace
23	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- "  +  i);  currentOption  =  options.getOption(ch);  }  else  {  break;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);      [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- "  +  i);  currentOption  =  options.getOption(ch);  }  else  {  break;  }  [BUGGY]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))    {  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	293	294	1	replace	if(stopAtNonOption)  {  tokens.add( "- "  +  i);  currentOption  =  options.getOption(ch);  }  else  {  break;  }	  tokens.add(   "-   "    +    i);    currentOption    =    options.getOption(ch);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
24	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- "  +  0);  currentOption  =  options.getOption(ch);  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);      [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- "  +  0);  currentOption  =  options.getOption(ch);  }  [BUGGY]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))    {  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	293	294	1	replace	if(stopAtNonOption)  {  tokens.add( "- "  +  0);  currentOption  =  options.getOption(ch);  }	  tokens.add(   "-   "    +    0);    currentOption    =    options.getOption(ch);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
25	[BUG]  [BUGGY]  parent!=  null  &&  currentOption.hasArg()  &&  token.length()  ==  (i  +  1))  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);      [BUGGY]  parent!=  null  &&  currentOption.hasArg()  &&  token.length()  ==  (i  +  1))  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  [BUGGY]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))    {  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	293	294	1	replace	parent!=  null  &&  currentOption.hasArg()  &&  token.length()  ==  (i  +  1))  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);	  parent!=    null    &&    currentOption.hasArg()    &&    token.length()!=    (i    +    1))    {    tokens.add(   "-   "    +    ch);    currentOption    =    options.getOption(ch);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
26	[BUG]  [BUGGY]  tokens.add( "-- "  +  ch);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);      [BUGGY]  tokens.add( "-- "  +  ch);  [BUGGY]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))    {  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	293	294	1	replace	tokens.add( "-- "  +  ch);	  tokens.add(   "-n   "    +    ch);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
27	[BUG]  [BUGGY]  tokens.add( "-non-option "  +  ch);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);      [BUGGY]  tokens.add( "-non-option "  +  ch);  [BUGGY]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))    {  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	293	294	1	replace	tokens.add( "-non-option "  +  ch);	  tokens.add(   "-n   "    +    ch);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
28	[BUG]  [BUGGY]  tokens.add( "- "  +  i  +  1);  currentOption  =  options.getOption(ch);  break;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);      [BUGGY]  tokens.add( "- "  +  i  +  1);  currentOption  =  options.getOption(ch);  break;  [BUGGY]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))    {  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	293	294	1	replace	tokens.add( "- "  +  i  +  1);  currentOption  =  options.getOption(ch);  break;	  tokens.add(   "-   "    +    i);    currentOption    =    options.getOption(ch);    break;    	non-compiled	[CE]  <identifier>  expected	21	None	replace
29	[BUG]  [BUGGY]  tokens.add( "-n "  +  currentOption);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);      [BUGGY]  tokens.add( "-n "  +  currentOption);  [BUGGY]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))    {  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	293	294	1	replace	tokens.add( "-n "  +  currentOption);	  tokens.add(   "-   "    +    currentOption);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
30	[BUG]  [BUGGY]  tokens.add( "- ",  currentOption);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);      [BUGGY]  tokens.add( "- ",  currentOption);  [BUGGY]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))    {  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	293	294	1	replace	tokens.add( "- ",  currentOption);	  tokens.add(   "-   "    +    currentOption);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
31	[BUG]  [BUGGY]  tokens.add( "- "  +  i  +  1);  currentOption  =  options.getOption(ch);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);      [BUGGY]  tokens.add( "- "  +  i  +  1);  currentOption  =  options.getOption(ch);  [BUGGY]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))    {  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	293	294	1	replace	tokens.add( "- "  +  i  +  1);  currentOption  =  options.getOption(ch);	  tokens.add(   "-   "    +    i);    currentOption    =    options.getOption(ch);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
32	[BUG]  [BUGGY]  parent!=  null  &&  currentOption.hasArg()  &&  currentOption.length()  ==  (i  +  1))  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);      [BUGGY]  parent!=  null  &&  currentOption.hasArg()  &&  currentOption.length()  ==  (i  +  1))  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  }  [BUGGY]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))    {  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	293	294	1	replace	parent!=  null  &&  currentOption.hasArg()  &&  currentOption.length()  ==  (i  +  1))  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  }	  parent!=    null    &&    currentOption.hasArg()    &&    currentOption.length()!=    (i    +    1))    {    tokens.add(   "-   "    +    ch);    currentOption    =    options.getOption(ch);    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
33	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(ch,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);      [BUGGY]  Option  currentOption  =  options.getOption(ch,  stopAtNonOption);  [BUGGY]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))    {  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	293	294	1	replace	Option  currentOption  =  options.getOption(ch,  stopAtNonOption);	  Option    currentOption    =    options.getOption(ch);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
34	[BUG]  [BUGGY]  if(stopAtNonOption)  {  if(currentOption.hasArg()  &&  currentOption.length()!=  (i  +  1))  {  tokens.add( "- "  +  ch);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);      [BUGGY]  if(stopAtNonOption)  {  if(currentOption.hasArg()  &&  currentOption.length()!=  (i  +  1))  {  tokens.add( "- "  +  ch);  }  [BUGGY]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))    {  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	293	294	1	replace	if(stopAtNonOption)  {  if(currentOption.hasArg()  &&  currentOption.length()!=  (i  +  1))  {  tokens.add( "- "  +  ch);  }	  if(stopAtNonOption)    {    if(currentOption.hasArg()    &&    currentOption.length()    ==    (i    +    1))    {    tokens.add(token.substring(i    +    1));    break;    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
35	[BUG]  [BUGGY]  if(stopAtNonOption)  {  if(currentOption.hasArg()  &&  currentOption.length()!=  (i  +  1))  {  tokens.add( "- "  +  ch);  break;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);      [BUGGY]  if(stopAtNonOption)  {  if(currentOption.hasArg()  &&  currentOption.length()!=  (i  +  1))  {  tokens.add( "- "  +  ch);  break;  }  [BUGGY]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))    {  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	293	294	1	replace	if(stopAtNonOption)  {  if(currentOption.hasArg()  &&  currentOption.length()!=  (i  +  1))  {  tokens.add( "- "  +  ch);  break;  }	  if(stopAtNonOption)    {    if(currentOption.hasArg()    &&    currentOption.length()    ==    (i    +    1))    {    tokens.add(token.substring(i    +    1));    break;    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
36	[BUG]  [BUGGY]  parent!=  null  &&  currentOption.hasArg()  &&  token.length()  ==  (i  +  1))  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);      [BUGGY]  parent!=  null  &&  currentOption.hasArg()  &&  token.length()  ==  (i  +  1))  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  }  [BUGGY]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))    {  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	293	294	1	replace	parent!=  null  &&  currentOption.hasArg()  &&  token.length()  ==  (i  +  1))  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  }	  parent!=    null    &&    currentOption.hasArg()    &&    token.length()!=    (i    +    1))    {    tokens.add(   "-   "    +    ch);    currentOption    =    options.getOption(ch);    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
37	[BUG]  [BUGGY]  if(stopAtNonOption)  {  if(currentOption.hasArg()  &&  currentOption.length()!=  (i  +  1))  {  tokens.add(token.substring(i  +  1));  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);      [BUGGY]  if(stopAtNonOption)  {  if(currentOption.hasArg()  &&  currentOption.length()!=  (i  +  1))  {  tokens.add(token.substring(i  +  1));  }  [BUGGY]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))    {  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	293	294	1	replace	if(stopAtNonOption)  {  if(currentOption.hasArg()  &&  currentOption.length()!=  (i  +  1))  {  tokens.add(token.substring(i  +  1));  }	  if(stopAtNonOption)    {    if(currentOption.hasArg()    ||    currentOption.length()!=    (i    +    1))    {    tokens.add(token.substring(i    +    1));    break;    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
38	[BUG]  [BUGGY]  tokens.add( "-- "  +  ch);  currentOption  =  options.getOption(ch);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);      [BUGGY]  tokens.add( "-- "  +  ch);  currentOption  =  options.getOption(ch);  [BUGGY]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))    {  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	293	294	1	replace	tokens.add( "-- "  +  ch);  currentOption  =  options.getOption(ch);	  tokens.add(   "-n   "    +    ch);    currentOption    =    options.getOption(ch);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
39	[BUG]  [BUGGY]  tokens.add(token.substring(i  +  1));  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);      [BUGGY]  tokens.add(token.substring(i  +  1));  [BUGGY]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))    {  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	293	294	1	replace	tokens.add(token.substring(i  +  1));	  tokens.add(token.substring(i    +    1));    break;    	non-compiled	[CE]  <identifier>  expected	26	None	replace
40	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  options.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  break;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);      [BUGGY]  if(!stopAtNonOption)  {  options.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  break;  }  [BUGGY]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))    {  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	293	294	1	replace	if(!stopAtNonOption)  {  options.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  break;  }	  options.add(   "-   "    +    ch);    currentOption    =    options.getOption(ch);    break;    	non-compiled	[CE]  <identifier>  expected	8	None	replace
41	[BUG]  [BUGGY]  tokens.add(token.substring(0,  i  +  1));  break;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);      [BUGGY]  tokens.add(token.substring(0,  i  +  1));  break;  [BUGGY]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))    {  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	293	294	1	replace	tokens.add(token.substring(0,  i  +  1));  break;	  tokens.add(token.substring(i    +    1));    break;    	non-compiled	[CE]  <identifier>  expected	26	None	replace
42	[BUG]  [BUGGY]  tokens.add( "- ",  i);  currentOption  =  options.getOption(ch);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);      [BUGGY]  tokens.add( "- ",  i);  currentOption  =  options.getOption(ch);  [BUGGY]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))    {  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	293	294	1	replace	tokens.add( "- ",  i);  currentOption  =  options.getOption(ch);	  tokens.add(   "-   "    +    i);    currentOption    =    options.getOption(ch);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
43	[BUG]  [BUGGY]  tokens.add( "- "  +  -1);  currentOption  =  options.getOption(ch);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);      [BUGGY]  tokens.add( "- "  +  -1);  currentOption  =  options.getOption(ch);  [BUGGY]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))    {  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	293	294	1	replace	tokens.add( "- "  +  -1);  currentOption  =  options.getOption(ch);	  tokens.add(   "-   "    +    0);    currentOption    =    options.getOption(ch);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
44	[BUG]  [BUGGY]  tokens.add( "- "  +  i);  currentOption  =  options.getOption(ch);  break;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);      [BUGGY]  tokens.add( "- "  +  i);  currentOption  =  options.getOption(ch);  break;  }  [BUGGY]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))    {  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	293	294	1	replace	tokens.add( "- "  +  i);  currentOption  =  options.getOption(ch);  break;  }	  tokens.add(   "-   "    +    ch);    currentOption    =    options.getOption(ch);    break;    }    	non-compiled	[CE]  <identifier>  expected	22	None	replace
45	[BUG]  [BUGGY]  tokens.add( "- ");  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);      [BUGGY]  tokens.add( "- ");  [BUGGY]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))    {  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	293	294	1	replace	tokens.add( "- ");	  tokens.add(   "-   "    +    0);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
