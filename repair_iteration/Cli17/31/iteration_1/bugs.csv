bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  else  if( "- ".equals(token)||  token.startsWith( "- "))  {  [CE]  <identifier>  expected  [FE]    AssertionFailedError  [CONTEXT]  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }    [BUGGY]  else  if( "- ".equals(token)||  token.startsWith( "- "))  {  [BUGGY]  {  processSingleHyphen(token);  }  else  if  (token.startsWith( "- "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	126	127	1	replace	else  if( "- ".equals(token)||  token.startsWith( "- "))  {	else  if  ( "- ".equals(token))  {  	non-compiled	[CE]  <identifier>  expected	63	None	replace
2	[BUG]  [BUGGY]  else  if( "- ".equals(token)&&  token.startsWith( "- "))  {  [CE]  <identifier>  expected  [FE]      AssertionFailedError  [CONTEXT]  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }    [BUGGY]  else  if( "- ".equals(token)&&  token.startsWith( "- "))  {  [BUGGY]  {  processSingleHyphen(token);  }  else  if  (token.startsWith( "- "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	126	127	1	replace	else  if( "- ".equals(token)&&  token.startsWith( "- "))  {	else  if  ( "- ".equals(token))  {  	non-compiled	[CE]  <identifier>  expected	63	None	replace
3	[BUG]  [BUGGY]  else  if( "-- ".equals(token))  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError  [CONTEXT]  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }    [BUGGY]  else  if( "-- ".equals(token))  {  [BUGGY]  {  processSingleHyphen(token);  }  else  if  (token.startsWith( "- "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	126	127	1	replace	else  if( "-- ".equals(token))  {	else  if  ( "- ".equals(token))  {  	non-compiled	[CE]  <identifier>  expected	63	None	replace
4	[BUG]  [BUGGY]    [CE]  <identifier>  expected  [FE]          AssertionFailedError  [CONTEXT]  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }    [BUGGY]    [BUGGY]  {  processSingleHyphen(token);  }  else  if  (token.startsWith( "- "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	126	127	1	replace	  	else  if  ( "- ".equals(token))  {  	non-compiled	[CE]  <identifier>  expected	63	None	replace
5	[BUG]  [BUGGY]    tokens.add(token.substring(0,  token.length()  -  1));  tokens.add(token.substring(token.indexOf('=')+  1,  token.length()));  [CE]  <identifier>  expected  [FE]    AssertionFailedError  [CONTEXT]  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }    [BUGGY]    tokens.add(token.substring(0,  token.length()  -  1));  tokens.add(token.substring(token.indexOf('=')+  1,  token.length()));  [BUGGY]  else  if  ( "- ".equals(token))    {  {  processSingleHyphen(token);  }  else  if  (token.startsWith( "- "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	126	127	1	replace	    tokens.add(token.substring(0,  token.length()  -  1));  tokens.add(token.substring(token.indexOf('=')+  1,  token.length()));		non-compiled	[CE]  <identifier>  expected	64	None	add
6	[BUG]  [BUGGY]    tokens.add(token.substring(0,  token.indexOf( "- ")));  tokens.add(token.substring(token.indexOf('=')+  1,  token.length()));  [CE]  <identifier>  expected  [FE]      AssertionFailedError  [CONTEXT]  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }    [BUGGY]    tokens.add(token.substring(0,  token.indexOf( "- ")));  tokens.add(token.substring(token.indexOf('=')+  1,  token.length()));  [BUGGY]  else  if  ( "- ".equals(token))    {  {  processSingleHyphen(token);  }  else  if  (token.startsWith( "- "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	126	127	1	replace	    tokens.add(token.substring(0,  token.indexOf( "- ")));  tokens.add(token.substring(token.indexOf('=')+  1,  token.length()));		non-compiled	[CE]  <identifier>  expected	64	None	add
7	[BUG]  [BUGGY]    tokens.add(token.substring(0,  token.length()  -  2));  tokens.add(token.substring(token.indexOf('=')+  1,  token.length()));  [CE]  <identifier>  expected  [FE]        AssertionFailedError  [CONTEXT]  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }    [BUGGY]    tokens.add(token.substring(0,  token.length()  -  2));  tokens.add(token.substring(token.indexOf('=')+  1,  token.length()));  [BUGGY]  else  if  ( "- ".equals(token))    {  {  processSingleHyphen(token);  }  else  if  (token.startsWith( "- "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	126	127	1	replace	    tokens.add(token.substring(0,  token.length()  -  2));  tokens.add(token.substring(token.indexOf('=')+  1,  token.length()));		non-compiled	[CE]  <identifier>  expected	64	None	add
8	[BUG]  [BUGGY]    tokens.add(token.substring(0,  token.indexOf( "= ")));  tokens.add(token.substring(token.indexOf('=')+  1,  token.length()));  [CE]  <identifier>  expected  [FE]          AssertionFailedError  [CONTEXT]  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }    [BUGGY]    tokens.add(token.substring(0,  token.indexOf( "= ")));  tokens.add(token.substring(token.indexOf('=')+  1,  token.length()));  [BUGGY]  else  if  ( "- ".equals(token))    {  {  processSingleHyphen(token);  }  else  if  (token.startsWith( "- "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	126	127	1	replace	    tokens.add(token.substring(0,  token.indexOf( "= ")));  tokens.add(token.substring(token.indexOf('=')+  1,  token.length()));		non-compiled	[CE]  <identifier>  expected	64	None	add
9	[BUG]  [BUGGY]    Iterator  <  String>  iter  =  options.iterator();  [CE]  <identifier>  expected  [FE]    AssertionFailedError  [CONTEXT]  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }    [BUGGY]    Iterator  <  String>  iter  =  options.iterator();  [BUGGY]  else  if  ( "- ".equals(token))    {  {  processSingleHyphen(token);  }  else  if  (token.startsWith( "- "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	126	127	1	replace	    Iterator  <  String>  iter  =  options.iterator();		non-compiled	[CE]  <identifier>  expected	64	None	add
10	[BUG]  [BUGGY]  else  if(stopAtNonOption  && "- ".equals(token))  {  [CE]  <identifier>  expected  [FE]    AssertionFailedError  [CONTEXT]  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }    [BUGGY]  else  if(stopAtNonOption  && "- ".equals(token))  {  [BUGGY]  {  processSingleHyphen(token);  }  else  if  (token.startsWith( "- "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	126	127	1	replace	else  if(stopAtNonOption  && "- ".equals(token))  {	else  if  ( "- ".equals(token))  {  	non-compiled	[CE]  <identifier>  expected	63	None	replace
11	[BUG]  [BUGGY]  else  if(stopAtNonOption  || "- ".equals(token))  {  [CE]  <identifier>  expected  [FE]      AssertionFailedError  [CONTEXT]  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }    [BUGGY]  else  if(stopAtNonOption  || "- ".equals(token))  {  [BUGGY]  {  processSingleHyphen(token);  }  else  if  (token.startsWith( "- "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	126	127	1	replace	else  if(stopAtNonOption  || "- ".equals(token))  {	else  if  ( "- ".equals(token))  {  	non-compiled	[CE]  <identifier>  expected	63	None	replace
12	[BUG]  [BUGGY]  else  if(stopAtNonOption)  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError  [CONTEXT]  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }    [BUGGY]  else  if(stopAtNonOption)  {  [BUGGY]  {  processSingleHyphen(token);  }  else  if  (token.startsWith( "- "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	126	127	1	replace	else  if(stopAtNonOption)  {	else  if  ( "- ".equals(token))  {  	non-compiled	[CE]  <identifier>  expected	63	None	replace
13	[BUG]  [BUGGY]    tokens.add(token.substring(0,  token.length()  -  1));  [CE]  <identifier>  expected  [FE]    AssertionFailedError  [CONTEXT]  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }    [BUGGY]    tokens.add(token.substring(0,  token.length()  -  1));  [BUGGY]  else  if  ( "- ".equals(token))    {  {  processSingleHyphen(token);  }  else  if  (token.startsWith( "- "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	126	127	1	replace	    tokens.add(token.substring(0,  token.length()  -  1));		non-compiled	[CE]  <identifier>  expected	64	None	add
14	[BUG]  [BUGGY]    tokens.add(token.substring(0,  token.indexOf( "- ")));  [CE]  <identifier>  expected  [FE]      AssertionFailedError  [CONTEXT]  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }    [BUGGY]    tokens.add(token.substring(0,  token.indexOf( "- ")));  [BUGGY]  else  if  ( "- ".equals(token))    {  {  processSingleHyphen(token);  }  else  if  (token.startsWith( "- "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	126	127	1	replace	    tokens.add(token.substring(0,  token.indexOf( "- ")));		non-compiled	[CE]  <identifier>  expected	64	None	add
15	[BUG]  [BUGGY]    tokens.add(token.substring(0,  token.indexOf( "= ")));  [CE]  <identifier>  expected  [FE]        AssertionFailedError  [CONTEXT]  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }    [BUGGY]    tokens.add(token.substring(0,  token.indexOf( "= ")));  [BUGGY]  else  if  ( "- ".equals(token))    {  {  processSingleHyphen(token);  }  else  if  (token.startsWith( "- "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	126	127	1	replace	    tokens.add(token.substring(0,  token.indexOf( "= ")));		non-compiled	[CE]  <identifier>  expected	64	None	add
16	[BUG]  [BUGGY]    tokens.add(token.substring(0,  token.length()));  [CE]  <identifier>  expected  [FE]          AssertionFailedError  [CONTEXT]  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }    [BUGGY]    tokens.add(token.substring(0,  token.length()));  [BUGGY]  else  if  ( "- ".equals(token))    {  {  processSingleHyphen(token);  }  else  if  (token.startsWith( "- "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	126	127	1	replace	    tokens.add(token.substring(0,  token.length()));		non-compiled	[CE]  <identifier>  expected	64	None	add
