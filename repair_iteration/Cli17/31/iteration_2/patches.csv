bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')+  1);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }        [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')+  1);  [BUGGY]      else  if  (     "-     ".equals(token))    {  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	126	127	1	replace	tokens.add(token.substring(0,  token.indexOf('=')+  1);	  tokens.add(token.substring(0,    token.indexOf('=')+    1));    	non-compiled	[CE]  <identifier>  expected	15	None	replace
2	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')-  1));  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }        [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')-  1));  [BUGGY]      else  if  (     "-     ".equals(token))    {  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	126	127	1	replace	tokens.add(token.substring(0,  token.indexOf('=')-  1));	  tokens.add(token.substring(0,    token.indexOf('=')));    	non-compiled	[CE]  <identifier>  expected	2	None	replace
3	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.lastIndexOf('=')));  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }        [BUGGY]  tokens.add(token.substring(0,  token.lastIndexOf('=')));  [BUGGY]      else  if  (     "-     ".equals(token))    {  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	126	127	1	replace	tokens.add(token.substring(0,  token.lastIndexOf('=')));	  tokens.add(token.substring(0,    token.indexOf('=')));    	non-compiled	[CE]  <identifier>  expected	2	None	replace
4	[BUG]  [BUGGY]  else  if(token.startsWith( "- ")||  token.startsWith( "-))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }        [BUGGY]  else  if(token.startsWith( "- ")||  token.startsWith( "-))  {  [BUGGY]      {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	126	127	1	replace	else  if(token.startsWith( "- ")||  token.startsWith( "-))  {	  else    if(token.startsWith(   "-   ")||    token.startsWith(   "-       "))    {    	non-compiled	[CE]  <identifier>  expected	29	None	replace
5	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('/'))  +  1,  token.length()));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }        [BUGGY]  tokens.add(token.substring(0,  token.indexOf('/'))  +  1,  token.length()));  [BUGGY]      else  if  (     "-     ".equals(token))    {  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	126	127	1	replace	tokens.add(token.substring(0,  token.indexOf('/'))  +  1,  token.length()));	  tokens.add(token.substring(0,    token.indexOf(   "-   "))    +    1,    token.length()));    	non-compiled	[CE]  <identifier>  expected	37	None	replace
6	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.length()  -  1)));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }        [BUGGY]  tokens.add(token.substring(0,  token.length()  -  1)));  [BUGGY]      else  if  (     "-     ".equals(token))    {  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	126	127	1	replace	tokens.add(token.substring(0,  token.length()  -  1)));	  tokens.add(token.substring(0,    token.length())));    	non-compiled	[CE]  <identifier>  expected	33	None	replace
7	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.length()  +  1)));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }        [BUGGY]  tokens.add(token.substring(0,  token.length()  +  1)));  [BUGGY]      else  if  (     "-     ".equals(token))    {  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	126	127	1	replace	tokens.add(token.substring(0,  token.length()  +  1)));	  tokens.add(token.substring(0,    token.length())));    	non-compiled	[CE]  <identifier>  expected	33	None	replace
8	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  arguments.contains( "- ")||  arguments.contains( "- "))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }        [BUGGY]  else  if(stopAtNonOption  ||  arguments.contains( "- ")||  arguments.contains( "- "))  {  [BUGGY]      {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	126	127	1	replace	else  if(stopAtNonOption  ||  arguments.contains( "- ")||  arguments.contains( "- "))  {	  else    if(stopAtNonOption    ||    arguments.contains(   "-   "))    {    	non-compiled	[CE]  <identifier>  expected	54	None	replace
9	[BUG]  [BUGGY]  else  if(token.startsWith( "-   ")||  arguments.contains( "-   "))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }        [BUGGY]  else  if(token.startsWith( "-   ")||  arguments.contains( "-   "))  {  [BUGGY]      {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	126	127	1	replace	else  if(token.startsWith( "-   ")||  arguments.contains( "-   "))  {	  else    if(stopAtNonOption    ||    arguments.contains(   "-   "))    {    	non-compiled	[CE]  <identifier>  expected	54	None	replace
10	[BUG]  [BUGGY]  else  if(token.startsWith( "- ")||  token.startsWith( "-- "))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }        [BUGGY]  else  if(token.startsWith( "- ")||  token.startsWith( "-- "))  {  [BUGGY]      {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	126	127	1	replace	else  if(token.startsWith( "- ")||  token.startsWith( "-- "))  {	  else    if(token.startsWith(   "--   "))    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
11	[BUG]  [BUGGY]  else  if(token.startsWith( "- ")||  token.startsWith( "--))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }        [BUGGY]  else  if(token.startsWith( "- ")||  token.startsWith( "--))  {  [BUGGY]      {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	126	127	1	replace	else  if(token.startsWith( "- ")||  token.startsWith( "--))  {	  else    if(token.startsWith(   "--   "))    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
12	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  token.startsWith( "- "))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }        [BUGGY]  else  if(stopAtNonOption  ||  token.startsWith( "- "))  {  [BUGGY]      {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	126	127	1	replace	else  if(stopAtNonOption  ||  token.startsWith( "- "))  {	  else    if(!stopAtNonOption    &&    token.startsWith(   "-   "))    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
13	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  token.startsWith( "- ")||  token.startsWith( "-- "))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }        [BUGGY]  else  if(stopAtNonOption  &&  token.startsWith( "- ")||  token.startsWith( "-- "))  {  [BUGGY]      {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	126	127	1	replace	else  if(stopAtNonOption  &&  token.startsWith( "- ")||  token.startsWith( "-- "))  {	  else    if(!stopAtNonOption    &&    token.startsWith(   "-   "))    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
14	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  arguments.length  >  0)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }        [BUGGY]  else  if(stopAtNonOption  ||  arguments.length  >  0)  {  [BUGGY]      {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	126	127	1	replace	else  if(stopAtNonOption  ||  arguments.length  >  0)  {	  else    if(stopAtNonOption    &&    arguments.length    >    0)    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
15	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  tokenLength  >  0  &&  arguments[0].equals(token))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }        [BUGGY]  else  if(stopAtNonOption  &&  tokenLength  >  0  &&  arguments[0].equals(token))  {  [BUGGY]      {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	126	127	1	replace	else  if(stopAtNonOption  &&  tokenLength  >  0  &&  arguments[0].equals(token))  {	  else    if(stopAtNonOption    &&    arguments.length    >    0    &&    arguments[0].equals(token))    {    	non-compiled	[CE]  <identifier>  expected	41	None	replace
16	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  arguments.length  >  0  &&  arguments[0].equals(token))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }        [BUGGY]  else  if(stopAtNonOption  ||  arguments.length  >  0  &&  arguments[0].equals(token))  {  [BUGGY]      {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	126	127	1	replace	else  if(stopAtNonOption  ||  arguments.length  >  0  &&  arguments[0].equals(token))  {	  else    if(stopAtNonOption    &&    arguments.length    >    0    &&    arguments[0].equals(token))    {    	non-compiled	[CE]  <identifier>  expected	41	None	replace
17	[BUG]  [BUGGY]  else  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('='));  tokens.add(token.substring(token.indexOf('=')+  1,  token.length()));  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }        [BUGGY]  else  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('='));  tokens.add(token.substring(token.indexOf('=')+  1,  token.length()));  }  [BUGGY]      else  if  (     "-     ".equals(token))    {  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	126	127	1	replace	else  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('='));  tokens.add(token.substring(token.indexOf('=')+  1,  token.length()));  }	  else    if(stopAtNonOption)    {    tokens.add(token.substring(0,    token.length()    -    2));    tokens.add(token.substring(token.indexOf('=')+    1,    token.length()));    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
18	[BUG]  [BUGGY]  List  <  String>  iter  =  currentOption.options.iterator();  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }        [BUGGY]  List  <  String>  iter  =  currentOption.options.iterator();  [BUGGY]      else  if  (     "-     ".equals(token))    {  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	126	127	1	replace	List  <  String>  iter  =  currentOption.options.iterator();	  Iterator    <    String>    iter    =    currentOption.options.iterator();    	non-compiled	[CE]  <identifier>  expected	32	None	replace
19	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('-')+  1));  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }        [BUGGY]  tokens.add(token.substring(0,  token.indexOf('-')+  1));  [BUGGY]      else  if  (     "-     ".equals(token))    {  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	126	127	1	replace	tokens.add(token.substring(0,  token.indexOf('-')+  1));	  tokens.add(token.substring(0,    token.indexOf('-')));    	non-compiled	[CE]  <identifier>  expected	13	None	replace
20	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('-'),  stopAtNonOption));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }        [BUGGY]  tokens.add(token.substring(0,  token.indexOf('-'),  stopAtNonOption));  [BUGGY]      else  if  (     "-     ".equals(token))    {  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	126	127	1	replace	tokens.add(token.substring(0,  token.indexOf('-'),  stopAtNonOption));	  tokens.add(token.substring(0,    token.indexOf('-')));    	non-compiled	[CE]  <identifier>  expected	13	None	replace
21	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  arguments.length  >  1  &&  arguments[1].equals(token))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }        [BUGGY]  else  if(stopAtNonOption  &&  arguments.length  >  1  &&  arguments[1].equals(token))  {  [BUGGY]      {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	126	127	1	replace	else  if(stopAtNonOption  &&  arguments.length  >  1  &&  arguments[1].equals(token))  {	  else    if(stopAtNonOption    &&    arguments.length    >    1    &&    arguments[0].equals(token))    {    	non-compiled	[CE]  <identifier>  expected	27	None	replace
22	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  tokenLength  >  1  &&  arguments[0].equals(token))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }        [BUGGY]  else  if(stopAtNonOption  &&  tokenLength  >  1  &&  arguments[0].equals(token))  {  [BUGGY]      {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	126	127	1	replace	else  if(stopAtNonOption  &&  tokenLength  >  1  &&  arguments[0].equals(token))  {	  else    if(stopAtNonOption    &&    arguments.length    >    1    &&    arguments[0].equals(token))    {    	non-compiled	[CE]  <identifier>  expected	27	None	replace
23	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.length()),  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }        [BUGGY]  tokens.add(token.substring(0,  token.length()),  stopAtNonOption);  [BUGGY]      else  if  (     "-     ".equals(token))    {  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	126	127	1	replace	tokens.add(token.substring(0,  token.length()),  stopAtNonOption);	  tokens.add(token.substring(0,    token.length()    -    2));    	non-compiled	[CE]  <identifier>  expected	31	None	replace
24	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')+  1,  token.length()  -  1));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }        [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')+  1,  token.length()  -  1));  [BUGGY]      else  if  (     "-     ".equals(token))    {  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	126	127	1	replace	tokens.add(token.substring(0,  token.indexOf('=')+  1,  token.length()  -  1));	  tokens.add(token.substring(0,    token.indexOf('=')+    1,    token.length()));    	non-compiled	[CE]  <identifier>  expected	1	None	replace
25	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')+  1,  token.length()  +  1));  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }        [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')+  1,  token.length()  +  1));  [BUGGY]      else  if  (     "-     ".equals(token))    {  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	126	127	1	replace	tokens.add(token.substring(0,  token.indexOf('=')+  1,  token.length()  +  1));	  tokens.add(token.substring(0,    token.indexOf('=')+    1,    token.length()));    	non-compiled	[CE]  <identifier>  expected	1	None	replace
26	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')+  1,  token.length()),  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }        [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')+  1,  token.length()),  stopAtNonOption);  [BUGGY]      else  if  (     "-     ".equals(token))    {  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	126	127	1	replace	tokens.add(token.substring(0,  token.indexOf('=')+  1,  token.length()),  stopAtNonOption);	  tokens.add(token.substring(0,    token.indexOf('=')+    1,    token.length()));    	non-compiled	[CE]  <identifier>  expected	1	None	replace
27	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  tokenLength  >  1)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }        [BUGGY]  else  if(stopAtNonOption  &&  tokenLength  >  1)  {  [BUGGY]      {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	126	127	1	replace	else  if(stopAtNonOption  &&  tokenLength  >  1)  {	  else    if(stopAtNonOption    &&    tokenLength    >    2)    {    	non-compiled	[CE]  <identifier>  expected	45	None	replace
28	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  tokenLength  ==  2)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }        [BUGGY]  else  if(stopAtNonOption  &&  tokenLength  ==  2)  {  [BUGGY]      {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	126	127	1	replace	else  if(stopAtNonOption  &&  tokenLength  ==  2)  {	  else    if(stopAtNonOption    &&    tokenLength    >    2)    {    	non-compiled	[CE]  <identifier>  expected	45	None	replace
29	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  tokenLength  <  2)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }        [BUGGY]  else  if(stopAtNonOption  &&  tokenLength  <  2)  {  [BUGGY]      {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	126	127	1	replace	else  if(stopAtNonOption  &&  tokenLength  <  2)  {	  else    if(stopAtNonOption    &&    tokenLength    >    2)    {    	non-compiled	[CE]  <identifier>  expected	45	None	replace
30	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  tokenLength  >  0)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }        [BUGGY]  else  if(stopAtNonOption  &&  tokenLength  >  0)  {  [BUGGY]      {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	126	127	1	replace	else  if(stopAtNonOption  &&  tokenLength  >  0)  {	  else    if(stopAtNonOption    &&    tokenLength    >    2)    {    	non-compiled	[CE]  <identifier>  expected	45	None	replace
31	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  arguments.length  >  2)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }        [BUGGY]  else  if(stopAtNonOption  ||  arguments.length  >  2)  {  [BUGGY]      {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	126	127	1	replace	else  if(stopAtNonOption  ||  arguments.length  >  2)  {	  else    if(stopAtNonOption    &&    arguments.length    >    2)    {    	non-compiled	[CE]  <identifier>  expected	16	None	replace
32	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  arguments.contains( "-- "))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }        [BUGGY]  else  if(stopAtNonOption  &&  arguments.contains( "-- "))  {  [BUGGY]      {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	126	127	1	replace	else  if(stopAtNonOption  &&  arguments.contains( "-- "))  {	  else    if(stopAtNonOption    &&   "--   ".equals(token))    {    	non-compiled	[CE]  <identifier>  expected	34	None	replace
33	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf( ". ")+  1));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }        [BUGGY]  tokens.add(token.substring(0,  token.indexOf( ". ")+  1));  [BUGGY]      else  if  (     "-     ".equals(token))    {  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	126	127	1	replace	tokens.add(token.substring(0,  token.indexOf( ". ")+  1));	  tokens.add(token.substring(0,    token.indexOf(   "=   ")+    1));    	non-compiled	[CE]  <identifier>  expected	22	None	replace
34	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')+  1));  tokens.add(token.substring(token.indexOf('=')+  1,  token.length()));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }        [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')+  1));  tokens.add(token.substring(token.indexOf('=')+  1,  token.length()));  [BUGGY]      else  if  (     "-     ".equals(token))    {  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	126	127	1	replace	tokens.add(token.substring(0,  token.indexOf('=')+  1));  tokens.add(token.substring(token.indexOf('=')+  1,  token.length()));	  else    if(token.startsWith(   "-   "))    {    tokens.add(token.substring(0,    token.length()    -    2));    tokens.add(token.substring(token.indexOf('=')+    1,    token.length()));    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
35	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  arguments.contains( "- ")||  arguments.contains( "- "))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }        [BUGGY]  else  if(stopAtNonOption  &&  arguments.contains( "- ")||  arguments.contains( "- "))  {  [BUGGY]      {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	126	127	1	replace	else  if(stopAtNonOption  &&  arguments.contains( "- ")||  arguments.contains( "- "))  {	  else    if(stopAtNonOption    &&    arguments.contains(   "-   "))    {    	non-compiled	[CE]  <identifier>  expected	26	None	replace
36	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  arguments.contains( "- ")||  arguments.contains( "-- "))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }        [BUGGY]  else  if(stopAtNonOption  &&  arguments.contains( "- ")||  arguments.contains( "-- "))  {  [BUGGY]      {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	126	127	1	replace	else  if(stopAtNonOption  &&  arguments.contains( "- ")||  arguments.contains( "-- "))  {	  else    if(stopAtNonOption    &&    arguments.contains(   "-   "))    {    	non-compiled	[CE]  <identifier>  expected	26	None	replace
37	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('-'))  +  1,  token.length()  -  1));  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }        [BUGGY]  tokens.add(token.substring(0,  token.indexOf('-'))  +  1,  token.length()  -  1));  [BUGGY]      else  if  (     "-     ".equals(token))    {  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	126	127	1	replace	tokens.add(token.substring(0,  token.indexOf('-'))  +  1,  token.length()  -  1));	  tokens.add(token.substring(0,    token.indexOf('-'))    +    1,    token.length()));    	non-compiled	[CE]  <identifier>  expected	36	None	replace
38	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('-')),  token.length()));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }        [BUGGY]  tokens.add(token.substring(0,  token.indexOf('-')),  token.length()));  [BUGGY]      else  if  (     "-     ".equals(token))    {  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	126	127	1	replace	tokens.add(token.substring(0,  token.indexOf('-')),  token.length()));	  tokens.add(token.substring(0,    token.indexOf('-'))    +    1,    token.length()));    	non-compiled	[CE]  <identifier>  expected	36	None	replace
39	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('-'))  +  1,  token.length());  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }        [BUGGY]  tokens.add(token.substring(0,  token.indexOf('-'))  +  1,  token.length());  [BUGGY]      else  if  (     "-     ".equals(token))    {  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	126	127	1	replace	tokens.add(token.substring(0,  token.indexOf('-'))  +  1,  token.length());	  tokens.add(token.substring(0,    token.indexOf('-'))    +    1,    token.length()));    	non-compiled	[CE]  <identifier>  expected	36	None	replace
40	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('-')+  1));  tokens.add(token.substring(token.indexOf('=')+  1,  token.length()));  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }        [BUGGY]  tokens.add(token.substring(0,  token.indexOf('-')+  1));  tokens.add(token.substring(token.indexOf('=')+  1,  token.length()));  [BUGGY]      else  if  (     "-     ".equals(token))    {  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	126	127	1	replace	tokens.add(token.substring(0,  token.indexOf('-')+  1));  tokens.add(token.substring(token.indexOf('=')+  1,  token.length()));	  tokens.add(token.substring(0,    token.indexOf('-')));    tokens.add(token.substring(token.indexOf('=')+    1,    token.length()));    	non-compiled	[CE]  <identifier>  expected	4	None	replace
41	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.keySet().iterator();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }        [BUGGY]  Iterator  <  String>  iter  =  options.keySet().iterator();  [BUGGY]      else  if  (     "-     ".equals(token))    {  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	126	127	1	replace	Iterator  <  String>  iter  =  options.keySet().iterator();	  Iterator    <    String>    iter    =    options.values().iterator();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
42	[BUG]  [BUGGY]  List  <  String>  iter  =  options.values().iterator();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }        [BUGGY]  List  <  String>  iter  =  options.values().iterator();  [BUGGY]      else  if  (     "-     ".equals(token))    {  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	126	127	1	replace	List  <  String>  iter  =  options.values().iterator();	  Iterator    <    String>    iter    =    options.values().iterator();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
43	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  arguments.length  >  2  &&  arguments[1].equals(token))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }        [BUGGY]  else  if(stopAtNonOption  &&  arguments.length  >  2  &&  arguments[1].equals(token))  {  [BUGGY]      {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	126	127	1	replace	else  if(stopAtNonOption  &&  arguments.length  >  2  &&  arguments[1].equals(token))  {	  else    if(stopAtNonOption    &&    arguments.length    >    2    &&    arguments[0].equals(token))    {    	non-compiled	[CE]  <identifier>  expected	25	None	replace
44	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  arguments.length  >  2  &&  arguments[2].equals(token))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }        [BUGGY]  else  if(stopAtNonOption  &&  arguments.length  >  2  &&  arguments[2].equals(token))  {  [BUGGY]      {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	126	127	1	replace	else  if(stopAtNonOption  &&  arguments.length  >  2  &&  arguments[2].equals(token))  {	  else    if(stopAtNonOption    &&    arguments.length    >    2    &&    arguments[0].equals(token))    {    	non-compiled	[CE]  <identifier>  expected	25	None	replace
45	[BUG]  [BUGGY]  else  if(stopAtNonOption.equals( "-- ")&&  tokenLength  ==  2)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }        [BUGGY]  else  if(stopAtNonOption.equals( "-- ")&&  tokenLength  ==  2)  {  [BUGGY]      {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	126	127	1	replace	else  if(stopAtNonOption.equals( "-- ")&&  tokenLength  ==  2)  {	  else    if(   "--       ".equals(token)&&    stopAtNonOption)    {    	non-compiled	[CE]  <identifier>  expected	35	None	replace
46	[BUG]  [BUGGY]  else  if(token.startsWith( "-- ")&&  stopAtNonOption)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }        [BUGGY]  else  if(token.startsWith( "-- ")&&  stopAtNonOption)  {  [BUGGY]      {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	126	127	1	replace	else  if(token.startsWith( "-- ")&&  stopAtNonOption)  {	  else    if(   "--       ".equals(token)&&    stopAtNonOption)    {    	non-compiled	[CE]  <identifier>  expected	35	None	replace
47	[BUG]  [BUGGY]  else  if(stopAtNonOption.equals( "-- ")&&  tokenLength  <  2)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }        [BUGGY]  else  if(stopAtNonOption.equals( "-- ")&&  tokenLength  <  2)  {  [BUGGY]      {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	126	127	1	replace	else  if(stopAtNonOption.equals( "-- ")&&  tokenLength  <  2)  {	  else    if(   "--       ".equals(token)&&    stopAtNonOption)    {    	non-compiled	[CE]  <identifier>  expected	35	None	replace
48	[BUG]  [BUGGY]  else  if(stopAtNonOption.equals(token)&&  tokenLength  ==  2)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }        [BUGGY]  else  if(stopAtNonOption.equals(token)&&  tokenLength  ==  2)  {  [BUGGY]      {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	126	127	1	replace	else  if(stopAtNonOption.equals(token)&&  tokenLength  ==  2)  {	  else    if(   "--       ".equals(token)&&    stopAtNonOption)    {    	non-compiled	[CE]  <identifier>  expected	35	None	replace
49	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('='));  tokens.add(token.substring(token.indexOf('=')+  1,  token.length()));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }        [BUGGY]  tokens.add(token.substring(0,  token.indexOf('='));  tokens.add(token.substring(token.indexOf('=')+  1,  token.length()));  [BUGGY]      else  if  (     "-     ".equals(token))    {  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	126	127	1	replace	tokens.add(token.substring(0,  token.indexOf('='));  tokens.add(token.substring(token.indexOf('=')+  1,  token.length()));	  else    if(token.startsWith(   "-   "))    {    tokens.add(token.substring(0,    token.indexOf('='));    tokens.add(token.substring(token.indexOf('=')+    1,    token.length()));    }    	non-compiled	[CE]  <identifier>  expected	52	None	replace
50	[BUG]  [BUGGY]  else  if(token.equals( "- ")||  token.startsWith( "-   "))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }        [BUGGY]  else  if(token.equals( "- ")||  token.startsWith( "-   "))  {  [BUGGY]      {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	126	127	1	replace	else  if(token.equals( "- ")||  token.startsWith( "-   "))  {	  else    if(token.equals(   "-   ")&&    token.startsWith(   "-   "))    {    	non-compiled	[CE]  <identifier>  expected	28	None	replace
51	[BUG]  [BUGGY]  else  if(token.equals( "- ")&&  token.startsWith( "- ")||  token.startsWith( "- "))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }        [BUGGY]  else  if(token.equals( "- ")&&  token.startsWith( "- ")||  token.startsWith( "- "))  {  [BUGGY]      {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	126	127	1	replace	else  if(token.equals( "- ")&&  token.startsWith( "- ")||  token.startsWith( "- "))  {	  else    if(token.equals(   "-   ")&&    token.startsWith(   "-   "))    {    	non-compiled	[CE]  <identifier>  expected	28	None	replace
52	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('/')+  1));  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }        [BUGGY]  tokens.add(token.substring(0,  token.indexOf('/')+  1));  [BUGGY]      else  if  (     "-     ".equals(token))    {  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	126	127	1	replace	tokens.add(token.substring(0,  token.indexOf('/')+  1));	  tokens.add(token.substring(0,    token.indexOf('/')));    	non-compiled	[CE]  <identifier>  expected	30	None	replace
53	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('/')-  1));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }        [BUGGY]  tokens.add(token.substring(0,  token.indexOf('/')-  1));  [BUGGY]      else  if  (     "-     ".equals(token))    {  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	126	127	1	replace	tokens.add(token.substring(0,  token.indexOf('/')-  1));	  tokens.add(token.substring(0,    token.indexOf('/')));    	non-compiled	[CE]  <identifier>  expected	30	None	replace
54	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('/'),  stopAtNonOption));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }        [BUGGY]  tokens.add(token.substring(0,  token.indexOf('/'),  stopAtNonOption));  [BUGGY]      else  if  (     "-     ".equals(token))    {  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	126	127	1	replace	tokens.add(token.substring(0,  token.indexOf('/'),  stopAtNonOption));	  tokens.add(token.substring(0,    token.indexOf('/')));    	non-compiled	[CE]  <identifier>  expected	30	None	replace
55	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  this.currentOption.iterator();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }        [BUGGY]  Iterator  <  String>  iter  =  this.currentOption.iterator();  [BUGGY]      else  if  (     "-     ".equals(token))    {  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	126	127	1	replace	Iterator  <  String>  iter  =  this.currentOption.iterator();	  Iterator    <    String>    iter    =    currentOption.iterator();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
56	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  tokens.iterator();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }        [BUGGY]  Iterator  <  String>  iter  =  tokens.iterator();  [BUGGY]      else  if  (     "-     ".equals(token))    {  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	126	127	1	replace	Iterator  <  String>  iter  =  tokens.iterator();	  Iterator    <    String>    iter    =    currentOption.iterator();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
57	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf(':')+  1));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }        [BUGGY]  tokens.add(token.substring(0,  token.indexOf(':')+  1));  [BUGGY]      else  if  (     "-     ".equals(token))    {  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	126	127	1	replace	tokens.add(token.substring(0,  token.indexOf(':')+  1));	  tokens.add(token.substring(0,    token.indexOf(':')));    	non-compiled	[CE]  <identifier>  expected	14	None	replace
58	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf(':'),  stopAtNonOption));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }        [BUGGY]  tokens.add(token.substring(0,  token.indexOf(':'),  stopAtNonOption));  [BUGGY]      else  if  (     "-     ".equals(token))    {  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	126	127	1	replace	tokens.add(token.substring(0,  token.indexOf(':'),  stopAtNonOption));	  tokens.add(token.substring(0,    token.indexOf(':')));    	non-compiled	[CE]  <identifier>  expected	14	None	replace
59	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf(':')-  1));  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }        [BUGGY]  tokens.add(token.substring(0,  token.indexOf(':')-  1));  [BUGGY]      else  if  (     "-     ".equals(token))    {  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	126	127	1	replace	tokens.add(token.substring(0,  token.indexOf(':')-  1));	  tokens.add(token.substring(0,    token.indexOf(':')));    	non-compiled	[CE]  <identifier>  expected	14	None	replace
60	[BUG]  [BUGGY]  else  if(token.startsWith( "- ")&&  token.startsWith( "- ")||  token.startsWith( "- "))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }        [BUGGY]  else  if(token.startsWith( "- ")&&  token.startsWith( "- ")||  token.startsWith( "- "))  {  [BUGGY]      {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	126	127	1	replace	else  if(token.startsWith( "- ")&&  token.startsWith( "- ")||  token.startsWith( "- "))  {	  else    if(token.startsWith(   "-   ")&&    token.startsWith(   "-       "))    {    	non-compiled	[CE]  <identifier>  expected	39	None	replace
61	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  arguments.length  >  1)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }        [BUGGY]  else  if(stopAtNonOption  ||  arguments.length  >  1)  {  [BUGGY]      {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	126	127	1	replace	else  if(stopAtNonOption  ||  arguments.length  >  1)  {	  else    if(stopAtNonOption    &&    arguments.length    >    1)    {    	non-compiled	[CE]  <identifier>  expected	18	None	replace
62	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  this.arguments.iterator();  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }        [BUGGY]  Iterator  <  String>  iter  =  this.arguments.iterator();  [BUGGY]      else  if  (     "-     ".equals(token))    {  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	126	127	1	replace	Iterator  <  String>  iter  =  this.arguments.iterator();	  Iterator    <    String>    iter    =    arguments.iterator();    	non-compiled	[CE]  <identifier>  expected	10	None	replace
63	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  stopAtNonOption)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }        [BUGGY]  else  if(stopAtNonOption  &&  stopAtNonOption)  {  [BUGGY]      {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	126	127	1	replace	else  if(stopAtNonOption  &&  stopAtNonOption)  {	  else    if(stopAtNonOption    ||    stopAtNonOption)    {    	non-compiled	[CE]  <identifier>  expected	17	None	replace
64	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  arguments.length)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }        [BUGGY]  else  if(stopAtNonOption  ||  arguments.length)  {  [BUGGY]      {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	126	127	1	replace	else  if(stopAtNonOption  ||  arguments.length)  {	  else    if(stopAtNonOption    ||    stopAtNonOption)    {    	non-compiled	[CE]  <identifier>  expected	17	None	replace
65	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  isSingleHyphen(token))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }        [BUGGY]  else  if(stopAtNonOption  ||  isSingleHyphen(token))  {  [BUGGY]      {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	126	127	1	replace	else  if(stopAtNonOption  ||  isSingleHyphen(token))  {	  else    if(stopAtNonOption    &&    isSingleHyphen(token))    {    	non-compiled	[CE]  <identifier>  expected	42	None	replace
66	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  isSingleHyphen(token)||  stopAtNonOption)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }        [BUGGY]  else  if(stopAtNonOption  &&  isSingleHyphen(token)||  stopAtNonOption)  {  [BUGGY]      {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	126	127	1	replace	else  if(stopAtNonOption  &&  isSingleHyphen(token)||  stopAtNonOption)  {	  else    if(stopAtNonOption    &&    isSingleHyphen(token))    {    	non-compiled	[CE]  <identifier>  expected	42	None	replace
67	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  isSingleHyphen(token)||  isSingleHyphen(token))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }        [BUGGY]  else  if(stopAtNonOption  &&  isSingleHyphen(token)||  isSingleHyphen(token))  {  [BUGGY]      {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	126	127	1	replace	else  if(stopAtNonOption  &&  isSingleHyphen(token)||  isSingleHyphen(token))  {	  else    if(stopAtNonOption    &&    isSingleHyphen(token))    {    	non-compiled	[CE]  <identifier>  expected	42	None	replace
68	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  isSingleHyphen(token,  arguments))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }        [BUGGY]  else  if(stopAtNonOption  &&  isSingleHyphen(token,  arguments))  {  [BUGGY]      {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	126	127	1	replace	else  if(stopAtNonOption  &&  isSingleHyphen(token,  arguments))  {	  else    if(stopAtNonOption    &&    isSingleHyphen(token))    {    	non-compiled	[CE]  <identifier>  expected	42	None	replace
69	[BUG]  [BUGGY]  else  if(token.startsWith( "-- ")||  token.startsWith( "-- "))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }        [BUGGY]  else  if(token.startsWith( "-- ")||  token.startsWith( "-- "))  {  [BUGGY]      {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	126	127	1	replace	else  if(token.startsWith( "-- ")||  token.startsWith( "-- "))  {	  else    if(   "--   ".equals(token)||    token.startsWith(   "--   "))    {    	non-compiled	[CE]  <identifier>  expected	49	None	replace
70	[BUG]  [BUGGY]  else  if( "-- ".equals(token)&&  token.startsWith( "-- "))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }        [BUGGY]  else  if( "-- ".equals(token)&&  token.startsWith( "-- "))  {  [BUGGY]      {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	126	127	1	replace	else  if( "-- ".equals(token)&&  token.startsWith( "-- "))  {	  else    if(   "--   ".equals(token)||    token.startsWith(   "--   "))    {    	non-compiled	[CE]  <identifier>  expected	49	None	replace
71	[BUG]  [BUGGY]  else  if(tokenLength  ==  2)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }        [BUGGY]  else  if(tokenLength  ==  2)  {  [BUGGY]      {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	126	127	1	replace	else  if(tokenLength  ==  2)  {	  else    if(stopAtNonOption    ||    tokenLength    ==    2)    {    	non-compiled	[CE]  <identifier>  expected	46	None	replace
72	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  tokenLength  ==  1)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }        [BUGGY]  else  if(stopAtNonOption  ||  tokenLength  ==  1)  {  [BUGGY]      {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	126	127	1	replace	else  if(stopAtNonOption  ||  tokenLength  ==  1)  {	  else    if(stopAtNonOption    ||    tokenLength    ==    2)    {    	non-compiled	[CE]  <identifier>  expected	46	None	replace
73	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('='))  +  1,  token.length()));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }        [BUGGY]  tokens.add(token.substring(0,  token.indexOf('='))  +  1,  token.length()));  [BUGGY]      else  if  (     "-     ".equals(token))    {  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	126	127	1	replace	tokens.add(token.substring(0,  token.indexOf('='))  +  1,  token.length()));	  if(stopAtNonOption)    {    tokens.add(token.substring(0,    token.length()    -    2));    tokens.add(token.substring(token.indexOf('=')+    1,    token.length()));    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
74	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  token.startsWith( "- ")||  stopAtNonOption)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }        [BUGGY]  else  if(stopAtNonOption  &&  token.startsWith( "- ")||  stopAtNonOption)  {  [BUGGY]      {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	126	127	1	replace	else  if(stopAtNonOption  &&  token.startsWith( "- ")||  stopAtNonOption)  {	  else    if(stopAtNonOption    &&    token.startsWith(   "-       "))    {    	non-compiled	[CE]  <identifier>  expected	19	None	replace
75	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  token.startsWith( "-- "))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }        [BUGGY]  else  if(stopAtNonOption  ||  token.startsWith( "-- "))  {  [BUGGY]      {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	126	127	1	replace	else  if(stopAtNonOption  ||  token.startsWith( "-- "))  {	  else    if(token.startsWith(   "--   "))    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
76	[BUG]  [BUGGY]  else  if(token.startsWith( "- ")&&  token.startsWith( "-))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }        [BUGGY]  else  if(token.startsWith( "- ")&&  token.startsWith( "-))  {  [BUGGY]      {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	126	127	1	replace	else  if(token.startsWith( "- ")&&  token.startsWith( "-))  {	  else    if(token.startsWith(   "-   ")&&    token.startsWith(   "-       "))    {    	non-compiled	[CE]  <identifier>  expected	39	None	replace
77	[BUG]  [BUGGY]  Ilerator  <  String>  iter  =  options.iterator();  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }        [BUGGY]  Ilerator  <  String>  iter  =  options.iterator();  [BUGGY]      else  if  (     "-     ".equals(token))    {  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	126	127	1	replace	Ilerator  <  String>  iter  =  options.iterator();	  Iterator    <    String>    iter    =    currentOption.options.iterator();    	non-compiled	[CE]  <identifier>  expected	32	None	replace
78	[BUG]  [BUGGY]  else  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('-')));  tokens.add(token.substring(token.indexOf('=')+  1,  token.length()));  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }        [BUGGY]  else  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('-')));  tokens.add(token.substring(token.indexOf('=')+  1,  token.length()));  }  [BUGGY]      else  if  (     "-     ".equals(token))    {  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	126	127	1	replace	else  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('-')));  tokens.add(token.substring(token.indexOf('=')+  1,  token.length()));  }	  tokens.add(token.substring(0,    token.indexOf('-')));    tokens.add(token.substring(token.indexOf('=')+    1,    token.length()));    	non-compiled	[CE]  <identifier>  expected	4	None	replace
79	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('-')));  tokens.add(token.substring(token.indexOf('=')+  1,  token.length()));  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }        [BUGGY]  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('-')));  tokens.add(token.substring(token.indexOf('=')+  1,  token.length()));  }  [BUGGY]      else  if  (     "-     ".equals(token))    {  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	126	127	1	replace	if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('-')));  tokens.add(token.substring(token.indexOf('=')+  1,  token.length()));  }	  tokens.add(token.substring(0,    token.indexOf('-')));    tokens.add(token.substring(token.indexOf('=')+    1,    token.length()));    	non-compiled	[CE]  <identifier>  expected	4	None	replace
80	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  eatTheRest)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }        [BUGGY]  else  if(stopAtNonOption  ||  eatTheRest)  {  [BUGGY]      {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	126	127	1	replace	else  if(stopAtNonOption  ||  eatTheRest)  {	  else    if(stopAtNonOption    ||    stopAtNonOption)    {    	non-compiled	[CE]  <identifier>  expected	17	None	replace
81	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  stopAtNonOption  ||  tokenLength  ==  2)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }        [BUGGY]  else  if(stopAtNonOption  ||  stopAtNonOption  ||  tokenLength  ==  2)  {  [BUGGY]      {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	126	127	1	replace	else  if(stopAtNonOption  ||  stopAtNonOption  ||  tokenLength  ==  2)  {	  else    if(stopAtNonOption    ||    stopAtNonOption)    {    	non-compiled	[CE]  <identifier>  expected	17	None	replace
82	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  arguments.length  >  1  &&  arguments[0].equals( "- "))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }        [BUGGY]  else  if(stopAtNonOption  &&  arguments.length  >  1  &&  arguments[0].equals( "- "))  {  [BUGGY]      {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	126	127	1	replace	else  if(stopAtNonOption  &&  arguments.length  >  1  &&  arguments[0].equals( "- "))  {	  else    if(stopAtNonOption    &&    arguments.length    >    1    &&    arguments[0].equals(token))    {    	non-compiled	[CE]  <identifier>  expected	27	None	replace
83	[BUG]  [BUGGY]  else  if(token.equals( "- ")&&  token.startsWith( "-))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }        [BUGGY]  else  if(token.equals( "- ")&&  token.startsWith( "-))  {  [BUGGY]      {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	126	127	1	replace	else  if(token.equals( "- ")&&  token.startsWith( "-))  {	  else    if(token.equals(   "-   ")&&    token.startsWith(   "-   "))    {    	non-compiled	[CE]  <identifier>  expected	28	None	replace
84	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  arguments.contains( "- ")||  stopAtNonOption)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }        [BUGGY]  else  if(stopAtNonOption  &&  arguments.contains( "- ")||  stopAtNonOption)  {  [BUGGY]      {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	126	127	1	replace	else  if(stopAtNonOption  &&  arguments.contains( "- ")||  stopAtNonOption)  {	  else    if(stopAtNonOption    &&    arguments.contains(   "-   "))    {    	non-compiled	[CE]  <identifier>  expected	26	None	replace
85	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  options.contains( "- "))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }        [BUGGY]  else  if(stopAtNonOption  &&  options.contains( "- "))  {  [BUGGY]      {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	126	127	1	replace	else  if(stopAtNonOption  &&  options.contains( "- "))  {	  else    if(stopAtNonOption    &&    arguments.contains(   "-   "))    {    	non-compiled	[CE]  <identifier>  expected	26	None	replace
86	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  isSingleHyphen(token,  stopAtNonOption))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }        [BUGGY]  else  if(stopAtNonOption  &&  isSingleHyphen(token,  stopAtNonOption))  {  [BUGGY]      {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	126	127	1	replace	else  if(stopAtNonOption  &&  isSingleHyphen(token,  stopAtNonOption))  {	  else    if(stopAtNonOption    &&    isSingleHyphen(token))    {    	non-compiled	[CE]  <identifier>  expected	42	None	replace
87	[BUG]  [BUGGY]  else  if(stopAtNonOption.equals(token)&&   "-- ")  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }        [BUGGY]  else  if(stopAtNonOption.equals(token)&&   "-- ")  {  [BUGGY]      {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	126	127	1	replace	else  if(stopAtNonOption.equals(token)&&   "-- ")  {	  else    if(   "--       ".equals(token)&&    stopAtNonOption)    {    	non-compiled	[CE]  <identifier>  expected	35	None	replace
88	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  arguments.contains( "-- "))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }        [BUGGY]  else  if(stopAtNonOption  ||  arguments.contains( "-- "))  {  [BUGGY]      {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	126	127	1	replace	else  if(stopAtNonOption  ||  arguments.contains( "-- "))  {	  else    if(stopAtNonOption    ||    arguments.contains(   "-   "))    {    	non-compiled	[CE]  <identifier>  expected	54	None	replace
89	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  arguments.length  >  0  &&  arguments[1].equals(token))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }        [BUGGY]  else  if(stopAtNonOption  &&  arguments.length  >  0  &&  arguments[1].equals(token))  {  [BUGGY]      {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	126	127	1	replace	else  if(stopAtNonOption  &&  arguments.length  >  0  &&  arguments[1].equals(token))  {	  else    if(stopAtNonOption    &&    arguments.length    >    0    &&    arguments[0].equals(token))    {    	non-compiled	[CE]  <identifier>  expected	41	None	replace
90	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  arguments.length  >  2  &&  arguments[0].equals( "- "))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }        [BUGGY]  else  if(stopAtNonOption  &&  arguments.length  >  2  &&  arguments[0].equals( "- "))  {  [BUGGY]      {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	126	127	1	replace	else  if(stopAtNonOption  &&  arguments.length  >  2  &&  arguments[0].equals( "- "))  {	  else    if(stopAtNonOption    &&    arguments.length    >    2    &&    arguments[0].equals(token))    {    	non-compiled	[CE]  <identifier>  expected	25	None	replace
91	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  this.options.values().iterator();  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }        [BUGGY]  Iterator  <  String>  iter  =  this.options.values().iterator();  [BUGGY]      else  if  (     "-     ".equals(token))    {  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	126	127	1	replace	Iterator  <  String>  iter  =  this.options.values().iterator();	  Iterator    <    String>    iter    =    this.options.iterator();    	non-compiled	[CE]  <identifier>  expected	51	None	replace
92	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('='))  +  1,  token.length());  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }        [BUGGY]  tokens.add(token.substring(0,  token.indexOf('='))  +  1,  token.length());  [BUGGY]      {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	126	127	1	replace	tokens.add(token.substring(0,  token.indexOf('='))  +  1,  token.length());	  tokens.add(token.substring(0,    token.indexOf('=')));    tokens.add(token.substring(token.indexOf('=')+    1,    token.length()));    	non-compiled	[CE]  <identifier>  expected	24	None	replace
93	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.entrySet().iterator();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }        [BUGGY]  Iterator  <  String>  iter  =  options.entrySet().iterator();  [BUGGY]      else  if  (     "-     ".equals(token))    {  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	126	127	1	replace	Iterator  <  String>  iter  =  options.entrySet().iterator();	  Iterator    <    String>    iter    =    options.values().iterator();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
94	[BUG]  [BUGGY]  else  if(! "-- ".equals(token)&&  stopAtNonOption)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }        [BUGGY]  else  if(! "-- ".equals(token)&&  stopAtNonOption)  {  [BUGGY]      {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	126	127	1	replace	else  if(! "-- ".equals(token)&&  stopAtNonOption)  {	  else    if(   "--       ".equals(token)&&    stopAtNonOption)    {    	non-compiled	[CE]  <identifier>  expected	35	None	replace
95	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('-'))  +  1,  token.length()  -  1);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }        [BUGGY]  tokens.add(token.substring(0,  token.indexOf('-'))  +  1,  token.length()  -  1);  [BUGGY]      else  if  (     "-     ".equals(token))    {  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	126	127	1	replace	tokens.add(token.substring(0,  token.indexOf('-'))  +  1,  token.length()  -  1);	  tokens.add(token.substring(0,    token.indexOf('-'))    +    1,    token.length()));    	non-compiled	[CE]  <identifier>  expected	36	None	replace
96	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  options.isSingleHyphen(token))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }        [BUGGY]  else  if(stopAtNonOption  &&  options.isSingleHyphen(token))  {  [BUGGY]      {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	126	127	1	replace	else  if(stopAtNonOption  &&  options.isSingleHyphen(token))  {	  else    if(stopAtNonOption    &&    isSingleHyphen(token))    {    	non-compiled	[CE]  <identifier>  expected	42	None	replace
97	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  isSingleHyphen(token)||  tokenLength  ==  2)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }        [BUGGY]  else  if(stopAtNonOption  &&  isSingleHyphen(token)||  tokenLength  ==  2)  {  [BUGGY]      {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	126	127	1	replace	else  if(stopAtNonOption  &&  isSingleHyphen(token)||  tokenLength  ==  2)  {	  else    if(stopAtNonOption    &&    isSingleHyphen(token))    {    	non-compiled	[CE]  <identifier>  expected	42	None	replace
98	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }        [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [BUGGY]      {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	126	127	1	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti	  if(stopAtNonOption)    {    tokens.add(token.substring(0,    token.indexOf('=')));    tokens.add(token.substring(token.indexOf('=')+    1,    token.length()));    }    	non-compiled	[CE]  <identifier>  expected	23	None	replace
99	[BUG]  [BUGGY]  else  if(token.equals( "- "))  {  tokens.add(token.substring(0,  token.length()  -  1));  tokens.add(token.substring(token.indexOf('=')+  1,  token.length()));  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }        [BUGGY]  else  if(token.equals( "- "))  {  tokens.add(token.substring(0,  token.length()  -  1));  tokens.add(token.substring(token.indexOf('=')+  1,  token.length()));  }  [BUGGY]      else  if  (     "-     ".equals(token))    {  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	126	127	1	replace	else  if(token.equals( "- "))  {  tokens.add(token.substring(0,  token.length()  -  1));  tokens.add(token.substring(token.indexOf('=')+  1,  token.length()));  }	  else    if(token.startsWith(   "-   "))    {    tokens.add(token.substring(0,    token.length()    -    1));    tokens.add(token.substring(token.indexOf('=')+    1,    token.length()));    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
100	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf(':'),  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }        [BUGGY]  tokens.add(token.substring(0,  token.indexOf(':'),  stopAtNonOption);  [BUGGY]      else  if  (     "-     ".equals(token))    {  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	126	127	1	replace	tokens.add(token.substring(0,  token.indexOf(':'),  stopAtNonOption);	  tokens.add(token.substring(0,    token.indexOf(':')));    	non-compiled	[CE]  <identifier>  expected	14	None	replace
101	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  arguments.length  <  2)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }        [BUGGY]  else  if(stopAtNonOption  ||  arguments.length  <  2)  {  [BUGGY]      {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	126	127	1	replace	else  if(stopAtNonOption  ||  arguments.length  <  2)  {	  else    if(stopAtNonOption    ||    stopAtNonOption)    {    	non-compiled	[CE]  <identifier>  expected	17	None	replace
102	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf( "=')+  1));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }        [BUGGY]  tokens.add(token.substring(0,  token.indexOf( "=')+  1));  [BUGGY]      else  if  (     "-     ".equals(token))    {  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	126	127	1	replace	tokens.add(token.substring(0,  token.indexOf( "=')+  1));	  tokens.add(token.substring(0,    token.indexOf(   "=')));    	non-compiled	[CE]  <identifier>  expected	50	None	replace
