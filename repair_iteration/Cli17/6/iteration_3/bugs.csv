bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  tokens.remove( "-- "  +  currentOption);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  tokens.remove( "-- "  +  currentOption);  [BUGGY]      tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	tokens.remove( "-- "  +  currentOption);	  tokens.remove(   "--   "    +    value);    	non-compiled	[CE]  	15	None	replace
2	[BUG]  [BUGGY]  tokens.remove( "-- "  +  currentOption.getName());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  tokens.remove( "-- "  +  currentOption.getName());  [BUGGY]      tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	tokens.remove( "-- "  +  currentOption.getName());	  tokens.remove(   "--   "    +    value);    	non-compiled	[CE]  	15	None	replace
3	[BUG]  [BUGGY]  tokens.add( "-- "  +  currentOption.getName(),  value,  stopAtNonOption);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  tokens.add( "-- "  +  currentOption.getName(),  value,  stopAtNonOption);  [BUGGY]      tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	tokens.add( "-- "  +  currentOption.getName(),  value,  stopAtNonOption);	  tokens.add(   "--   "    +    currentOption.getName(),    value);    	non-compiled	[CE]  	10	None	replace
4	[BUG]  [BUGGY]  tokens.add( "-- "  +  currentOption.getValue(),  value);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  tokens.add( "-- "  +  currentOption.getValue(),  value);  [BUGGY]      tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	tokens.add( "-- "  +  currentOption.getValue(),  value);	  tokens.add(   "--   "    +    currentOption.getName(),    value);    	non-compiled	[CE]  	10	None	replace
5	[BUG]  [BUGGY]  While(currentOption.hasArgs())  {  if(stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(value);  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  While(currentOption.hasArgs())  {  if(stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(value);  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	While(currentOption.hasArgs())  {  if(stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(value);  }	  While(currentOption.hasArg())    {    if(stopAtNonOption)    {    tokens.add(   "--   ");    tokens.add(value);    }    	non-compiled	[CE]  	29	None	replace
6	[BUG]  [BUGGY]  eatTheRest  =  stopAtNonOption  &&  currentOption.hasArg();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  eatTheRest  =  stopAtNonOption  &&  currentOption.hasArg();  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	eatTheRest  =  stopAtNonOption  &&  currentOption.hasArg();	  eatTheRest    =    stopAtNonOption    ||    currentOption.hasArg();    	non-compiled	[CE]  	38	None	replace
7	[BUG]  [BUGGY]  eatTheRest  =  stopAtNonOption  ||  currentOption.hasValue();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  eatTheRest  =  stopAtNonOption  ||  currentOption.hasValue();  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	eatTheRest  =  stopAtNonOption  ||  currentOption.hasValue();	  eatTheRest    =    stopAtNonOption    ||    currentOption.hasArg();    	non-compiled	[CE]  	38	None	replace
8	[BUG]  [BUGGY]  if(stopAtNonOption)  {  eatTheRest  =  true;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  if(stopAtNonOption)  {  eatTheRest  =  true;  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	if(stopAtNonOption)  {  eatTheRest  =  true;  }	  eatTheRest    =    true;    	non-compiled	[CE]  	36	None	replace
9	[BUG]  [BUGGY]  if(stopAtNonOption)  {  eatTheRest  =  true;  }  else  {  tokens.add( "-- ");  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  if(stopAtNonOption)  {  eatTheRest  =  true;  }  else  {  tokens.add( "-- ");  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	if(stopAtNonOption)  {  eatTheRest  =  true;  }  else  {  tokens.add( "-- ");  }	  eatTheRest    =    true;    	non-compiled	[CE]  	36	None	replace
10	[BUG]  [BUGGY]  if(stopAtNonOption)  {  eatTheRest  =  true;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  if(stopAtNonOption)  {  eatTheRest  =  true;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	if(stopAtNonOption)  {  eatTheRest  =  true;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  eatTheRest    =    true;    	non-compiled	[CE]  	36	None	replace
11	[BUG]  [BUGGY]  eatTheRest  =  currentOption.getArgumentCount();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  eatTheRest  =  currentOption.getArgumentCount();  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	eatTheRest  =  currentOption.getArgumentCount();	  eatTheRest    =    stopAtNonOption.getArgumentCount();    	non-compiled	[CE]  	58	None	replace
12	[BUG]  [BUGGY]  if(stopAtNonOption.hasArg())  {  eatTheRest  =  stopAtNonOption.getArgumentCount();  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  if(stopAtNonOption.hasArg())  {  eatTheRest  =  stopAtNonOption.getArgumentCount();  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	if(stopAtNonOption.hasArg())  {  eatTheRest  =  stopAtNonOption.getArgumentCount();  }	  eatTheRest    =    stopAtNonOption.getArgumentCount();    	non-compiled	[CE]  	58	None	replace
13	[BUG]  [BUGGY]  if(stopAtNonOption.hasArgs())  {  eatTheRest  =  stopAtNonOption.getArgumentCount();  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  if(stopAtNonOption.hasArgs())  {  eatTheRest  =  stopAtNonOption.getArgumentCount();  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	if(stopAtNonOption.hasArgs())  {  eatTheRest  =  stopAtNonOption.getArgumentCount();  }	  eatTheRest    =    stopAtNonOption.getArgumentCount();    	non-compiled	[CE]  	58	None	replace
14	[BUG]  [BUGGY]  if(currentOption.hasArgs())  {  eatTheRest  =  stopAtNonOption.getArgumentCount();  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  if(currentOption.hasArgs())  {  eatTheRest  =  stopAtNonOption.getArgumentCount();  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	if(currentOption.hasArgs())  {  eatTheRest  =  stopAtNonOption.getArgumentCount();  }	  eatTheRest    =    stopAtNonOption.getArgumentCount();    	non-compiled	[CE]  	58	None	replace
15	[BUG]  [BUGGY]  tokens.add( "-- "  +  currentOption.getKey(),  stopAtNonOption);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  tokens.add( "-- "  +  currentOption.getKey(),  stopAtNonOption);  [BUGGY]      tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	tokens.add( "-- "  +  currentOption.getKey(),  stopAtNonOption);	  tokens.add(   "--   "    +    currentOption.getName(),    stopAtNonOption);    	non-compiled	[CE]  	51	None	replace
16	[BUG]  [BUGGY]  tokens.add( "-- "  +  currentOption.getValue(),  stopAtNonOption);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  tokens.add( "-- "  +  currentOption.getValue(),  stopAtNonOption);  [BUGGY]      tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	tokens.add( "-- "  +  currentOption.getValue(),  stopAtNonOption);	  tokens.add(   "--   "    +    currentOption.getName(),    stopAtNonOption);    	non-compiled	[CE]  	51	None	replace
17	[BUG]  [BUGGY]  tokens.add( ":-- ",  currentOption);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  tokens.add( ":-- ",  currentOption);  [BUGGY]      tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	tokens.add( ":-- ",  currentOption);	  tokens.add(   ":--   ");    	non-compiled	[CE]  	7	None	replace
18	[BUG]  [BUGGY]  while(!stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(value);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  while(!stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(value);  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	while(!stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(value);	  if(eatTheRest)    {    tokens.add(   "--   ");    tokens.add(value);    }    	non-compiled	[CE]  	52	None	replace
19	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add( "-- ");  currentOption  =  options;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  if(stopAtNonOption)  {  tokens.add( "-- ");  currentOption  =  options;  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	if(stopAtNonOption)  {  tokens.add( "-- ");  currentOption  =  options;  }	  tokens.add(   "--   ");    currentOption    =    options;    	non-compiled	[CE]  	13	None	replace
20	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add( "-- ");  currentOption  =  options;  }  else  {  stopAtNonOption  =  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  if(stopAtNonOption)  {  tokens.add( "-- ");  currentOption  =  options;  }  else  {  stopAtNonOption  =  false;  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	if(stopAtNonOption)  {  tokens.add( "-- ");  currentOption  =  options;  }  else  {  stopAtNonOption  =  false;  }	  tokens.add(   "--   ");    currentOption    =    options;    	non-compiled	[CE]  	13	None	replace
21	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption( "eatTheRest ");  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption( "eatTheRest ");  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	if(stopAtNonOption)  {  Option  currentOption  =  options.getOption( "eatTheRest ");  }	  Option    currentOption    =    options.getOption(   "eatTheRest   ");    	non-compiled	[CE]  	54	None	replace
22	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption( "eatTheRest ");  }  else  {  tokens.add( "-- ");  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption( "eatTheRest ");  }  else  {  tokens.add( "-- ");  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	if(stopAtNonOption)  {  Option  currentOption  =  options.getOption( "eatTheRest ");  }  else  {  tokens.add( "-- ");  }	  Option    currentOption    =    options.getOption(   "eatTheRest   ");    	non-compiled	[CE]  	54	None	replace
23	[BUG]  [BUGGY]  tokens.add( "-- ");  if(!stopAtNonOption)  {  stopAtNonOption  =  false;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  tokens.add( "-- ");  if(!stopAtNonOption)  {  stopAtNonOption  =  false;  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	tokens.add( "-- ");  if(!stopAtNonOption)  {  stopAtNonOption  =  false;  }	  tokens.add(   "--   ");    if(eatTheRest)    {    stopAtNonOption    =    false;    }    	non-compiled	[CE]  	70	None	replace
24	[BUG]  [BUGGY]  tokens.add( "-- ");  if(stopAtNonOption)  {  stopAtNonOption  =  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  tokens.add( "-- ");  if(stopAtNonOption)  {  stopAtNonOption  =  false;  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	tokens.add( "-- ");  if(stopAtNonOption)  {  stopAtNonOption  =  false;  }	  tokens.add(   "--   ");    if(eatTheRest)    {    stopAtNonOption    =    false;    }    	non-compiled	[CE]  	70	None	replace
25	[BUG]  [BUGGY]  tokens.add( "-- ");  if(currentOption.hasArgs())  {  stopAtNonOption  =  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  tokens.add( "-- ");  if(currentOption.hasArgs())  {  stopAtNonOption  =  false;  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	tokens.add( "-- ");  if(currentOption.hasArgs())  {  stopAtNonOption  =  false;  }	  tokens.add(   "--   ");    if(eatTheRest)    {    stopAtNonOption    =    false;    }    	non-compiled	[CE]  	70	None	replace
26	[BUG]  [BUGGY]  eatTheRest  =  currentOption.getValue();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  eatTheRest  =  currentOption.getValue();  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	eatTheRest  =  currentOption.getValue();	  eatTheRest    =    stopAtNonOption.getValue();    	non-compiled	[CE]  	26	None	replace
27	[BUG]  [BUGGY]  if(stopAtNonOption.hasArg())  {  eatTheRest  =  stopAtNonOption.getValue();  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  if(stopAtNonOption.hasArg())  {  eatTheRest  =  stopAtNonOption.getValue();  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	if(stopAtNonOption.hasArg())  {  eatTheRest  =  stopAtNonOption.getValue();  }	  eatTheRest    =    stopAtNonOption.getValue();    	non-compiled	[CE]  	26	None	replace
28	[BUG]  [BUGGY]  if(currentOption.hasArg())  {  eatTheRest  =  stopAtNonOption.getValue();  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  if(currentOption.hasArg())  {  eatTheRest  =  stopAtNonOption.getValue();  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	if(currentOption.hasArg())  {  eatTheRest  =  stopAtNonOption.getValue();  }	  eatTheRest    =    stopAtNonOption.getValue();    	non-compiled	[CE]  	26	None	replace
29	[BUG]  [BUGGY]  if(stopAtNonOption.hasArg())  {  eatTheRest  =  stopAtNonOption.getValue();  }  else  {  tokens.add( "-- ");  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  if(stopAtNonOption.hasArg())  {  eatTheRest  =  stopAtNonOption.getValue();  }  else  {  tokens.add( "-- ");  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	if(stopAtNonOption.hasArg())  {  eatTheRest  =  stopAtNonOption.getValue();  }  else  {  tokens.add( "-- ");  }	  eatTheRest    =    stopAtNonOption.getValue();    	non-compiled	[CE]  	26	None	replace
30	[BUG]  [BUGGY]  eatTheRest  =  currentOption.stopAtNonOption();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  eatTheRest  =  currentOption.stopAtNonOption();  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	eatTheRest  =  currentOption.stopAtNonOption();	  eatTheRest    =    currentOption.hasArgs();    	non-compiled	[CE]  	42	None	replace
31	[BUG]  [BUGGY]  if(currentOption.hasArgs())  {  eatTheRest  =  currentOption.hasArgs();  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  if(currentOption.hasArgs())  {  eatTheRest  =  currentOption.hasArgs();  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	if(currentOption.hasArgs())  {  eatTheRest  =  currentOption.hasArgs();  }	  eatTheRest    =    currentOption.hasArgs();    	non-compiled	[CE]  	42	None	replace
32	[BUG]  [BUGGY]  eatTheRest  =  stopAtNonOption.hasArgs();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  eatTheRest  =  stopAtNonOption.hasArgs();  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	eatTheRest  =  stopAtNonOption.hasArgs();	  eatTheRest    =    currentOption.hasArgs();    	non-compiled	[CE]  	42	None	replace
33	[BUG]  [BUGGY]  if(currentOption.hasArgs())  {  eatTheRest  =  currentOption.hasArgs();  }  else  {  tokens.add( "-- ");  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  if(currentOption.hasArgs())  {  eatTheRest  =  currentOption.hasArgs();  }  else  {  tokens.add( "-- ");  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	if(currentOption.hasArgs())  {  eatTheRest  =  currentOption.hasArgs();  }  else  {  tokens.add( "-- ");  }	  eatTheRest    =    currentOption.hasArgs();    	non-compiled	[CE]  	42	None	replace
34	[BUG]  [BUGGY]  While(currentOption.hasArgs())  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  stopAtNonOption  =  null;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  While(currentOption.hasArgs())  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  stopAtNonOption  =  null;  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	While(currentOption.hasArgs())  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  stopAtNonOption  =  null;  }	  While(currentOption.hasArg())    {    if(stopAtNonOption)    {    tokens.add(   "--   ");    tokens.add(value);    }    else    {    stopAtNonOption    =    null;    }    	non-compiled	[CE]  	27	None	replace
35	[BUG]  [BUGGY]  while(currentOption.hasMoreArgs())  {  if(stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(value);  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  while(currentOption.hasMoreArgs())  {  if(stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(value);  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	while(currentOption.hasMoreArgs())  {  if(stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(value);  }	  while(currentOption.hasArg())    {    if(stopAtNonOption)    {    tokens.add(   "--   ");    tokens.add(value);    }    	non-compiled	[CE]  	3	None	replace
36	[BUG]  [BUGGY]  if(stopAtNonOption.hasArg())  {  eatTheRest  =  stopAtNonOption.stopAtNonOption();  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  if(stopAtNonOption.hasArg())  {  eatTheRest  =  stopAtNonOption.stopAtNonOption();  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	if(stopAtNonOption.hasArg())  {  eatTheRest  =  stopAtNonOption.stopAtNonOption();  }	  eatTheRest    =    stopAtNonOption.stopAtNonOption();    	non-compiled	[CE]  	25	None	replace
37	[BUG]  [BUGGY]  if(currentOption.hasArg())  {  eatTheRest  =  stopAtNonOption.stopAtNonOption();  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  if(currentOption.hasArg())  {  eatTheRest  =  stopAtNonOption.stopAtNonOption();  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	if(currentOption.hasArg())  {  eatTheRest  =  stopAtNonOption.stopAtNonOption();  }	  eatTheRest    =    stopAtNonOption.stopAtNonOption();    	non-compiled	[CE]  	25	None	replace
38	[BUG]  [BUGGY]  if(stopAtNonOption.hasArg())  {  eatTheRest  =  stopAtNonOption.stopAtNonOption();  }  else  {  tokens.add( "-- ");  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  if(stopAtNonOption.hasArg())  {  eatTheRest  =  stopAtNonOption.stopAtNonOption();  }  else  {  tokens.add( "-- ");  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	if(stopAtNonOption.hasArg())  {  eatTheRest  =  stopAtNonOption.stopAtNonOption();  }  else  {  tokens.add( "-- ");  }	  eatTheRest    =    stopAtNonOption.stopAtNonOption();    	non-compiled	[CE]  	25	None	replace
39	[BUG]  [BUGGY]  parent!=  null  &&  currentOption.hasParent();  tokens.add( "-- ");  tokens.add(value);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  parent!=  null  &&  currentOption.hasParent();  tokens.add( "-- ");  tokens.add(value);  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	parent!=  null  &&  currentOption.hasParent();  tokens.add( "-- ");  tokens.add(value);	  parent!=    null    &&    currentOption.hasArg();    tokens.add(   "--   ");    tokens.add(value);    	non-compiled	[CE]  	65	None	replace
40	[BUG]  [BUGGY]  tokens.add( "-- "  +  value,  currentOption.getValue());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  tokens.add( "-- "  +  value,  currentOption.getValue());  [BUGGY]      tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	tokens.add( "-- "  +  value,  currentOption.getValue());	  tokens.add(   "--   ",    currentOption.getValue());    	non-compiled	[CE]  	33	None	replace
41	[BUG]  [BUGGY]  tokens.add( "-- ", "currentOption.getValue());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  tokens.add( "-- ", "currentOption.getValue());  [BUGGY]      tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	tokens.add( "-- ", "currentOption.getValue());	  tokens.add(   "--   ",    currentOption.getValue());    	non-compiled	[CE]  	33	None	replace
42	[BUG]  [BUGGY]  tokens.add( "...-- "  +  value);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  tokens.add( "...-- "  +  value);  [BUGGY]      tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	tokens.add( "...-- "  +  value);	  tokens.add(   "...--   ");    	non-compiled	[CE]  	62	None	replace
43	[BUG]  [BUGGY]  tokens.add(value);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  tokens.add(value);  [BUGGY]      tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	tokens.add(value);	  if(stopAtNonOption)    {    tokens.add(value);    }    else    {    stopAtNonOption    =    true;    }    	non-compiled	[CE]  	19	None	replace
44	[BUG]  [BUGGY]  options.add(currentOption);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  options.add(currentOption);  [BUGGY]      tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	options.add(currentOption);	  if(stopAtNonOption)    {    tokens.add(value);    }    else    {    stopAtNonOption    =    true;    }    	non-compiled	[CE]  	19	None	replace
45	[BUG]  [BUGGY]  options.addValue(value);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  options.addValue(value);  [BUGGY]      tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	options.addValue(value);	  if(stopAtNonOption)    {    tokens.add(value);    }    else    {    stopAtNonOption    =    true;    }    	non-compiled	[CE]  	19	None	replace
46	[BUG]  [BUGGY]  parent.addValue(value);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  parent.addValue(value);  [BUGGY]      tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	parent.addValue(value);	  if(stopAtNonOption)    {    tokens.add(value);    }    else    {    stopAtNonOption    =    true;    }    	non-compiled	[CE]  	19	None	replace
47	[BUG]  [BUGGY]  else  if(stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(value);  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  else  if(stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(value);  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	else  if(stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(value);  }	  else    if(eatTheRest)    {    tokens.add(   "--   ");    tokens.add(value);    }    	non-compiled	[CE]  	72	None	replace
48	[BUG]  [BUGGY]  tokens.add( ";--n ");  [CE]  [FE]            AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  tokens.add( ";--n ");  [BUGGY]      tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	tokens.add( ";--n ");	  tokens.add(   ";--   ");    	non-compiled	[CE]  	5	None	replace
49	[BUG]  [BUGGY]  tokens.add( ";-- ",  currentOption);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  tokens.add( ";-- ",  currentOption);  [BUGGY]      tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	tokens.add( ";-- ",  currentOption);	  tokens.add(   ";--   ");    	non-compiled	[CE]  	5	None	replace
50	[BUG]  [BUGGY]  tokens.add( ";-- "  +  value);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  tokens.add( ";-- "  +  value);  [BUGGY]      tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	tokens.add( ";-- "  +  value);	  tokens.add(   ";--   ");    	non-compiled	[CE]  	5	None	replace
51	[BUG]  [BUGGY]  tokens.put( "-- ",  null);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  tokens.put( "-- ",  null);  [BUGGY]      tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	tokens.put( "-- ",  null);	  tokens.put(   "--   ",   "--   ");    	non-compiled	[CE]  	45	None	replace
52	[BUG]  [BUGGY]  if(currentOption.hasArg())  {  eatTheRest  =  currentOption.hasArg();  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  if(currentOption.hasArg())  {  eatTheRest  =  currentOption.hasArg();  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	if(currentOption.hasArg())  {  eatTheRest  =  currentOption.hasArg();  }	  eatTheRest    =    currentOption.hasArg();    	non-compiled	[CE]  	16	None	replace
53	[BUG]  [BUGGY]  if(currentOption.hasArg())  {  eatTheRest  =  currentOption.hasArg();  }  else  {  tokens.add( "-- ");  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  if(currentOption.hasArg())  {  eatTheRest  =  currentOption.hasArg();  }  else  {  tokens.add( "-- ");  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	if(currentOption.hasArg())  {  eatTheRest  =  currentOption.hasArg();  }  else  {  tokens.add( "-- ");  }	  eatTheRest    =    currentOption.hasArg();    	non-compiled	[CE]  	16	None	replace
54	[BUG]  [BUGGY]  eatTheRest  =  currentOption.hasErrors();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  eatTheRest  =  currentOption.hasErrors();  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	eatTheRest  =  currentOption.hasErrors();	  eatTheRest    =    currentOption.hasArg();    	non-compiled	[CE]  	16	None	replace
55	[BUG]  [BUGGY]  if(stopAtNonOption)  {  eatTheRest  =  false;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  if(stopAtNonOption)  {  eatTheRest  =  false;  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	if(stopAtNonOption)  {  eatTheRest  =  false;  }	  eatTheRest    =    false;    	non-compiled	[CE]  	37	None	replace
56	[BUG]  [BUGGY]  if(stopAtNonOption)  {  eatTheRest  =  false;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  if(stopAtNonOption)  {  eatTheRest  =  false;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	if(stopAtNonOption)  {  eatTheRest  =  false;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  eatTheRest    =    false;    	non-compiled	[CE]  	37	None	replace
57	[BUG]  [BUGGY]  if(stopAtNonOption)  {  eatTheRest  =  false;  }  else  {  stopAtNonOption  =  true;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  if(stopAtNonOption)  {  eatTheRest  =  false;  }  else  {  stopAtNonOption  =  true;  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	if(stopAtNonOption)  {  eatTheRest  =  false;  }  else  {  stopAtNonOption  =  true;  }	  eatTheRest    =    false;    	non-compiled	[CE]  	37	None	replace
58	[BUG]  [BUGGY]  tokens.add( "-- "  +  value,   "currentOption.hasArg());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  tokens.add( "-- "  +  value,   "currentOption.hasArg());  [BUGGY]      tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	tokens.add( "-- "  +  value,   "currentOption.hasArg());	  tokens.add(   "--   ",   "currentOption.hasArg());    	non-compiled	[CE]  	49	None	replace
59	[BUG]  [BUGGY]  tokens.add( "-- ", "currentOption.hasArg()  &&  currentOption.hasArg());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  tokens.add( "-- ", "currentOption.hasArg()  &&  currentOption.hasArg());  [BUGGY]      tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	tokens.add( "-- ", "currentOption.hasArg()  &&  currentOption.hasArg());	  tokens.add(   "--   ",   "currentOption.hasArg());    	non-compiled	[CE]  	49	None	replace
60	[BUG]  [BUGGY]  while(currentOption.hasErrors())  {  if(stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  stopAtNonOption  =  false;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  while(currentOption.hasErrors())  {  if(stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  stopAtNonOption  =  false;  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	while(currentOption.hasErrors())  {  if(stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  stopAtNonOption  =  false;  }	  while(currentOption.hasArg())    {    if(stopAtNonOption)    {    tokens.add(   "--   ");    tokens.add(value);    }    else    {    stopAtNonOption    =    false;    }    	non-compiled	[CE]  	30	None	replace
61	[BUG]  [BUGGY]  while(currentOption.hasMoreArgs())  {  if(stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  stopAtNonOption  =  false;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  while(currentOption.hasMoreArgs())  {  if(stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  stopAtNonOption  =  false;  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	while(currentOption.hasMoreArgs())  {  if(stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  stopAtNonOption  =  false;  }	  while(currentOption.hasArg())    {    if(stopAtNonOption)    {    tokens.add(   "--   ");    tokens.add(value);    }    else    {    stopAtNonOption    =    false;    }    	non-compiled	[CE]  	30	None	replace
62	[BUG]  [BUGGY]  while(currentOption.hasErrors())  {  tokens.add( "-- ");  tokens.add(value);  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  while(currentOption.hasErrors())  {  tokens.add( "-- ");  tokens.add(value);  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	while(currentOption.hasErrors())  {  tokens.add( "-- ");  tokens.add(value);  }	  while(currentOption.hasArg())    {    tokens.add(   "--   ");    tokens.add(value);    }    	non-compiled	[CE]  	59	None	replace
63	[BUG]  [BUGGY]  while(currentOption.hasMoreArgs())  {  tokens.add( "-- ");  tokens.add(value);  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  while(currentOption.hasMoreArgs())  {  tokens.add( "-- ");  tokens.add(value);  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	while(currentOption.hasMoreArgs())  {  tokens.add( "-- ");  tokens.add(value);  }	  while(currentOption.hasArg())    {    tokens.add(   "--   ");    tokens.add(value);    }    	non-compiled	[CE]  	59	None	replace
64	[BUG]  [BUGGY]  tokens.add(currentOption.hasArg());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  tokens.add(currentOption.hasArg());  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	tokens.add(currentOption.hasArg());	  if(stopAtNonOption.hasArg())    {    eatTheRest    =    stopAtNonOption.hasArg();    }    else    {    tokens.add(   "--   ");    }    	non-compiled	[CE]  	18	None	replace
65	[BUG]  [BUGGY]  tokens.add(stopAtNonOption.hasArg());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  tokens.add(stopAtNonOption.hasArg());  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	tokens.add(stopAtNonOption.hasArg());	  if(stopAtNonOption.hasArg())    {    eatTheRest    =    stopAtNonOption.hasArg();    }    else    {    tokens.add(   "--   ");    }    	non-compiled	[CE]  	18	None	replace
66	[BUG]  [BUGGY]  tokens.add( "-- "  +  value,  currentOption);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  tokens.add( "-- "  +  value,  currentOption);  [BUGGY]      tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	tokens.add( "-- "  +  value,  currentOption);	  tokens.add(   "--   "    +    value,    stopAtNonOption);    	non-compiled	[CE]  	43	None	replace
67	[BUG]  [BUGGY]  tokens.add( "-- "  +  value,  eatTheRest);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  tokens.add( "-- "  +  value,  eatTheRest);  [BUGGY]      tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	tokens.add( "-- "  +  value,  eatTheRest);	  tokens.add(   "--   "    +    value,    stopAtNonOption);    	non-compiled	[CE]  	43	None	replace
68	[BUG]  [BUGGY]  parent!=  null  &&  currentOption.hasParent();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  parent!=  null  &&  currentOption.hasParent();  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	parent!=  null  &&  currentOption.hasParent();	  parent!=    null    &&    currentOption.hasArg();    	non-compiled	[CE]  	47	None	replace
69	[BUG]  [BUGGY]  if(currentOption.hasArgs())  {  eatTheRest  =  currentOption.stopAtNonOption;  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  if(currentOption.hasArgs())  {  eatTheRest  =  currentOption.stopAtNonOption;  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	if(currentOption.hasArgs())  {  eatTheRest  =  currentOption.stopAtNonOption;  }	  eatTheRest    =    currentOption.stopAtNonOption;    	non-compiled	[CE]  	24	None	replace
70	[BUG]  [BUGGY]  eatTheRest  =  stopAtNonOption.stopAtNonOption  =  false;  [CE]  [FE]            AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  eatTheRest  =  stopAtNonOption.stopAtNonOption  =  false;  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	eatTheRest  =  stopAtNonOption.stopAtNonOption  =  false;	  eatTheRest    =    stopAtNonOption.stopAtNonOption    =    true;    	non-compiled	[CE]  	55	None	replace
71	[BUG]  [BUGGY]  eatTheRest  =  stopAtNonOption.stopAtNonOption  ||  stopAtNonOption.stopAtNonOption  =  true;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  eatTheRest  =  stopAtNonOption.stopAtNonOption  ||  stopAtNonOption.stopAtNonOption  =  true;  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	eatTheRest  =  stopAtNonOption.stopAtNonOption  ||  stopAtNonOption.stopAtNonOption  =  true;	  eatTheRest    =    stopAtNonOption.stopAtNonOption    =    true;    	non-compiled	[CE]  	55	None	replace
72	[BUG]  [BUGGY]  eatTheRest  =  stopAtNonOption.stopAtNonOption  ||  stopAtNonOption.stopAtNonOption  =  false;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  eatTheRest  =  stopAtNonOption.stopAtNonOption  ||  stopAtNonOption.stopAtNonOption  =  false;  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	eatTheRest  =  stopAtNonOption.stopAtNonOption  ||  stopAtNonOption.stopAtNonOption  =  false;	  eatTheRest    =    stopAtNonOption.stopAtNonOption    =    true;    	non-compiled	[CE]  	55	None	replace
73	[BUG]  [BUGGY]  eatTheRest  =  stopAtNonOption.stopAtNonOption  ||  currentOption.hasArg();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  eatTheRest  =  stopAtNonOption.stopAtNonOption  ||  currentOption.hasArg();  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	eatTheRest  =  stopAtNonOption.stopAtNonOption  ||  currentOption.hasArg();	  eatTheRest    =    stopAtNonOption.stopAtNonOption    =    true;    	non-compiled	[CE]  	55	None	replace
74	[BUG]  [BUGGY]  While(currentOption.hasArgs())  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  While(currentOption.hasArgs())  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	While(currentOption.hasArgs())  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(eatTheRest)    {    tokens.add(   "--   ");    tokens.add(value);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	71	None	replace
75	[BUG]  [BUGGY]  While(currentOption.hasArg())  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  While(currentOption.hasArg())  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	While(currentOption.hasArg())  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(eatTheRest)    {    tokens.add(   "--   ");    tokens.add(value);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	71	None	replace
76	[BUG]  [BUGGY]  While(currentOption.hasArg())  {  if(stopAtNonOption)  {  tokens.add(value);  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  While(currentOption.hasArg())  {  if(stopAtNonOption)  {  tokens.add(value);  }  [BUGGY]      tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	While(currentOption.hasArg())  {  if(stopAtNonOption)  {  tokens.add(value);  }	  if(stopAtNonOption)    {    tokens.add(value);    }    else    {    stopAtNonOption    =    false;    }    	non-compiled	[CE]  	20	None	replace
77	[BUG]  [BUGGY]  While(currentOption.hasArg()  &&  stopAtNonOption!=  false)  {  tokens.add(value);  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  While(currentOption.hasArg()  &&  stopAtNonOption!=  false)  {  tokens.add(value);  }  [BUGGY]      tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	While(currentOption.hasArg()  &&  stopAtNonOption!=  false)  {  tokens.add(value);  }	  if(stopAtNonOption)    {    tokens.add(value);    }    else    {    stopAtNonOption    =    false;    }    	non-compiled	[CE]  	20	None	replace
78	[BUG]  [BUGGY]  While(currentOption.hasArg()  &&  stopAtNonOption  ==  false)  {  tokens.add(value);  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  While(currentOption.hasArg()  &&  stopAtNonOption  ==  false)  {  tokens.add(value);  }  [BUGGY]      tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	While(currentOption.hasArg()  &&  stopAtNonOption  ==  false)  {  tokens.add(value);  }	  if(stopAtNonOption)    {    tokens.add(value);    }    else    {    stopAtNonOption    =    false;    }    	non-compiled	[CE]  	20	None	replace
79	[BUG]  [BUGGY]  tokens.add( "-- "  +  value,  currentOption.getArg());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  tokens.add( "-- "  +  value,  currentOption.getArg());  [BUGGY]      tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	tokens.add( "-- "  +  value,  currentOption.getArg());	  tokens.add(   "--   ",    currentOption.getArg());    	non-compiled	[CE]  	34	None	replace
80	[BUG]  [BUGGY]  tokens.add( "-- ", "currentOption.getArg());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  tokens.add( "-- ", "currentOption.getArg());  [BUGGY]      tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	tokens.add( "-- ", "currentOption.getArg());	  tokens.add(   "--   ",    currentOption.getArg());    	non-compiled	[CE]  	34	None	replace
81	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add( "-- ");  currentOption  =  new  Option();  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  if(stopAtNonOption)  {  tokens.add( "-- ");  currentOption  =  new  Option();  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	if(stopAtNonOption)  {  tokens.add( "-- ");  currentOption  =  new  Option();  }	  tokens.add(   "--   ");    currentOption    =    new    Option();    	non-compiled	[CE]  	11	None	replace
82	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add( "-- ");  currentOption  =  new  Option();  }  else  {  stopAtNonOption  =  null;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  if(stopAtNonOption)  {  tokens.add( "-- ");  currentOption  =  new  Option();  }  else  {  stopAtNonOption  =  null;  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	if(stopAtNonOption)  {  tokens.add( "-- ");  currentOption  =  new  Option();  }  else  {  stopAtNonOption  =  null;  }	  tokens.add(   "--   ");    currentOption    =    new    Option();    	non-compiled	[CE]  	11	None	replace
83	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add( "-- ");  currentOption  =  new  Option();  }  else  {  stopAtNonOption  =  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  if(stopAtNonOption)  {  tokens.add( "-- ");  currentOption  =  new  Option();  }  else  {  stopAtNonOption  =  false;  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	if(stopAtNonOption)  {  tokens.add( "-- ");  currentOption  =  new  Option();  }  else  {  stopAtNonOption  =  false;  }	  tokens.add(   "--   ");    currentOption    =    new    Option();    	non-compiled	[CE]  	11	None	replace
84	[BUG]  [BUGGY]  tokens.add( "-- "  +  value,  currentOption.getKey());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  tokens.add( "-- "  +  value,  currentOption.getKey());  [BUGGY]      tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	tokens.add( "-- "  +  value,  currentOption.getKey());	  tokens.add(   "--   ",    currentOption.getKey());    	non-compiled	[CE]  	66	None	replace
85	[BUG]  [BUGGY]  tokens.add( "-- "  +  value.toString());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  tokens.add( "-- "  +  value.toString());  [BUGGY]      tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	tokens.add( "-- "  +  value.toString());	  tokens.add(   "--   "    +    currentOption.toString());    	non-compiled	[CE]  	9	None	replace
86	[BUG]  [BUGGY]  tokens.add(currentOption);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  tokens.add(currentOption);  [BUGGY]      tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	tokens.add(currentOption);	  if(stopAtNonOption)    {    tokens.add(currentOption);    }    else    {    stopAtNonOption    =    true;    }    	non-compiled	[CE]  	21	None	replace
87	[BUG]  [BUGGY]  Option  currentOption  =  options.get(currentOption);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  Option  currentOption  =  options.get(currentOption);  [BUGGY]      tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	Option  currentOption  =  options.get(currentOption);	  if(stopAtNonOption)    {    tokens.add(currentOption);    }    else    {    stopAtNonOption    =    true;    }    	non-compiled	[CE]  	21	None	replace
88	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(value);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  Option  currentOption  =  options.getOption(value);  [BUGGY]      tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	Option  currentOption  =  options.getOption(value);	  if(stopAtNonOption)    {    tokens.add(currentOption);    }    else    {    stopAtNonOption    =    true;    }    	non-compiled	[CE]  	21	None	replace
89	[BUG]  [BUGGY]  While(currentOption.hasArgs())  {  eatTheRest  =  stopAtNonOption.hasArg();  }  else  {  tokens.add( "-- ");  tokens.add(value);  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  While(currentOption.hasArgs())  {  eatTheRest  =  stopAtNonOption.hasArg();  }  else  {  tokens.add( "-- ");  tokens.add(value);  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	While(currentOption.hasArgs())  {  eatTheRest  =  stopAtNonOption.hasArg();  }  else  {  tokens.add( "-- ");  tokens.add(value);  }	  if(stopAtNonOption.hasArg())    {    eatTheRest    =    stopAtNonOption.hasArg();    }    else    {    tokens.add(   "--   ");    tokens.add(value);    }    	non-compiled	[CE]  	41	None	replace
90	[BUG]  [BUGGY]  While(currentOption.hasArgs())  {  eatTheRest  =  stopAtNonOption.hasArg();  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  While(currentOption.hasArgs())  {  eatTheRest  =  stopAtNonOption.hasArg();  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	While(currentOption.hasArgs())  {  eatTheRest  =  stopAtNonOption.hasArg();  }	  if(stopAtNonOption.hasArg())    {    eatTheRest    =    stopAtNonOption.hasArg();    }    else    {    tokens.add(   "--   ");    tokens.add(value);    }    	non-compiled	[CE]  	41	None	replace
91	[BUG]  [BUGGY]  if(stopAtNonOption)  {  options.add( "-- ");  tokens.add(value);  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  if(stopAtNonOption)  {  options.add( "-- ");  tokens.add(value);  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	if(stopAtNonOption)  {  options.add( "-- ");  tokens.add(value);  }	  options.add(   "--   ");    tokens.add(value);    	non-compiled	[CE]  	23	None	replace
92	[BUG]  [BUGGY]  if(stopAtNonOption)  {  options.add( "-- ");  tokens.add(value);  }  else  {  stopAtNonOption  =  false;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  if(stopAtNonOption)  {  options.add( "-- ");  tokens.add(value);  }  else  {  stopAtNonOption  =  false;  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	if(stopAtNonOption)  {  options.add( "-- ");  tokens.add(value);  }  else  {  stopAtNonOption  =  false;  }	  options.add(   "--   ");    tokens.add(value);    	non-compiled	[CE]  	23	None	replace
93	[BUG]  [BUGGY]  if(stopAtNonOption)  {  options.add( "-- ");  tokens.add(value);  }  else  {  stopAtNonOption  =  true;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  if(stopAtNonOption)  {  options.add( "-- ");  tokens.add(value);  }  else  {  stopAtNonOption  =  true;  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	if(stopAtNonOption)  {  options.add( "-- ");  tokens.add(value);  }  else  {  stopAtNonOption  =  true;  }	  options.add(   "--   ");    tokens.add(value);    	non-compiled	[CE]  	23	None	replace
94	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption( "stopAtNonOption ",  value);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  Option  currentOption  =  options.getOption( "stopAtNonOption ",  value);  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	Option  currentOption  =  options.getOption( "stopAtNonOption ",  value);	  Option    currentOption    =    options.getOption(   "stopAtNonOption   ");    	non-compiled	[CE]  	53	None	replace
95	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption( "stopAtNonOption. ");  [CE]  [FE]              AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  Option  currentOption  =  options.getOption( "stopAtNonOption. ");  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	Option  currentOption  =  options.getOption( "stopAtNonOption. ");	  Option    currentOption    =    options.getOption(   "stopAtNonOption   ");    	non-compiled	[CE]  	53	None	replace
96	[BUG]  [BUGGY]  else  if(currentOption.hasArgs())  {  tokens.add( "-- ");  tokens.add(value);  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  else  if(currentOption.hasArgs())  {  tokens.add( "-- ");  tokens.add(value);  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	else  if(currentOption.hasArgs())  {  tokens.add( "-- ");  tokens.add(value);  }	  tokens.add(   "--   ");    tokens.add(value);    }    else    {    stopAtNonOption    =    null;    }    	non-compiled	[CE]  	67	None	replace
97	[BUG]  [BUGGY]  while(currentOption.hasArgs())  {  tokens.add( "-- ");  tokens.add(value);  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  while(currentOption.hasArgs())  {  tokens.add( "-- ");  tokens.add(value);  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	while(currentOption.hasArgs())  {  tokens.add( "-- ");  tokens.add(value);  }	  tokens.add(   "--   ");    tokens.add(value);    }    else    {    stopAtNonOption    =    null;    }    	non-compiled	[CE]  	67	None	replace
98	[BUG]  [BUGGY]  while(currentOption.hasArg())  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  stopAtNonOption  =  false;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  while(currentOption.hasArg())  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  stopAtNonOption  =  false;  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	while(currentOption.hasArg())  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  stopAtNonOption  =  false;  }	  tokens.add(   "--   ");    tokens.add(value);    }    else    {    stopAtNonOption    =    false;    }    	non-compiled	[CE]  	69	None	replace
99	[BUG]  [BUGGY]  while(currentOption.hasArgs())  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  stopAtNonOption  =  false;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  while(currentOption.hasArgs())  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  stopAtNonOption  =  false;  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	while(currentOption.hasArgs())  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  stopAtNonOption  =  false;  }	  tokens.add(   "--   ");    tokens.add(value);    }    else    {    stopAtNonOption    =    false;    }    	non-compiled	[CE]  	69	None	replace
100	[BUG]  [BUGGY]  tokens.add( "-- "  +  value,  currentOption.hasAtNonOption());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  tokens.add( "-- "  +  value,  currentOption.hasAtNonOption());  [BUGGY]      tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	tokens.add( "-- "  +  value,  currentOption.hasAtNonOption());	  tokens.add(   "--   "    +    value,    currentOption.hasArg());    	non-compiled	[CE]  	32	None	replace
101	[BUG]  [BUGGY]  tokens.add(currentOption.getValue(),  value);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  tokens.add(currentOption.getValue(),  value);  [BUGGY]      tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	tokens.add(currentOption.getValue(),  value);	  tokens.add(currentOption.getValue());    	non-compiled	[CE]  	63	None	replace
102	[BUG]  [BUGGY]  tokens.add(currentOption.getValue()  +  1);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  tokens.add(currentOption.getValue()  +  1);  [BUGGY]      tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	tokens.add(currentOption.getValue()  +  1);	  tokens.add(currentOption.getValue());    	non-compiled	[CE]  	63	None	replace
103	[BUG]  [BUGGY]  tokens.add(currentOption.toString());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  tokens.add(currentOption.toString());  [BUGGY]      tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	tokens.add(currentOption.toString());	  tokens.add(currentOption.getValue());    	non-compiled	[CE]  	63	None	replace
104	[BUG]  [BUGGY]  while(currentOption.hasErrors())  {  tokens.add( "-- ");  tokens.add(value);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  while(currentOption.hasErrors())  {  tokens.add( "-- ");  tokens.add(value);  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	while(currentOption.hasErrors())  {  tokens.add( "-- ");  tokens.add(value);	  while(currentOption.hasArg())    {    tokens.add(   "--   ");    tokens.add(value);    	non-compiled	[CE]  	60	None	replace
105	[BUG]  [BUGGY]  while(currentOption.hasMoreArgs())  {  tokens.add( "-- ");  tokens.add(value);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  while(currentOption.hasMoreArgs())  {  tokens.add( "-- ");  tokens.add(value);  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	while(currentOption.hasMoreArgs())  {  tokens.add( "-- ");  tokens.add(value);	  while(currentOption.hasArg())    {    tokens.add(   "--   ");    tokens.add(value);    	non-compiled	[CE]  	60	None	replace
106	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  stopAtNonOption  =  true;  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  if(!stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  stopAtNonOption  =  true;  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	if(!stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  stopAtNonOption  =  true;  }	  tokens.add(   "--   ");    tokens.add(value);    }    else    {    stopAtNonOption    =    true;    }    	non-compiled	[CE]  	64	None	replace
107	[BUG]  [BUGGY]  while(currentOption.hasArg())  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  stopAtNonOption  =  true;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  while(currentOption.hasArg())  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  stopAtNonOption  =  true;  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	while(currentOption.hasArg())  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  stopAtNonOption  =  true;  }	  tokens.add(   "--   ");    tokens.add(value);    }    else    {    stopAtNonOption    =    true;    }    	non-compiled	[CE]  	64	None	replace
108	[BUG]  [BUGGY]  else  if(currentOption.hasArgs())  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  stopAtNonOption  =  true;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  else  if(currentOption.hasArgs())  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  stopAtNonOption  =  true;  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	else  if(currentOption.hasArgs())  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  stopAtNonOption  =  true;  }	  tokens.add(   "--   ");    tokens.add(value);    }    else    {    stopAtNonOption    =    true;    }    	non-compiled	[CE]  	64	None	replace
109	[BUG]  [BUGGY]  tokens.add( "[--] ");  [CE]  [FE]              AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  tokens.add( "[--] ");  [BUGGY]      tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	tokens.add( "[--] ");	  tokens.add(   "[--   ");    	non-compiled	[CE]  	6	None	replace
110	[BUG]  [BUGGY]  tokens.add( "[-- "  +  value);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  tokens.add( "[-- "  +  value);  [BUGGY]      tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	tokens.add( "[-- "  +  value);	  tokens.add(   "[--   ");    	non-compiled	[CE]  	6	None	replace
111	[BUG]  [BUGGY]  tokens.add( "[-- "  +  currentOption.getName());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  tokens.add( "[-- "  +  currentOption.getName());  [BUGGY]      tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	tokens.add( "[-- "  +  currentOption.getName());	  tokens.add(   "[--   ");    	non-compiled	[CE]  	6	None	replace
112	[BUG]  [BUGGY]  while(currentOption.hasMoreElements())  {  if(stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  stopAtNonOption  =  false;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  while(currentOption.hasMoreElements())  {  if(stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  stopAtNonOption  =  false;  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	while(currentOption.hasMoreElements())  {  if(stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  stopAtNonOption  =  false;  }	  while(currentOption.hasArgs())    {    if(stopAtNonOption)    {    tokens.add(   "--   ");    tokens.add(value);    }    else    {    stopAtNonOption    =    false;    }    	non-compiled	[CE]  	31	None	replace
113	[BUG]  [BUGGY]  eatTheRest  =  currentOption.equals(value);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  eatTheRest  =  currentOption.equals(value);  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	eatTheRest  =  currentOption.equals(value);	  eatTheRest    =    stopAtNonOption.equals(value);    	non-compiled	[CE]  	57	None	replace
114	[BUG]  [BUGGY]  if(!stopAtNonOption.equals(value))  {  eatTheRest  =  stopAtNonOption.equals(value);  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  if(!stopAtNonOption.equals(value))  {  eatTheRest  =  stopAtNonOption.equals(value);  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	if(!stopAtNonOption.equals(value))  {  eatTheRest  =  stopAtNonOption.equals(value);  }	  eatTheRest    =    stopAtNonOption.equals(value);    	non-compiled	[CE]  	57	None	replace
115	[BUG]  [BUGGY]  if(stopAtNonOption!=  null)  {  eatTheRest  =  stopAtNonOption.equals(value);  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  if(stopAtNonOption!=  null)  {  eatTheRest  =  stopAtNonOption.equals(value);  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	if(stopAtNonOption!=  null)  {  eatTheRest  =  stopAtNonOption.equals(value);  }	  eatTheRest    =    stopAtNonOption.equals(value);    	non-compiled	[CE]  	57	None	replace
116	[BUG]  [BUGGY]  tokens.add( "-- "  +  this.stopAtNonOption,  value);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  tokens.add( "-- "  +  this.stopAtNonOption,  value);  [BUGGY]      tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	tokens.add( "-- "  +  this.stopAtNonOption,  value);	  tokens.add(   "--   "    +    this.stopAtNonOption,    eatTheRest);    	non-compiled	[CE]  	2	None	replace
117	[BUG]  [BUGGY]  tokens.add( "-- "  +  currentOption,  eatTheRest);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  tokens.add( "-- "  +  currentOption,  eatTheRest);  [BUGGY]      tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	tokens.add( "-- "  +  currentOption,  eatTheRest);	  tokens.add(   "--   "    +    this.stopAtNonOption,    eatTheRest);    	non-compiled	[CE]  	2	None	replace
118	[BUG]  [BUGGY]  While(currentOption.hasErrors())  {  tokens.add( "-- ");  tokens.add(value);  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  While(currentOption.hasErrors())  {  tokens.add( "-- ");  tokens.add(value);  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	While(currentOption.hasErrors())  {  tokens.add( "-- ");  tokens.add(value);  }	  While(currentOption.hasArgs())    {    tokens.add(   "--   ");    tokens.add(value);    }    	non-compiled	[CE]  	4	None	replace
119	[BUG]  [BUGGY]  eatTheRest  =  stopAtNonOption  &&  currentOption.hasArgs();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  eatTheRest  =  stopAtNonOption  &&  currentOption.hasArgs();  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	eatTheRest  =  stopAtNonOption  &&  currentOption.hasArgs();	  eatTheRest    =    stopAtNonOption    ||    currentOption.hasArgs();    	non-compiled	[CE]  	39	None	replace
120	[BUG]  [BUGGY]  tokens.remove(currentOption.getValue());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  tokens.remove(currentOption.getValue());  [BUGGY]      tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	tokens.remove(currentOption.getValue());	  tokens.clear();    	non-compiled	[CE]  	46	None	replace
121	[BUG]  [BUGGY]  tokens.remove(currentOption.getName());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  tokens.remove(currentOption.getName());  [BUGGY]      tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	tokens.remove(currentOption.getName());	  tokens.clear();    	non-compiled	[CE]  	46	None	replace
122	[BUG]  [BUGGY]  tokens.remove(currentOption.getKey());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  tokens.remove(currentOption.getKey());  [BUGGY]      tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	tokens.remove(currentOption.getKey());	  tokens.clear();    	non-compiled	[CE]  	46	None	replace
123	[BUG]  [BUGGY]  eatTheRest  =  currentOption  +  1;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  eatTheRest  =  currentOption  +  1;  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	eatTheRest  =  currentOption  +  1;	  eatTheRest    =    stopAtNonOption    +    1;    	non-compiled	[CE]  	40	None	replace
124	[BUG]  [BUGGY]  eatTheRest  =  stopAtNonOption  +  2;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  eatTheRest  =  stopAtNonOption  +  2;  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	eatTheRest  =  stopAtNonOption  +  2;	  eatTheRest    =    stopAtNonOption    +    1;    	non-compiled	[CE]  	40	None	replace
125	[BUG]  [BUGGY]  eatTheRest  =  stopAtNonOption  *  1;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  eatTheRest  =  stopAtNonOption  *  1;  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	eatTheRest  =  stopAtNonOption  *  1;	  eatTheRest    =    stopAtNonOption    +    1;    	non-compiled	[CE]  	40	None	replace
126	[BUG]  [BUGGY]  eatTheRest  =  stopAtNonOption  ||  currentOption  ==  null;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  eatTheRest  =  stopAtNonOption  ||  currentOption  ==  null;  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	eatTheRest  =  stopAtNonOption  ||  currentOption  ==  null;	  eatTheRest    =    stopAtNonOption    ||    currentOption!=    null;    	non-compiled	[CE]  	68	None	replace
127	[BUG]  [BUGGY]  eatTheRest  =  stopAtNonOption  &&  currentOption!=  null;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  eatTheRest  =  stopAtNonOption  &&  currentOption!=  null;  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	eatTheRest  =  stopAtNonOption  &&  currentOption!=  null;	  eatTheRest    =    stopAtNonOption    ||    currentOption!=    null;    	non-compiled	[CE]  	68	None	replace
128	[BUG]  [BUGGY]  eatTheRest  =  currentOption  ||  stopAtNonOption!=  null;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  eatTheRest  =  currentOption  ||  stopAtNonOption!=  null;  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	eatTheRest  =  currentOption  ||  stopAtNonOption!=  null;	  eatTheRest    =    stopAtNonOption    ||    currentOption!=    null;    	non-compiled	[CE]  	68	None	replace
129	[BUG]  [BUGGY]  ||  stopAtNonOption.hasArg())  {  eatTheRest  =  stopAtNonOption.hasArg();  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  ||  stopAtNonOption.hasArg())  {  eatTheRest  =  stopAtNonOption.hasArg();  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	||  stopAtNonOption.hasArg())  {  eatTheRest  =  stopAtNonOption.hasArg();  }	  if(stopAtNonOption.hasArg())    {    eatTheRest    =    stopAtNonOption.hasArg();    }    	non-compiled	[CE]  	17	None	replace
130	[BUG]  [BUGGY]  eatTheRest  =  stopAtNonOption.hasValue();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  eatTheRest  =  stopAtNonOption.hasValue();  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	eatTheRest  =  stopAtNonOption.hasValue();	  if(stopAtNonOption.hasArg())    {    eatTheRest    =    stopAtNonOption.hasArg();    }    	non-compiled	[CE]  	17	None	replace
131	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add( "-- ");  currentOption  =  this;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  if(stopAtNonOption)  {  tokens.add( "-- ");  currentOption  =  this;  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	if(stopAtNonOption)  {  tokens.add( "-- ");  currentOption  =  this;  }	  tokens.add(   "--   ");    currentOption    =    this;    	non-compiled	[CE]  	12	None	replace
132	[BUG]  [BUGGY]  while(currentOption.hasMoreArgs())  {  if(stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  stopAtNonOption  =  null;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  while(currentOption.hasMoreArgs())  {  if(stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  stopAtNonOption  =  null;  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	while(currentOption.hasMoreArgs())  {  if(stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  stopAtNonOption  =  null;  }	  While(currentOption.hasArgs())    {    if(stopAtNonOption)    {    tokens.add(   "--   ");    tokens.add(value);    }    else    {    stopAtNonOption    =    null;    }    	non-compiled	[CE]  	28	None	replace
133	[BUG]  [BUGGY]  safeToken(currentOption)  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  stopAtNonOption  =  null;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  safeToken(currentOption)  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  stopAtNonOption  =  null;  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	safeToken(currentOption)  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  stopAtNonOption  =  null;  }	  safeToken(stopAtNonOption)    {    tokens.add(   "--   ");    tokens.add(value);    }    else    {    stopAtNonOption    =    null;    }    	non-compiled	[CE]  	50	None	replace
134	[BUG]  [BUGGY]  parent!=  null  &&  currentOption.hasArgs();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  parent!=  null  &&  currentOption.hasArgs();  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	parent!=  null  &&  currentOption.hasArgs();	  parent!=    null    &&    currentOption.hasArg();    	non-compiled	[CE]  	47	None	replace
135	[BUG]  [BUGGY]  if(stopAtNonOption)  {  eatTheRest  =  false;  }  else  {  tokens.add( "-- ");  tokens.add(value);  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  if(stopAtNonOption)  {  eatTheRest  =  false;  }  else  {  tokens.add( "-- ");  tokens.add(value);  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	if(stopAtNonOption)  {  eatTheRest  =  false;  }  else  {  tokens.add( "-- ");  tokens.add(value);  }	  eatTheRest    =    false;    	non-compiled	[CE]  	37	None	replace
136	[BUG]  [BUGGY]  if(stopAtNonOption)  {  eatTheRest  =  false;  }  else  {  tokens.add( "-- ");  tokens.add(currentOption);  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  if(stopAtNonOption)  {  eatTheRest  =  false;  }  else  {  tokens.add( "-- ");  tokens.add(currentOption);  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	if(stopAtNonOption)  {  eatTheRest  =  false;  }  else  {  tokens.add( "-- ");  tokens.add(currentOption);  }	  eatTheRest    =    false;    	non-compiled	[CE]  	37	None	replace
137	[BUG]  [BUGGY]  if(stopAtNonOption.hasArg())  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  stopAtNonOption  =  true;  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  if(stopAtNonOption.hasArg())  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  stopAtNonOption  =  true;  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	if(stopAtNonOption.hasArg())  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  stopAtNonOption  =  true;  }	  tokens.add(   "--   ");    tokens.add(value);    }    else    {    stopAtNonOption    =    true;    }    	non-compiled	[CE]  	64	None	replace
138	[BUG]  [BUGGY]  }  else  if(currentOption.hasArgs())  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  stopAtNonOption  =  true;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  }  else  if(currentOption.hasArgs())  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  stopAtNonOption  =  true;  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	}  else  if(currentOption.hasArgs())  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  stopAtNonOption  =  true;  }	  tokens.add(   "--   ");    tokens.add(value);    }    else    {    stopAtNonOption    =    true;    }    	non-compiled	[CE]  	64	None	replace
139	[BUG]  [BUGGY]  tokens.add( "-- ", "currentOption.getValue() ");  [CE]  [FE]                AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  tokens.add( "-- ", "currentOption.getValue() ");  [BUGGY]      tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	tokens.add( "-- ", "currentOption.getValue() ");	  tokens.add(   "--   ",    currentOption.getValue());    	non-compiled	[CE]  	33	None	replace
140	[BUG]  [BUGGY]  tokens.add( "-- ", "-- ");  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  tokens.add( "-- ", "-- ");  [BUGGY]      tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	tokens.add( "-- ", "-- ");	  tokens.add(   "--   ",    currentOption.getValue());    	non-compiled	[CE]  	33	None	replace
141	[BUG]  [BUGGY]  eatTheRest  =  currentOption.stopAtNonOption.hasArgs();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  eatTheRest  =  currentOption.stopAtNonOption.hasArgs();  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	eatTheRest  =  currentOption.stopAtNonOption.hasArgs();	  eatTheRest    =    currentOption.hasArgs();    	non-compiled	[CE]  	42	None	replace
142	[BUG]  [BUGGY]  tokens.add( "-- "  +  value,  this.stopAtNonOption,  eatTheRest);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  tokens.add( "-- "  +  value,  this.stopAtNonOption,  eatTheRest);  [BUGGY]      tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	tokens.add( "-- "  +  value,  this.stopAtNonOption,  eatTheRest);	  tokens.add(   "--   "    +    this.stopAtNonOption,    eatTheRest);    	non-compiled	[CE]  	2	None	replace
143	[BUG]  [BUGGY]  tokens.add( "-- "  +  currentOption.getName(),  eatTheRest);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  tokens.add( "-- "  +  currentOption.getName(),  eatTheRest);  [BUGGY]      tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	tokens.add( "-- "  +  currentOption.getName(),  eatTheRest);	  tokens.add(   "--   "    +    currentOption.getName(),    stopAtNonOption);    	non-compiled	[CE]  	51	None	replace
144	[BUG]  [BUGGY]  eatTheRest  =  currentOption.hasError();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  eatTheRest  =  currentOption.hasError();  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	eatTheRest  =  currentOption.hasError();	  eatTheRest    =    currentOption.hasArg();    	non-compiled	[CE]  	16	None	replace
145	[BUG]  [BUGGY]  if(stopAtNonOption.hasArg())  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  stopAtNonOption  =  null;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  if(stopAtNonOption.hasArg())  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  stopAtNonOption  =  null;  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	if(stopAtNonOption.hasArg())  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  stopAtNonOption  =  null;  }	  tokens.add(   "--   ");    tokens.add(value);    }    else    {    stopAtNonOption    =    null;    }    	non-compiled	[CE]  	67	None	replace
146	[BUG]  [BUGGY]  if(stopAtNonOption!=  null)  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  stopAtNonOption  =  null;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  if(stopAtNonOption!=  null)  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  stopAtNonOption  =  null;  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	if(stopAtNonOption!=  null)  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  stopAtNonOption  =  null;  }	  tokens.add(   "--   ");    tokens.add(value);    }    else    {    stopAtNonOption    =    null;    }    	non-compiled	[CE]  	67	None	replace
147	[BUG]  [BUGGY]  if(eatTheRest)  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  stopAtNonOption  =  null;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  if(eatTheRest)  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  stopAtNonOption  =  null;  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	if(eatTheRest)  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  stopAtNonOption  =  null;  }	  tokens.add(   "--   ");    tokens.add(value);    }    else    {    stopAtNonOption    =    null;    }    	non-compiled	[CE]  	67	None	replace
148	[BUG]  [BUGGY]  while(currentOption.hasArg())  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  stopAtNonOption  =  null;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  while(currentOption.hasArg())  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  stopAtNonOption  =  null;  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	while(currentOption.hasArg())  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  stopAtNonOption  =  null;  }	  tokens.add(   "--   ");    tokens.add(value);    }    else    {    stopAtNonOption    =    null;    }    	non-compiled	[CE]  	67	None	replace
149	[BUG]  [BUGGY]  parent  ==  null  &&  currentOption.hasArg();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  parent  ==  null  &&  currentOption.hasArg();  [BUGGY]      tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	parent  ==  null  &&  currentOption.hasArg();	  if(stopAtNonOption)    {    tokens.add(value);    }    else    {    stopAtNonOption    =    true;    }    	non-compiled	[CE]  	19	None	replace
150	[BUG]  [BUGGY]  if(stopAtNonOption!=  null)  {  eatTheRest  =  stopAtNonOption.getArgumentCount();  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  if(stopAtNonOption!=  null)  {  eatTheRest  =  stopAtNonOption.getArgumentCount();  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	if(stopAtNonOption!=  null)  {  eatTheRest  =  stopAtNonOption.getArgumentCount();  }	  eatTheRest    =    stopAtNonOption.getArgumentCount();    	non-compiled	[CE]  	58	None	replace
151	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [CE]  [FE]                AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti	  else    if(eatTheRest)    {    tokens.add(   "--   ");    tokens.add(value);    }    	non-compiled	[CE]  	72	None	replace
152	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti	  else    if(eatTheRest)    {    tokens.add(   "--   ");    tokens.add(value);    }    	non-compiled	[CE]  	72	None	replace
153	[BUG]  [BUGGY]  while(currentOption.hasArgs())  {  if(eatTheRest)  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  stopAtNonOption  =  false;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  while(currentOption.hasArgs())  {  if(eatTheRest)  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  stopAtNonOption  =  false;  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	while(currentOption.hasArgs())  {  if(eatTheRest)  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  stopAtNonOption  =  false;  }	  while(currentOption.hasArgs())    {    if(stopAtNonOption)    {    tokens.add(   "--   ");    tokens.add(value);    }    else    {    stopAtNonOption    =    false;    }    	non-compiled	[CE]  	31	None	replace
154	[BUG]  [BUGGY]  while(currentOption.hasArgs())  {  tokens.add( "-- ");  tokens.add(value);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  while(currentOption.hasArgs())  {  tokens.add( "-- ");  tokens.add(value);  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	while(currentOption.hasArgs())  {  tokens.add( "-- ");  tokens.add(value);	  while(currentOption.hasArg())    {    tokens.add(   "--   ");    tokens.add(value);    	non-compiled	[CE]  	60	None	replace
155	[BUG]  [BUGGY]  while(currentOption.hasOptions())  {  tokens.add( "-- ");  tokens.add(value);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  while(currentOption.hasOptions())  {  tokens.add( "-- ");  tokens.add(value);  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	while(currentOption.hasOptions())  {  tokens.add( "-- ");  tokens.add(value);	  while(currentOption.hasArg())    {    tokens.add(   "--   ");    tokens.add(value);    	non-compiled	[CE]  	60	None	replace
156	[BUG]  [BUGGY]  tokens.add( ",-- ");  currentOption  =  null;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  tokens.add( ",-- ");  currentOption  =  null;  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	tokens.add( ",-- ");  currentOption  =  null;	  if(stopAtNonOption)    {    tokens.add(   "--   ");    currentOption    =    null;    }    	non-compiled	[CE]  	48	None	replace
157	[BUG]  [BUGGY]  tokens.add( "[--'] ");  [CE]  [FE]              AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  tokens.add( "[--'] ");  [BUGGY]      tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	tokens.add( "[--'] ");	  tokens.add(   "[--   ");    	non-compiled	[CE]  	6	None	replace
158	[BUG]  [BUGGY]  while(currentOption.hasErrors())  {  if(stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(value);  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  while(currentOption.hasErrors())  {  if(stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(value);  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	while(currentOption.hasErrors())  {  if(stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(value);  }	  While(currentOption.hasArg())    {    if(stopAtNonOption)    {    tokens.add(   "--   ");    tokens.add(value);    }    	non-compiled	[CE]  	29	None	replace
159	[BUG]  [BUGGY]  parent!=  null  &&  currentOption.hasArg())  {  tokens.add(value);  }  else  {  stopAtNonOption  =  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  parent!=  null  &&  currentOption.hasArg())  {  tokens.add(value);  }  else  {  stopAtNonOption  =  false;  }  [BUGGY]      tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	parent!=  null  &&  currentOption.hasArg())  {  tokens.add(value);  }  else  {  stopAtNonOption  =  false;  }	  if(stopAtNonOption)    {    tokens.add(value);    }    else    {    stopAtNonOption    =    false;    }    	non-compiled	[CE]  	20	None	replace
160	[BUG]  [BUGGY]  parent!=  null  &&  currentOption.hasArgs())  {  tokens.add(value);  }  else  {  stopAtNonOption  =  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  parent!=  null  &&  currentOption.hasArgs())  {  tokens.add(value);  }  else  {  stopAtNonOption  =  false;  }  [BUGGY]      tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	parent!=  null  &&  currentOption.hasArgs())  {  tokens.add(value);  }  else  {  stopAtNonOption  =  false;  }	  if(stopAtNonOption)    {    tokens.add(value);    }    else    {    stopAtNonOption    =    false;    }    	non-compiled	[CE]  	20	None	replace
161	[BUG]  [BUGGY]  parent!=  null  &&  currentOption.hasArg())  {  tokens.add(value);  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  parent!=  null  &&  currentOption.hasArg())  {  tokens.add(value);  }  [BUGGY]      tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	parent!=  null  &&  currentOption.hasArg())  {  tokens.add(value);  }	  if(stopAtNonOption)    {    tokens.add(value);    }    else    {    stopAtNonOption    =    false;    }    	non-compiled	[CE]  	20	None	replace
162	[BUG]  [BUGGY]  [Delete]  [CE]  [FE]              AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  [Delete]  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	[Delete]	  if(eatTheRest)    {    tokens.add(   "--   ");    tokens.add(value);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	71	None	replace
163	[BUG]  [BUGGY]  tokens.add( "-- "  +  currentOption,  stopAtNonOption);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  tokens.add( "-- "  +  currentOption,  stopAtNonOption);  [BUGGY]      tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	tokens.add( "-- "  +  currentOption,  stopAtNonOption);	  tokens.add(   "--   "    +    currentOption);    	non-compiled	[CE]  	1	None	replace
164	[BUG]  [BUGGY]  eatTheRest  =  stopAtNonOption.equals(value)&&  currentOption.hasArg();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  eatTheRest  =  stopAtNonOption.equals(value)&&  currentOption.hasArg();  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	eatTheRest  =  stopAtNonOption.equals(value)&&  currentOption.hasArg();	  eatTheRest    =    stopAtNonOption.equals(value);    	non-compiled	[CE]  	57	None	replace
165	[BUG]  [BUGGY]  tokens.add(currentOption.getKey());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  tokens.add(currentOption.getKey());  [BUGGY]      tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	tokens.add(currentOption.getKey());	  tokens.add(currentOption.getValue());    	non-compiled	[CE]  	63	None	replace
166	[BUG]  [BUGGY]  eatTheRest  =  stopAtNonOption.stopAtNonOption  ||  currentOption.hasArgs();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  eatTheRest  =  stopAtNonOption.stopAtNonOption  ||  currentOption.hasArgs();  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	eatTheRest  =  stopAtNonOption.stopAtNonOption  ||  currentOption.hasArgs();	  eatTheRest    =    stopAtNonOption.stopAtNonOption    =    true;    	non-compiled	[CE]  	55	None	replace
167	[BUG]  [BUGGY]  eatTheRest  =  currentOption.stopAtNonOption  =  true;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  eatTheRest  =  currentOption.stopAtNonOption  =  true;  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	eatTheRest  =  currentOption.stopAtNonOption  =  true;	  eatTheRest    =    stopAtNonOption.stopAtNonOption    =    true;    	non-compiled	[CE]  	55	None	replace
168	[BUG]  [BUGGY]  eatTheRest  =  stopAtNonOption  ||  currentOption.hasArguments();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  eatTheRest  =  stopAtNonOption  ||  currentOption.hasArguments();  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	eatTheRest  =  stopAtNonOption  ||  currentOption.hasArguments();	  eatTheRest    =    stopAtNonOption    ||    currentOption.hasArgs();    	non-compiled	[CE]  	39	None	replace
169	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption( "haltAtNonOption ");  [CE]  [FE]              AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  Option  currentOption  =  options.getOption( "haltAtNonOption ");  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	Option  currentOption  =  options.getOption( "haltAtNonOption ");	  Option    currentOption    =    options.getOption(   "eatTheRest   ");    	non-compiled	[CE]  	54	None	replace
170	[BUG]  [BUGGY]  tokens.add( "-- ", "currentOption.getKey() ");  [CE]  [FE]              AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  tokens.add( "-- ", "currentOption.getKey() ");  [BUGGY]      tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	tokens.add( "-- ", "currentOption.getKey() ");	  tokens.add(   "--   ",    currentOption.getKey());    	non-compiled	[CE]  	66	None	replace
171	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [CE]  [FE]              AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti	  if(eatTheRest)    {    tokens.add(   "--   ");    tokens.add(value);    }    	non-compiled	[CE]  	52	None	replace
172	[BUG]  [BUGGY]  eatTheRest  =  stopAtNonOption.stopAtArgument();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  eatTheRest  =  stopAtNonOption.stopAtArgument();  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	eatTheRest  =  stopAtNonOption.stopAtArgument();	  eatTheRest    =    stopAtNonOption.stopAtNonOption();    	non-compiled	[CE]  	25	None	replace
173	[BUG]  [BUGGY]  eatTheRest  =  stopAtNonOption.stopAtNonOption(value);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  eatTheRest  =  stopAtNonOption.stopAtNonOption(value);  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	eatTheRest  =  stopAtNonOption.stopAtNonOption(value);	  eatTheRest    =    stopAtNonOption.stopAtNonOption();    	non-compiled	[CE]  	25	None	replace
174	[BUG]  [BUGGY]  tokens.addAll(stopAtNonOption.hasArg());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  tokens.addAll(stopAtNonOption.hasArg());  [BUGGY]      tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	tokens.addAll(stopAtNonOption.hasArg());	  tokens.clear();    	non-compiled	[CE]  	46	None	replace
175	[BUG]  [BUGGY]  tokens.addAll(stopAtNonOption.getArgs());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  tokens.addAll(stopAtNonOption.getArgs());  [BUGGY]      tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	tokens.addAll(stopAtNonOption.getArgs());	  tokens.clear();    	non-compiled	[CE]  	46	None	replace
176	[BUG]  [BUGGY]  eatTheRest  =  currentOption.stopAtNonOption  =  false;  [CE]  [FE]            AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  eatTheRest  =  currentOption.stopAtNonOption  =  false;  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	eatTheRest  =  currentOption.stopAtNonOption  =  false;	  eatTheRest    =    currentOption.stopAtNonOption;    	non-compiled	[CE]  	24	None	replace
177	[BUG]  [BUGGY]  while(currentOption.hasArgs())  {  if(stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(value);  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  while(currentOption.hasArgs())  {  if(stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(value);  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	while(currentOption.hasArgs())  {  if(stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(value);  }	  while(currentOption.hasArg())    {    if(stopAtNonOption)    {    tokens.add(   "--   ");    tokens.add(value);    }    	non-compiled	[CE]  	3	None	replace
178	[BUG]  [BUGGY]  while(currentOption.hasErrors())  {  if(stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  stopAtNonOption  =  null;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  while(currentOption.hasErrors())  {  if(stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  stopAtNonOption  =  null;  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	while(currentOption.hasErrors())  {  if(stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  stopAtNonOption  =  null;  }	  While(currentOption.hasArg())    {    if(stopAtNonOption)    {    tokens.add(   "--   ");    tokens.add(value);    }    else    {    stopAtNonOption    =    null;    }    	non-compiled	[CE]  	27	None	replace
179	[BUG]  [BUGGY]  While(currentOption.hasErrors())  {  if(stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  stopAtNonOption  =  null;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  While(currentOption.hasErrors())  {  if(stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  stopAtNonOption  =  null;  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	While(currentOption.hasErrors())  {  if(stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  stopAtNonOption  =  null;  }	  While(currentOption.hasArg())    {    if(stopAtNonOption)    {    tokens.add(   "--   ");    tokens.add(value);    }    else    {    stopAtNonOption    =    null;    }    	non-compiled	[CE]  	27	None	replace
180	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  [BUGGY]      tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr	  if(stopAtNonOption)    {    tokens.add(currentOption);    }    else    {    stopAtNonOption    =    false;    }    	non-compiled	[CE]  	22	None	replace
181	[BUG]  [BUGGY]  if(stopAtNonOption.hasArg())  {  eatTheRest  =  stopAtNonOption.getValue();  }  else  {  tokens.add( "-- ");  tokens.add(value);  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  if(stopAtNonOption.hasArg())  {  eatTheRest  =  stopAtNonOption.getValue();  }  else  {  tokens.add( "-- ");  tokens.add(value);  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	if(stopAtNonOption.hasArg())  {  eatTheRest  =  stopAtNonOption.getValue();  }  else  {  tokens.add( "-- ");  tokens.add(value);  }	  eatTheRest    =    stopAtNonOption.getValue();    	non-compiled	[CE]  	26	None	replace
182	[BUG]  [BUGGY]  tokens.add(currentOption.getArgumentValue());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  tokens.add(currentOption.getArgumentValue());  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	tokens.add(currentOption.getArgumentValue());	  if(stopAtNonOption.hasArg())    {    eatTheRest    =    stopAtNonOption.hasArg();    }    else    {    tokens.add(   "--   ");    }    	non-compiled	[CE]  	18	None	replace
183	[BUG]  [BUGGY]  While(stopAtNonOption.hasArgs())  {  tokens.add(stopAtNonOption.getArgs());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  While(stopAtNonOption.hasArgs())  {  tokens.add(stopAtNonOption.getArgs());  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	While(stopAtNonOption.hasArgs())  {  tokens.add(stopAtNonOption.getArgs());	  if(stopAtNonOption.hasArg())    {    eatTheRest    =    stopAtNonOption.hasArg();    }    	non-compiled	[CE]  	17	None	replace
184	[BUG]  [BUGGY]  tokens.remove(currentOption.getArg());  [CE]  [FE]            AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  tokens.remove(currentOption.getArg());  [BUGGY]      tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	tokens.remove(currentOption.getArg());	  tokens.remove(0);    	non-compiled	[CE]  	14	None	replace
185	[BUG]  [BUGGY]  tokens.add(currentOption.getArgumentCount());  [CE]  [FE]            AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  tokens.add(currentOption.getArgumentCount());  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	tokens.add(currentOption.getArgumentCount());	  if(stopAtNonOption.hasArg())    {    eatTheRest    =    stopAtNonOption.hasArg();    }    else    {    tokens.add(   "--   ");    tokens.add(value);    }    	non-compiled	[CE]  	41	None	replace
186	[BUG]  [BUGGY]  tokens.put( "-- "  +  value,   "-- ");  [CE]  [FE]            AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  tokens.put( "-- "  +  value,   "-- ");  [BUGGY]      tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	tokens.put( "-- "  +  value,   "-- ");	  tokens.put(   "--   ",   "--   ");    	non-compiled	[CE]  	45	None	replace
187	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetiOverriden  =  true;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetiOverriden  =  true;  [BUGGY]      tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetiOverriden  =  true;	  if(stopAtNonOption)    {    tokens.add(currentOption);    }    else    {    stopAtNonOption    =    true;    }    	non-compiled	[CE]  	21	None	replace
188	[BUG]  [BUGGY]  if(stopAtNonOption.hasArg())  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  stopAtNonOption  =  false;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  if(stopAtNonOption.hasArg())  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  stopAtNonOption  =  false;  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	if(stopAtNonOption.hasArg())  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  stopAtNonOption  =  false;  }	  tokens.add(   "--   ");    tokens.add(value);    }    else    {    stopAtNonOption    =    false;    }    	non-compiled	[CE]  	69	None	replace
189	[BUG]  [BUGGY]  tokens.add( "-- "  +  currentOption.getKey(),  value);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  tokens.add( "-- "  +  currentOption.getKey(),  value);  [BUGGY]      tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	tokens.add( "-- "  +  currentOption.getKey(),  value);	  tokens.add(   "--   "    +    currentOption.getName(),    value);    	non-compiled	[CE]  	10	None	replace
190	[BUG]  [BUGGY]  While(currentOption.hasArgs())  {  if(eatTheRest)  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  stopAtNonOption  =  null;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  While(currentOption.hasArgs())  {  if(eatTheRest)  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  stopAtNonOption  =  null;  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	While(currentOption.hasArgs())  {  if(eatTheRest)  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  stopAtNonOption  =  null;  }	  While(currentOption.hasArgs())    {    if(stopAtNonOption)    {    tokens.add(   "--   ");    tokens.add(value);    }    else    {    stopAtNonOption    =    null;    }    	non-compiled	[CE]  	28	None	replace
191	[BUG]  [BUGGY]  tokens.remove( "-- "  +  eatTheRest);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  tokens.remove( "-- "  +  eatTheRest);  [BUGGY]      tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	tokens.remove( "-- "  +  eatTheRest);	  tokens.remove(   "--   "    +    value);    	non-compiled	[CE]  	15	None	replace
192	[BUG]  [BUGGY]  if(stopAtNonOption)  {  eatTheRest  =  false;  }  else  {  tokens.add( "-- ");  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  if(stopAtNonOption)  {  eatTheRest  =  false;  }  else  {  tokens.add( "-- ");  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	if(stopAtNonOption)  {  eatTheRest  =  false;  }  else  {  tokens.add( "-- ");  }	  eatTheRest    =    false;    	non-compiled	[CE]  	37	None	replace
193	[BUG]  [BUGGY]  tokens.remove( "-- "  +  this.stopAtNonOption);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  tokens.remove( "-- "  +  this.stopAtNonOption);  [BUGGY]      tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	tokens.remove( "-- "  +  this.stopAtNonOption);	  tokens.remove(   "--   "    +    value);    	non-compiled	[CE]  	15	None	replace
194	[BUG]  [BUGGY]  while(currentOption.hasMoreTokens())  {  if(stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  stopAtNonOption  =  null;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  while(currentOption.hasMoreTokens())  {  if(stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  stopAtNonOption  =  null;  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	while(currentOption.hasMoreTokens())  {  if(stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  stopAtNonOption  =  null;  }	  While(currentOption.hasArg())    {    if(stopAtNonOption)    {    tokens.add(   "--   ");    tokens.add(value);    }    else    {    stopAtNonOption    =    null;    }    	non-compiled	[CE]  	27	None	replace
195	[BUG]  [BUGGY]  while(currentOption.hasOption(value))  {  if(stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  stopAtNonOption  =  null;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  while(currentOption.hasOption(value))  {  if(stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  stopAtNonOption  =  null;  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	while(currentOption.hasOption(value))  {  if(stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  stopAtNonOption  =  null;  }	  While(currentOption.hasArg())    {    if(stopAtNonOption)    {    tokens.add(   "--   ");    tokens.add(value);    }    else    {    stopAtNonOption    =    null;    }    	non-compiled	[CE]  	27	None	replace
196	[BUG]  [BUGGY]  if(stopAtNonOption.hasArg())  {  eatTheRest  =  stopAtNonOption.getArgumentCount();  }  else  {  tokens.add( "-- ");  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  if(stopAtNonOption.hasArg())  {  eatTheRest  =  stopAtNonOption.getArgumentCount();  }  else  {  tokens.add( "-- ");  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	if(stopAtNonOption.hasArg())  {  eatTheRest  =  stopAtNonOption.getArgumentCount();  }  else  {  tokens.add( "-- ");  }	  eatTheRest    =    stopAtNonOption.getArgumentCount();    	non-compiled	[CE]  	58	None	replace
197	[BUG]  [BUGGY]  if(stopAtNonOption.hasArg())  {  eatTheRest  =  stopAtNonOption.getArgumentCount();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  if(stopAtNonOption.hasArg())  {  eatTheRest  =  stopAtNonOption.getArgumentCount();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	if(stopAtNonOption.hasArg())  {  eatTheRest  =  stopAtNonOption.getArgumentCount();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  eatTheRest    =    stopAtNonOption.getArgumentCount();    	non-compiled	[CE]  	58	None	replace
198	[BUG]  [BUGGY]  while(currentOption.hasOption(value))  {  if(stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  stopAtNonOption  =  false;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  while(currentOption.hasOption(value))  {  if(stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  stopAtNonOption  =  false;  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	while(currentOption.hasOption(value))  {  if(stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  stopAtNonOption  =  false;  }	  while(currentOption.hasArgs())    {    if(stopAtNonOption)    {    tokens.add(   "--   ");    tokens.add(value);    }    else    {    stopAtNonOption    =    false;    }    	non-compiled	[CE]  	31	None	replace
199	[BUG]  [BUGGY]  while(currentOption.hasOption( "-- "))  {  if(stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  stopAtNonOption  =  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  while(currentOption.hasOption( "-- "))  {  if(stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  stopAtNonOption  =  false;  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	while(currentOption.hasOption( "-- "))  {  if(stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  stopAtNonOption  =  false;  }	  while(currentOption.hasArgs())    {    if(stopAtNonOption)    {    tokens.add(   "--   ");    tokens.add(value);    }    else    {    stopAtNonOption    =    false;    }    	non-compiled	[CE]  	31	None	replace
200	[BUG]  [BUGGY]  tokens.add( "-- "  +  value,  stoppingAtNonOption);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  tokens.add( "-- "  +  value,  stoppingAtNonOption);  [BUGGY]      tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	tokens.add( "-- "  +  value,  stoppingAtNonOption);	  tokens.add(   "--   "    +    value,    stopAtNonOption);    	non-compiled	[CE]  	43	None	replace
201	[BUG]  [BUGGY]  if(eatTheRest)  {  tokens.add( "-- ");  currentOption  =  options;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  if(eatTheRest)  {  tokens.add( "-- ");  currentOption  =  options;  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	if(eatTheRest)  {  tokens.add( "-- ");  currentOption  =  options;  }	  tokens.add(   "--   ");    currentOption    =    options;    	non-compiled	[CE]  	13	None	replace
202	[BUG]  [BUGGY]  while(currentOption.hasNext())  {  tokens.add( "-- ");  tokens.add(value);  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  while(currentOption.hasNext())  {  tokens.add( "-- ");  tokens.add(value);  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	while(currentOption.hasNext())  {  tokens.add( "-- ");  tokens.add(value);  }	  While(currentOption.hasArgs())    {    tokens.add(   "--   ");    tokens.add(value);    }    	non-compiled	[CE]  	4	None	replace
203	[BUG]  [BUGGY]  while(currentOption.hasMoreTokens())  {  tokens.add( "-- ");  tokens.add(value);  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  while(currentOption.hasMoreTokens())  {  tokens.add( "-- ");  tokens.add(value);  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	while(currentOption.hasMoreTokens())  {  tokens.add( "-- ");  tokens.add(value);  }	  While(currentOption.hasArgs())    {    tokens.add(   "--   ");    tokens.add(value);    }    	non-compiled	[CE]  	4	None	replace
204	[BUG]  [BUGGY]  while(currentOption.hasOption(value))  {  if(stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(value);  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  while(currentOption.hasOption(value))  {  if(stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(value);  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	while(currentOption.hasOption(value))  {  if(stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(value);  }	  while(currentOption.hasArg())    {    if(stopAtNonOption)    {    tokens.add(   "--   ");    tokens.add(value);    }    	non-compiled	[CE]  	3	None	replace
205	[BUG]  [BUGGY]  while(currentOption.hasOption(this))  {  if(stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(value);  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  while(currentOption.hasOption(this))  {  if(stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(value);  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	while(currentOption.hasOption(this))  {  if(stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(value);  }	  while(currentOption.hasArg())    {    if(stopAtNonOption)    {    tokens.add(   "--   ");    tokens.add(value);    }    	non-compiled	[CE]  	3	None	replace
206	[BUG]  [BUGGY]  while(currentOption.hasOption( "-- "))  {  if(stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(value);  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  while(currentOption.hasOption( "-- "))  {  if(stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(value);  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	while(currentOption.hasOption( "-- "))  {  if(stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(value);  }	  while(currentOption.hasArg())    {    if(stopAtNonOption)    {    tokens.add(   "--   ");    tokens.add(value);    }    	non-compiled	[CE]  	3	None	replace
207	[BUG]  [BUGGY]  eatTheRest  =  stopAtNonOption  ||  value!=  null;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  eatTheRest  =  stopAtNonOption  ||  value!=  null;  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	eatTheRest  =  stopAtNonOption  ||  value!=  null;	  eatTheRest    =    stopAtNonOption    ||    currentOption!=    null;    	non-compiled	[CE]  	68	None	replace
208	[BUG]  [BUGGY]  tokens.add( "-- "  +  value,  currentOption.hasMoreArg());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  tokens.add( "-- "  +  value,  currentOption.hasMoreArg());  [BUGGY]      tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	tokens.add( "-- "  +  value,  currentOption.hasMoreArg());	  tokens.add(   "--   "    +    value,    currentOption.hasArg());    	non-compiled	[CE]  	32	None	replace
209	[BUG]  [BUGGY]  tokens.add( "-- "  +  value,  currentOption.hasMoreArguments());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  tokens.add( "-- "  +  value,  currentOption.hasMoreArguments());  [BUGGY]      tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	tokens.add( "-- "  +  value,  currentOption.hasMoreArguments());	  tokens.add(   "--   "    +    value,    currentOption.hasArg());    	non-compiled	[CE]  	32	None	replace
210	[BUG]  [BUGGY]  tokens.add( "-- "  +  value,  currentOption.hasMoreArgs());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  tokens.add( "-- "  +  value,  currentOption.hasMoreArgs());  [BUGGY]      tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	tokens.add( "-- "  +  value,  currentOption.hasMoreArgs());	  tokens.add(   "--   "    +    value,    currentOption.hasArg());    	non-compiled	[CE]  	32	None	replace
211	[BUG]  [BUGGY]  parent!=  null  &&  currentOption.hasValue();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  parent!=  null  &&  currentOption.hasValue();  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	parent!=  null  &&  currentOption.hasValue();	  parent!=    null    &&    currentOption.hasArg();    	non-compiled	[CE]  	47	None	replace
212	[BUG]  [BUGGY]  tokens.add(currentOption.getOwner());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  tokens.add(currentOption.getOwner());  [BUGGY]      tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	tokens.add(currentOption.getOwner());	  tokens.add(currentOption.getValue());    	non-compiled	[CE]  	63	None	replace
213	[BUG]  [BUGGY]  if(eatTheRest)  {  tokens.add( "-- ");  currentOption  =  this;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  if(eatTheRest)  {  tokens.add( "-- ");  currentOption  =  this;  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	if(eatTheRest)  {  tokens.add( "-- ");  currentOption  =  this;  }	  tokens.add(   "--   ");    currentOption    =    this;    	non-compiled	[CE]  	12	None	replace
214	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  else  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  else  {  [BUGGY]      tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  else  {	  if(stopAtNonOption)    {    tokens.add(currentOption);    }    else    {    stopAtNonOption    =    true;    }    	non-compiled	[CE]  	21	None	replace
215	[BUG]  [BUGGY]  if(stopAtNonOption.hasArg())  {  eatTheRest  =  stopAtNonOption.stopAtNonOption  =  true;  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  if(stopAtNonOption.hasArg())  {  eatTheRest  =  stopAtNonOption.stopAtNonOption  =  true;  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	if(stopAtNonOption.hasArg())  {  eatTheRest  =  stopAtNonOption.stopAtNonOption  =  true;  }	  eatTheRest    =    stopAtNonOption.stopAtNonOption    =    true;    	non-compiled	[CE]  	55	None	replace
216	[BUG]  [BUGGY]  if(stopAtNonOption.hasArg())  {  eatTheRest  =  stopAtNonOption.stopAtNonOption  =  true;  }  else  {  tokens.add( "-- ");  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  if(stopAtNonOption.hasArg())  {  eatTheRest  =  stopAtNonOption.stopAtNonOption  =  true;  }  else  {  tokens.add( "-- ");  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	if(stopAtNonOption.hasArg())  {  eatTheRest  =  stopAtNonOption.stopAtNonOption  =  true;  }  else  {  tokens.add( "-- ");  }	  eatTheRest    =    stopAtNonOption.stopAtNonOption    =    true;    	non-compiled	[CE]  	55	None	replace
217	[BUG]  [BUGGY]  while(currentOption.hasOptions())  {  tokens.add( "-- ");  tokens.add(value);  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  while(currentOption.hasOptions())  {  tokens.add( "-- ");  tokens.add(value);  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	while(currentOption.hasOptions())  {  tokens.add( "-- ");  tokens.add(value);  }	  while(currentOption.hasArg())    {    tokens.add(   "--   ");    tokens.add(value);    }    	non-compiled	[CE]  	59	None	replace
218	[BUG]  [BUGGY]  if(!eatTheRest)  {  eatTheRest  =  stopAtNonOption.equals(value);  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  if(!eatTheRest)  {  eatTheRest  =  stopAtNonOption.equals(value);  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	if(!eatTheRest)  {  eatTheRest  =  stopAtNonOption.equals(value);  }	  eatTheRest    =    stopAtNonOption.equals(value);    	non-compiled	[CE]  	57	None	replace
219	[BUG]  [BUGGY]  tokens.add( "][-- ");  [CE]  [FE]              AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  tokens.add( "][-- ");  [BUGGY]      tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	tokens.add( "][-- ");	  tokens.add(   "[--   ");    	non-compiled	[CE]  	6	None	replace
220	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  else  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  else  {  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  else  {	  tokens.add(   "--   ");    tokens.add(value);    }    else    {    stopAtNonOption    =    true;    }    	non-compiled	[CE]  	64	None	replace
221	[BUG]  [BUGGY]  tokens.add( "-- "  +  value,  stopAtNonOption,  eatTheRest);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  tokens.add( "-- "  +  value,  stopAtNonOption,  eatTheRest);  [BUGGY]      tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	tokens.add( "-- "  +  value,  stopAtNonOption,  eatTheRest);	  tokens.add(   "--   "    +    this.stopAtNonOption,    eatTheRest);    	non-compiled	[CE]  	2	None	replace
222	[BUG]  [BUGGY]  eatTheRest  =  stopAtNonOption  ||  currentOption.hasMoreArgs();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  eatTheRest  =  stopAtNonOption  ||  currentOption.hasMoreArgs();  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	eatTheRest  =  stopAtNonOption  ||  currentOption.hasMoreArgs();	  eatTheRest    =    stopAtNonOption    ||    currentOption.hasArg();    	non-compiled	[CE]  	38	None	replace
223	[BUG]  [BUGGY]  parent!=  null  &&  currentOption.hasValue();  tokens.add( "-- ");  tokens.add(value);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  parent!=  null  &&  currentOption.hasValue();  tokens.add( "-- ");  tokens.add(value);  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	parent!=  null  &&  currentOption.hasValue();  tokens.add( "-- ");  tokens.add(value);	  parent!=    null    &&    currentOption.hasArg();    tokens.add(   "--   ");    tokens.add(value);    	non-compiled	[CE]  	65	None	replace
224	[BUG]  [BUGGY]  tokens.add(stopAtNonOption.getValue());  [CE]  [FE]            AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  tokens.add(stopAtNonOption.getValue());  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	tokens.add(stopAtNonOption.getValue());	  if(stopAtNonOption.hasArg())    {    eatTheRest    =    stopAtNonOption.hasArg();    }    else    {    tokens.add(   "--   ");    tokens.add(value);    }    	non-compiled	[CE]  	41	None	replace
225	[BUG]  [BUGGY]  tokens.add(stopAtNonOption.getKey());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  tokens.add(stopAtNonOption.getKey());  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	tokens.add(stopAtNonOption.getKey());	  if(stopAtNonOption.hasArg())    {    eatTheRest    =    stopAtNonOption.hasArg();    }    else    {    tokens.add(   "--   ");    tokens.add(value);    }    	non-compiled	[CE]  	41	None	replace
226	[BUG]  [BUGGY]  eatTheRest  =  stopAtNonOption.toString();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  eatTheRest  =  stopAtNonOption.toString();  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	eatTheRest  =  stopAtNonOption.toString();	  eatTheRest    =    stopAtNonOption.getValue();    	non-compiled	[CE]  	26	None	replace
227	[BUG]  [BUGGY]  eatTheRest  =  stopAtNonOption.findValue(value);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  eatTheRest  =  stopAtNonOption.findValue(value);  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	eatTheRest  =  stopAtNonOption.findValue(value);	  eatTheRest    =    stopAtNonOption.getValue();    	non-compiled	[CE]  	26	None	replace
228	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption( "stopAtNonOption, ");  [CE]  [FE]            AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  Option  currentOption  =  options.getOption( "stopAtNonOption, ");  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	Option  currentOption  =  options.getOption( "stopAtNonOption, ");	  Option    currentOption    =    options.getOption(   "stopAtNonOption   ");    	non-compiled	[CE]  	53	None	replace
229	[BUG]  [BUGGY]  if(stopAtNonOption!=  null)  {  eatTheRest  =  stopAtNonOption.stopAtNonOption();  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  if(stopAtNonOption!=  null)  {  eatTheRest  =  stopAtNonOption.stopAtNonOption();  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	if(stopAtNonOption!=  null)  {  eatTheRest  =  stopAtNonOption.stopAtNonOption();  }	  eatTheRest    =    stopAtNonOption.stopAtNonOption();    	non-compiled	[CE]  	25	None	replace
230	[BUG]  [BUGGY]  tokens.add( "-- "  +  currentOption.toString(),  value);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  tokens.add( "-- "  +  currentOption.toString(),  value);  [BUGGY]      tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	tokens.add( "-- "  +  currentOption.toString(),  value);	  tokens.add(   "--   "    +    currentOption.getName(),    value);    	non-compiled	[CE]  	10	None	replace
231	[BUG]  [BUGGY]  tokens.add(stopAtNonOption.getArgumentCount());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  tokens.add(stopAtNonOption.getArgumentCount());  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	tokens.add(stopAtNonOption.getArgumentCount());	  if(stopAtNonOption.hasArg())    {    eatTheRest    =    stopAtNonOption.hasArg();    }    else    {    tokens.add(   "--   ");    }    	non-compiled	[CE]  	18	None	replace
232	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  else  if(tokens.add(value);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  else  if(tokens.add(value);  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  else  if(tokens.add(value);	  if(eatTheRest)    {    tokens.add(   "--   ");    tokens.add(value);    }    	non-compiled	[CE]  	52	None	replace
233	[BUG]  [BUGGY]  tokens.put( "-- ",  new  Option( "-- "));  [CE]  [FE]            AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  tokens.put( "-- ",  new  Option( "-- "));  [BUGGY]      tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	tokens.put( "-- ",  new  Option( "-- "));	  tokens.put(   "--   ",   "--   ");    	non-compiled	[CE]  	45	None	replace
234	[BUG]  [BUGGY]  if(eatTheRest)  {  tokens.add( "-- ");  currentOption  =  new  Option();  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  if(eatTheRest)  {  tokens.add( "-- ");  currentOption  =  new  Option();  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	if(eatTheRest)  {  tokens.add( "-- ");  currentOption  =  new  Option();  }	  tokens.add(   "--   ");    currentOption    =    new    Option();    	non-compiled	[CE]  	11	None	replace
235	[BUG]  [BUGGY]  if(eatTheRest)  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  stopAtNonOption  =  false;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  if(eatTheRest)  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  stopAtNonOption  =  false;  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	if(eatTheRest)  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  stopAtNonOption  =  false;  }	  tokens.add(   "--   ");    tokens.add(value);    }    else    {    stopAtNonOption    =    false;    }    	non-compiled	[CE]  	69	None	replace
236	[BUG]  [BUGGY]  while(currentOption.hasMoreElements())  {  if(stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  stopAtNonOption  =  null;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  while(currentOption.hasMoreElements())  {  if(stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  stopAtNonOption  =  null;  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	while(currentOption.hasMoreElements())  {  if(stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  stopAtNonOption  =  null;  }	  While(currentOption.hasArgs())    {    if(stopAtNonOption)    {    tokens.add(   "--   ");    tokens.add(value);    }    else    {    stopAtNonOption    =    null;    }    	non-compiled	[CE]  	28	None	replace
237	[BUG]  [BUGGY]  eatTheRest  =  stopAtNonOption  ||  currentOption.hasValues();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  eatTheRest  =  stopAtNonOption  ||  currentOption.hasValues();  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	eatTheRest  =  stopAtNonOption  ||  currentOption.hasValues();	  eatTheRest    =    stopAtNonOption    ||    currentOption.hasArgs();    	non-compiled	[CE]  	39	None	replace
238	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  =  stopAtNonOption  =  stopAtN  [CE]  [FE]              AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  =  stopAtNonOption  =  stopAtN  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  =  stopAtNonOption  =  stopAtN	  if(stopAtNonOption.hasArg())    {    eatTheRest    =    stopAtNonOption.hasArg();    }    	non-compiled	[CE]  	17	None	replace
239	[BUG]  [BUGGY]  tokens.addAll(stopAtNonOption);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  tokens.addAll(stopAtNonOption);  [BUGGY]      tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	tokens.addAll(stopAtNonOption);	  tokens.clear();    	non-compiled	[CE]  	46	None	replace
240	[BUG]  [BUGGY]  if(eatTheRest)  {  options.add( "-- ");  tokens.add(value);  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  if(eatTheRest)  {  options.add( "-- ");  tokens.add(value);  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	if(eatTheRest)  {  options.add( "-- ");  tokens.add(value);  }	  options.add(   "--   ");    tokens.add(value);    	non-compiled	[CE]  	23	None	replace
241	[BUG]  [BUGGY]  if(eatTheRest)  {  options.add( "-- ");  tokens.add(value);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;      [BUGGY]  if(eatTheRest)  {  options.add( "-- ");  tokens.add(value);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	if(eatTheRest)  {  options.add( "-- ");  tokens.add(value);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  options.add(   "--   ");    tokens.add(value);    	non-compiled	[CE]  	23	None	replace
