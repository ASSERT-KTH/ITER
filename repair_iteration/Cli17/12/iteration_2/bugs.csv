bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(stopAtNonOption  ||  options.hasArg())  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));    [BUGGY]  if(stopAtNonOption  ||  options.hasArg())  {  [BUGGY]    {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	288	289	1	replace	if(stopAtNonOption  ||  options.hasArg())  {	  if(stopAtNonOption    ||    options.hasOption(ch))    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
2	[BUG]  [BUGGY]  if(!stopAtNonOption  &&  options.hasOption(ch))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));    [BUGGY]  if(!stopAtNonOption  &&  options.hasOption(ch))  {  [BUGGY]    {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	288	289	1	replace	if(!stopAtNonOption  &&  options.hasOption(ch))  {	  if(stopAtNonOption    ||    options.hasOption(ch))    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
3	[BUG]  [BUGGY]  if(stopAtNonOption  ||  options.getOption(ch))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));    [BUGGY]  if(stopAtNonOption  ||  options.getOption(ch))  {  [BUGGY]    {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	288	289	1	replace	if(stopAtNonOption  ||  options.getOption(ch))  {	  if(stopAtNonOption    ||    options.hasOption(ch))    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
4	[BUG]  [BUGGY]  Option  option  =  options.getOption(ch,  i);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));    [BUGGY]  Option  option  =  options.getOption(ch,  i);  [BUGGY]    if  (options.hasOption(ch))    {  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	288	289	1	replace	Option  option  =  options.getOption(ch,  i);	      Option    option    =    options.getOption(ch);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
5	[BUG]  [BUGGY]  Option  option  =  options.getOption(ch,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));    [BUGGY]  Option  option  =  options.getOption(ch,  stopAtNonOption);  [BUGGY]    if  (options.hasOption(ch))    {  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	288	289	1	replace	Option  option  =  options.getOption(ch,  stopAtNonOption);	      Option    option    =    options.getOption(ch);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
6	[BUG]  [BUGGY]  Option  option  =  options.getOption(ch,  token);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));    [BUGGY]  Option  option  =  options.getOption(ch,  token);  [BUGGY]    if  (options.hasOption(ch))    {  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	288	289	1	replace	Option  option  =  options.getOption(ch,  token);	      Option    option    =    options.getOption(ch);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
7	[BUG]  [BUGGY]  if(!stopAtNonOption  &&  options.hasArg())  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));    [BUGGY]  if(!stopAtNonOption  &&  options.hasArg())  {  [BUGGY]    {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	288	289	1	replace	if(!stopAtNonOption  &&  options.hasArg())  {	  if(!stopAtNonOption)    {    	non-compiled	[CE]  <identifier>  expected	18	None	replace
8	[BUG]  [BUGGY]  if(stopAtNonOption  &&  options.hasArg())  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));    [BUGGY]  if(stopAtNonOption  &&  options.hasArg())  {  [BUGGY]    {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	288	289	1	replace	if(stopAtNonOption  &&  options.hasArg())  {	  if(!stopAtNonOption)    {    	non-compiled	[CE]  <identifier>  expected	18	None	replace
9	[BUG]  [BUGGY]  if(stopAtNonOption  &&  options.getOption(ch)!=  null)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));    [BUGGY]  if(stopAtNonOption  &&  options.getOption(ch)!=  null)  {  [BUGGY]    {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	288	289	1	replace	if(stopAtNonOption  &&  options.getOption(ch)!=  null)  {	  if(!stopAtNonOption)    {    	non-compiled	[CE]  <identifier>  expected	18	None	replace
10	[BUG]  [BUGGY]  if(!stopAtNonOption  &&  options.getOption(ch)!=  null)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));    [BUGGY]  if(!stopAtNonOption  &&  options.getOption(ch)!=  null)  {  [BUGGY]    {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	288	289	1	replace	if(!stopAtNonOption  &&  options.getOption(ch)!=  null)  {	  if(!stopAtNonOption)    {    	non-compiled	[CE]  <identifier>  expected	18	None	replace
11	[BUG]  [BUGGY]  tokens.add( "- "  +  ch);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));    [BUGGY]  tokens.add( "- "  +  ch);  [BUGGY]    if  (options.hasOption(ch))    {  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	288	289	1	replace	tokens.add( "- "  +  ch);	      if(stopAtNonOption)    {    tokens.add(   "-   "    +    ch);    currentOption    =    options.getOption(ch);    if(stopAtNonOption.hasArg()    &&    (token.length()!=    (i    +    1)))    {    tokens.add(   "-   "    +    ch);    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
12	[BUG]  [BUGGY]  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));    [BUGGY]  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  [BUGGY]    if  (options.hasOption(ch))    {  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	288	289	1	replace	tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);	      if(stopAtNonOption)    {    tokens.add(   "-   "    +    ch);    currentOption    =    options.getOption(ch);    if(stopAtNonOption.hasArg()    &&    (token.length()!=    (i    +    1)))    {    tokens.add(   "-   "    +    ch);    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
13	[BUG]  [BUGGY]  options.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));    [BUGGY]  options.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  [BUGGY]    if  (options.hasOption(ch))    {  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	288	289	1	replace	options.add( "- "  +  ch);  currentOption  =  options.getOption(ch);	      if(stopAtNonOption)    {    tokens.add(   "-   "    +    ch);    currentOption    =    options.getOption(ch);    if(stopAtNonOption.hasArg()    &&    (token.length()!=    (i    +    1)))    {    tokens.add(   "-   "    +    ch);    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
14	[BUG]  [BUGGY]  tokens.add(ch);  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));    [BUGGY]  tokens.add(ch);  [BUGGY]    {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	288	289	1	replace	tokens.add(ch);	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
15	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));    [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  }  [BUGGY]    {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	288	289	1	replace	if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  }	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
16	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token.substring(i  +  1));  break;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));    [BUGGY]  if(stopAtNonOption)  {  tokens.add(token.substring(i  +  1));  break;  }  [BUGGY]    {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	288	289	1	replace	if(stopAtNonOption)  {  tokens.add(token.substring(i  +  1));  break;  }	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
17	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(ch);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));    [BUGGY]  if(stopAtNonOption)  {  tokens.add(ch);  }  [BUGGY]    {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	288	289	1	replace	if(stopAtNonOption)  {  tokens.add(ch);  }	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
18	[BUG]  [BUGGY]  options.add( "- "  +  ch);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));    [BUGGY]  options.add( "- "  +  ch);  [BUGGY]    if  (options.hasOption(ch))    {  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	288	289	1	replace	options.add( "- "  +  ch);	      if(stopAtNonOption)    {    Option    options    =    options.getOption(ch);    if(options.hasArg()    &&    (token.length()!=    (i    +    1)))    {    tokens.add(   "-   "    +    ch);    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
19	[BUG]  [BUGGY]  Option  options  =  options.getOption(i);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));    [BUGGY]  Option  options  =  options.getOption(i);  [BUGGY]    if  (options.hasOption(ch))    {  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	288	289	1	replace	Option  options  =  options.getOption(i);	      if(stopAtNonOption)    {    Option    options    =    options.getOption(ch);    if(options.hasArg()    &&    (token.length()!=    (i    +    1)))    {    tokens.add(   "-   "    +    ch);    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
20	[BUG]  [BUGGY]  if(stopAtNonOption  &&  options.hasArg()  &&  options.hasOption(ch))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));    [BUGGY]  if(stopAtNonOption  &&  options.hasArg()  &&  options.hasOption(ch))  {  [BUGGY]    {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	288	289	1	replace	if(stopAtNonOption  &&  options.hasArg()  &&  options.hasOption(ch))  {	  if    (options.hasArg()    &&    options.hasOption(ch))    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
21	[BUG]  [BUGGY]  if(stopAtNonOption  ||  options.hasArg()  ||  options.hasOption(ch))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));    [BUGGY]  if(stopAtNonOption  ||  options.hasArg()  ||  options.hasOption(ch))  {  [BUGGY]    {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	288	289	1	replace	if(stopAtNonOption  ||  options.hasArg()  ||  options.hasOption(ch))  {	  if    (options.hasArg()    &&    options.hasOption(ch))    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
22	[BUG]  [BUGGY]  if  (options.hasArg()  &&  options.getOption(ch)!=  null)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));    [BUGGY]  if  (options.hasArg()  &&  options.getOption(ch)!=  null)  {  [BUGGY]    {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	288	289	1	replace	if  (options.hasArg()  &&  options.getOption(ch)!=  null)  {	  if    (options.hasArg()    &&    options.hasOption(ch))    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
23	[BUG]  [BUGGY]  Option  options  =  currentOption.getOption(ch);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));    [BUGGY]  Option  options  =  currentOption.getOption(ch);  [BUGGY]    if  (options.hasOption(ch))    {  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	288	289	1	replace	Option  options  =  currentOption.getOption(ch);	      Option    options    =    options.getOption(ch);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
24	[BUG]  [BUGGY]  Option  options  =  options.getOption(ch,  i);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));    [BUGGY]  Option  options  =  options.getOption(ch,  i);  [BUGGY]    if  (options.hasOption(ch))    {  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	288	289	1	replace	Option  options  =  options.getOption(ch,  i);	      Option    options    =    options.getOption(ch);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
25	[BUG]  [BUGGY]  Option  options  =  options.getOption(ch,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));    [BUGGY]  Option  options  =  options.getOption(ch,  stopAtNonOption);  [BUGGY]    if  (options.hasOption(ch))    {  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	288	289	1	replace	Option  options  =  options.getOption(ch,  stopAtNonOption);	      Option    options    =    options.getOption(ch);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
26	[BUG]  [BUGGY]  Options  options  =  currentOption.getOption(ch);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));    [BUGGY]  Options  options  =  currentOption.getOption(ch);  [BUGGY]    if  (options.hasOption(ch))    {  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	288	289	1	replace	Options  options  =  currentOption.getOption(ch);	      Options    options    =    options.getOption(ch);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
27	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(ch);  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));    [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(ch);  }  [BUGGY]    if  (options.hasOption(ch))    {  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	288	289	1	replace	if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(ch);  }	      Option    currentOption    =    options.getOption(ch);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
28	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(ch,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));    [BUGGY]  Option  currentOption  =  options.getOption(ch,  stopAtNonOption);  [BUGGY]    if  (options.hasOption(ch))    {  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	288	289	1	replace	Option  currentOption  =  options.getOption(ch,  stopAtNonOption);	      Option    currentOption    =    options.getOption(ch);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
29	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(ch,  i);  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));    [BUGGY]  Option  currentOption  =  options.getOption(ch,  i);  [BUGGY]    if  (options.hasOption(ch))    {  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	288	289	1	replace	Option  currentOption  =  options.getOption(ch,  i);	      Option    currentOption    =    options.getOption(ch);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
30	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if(currentOption.hasArg()  &&  (token.length()!=  (i  +  1)))  {  tokens.add(token.substring  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));    [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if(currentOption.hasArg()  &&  (token.length()!=  (i  +  1)))  {  tokens.add(token.substring  [BUGGY]    if  (options.hasOption(ch))    {  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	288	289	1	replace	if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if(currentOption.hasArg()  &&  (token.length()!=  (i  +  1)))  {  tokens.add(token.substring	      if(stopAtNonOption)    {    tokens.add(   "-   "    +    ch);    currentOption    =    options.getOption(ch);    if(stopAtNonOption.hasArg()    &&    (token.length()!=    (i    +    1)))    {    tokens.add(token.substring    	non-compiled	[CE]  <identifier>  expected	9	None	replace
31	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if(options.hasArg()  &&  (token.length()!=  (i  +  1)))  {  tokens.add(token.substring  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));    [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if(options.hasArg()  &&  (token.length()!=  (i  +  1)))  {  tokens.add(token.substring  [BUGGY]    if  (options.hasOption(ch))    {  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	288	289	1	replace	if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if(options.hasArg()  &&  (token.length()!=  (i  +  1)))  {  tokens.add(token.substring	      if(stopAtNonOption)    {    tokens.add(   "-   "    +    ch);    currentOption    =    options.getOption(ch);    if(stopAtNonOption.hasArg()    &&    (token.length()!=    (i    +    1)))    {    tokens.add(token.substring    	non-compiled	[CE]  <identifier>  expected	9	None	replace
32	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));    [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  }  [BUGGY]    if  (options.hasOption(ch))    {  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	288	289	1	replace	if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  }	      if(stopAtNonOption)    {    tokens.add(   "-   "    +    ch);    currentOption    =    options.getOption(ch);    if(stopAtNonOption.hasArg()    &&    (token.length()!=    (i    +    1)))    {    tokens.add(token.substring    	non-compiled	[CE]  <identifier>  expected	9	None	replace
33	[BUG]  [BUGGY]  AssertionFailedToken  token  =(AssertionFailedToken)currentOption.clone();  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));    [BUGGY]  AssertionFailedToken  token  =(AssertionFailedToken)currentOption.clone();  [BUGGY]    if  (options.hasOption(ch))    {  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	288	289	1	replace	AssertionFailedToken  token  =(AssertionFailedToken)currentOption.clone();	      if(stopAtNonOption)    {    for(int    i    =    0;    i    <    token.length();    i++)    {    String    ch    =    String.valueOf(token.charAt(i));    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
34	[BUG]  [BUGGY]  AssertionFailedToken  token  =(AssertionFailedToken)tokens.get(i);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));    [BUGGY]  AssertionFailedToken  token  =(AssertionFailedToken)tokens.get(i);  [BUGGY]    if  (options.hasOption(ch))    {  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	288	289	1	replace	AssertionFailedToken  token  =(AssertionFailedToken)tokens.get(i);	      if(stopAtNonOption)    {    for(int    i    =    0;    i    <    token.length();    i++)    {    String    ch    =    String.valueOf(token.charAt(i));    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
35	[BUG]  [BUGGY]  if(stopAtNonOption  &&  currentOption.hasArg())  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));    [BUGGY]  if(stopAtNonOption  &&  currentOption.hasArg())  {  [BUGGY]    {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	288	289	1	replace	if(stopAtNonOption  &&  currentOption.hasArg())  {	  if(stopAtNonOption)    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
36	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Options  options  =  options.getOption(ch);  if(options!=  null)  {  tokens.add( "- "  +  ch);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));    [BUGGY]  if(stopAtNonOption)  {  Options  options  =  options.getOption(ch);  if(options!=  null)  {  tokens.add( "- "  +  ch);  }  [BUGGY]    if  (options.hasOption(ch))    {  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	288	289	1	replace	if(stopAtNonOption)  {  Options  options  =  options.getOption(ch);  if(options!=  null)  {  tokens.add( "- "  +  ch);  }	      if(stopAtNonOption)    {    Option    options    =    options.getOption(ch);    if(options!=    null)    {    tokens.add(   "-   "    +    ch);    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
37	[BUG]  [BUGGY]  AssertionFailedToken  eatTheRest  =  stopAtNonOption;  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));    [BUGGY]  AssertionFailedToken  eatTheRest  =  stopAtNonOption;  [BUGGY]    if  (options.hasOption(ch))    {  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	288	289	1	replace	AssertionFailedToken  eatTheRest  =  stopAtNonOption;	      if(stopAtNonOption)    {    for(int    i    =    0;    i    <    token.length();    i++)    {    String    ch    =    String.valueOf(token.charAt(i));    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
38	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(ch);  break;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));    [BUGGY]  if(stopAtNonOption)  {  tokens.add(ch);  break;  }  [BUGGY]    {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	288	289	1	replace	if(stopAtNonOption)  {  tokens.add(ch);  break;  }	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
39	[BUG]  [BUGGY]  Integer  currentOption  =  options.getOption(ch);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));    [BUGGY]  Integer  currentOption  =  options.getOption(ch);  [BUGGY]    if  (options.hasOption(ch))    {  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	288	289	1	replace	Integer  currentOption  =  options.getOption(ch);	      if(stopAtNonOption)    {    for(int    i    =    1;    i    <    token.length();    i++)    {    String    ch    =    String.valueOf(token.charAt(i));    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
40	[BUG]  [BUGGY]  Option  option  =  options.getOption(ch  -  1);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));    [BUGGY]  Option  option  =  options.getOption(ch  -  1);  [BUGGY]    if  (options.hasOption(ch))    {  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	288	289	1	replace	Option  option  =  options.getOption(ch  -  1);	      Option    option    =    options.getOption(ch);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
41	[BUG]  [BUGGY]  if(stopAtNonOption  ||  options.getOption(ch)!=  null)  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));    [BUGGY]  if(stopAtNonOption  ||  options.getOption(ch)!=  null)  {  [BUGGY]    {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	288	289	1	replace	if(stopAtNonOption  ||  options.getOption(ch)!=  null)  {	  if(stopAtNonOption    ||    options.hasOption(ch))    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
42	[BUG]  [BUGGY]  if(stopAtNonOption  &&  options.getOption(ch)  ==  null)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));    [BUGGY]  if(stopAtNonOption  &&  options.getOption(ch)  ==  null)  {  [BUGGY]    {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	288	289	1	replace	if(stopAtNonOption  &&  options.getOption(ch)  ==  null)  {	  if(stopAtNonOption    &&    options.hasOption(ch))    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
43	[BUG]  [BUGGY]  Options  options  =  options.getOption(ch,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));    [BUGGY]  Options  options  =  options.getOption(ch,  stopAtNonOption);  [BUGGY]    if  (options.hasOption(ch))    {  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	288	289	1	replace	Options  options  =  options.getOption(ch,  stopAtNonOption);	      Options    options    =    options.getOption(ch);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
44	[BUG]  [BUGGY]  tokens.add( "- "  +  i);  currentOption  =  options.getOption(ch);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));    [BUGGY]  tokens.add( "- "  +  i);  currentOption  =  options.getOption(ch);  [BUGGY]    if  (options.hasOption(ch))    {  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	288	289	1	replace	tokens.add( "- "  +  i);  currentOption  =  options.getOption(ch);	      if(stopAtNonOption)    {    tokens.add(   "-   "    +    ch);    currentOption    =    options.getOption(ch);    if(stopAtNonOption)    {    tokens.add(   "-   "    +    ch);    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
45	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(ch  -  1);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));    [BUGGY]  Option  currentOption  =  options.getOption(ch  -  1);  [BUGGY]    if  (options.hasOption(ch))    {  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	288	289	1	replace	Option  currentOption  =  options.getOption(ch  -  1);	      Option    currentOption    =    options.getOption(ch);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
46	[BUG]  [BUGGY]  if(stopAtNonOption  &&  options.hasArg(ch))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));    [BUGGY]  if(stopAtNonOption  &&  options.hasArg(ch))  {  [BUGGY]    {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	288	289	1	replace	if(stopAtNonOption  &&  options.hasArg(ch))  {	  if(stopAtNonOption    &&    options.hasOption(ch))    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
47	[BUG]  [BUGGY]  if(stopAtNonOption  ||!token.isEmpty())  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));    [BUGGY]  if(stopAtNonOption  ||!token.isEmpty())  {  [BUGGY]    {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	288	289	1	replace	if(stopAtNonOption  ||!token.isEmpty())  {	  if(stopAtNonOption)    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
48	[BUG]  [BUGGY]  if(stopAtNonOption  &&!token.equals(ch))  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));    [BUGGY]  if(stopAtNonOption  &&!token.equals(ch))  {  [BUGGY]    {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	288	289	1	replace	if(stopAtNonOption  &&!token.equals(ch))  {	  if(!stopAtNonOption)    {    	non-compiled	[CE]  <identifier>  expected	18	None	replace
49	[BUG]  [BUGGY]  if(stopAtNonOption  ||!token.equals(ch))  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));    [BUGGY]  if(stopAtNonOption  ||!token.equals(ch))  {  [BUGGY]    {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	288	289	1	replace	if(stopAtNonOption  ||!token.equals(ch))  {	  if(!stopAtNonOption)    {    	non-compiled	[CE]  <identifier>  expected	18	None	replace
50	[BUG]  [BUGGY]  AssertionFailedToName(token,  stopAtNonOption)  {  for(int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));    [BUGGY]  AssertionFailedToName(token,  stopAtNonOption)  {  for(int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  }  [BUGGY]    if  (options.hasOption(ch))    {  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	288	289	1	replace	AssertionFailedToName(token,  stopAtNonOption)  {  for(int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  }	      if(stopAtNonOption)    {    for(int    i    =    1;    i    <    token.length();    i++)    {    String    ch    =    String.valueOf(token.charAt(i));    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
51	[BUG]  [BUGGY]  AssertionFailedToName(token,  stopAtNonOption)  {  for(int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i  +  1));  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));    [BUGGY]  AssertionFailedToName(token,  stopAtNonOption)  {  for(int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i  +  1));  }  [BUGGY]    if  (options.hasOption(ch))    {  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	288	289	1	replace	AssertionFailedToName(token,  stopAtNonOption)  {  for(int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i  +  1));  }	      if(stopAtNonOption)    {    for(int    i    =    1;    i    <    token.length();    i++)    {    String    ch    =    String.valueOf(token.charAt(i));    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
52	[BUG]  [BUGGY]  AssertionFailedToName(token,  stopAtNonOption)  {  for(int  i  =  1;  i  <  token.length();  i++)  {  ch  =  String.valueOf(token.charAt(i));  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));    [BUGGY]  AssertionFailedToName(token,  stopAtNonOption)  {  for(int  i  =  1;  i  <  token.length();  i++)  {  ch  =  String.valueOf(token.charAt(i));  }  [BUGGY]    if  (options.hasOption(ch))    {  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	288	289	1	replace	AssertionFailedToName(token,  stopAtNonOption)  {  for(int  i  =  1;  i  <  token.length();  i++)  {  ch  =  String.valueOf(token.charAt(i));  }	      if(stopAtNonOption)    {    for(int    i    =    1;    i    <    token.length();    i++)    {    String    ch    =    String.valueOf(token.charAt(i));    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
53	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if(!eatTheRest)  {  tokens.add( "- "  +  ch);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));    [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if(!eatTheRest)  {  tokens.add( "- "  +  ch);  }  [BUGGY]    if  (options.hasOption(ch))    {  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	288	289	1	replace	if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if(!eatTheRest)  {  tokens.add( "- "  +  ch);  }	      if(stopAtNonOption)    {    tokens.add(   "-   "    +    ch);    currentOption    =    options.getOption(ch);    if(stopAtNonOption.hasArg()    &&    (token.length()!=    (i    +    1)))    {    tokens.add(token.substring    	non-compiled	[CE]  <identifier>  expected	9	None	replace
54	[BUG]  [BUGGY]  AssertionFailedToName(token,  stopAtNonOption)  {  for(int  i  =  0;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));    [BUGGY]  AssertionFailedToName(token,  stopAtNonOption)  {  for(int  i  =  0;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  }  [BUGGY]    if  (options.hasOption(ch))    {  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	288	289	1	replace	AssertionFailedToName(token,  stopAtNonOption)  {  for(int  i  =  0;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  }	      if(stopAtNonOption)    {    for(int    i    =    0;    i    <    token.length();    i++)    {    String    ch    =    String.valueOf(token.charAt(i));    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
55	[BUG]  [BUGGY]  AssertionFailedToName(token,  stopAtNonOption)  {  for(int  i  =  0;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i  +  1));  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));    [BUGGY]  AssertionFailedToName(token,  stopAtNonOption)  {  for(int  i  =  0;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i  +  1));  }  [BUGGY]    if  (options.hasOption(ch))    {  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	288	289	1	replace	AssertionFailedToName(token,  stopAtNonOption)  {  for(int  i  =  0;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i  +  1));  }	      if(stopAtNonOption)    {    for(int    i    =    0;    i    <    token.length();    i++)    {    String    ch    =    String.valueOf(token.charAt(i));    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
