bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- "  +  i  +  1);  currentOption  =  options.getOption(ch);  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }      [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- "  +  i  +  1);  currentOption  =  options.getOption(ch);  }  [BUGGY]      else  if  (stopAtNonOption)    {  {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	if(stopAtNonOption)  {  tokens.add( "- "  +  i  +  1);  currentOption  =  options.getOption(ch);  }	  tokens.add(   "-   "    +    i    +    1);    currentOption    =    options.getOption(ch);    	non-compiled	[CE]  	24	None	replace
2	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  currentOption!=  null)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }      [BUGGY]  else  if(stopAtNonOption  &&  currentOption!=  null)  {  [BUGGY]      {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	else  if(stopAtNonOption  &&  currentOption!=  null)  {	  else    if(!stopAtNonOption    &&    currentOption!=    null)    {    	non-compiled	[CE]  	2	None	replace
3	[BUG]  [BUGGY]  else  if(!stopAtNonOption  &&  currentOption  ==  null)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }      [BUGGY]  else  if(!stopAtNonOption  &&  currentOption  ==  null)  {  [BUGGY]      {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	else  if(!stopAtNonOption  &&  currentOption  ==  null)  {	  else    if(!stopAtNonOption    &&    currentOption!=    null)    {    	non-compiled	[CE]  	2	None	replace
4	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  currentOption  ==  null)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }      [BUGGY]  else  if(stopAtNonOption  &&  currentOption  ==  null)  {  [BUGGY]      {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	else  if(stopAtNonOption  &&  currentOption  ==  null)  {	  else    if(!stopAtNonOption    &&    currentOption!=    null)    {    	non-compiled	[CE]  	2	None	replace
5	[BUG]  [BUGGY]  options.add( "- "  +  ch);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }      [BUGGY]  options.add( "- "  +  ch);  [BUGGY]      {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	options.add( "- "  +  ch);	  if(stopAtNonOption)    {    tokens.add(   "-   "    +    ch);    }    else    {    tokens.add(   "-   "    +    ch);    }    	non-compiled	[CE]  	32	None	replace
6	[BUG]  [BUGGY]  else  if(haltAtNonOption  &&  currentOption.hasArg())  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }      [BUGGY]  else  if(haltAtNonOption  &&  currentOption.hasArg())  {  [BUGGY]      {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	else  if(haltAtNonOption  &&  currentOption.hasArg())  {	  else    if(haltAtNonOption)    {    	non-compiled	[CE]  	25	None	replace
7	[BUG]  [BUGGY]  tokens.add( "- "  +  i);  break;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }      [BUGGY]  tokens.add( "- "  +  i);  break;  [BUGGY]      else  if  (stopAtNonOption)    {  {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	tokens.add( "- "  +  i);  break;	  tokens.add(   "-   "    +    ch);    break;    	non-compiled	[CE]  	30	None	replace
8	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  currentOption.hasArg()  ||  token.length()!=  (i  +  1))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }      [BUGGY]  else  if(stopAtNonOption  &&  currentOption.hasArg()  ||  token.length()!=  (i  +  1))  {  [BUGGY]      {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	else  if(stopAtNonOption  &&  currentOption.hasArg()  ||  token.length()!=  (i  +  1))  {	  else    if(stopAtNonOption    &&    currentOption.hasArg()    &&    token.length()!=    (i    +    1))    {    	non-compiled	[CE]  	15	None	replace
9	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  currentOption.hasArg()  &&  token.length()  >=  (i  +  1))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }      [BUGGY]  else  if(stopAtNonOption  &&  currentOption.hasArg()  &&  token.length()  >=  (i  +  1))  {  [BUGGY]      {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	else  if(stopAtNonOption  &&  currentOption.hasArg()  &&  token.length()  >=  (i  +  1))  {	  else    if(stopAtNonOption    &&    currentOption.hasArg()    &&    token.length()!=    (i    +    1))    {    	non-compiled	[CE]  	15	None	replace
10	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  token.length()  ==  0)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }      [BUGGY]  else  if(stopAtNonOption  ||  token.length()  ==  0)  {  [BUGGY]      {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	else  if(stopAtNonOption  ||  token.length()  ==  0)  {	  else    if(stopAtNonOption    ||    token.length()    >    0)    {    	non-compiled	[CE]  	22	None	replace
11	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  token.length()!=  0)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }      [BUGGY]  else  if(stopAtNonOption  ||  token.length()!=  0)  {  [BUGGY]      {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	else  if(stopAtNonOption  ||  token.length()!=  0)  {	  else    if(stopAtNonOption    ||    token.length()    >    0)    {    	non-compiled	[CE]  	22	None	replace
12	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  token.length()  >=  0)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }      [BUGGY]  else  if(stopAtNonOption  ||  token.length()  >=  0)  {  [BUGGY]      {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	else  if(stopAtNonOption  ||  token.length()  >=  0)  {	  else    if(stopAtNonOption    ||    token.length()    >    0)    {    	non-compiled	[CE]  	22	None	replace
13	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  token.length()  ==  (i  +  1))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }      [BUGGY]  else  if(stopAtNonOption  ||  token.length()  ==  (i  +  1))  {  [BUGGY]      {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	else  if(stopAtNonOption  ||  token.length()  ==  (i  +  1))  {	  else    if(stopAtNonOption    &&    token.length()    ==    (i    +    1))    {    	non-compiled	[CE]  	9	None	replace
14	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  currentOption.hasArg()  ||  token.length()  ==  (i  +  1))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }      [BUGGY]  else  if(stopAtNonOption  &&  currentOption.hasArg()  ||  token.length()  ==  (i  +  1))  {  [BUGGY]      {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	else  if(stopAtNonOption  &&  currentOption.hasArg()  ||  token.length()  ==  (i  +  1))  {	  else    if(stopAtNonOption    &&    currentOption.hasArg()    &&    token.length()    ==    (i    +    1))    {    	non-compiled	[CE]  	14	None	replace
15	[BUG]  [BUGGY]  tokens.add( "-n "  +  i);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }      [BUGGY]  tokens.add( "-n "  +  i);  [BUGGY]      else  if  (stopAtNonOption)    {  {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	tokens.add( "-n "  +  i);	  tokens.add(   "-n   "    +    ch);    	non-compiled	[CE]  	16	None	replace
16	[BUG]  [BUGGY]  else  if(!stopAtNonOption  &&  currentOption.hasArg()  &&  token.length()  ==  (i  +  1))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }      [BUGGY]  else  if(!stopAtNonOption  &&  currentOption.hasArg()  &&  token.length()  ==  (i  +  1))  {  [BUGGY]      {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	else  if(!stopAtNonOption  &&  currentOption.hasArg()  &&  token.length()  ==  (i  +  1))  {	  else    if(!stopAtNonOption    &&    currentOption.hasArg())    {    	non-compiled	[CE]  	1	None	replace
17	[BUG]  [BUGGY]  tokens.add( "- ");  [CE]  [FE]            AssertionFailedError      [CONTEXT]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }      [BUGGY]  tokens.add( "- ");  [BUGGY]      else  if  (stopAtNonOption)    {  {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	tokens.add( "- ");	  tokens.add(')');    	non-compiled	[CE]  	6	None	replace
18	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  currentOption.length()  ==  0)  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }      [BUGGY]  else  if(stopAtNonOption  &&  currentOption.length()  ==  0)  {  [BUGGY]      {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	else  if(stopAtNonOption  &&  currentOption.length()  ==  0)  {	  else    if(stopAtNonOption    &&    token.length()    ==    0)    {    	non-compiled	[CE]  	20	None	replace
19	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  token.length()  ==  1)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }      [BUGGY]  else  if(stopAtNonOption  &&  token.length()  ==  1)  {  [BUGGY]      {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	else  if(stopAtNonOption  &&  token.length()  ==  1)  {	  else    if(stopAtNonOption    &&    token.length()    ==    0)    {    	non-compiled	[CE]  ';'  expected	20	None	replace
20	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  currentOption.hasArg()  &&(token.length()  ==  (i  +  1)||  token.charAt(i  +  1)!=  ')')  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }      [BUGGY]  else  if(stopAtNonOption  &&  currentOption.hasArg()  &&(token.length()  ==  (i  +  1)||  token.charAt(i  +  1)!=  ')')  {  [BUGGY]      {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	else  if(stopAtNonOption  &&  currentOption.hasArg()  &&(token.length()  ==  (i  +  1)||  token.charAt(i  +  1)!=  ')')  {	  else    if(stopAtNonOption    &&    currentOption.hasArg()    &&(token.length()    ==    (i    +    1)))    {    	non-compiled	[CE]  	39	None	replace
21	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  currentOption.hasArg()  &&(token.charAt(i  +  1)  ==  token.length()))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }      [BUGGY]  else  if(stopAtNonOption  &&  currentOption.hasArg()  &&(token.charAt(i  +  1)  ==  token.length()))  {  [BUGGY]      {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	else  if(stopAtNonOption  &&  currentOption.hasArg()  &&(token.charAt(i  +  1)  ==  token.length()))  {	  else    if(stopAtNonOption    &&    currentOption.hasArg()    &&(token.length()    ==    (i    +    1)))    {    	non-compiled	[CE]  	39	None	replace
22	[BUG]  [BUGGY]  if(stopAtNonOption)  {  kens.add( "- "  +  ch);  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }      [BUGGY]  if(stopAtNonOption)  {  kens.add( "- "  +  ch);  }  [BUGGY]      else  if  (stopAtNonOption)    {  {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	if(stopAtNonOption)  {  kens.add( "- "  +  ch);  }	  kens.add(   "-   "    +    ch);    	non-compiled	[CE]  	27	None	replace
23	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  options.getOption(i)!=  null)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }      [BUGGY]  else  if(stopAtNonOption  ||  options.getOption(i)!=  null)  {  [BUGGY]      {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	else  if(stopAtNonOption  ||  options.getOption(i)!=  null)  {	  else    if(stopAtNonOption    &&    options.getOption(i)!=    null)    {    	non-compiled	[CE]  	19	None	replace
24	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  options.getOption(ch)!=  null  &&  token.length()  ==  0)  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }      [BUGGY]  else  if(stopAtNonOption  &&  options.getOption(ch)!=  null  &&  token.length()  ==  0)  {  [BUGGY]      {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	else  if(stopAtNonOption  &&  options.getOption(ch)!=  null  &&  token.length()  ==  0)  {	  else    if(stopAtNonOption    &&    options.getOption(ch)!=    null    &&    token.length()    >    0)    {    	non-compiled	[CE]  	34	None	replace
25	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  options.getOption(ch)!=  null  ||  token.length()  >  0)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }      [BUGGY]  else  if(stopAtNonOption  &&  options.getOption(ch)!=  null  ||  token.length()  >  0)  {  [BUGGY]      {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	else  if(stopAtNonOption  &&  options.getOption(ch)!=  null  ||  token.length()  >  0)  {	  else    if(stopAtNonOption    &&    options.getOption(ch)!=    null    &&    token.length()    >    0)    {    	non-compiled	[CE]  	34	None	replace
26	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  options.getOption(ch)!=  null  &&  token.length()  >=  0)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }      [BUGGY]  else  if(stopAtNonOption  &&  options.getOption(ch)!=  null  &&  token.length()  >=  0)  {  [BUGGY]      {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	else  if(stopAtNonOption  &&  options.getOption(ch)!=  null  &&  token.length()  >=  0)  {	  else    if(stopAtNonOption    &&    options.getOption(ch)!=    null    &&    token.length()    >    0)    {    	non-compiled	[CE]  	34	None	replace
27	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  currentOption.length()!=  0)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }      [BUGGY]  else  if(stopAtNonOption  &&  currentOption.length()!=  0)  {  [BUGGY]      {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	else  if(stopAtNonOption  &&  currentOption.length()!=  0)  {	  else    if(stopAtNonOption    &&    token.length()!=    0)    {    	non-compiled	[CE]  	21	None	replace
28	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  currentOption.hasArg()  &&(token.length()  >=  (i  +  1)))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }      [BUGGY]  else  if(stopAtNonOption  &&  currentOption.hasArg()  &&(token.length()  >=  (i  +  1)))  {  [BUGGY]      {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	else  if(stopAtNonOption  &&  currentOption.hasArg()  &&(token.length()  >=  (i  +  1)))  {	  else    if(stopAtNonOption    &&    currentOption.hasArg()    &&(token.length()!=    (i    +    1)))    {    	non-compiled	[CE]  	38	None	replace
29	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  token.hasArg()  &&(token.length()!=  (i  +  1)))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }      [BUGGY]  else  if(stopAtNonOption  &&  token.hasArg()  &&(token.length()!=  (i  +  1)))  {  [BUGGY]      {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	else  if(stopAtNonOption  &&  token.hasArg()  &&(token.length()!=  (i  +  1)))  {	  else    if(stopAtNonOption    &&    currentOption.hasArg()    &&(token.length()!=    (i    +    1)))    {    	non-compiled	[CE]  	38	None	replace
30	[BUG]  [BUGGY]  AssertionFailedError.show(token,  eatTheRest);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }      [BUGGY]  AssertionFailedError.show(token,  eatTheRest);  [BUGGY]      else  if  (stopAtNonOption)    {  {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	AssertionFailedError.show(token,  eatTheRest);	  AssertionFailedError.show(token);    	non-compiled	[CE]  	43	None	replace
31	[BUG]  [BUGGY]  AssertionFailedError.show(token,  i);  [CE]  'else'  without  'if'  [FE]              AssertionFailedError      [CONTEXT]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }      [BUGGY]  AssertionFailedError.show(token,  i);  [BUGGY]      else  if  (stopAtNonOption)    {  {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	AssertionFailedError.show(token,  i);	  AssertionFailedError.show(token);    	non-compiled	[CE]  'else'  without  'if'	43	None	replace
32	[BUG]  [BUGGY]  AssertionFailedError.show(token,  i  +  1);  [CE]  'else'  without  'if'  [FE]                AssertionFailedError      [CONTEXT]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }      [BUGGY]  AssertionFailedError.show(token,  i  +  1);  [BUGGY]      else  if  (stopAtNonOption)    {  {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	AssertionFailedError.show(token,  i  +  1);	  AssertionFailedError.show(token);    	non-compiled	[CE]  'else'  without  'if'	43	None	replace
33	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  token.charAt(i  +  1)  ==  ')')  {  [CE]  'else'  without  'if'  [FE]              AssertionFailedError      [CONTEXT]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }      [BUGGY]  else  if(stopAtNonOption  &&  token.charAt(i  +  1)  ==  ')')  {  [BUGGY]      {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	else  if(stopAtNonOption  &&  token.charAt(i  +  1)  ==  ')')  {	  else    if(stopAtNonOption    &&    token.charAt(i    +    1)!=    ')')    {    	non-compiled	[CE]  'else'  without  'if'	42	None	replace
34	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  token.charAt(0)!=  ')')  {  [CE]  'else'  without  'if'  [FE]                AssertionFailedError      [CONTEXT]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }      [BUGGY]  else  if(stopAtNonOption  &&  token.charAt(0)!=  ')')  {  [BUGGY]      {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	else  if(stopAtNonOption  &&  token.charAt(0)!=  ')')  {	  else    if(stopAtNonOption    &&    token.charAt(i    +    1)!=    ')')    {    	non-compiled	[CE]  'else'  without  'if'	42	None	replace
35	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  token.charAt(i  +  1)!=  '-')  {  [CE]  'else'  without  'if'  [FE]                  AssertionFailedError      [CONTEXT]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }      [BUGGY]  else  if(stopAtNonOption  &&  token.charAt(i  +  1)!=  '-')  {  [BUGGY]      {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	else  if(stopAtNonOption  &&  token.charAt(i  +  1)!=  '-')  {	  else    if(stopAtNonOption    &&    token.charAt(i    +    1)!=    ')')    {    	non-compiled	[CE]  'else'  without  'if'	42	None	replace
36	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- "  +  i);  currentOption  =  options.getOption(i);  }  [CE]  'else'  without  'if'  [FE]                  AssertionFailedError      [CONTEXT]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }      [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- "  +  i);  currentOption  =  options.getOption(i);  }  [BUGGY]      else  if  (stopAtNonOption)    {  {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	if(stopAtNonOption)  {  tokens.add( "- "  +  i);  currentOption  =  options.getOption(i);  }	  tokens.add(   "-   "    +    i);    currentOption    =    options.getOption(i);    	non-compiled	[CE]  'else'  without  'if'	7	None	replace
37	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  currentOption.length()  >=  0)  {  [CE]  'else'  without  'if'  [FE]            AssertionFailedError      [CONTEXT]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }      [BUGGY]  else  if(stopAtNonOption  &&  currentOption.length()  >=  0)  {  [BUGGY]      {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	else  if(stopAtNonOption  &&  currentOption.length()  >=  0)  {	  else    if(stopAtNonOption    &&    token.length()    >=    0)    {    	non-compiled	[CE]  'else'  without  'if'	33	None	replace
38	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(ch);  }  [CE]  'else'  without  'if'  [FE]                    AssertionFailedError      [CONTEXT]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }      [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(ch);  }  [BUGGY]      else  if  (stopAtNonOption)    {  {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(ch);  }	  Option    currentOption    =    options.getOption(ch);    	non-compiled	[CE]  'else'  without  'if'	26	None	replace
39	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(ch);  }  else  {  tokens.add( "- "  +  ch);  }  [CE]  'else'  without  'if'  [FE]                      AssertionFailedError      [CONTEXT]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }      [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(ch);  }  else  {  tokens.add( "- "  +  ch);  }  [BUGGY]      else  if  (stopAtNonOption)    {  {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(ch);  }  else  {  tokens.add( "- "  +  ch);  }	  Option    currentOption    =    options.getOption(ch);    	non-compiled	[CE]  'else'  without  'if'	26	None	replace
40	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(ch);  }  else  {  tokens.add( "- "  +  i);  }  [CE]  'else'  without  'if'  [FE]                        AssertionFailedError      [CONTEXT]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }      [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(ch);  }  else  {  tokens.add( "- "  +  i);  }  [BUGGY]      else  if  (stopAtNonOption)    {  {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(ch);  }  else  {  tokens.add( "- "  +  i);  }	  Option    currentOption    =    options.getOption(ch);    	non-compiled	[CE]  'else'  without  'if'	26	None	replace
41	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  options.getOption(ch)  ==  null)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }      [BUGGY]  else  if(stopAtNonOption  ||  options.getOption(ch)  ==  null)  {  [BUGGY]      {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	else  if(stopAtNonOption  ||  options.getOption(ch)  ==  null)  {	  else    if(stopAtNonOption    &&    options.getOption(ch)    ==    null)    {    	non-compiled	[CE]  ';'  expected	17	None	replace
42	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  options.getOption(i)  ==  null)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }      [BUGGY]  else  if(stopAtNonOption  &&  options.getOption(i)  ==  null)  {  [BUGGY]      {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	else  if(stopAtNonOption  &&  options.getOption(i)  ==  null)  {	  else    if(stopAtNonOption    &&    options.getOption(ch)    ==    null)    {    	non-compiled	[CE]  ';'  expected	17	None	replace
43	[BUG]  [BUGGY]  tokens.add( "- "  +  i  +  1);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }      [BUGGY]  tokens.add( "- "  +  i  +  1);  [BUGGY]      else  if  (stopAtNonOption)    {  {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	tokens.add( "- "  +  i  +  1);	  tokens.add(   "-   "    +    i);    	non-compiled	[CE]  ';'  expected	5	None	replace
44	[BUG]  [BUGGY]  tokens.add( "-n "  +  i);  currentOption  =  options.getOption(ch);  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }      [BUGGY]  tokens.add( "-n "  +  i);  currentOption  =  options.getOption(ch);  [BUGGY]      else  if  (stopAtNonOption)    {  {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	tokens.add( "-n "  +  i);  currentOption  =  options.getOption(ch);	  if(stopAtNonOption)    {    tokens.add(   "-   "    +    i);    currentOption    =    options.getOption(ch);    }    	non-compiled	[CE]  ';'  expected	3	None	replace
45	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  options.getOption(ch)  ==  null  &&  currentOption.hasArg())  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }      [BUGGY]  else  if(stopAtNonOption  &&  options.getOption(ch)  ==  null  &&  currentOption.hasArg())  {  [BUGGY]      {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	else  if(stopAtNonOption  &&  options.getOption(ch)  ==  null  &&  currentOption.hasArg())  {	  else    if(stopAtNonOption    &&    options.getOption(ch)!=    null    &&    currentOption.hasArg())    {    	non-compiled	[CE]  ';'  expected	35	None	replace
46	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  options.getOption(ch)!=  null  ||  currentOption.hasArg())  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }      [BUGGY]  else  if(stopAtNonOption  &&  options.getOption(ch)!=  null  ||  currentOption.hasArg())  {  [BUGGY]      {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	else  if(stopAtNonOption  &&  options.getOption(ch)!=  null  ||  currentOption.hasArg())  {	  else    if(stopAtNonOption    &&    options.getOption(ch)!=    null    &&    currentOption.hasArg())    {    	non-compiled	[CE]  ';'  expected	35	None	replace
47	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  options.getOption(ch)!=  null  &&  currentOption.hasArg())  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }      [BUGGY]  else  if(stopAtNonOption  ||  options.getOption(ch)!=  null  &&  currentOption.hasArg())  {  [BUGGY]      {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	else  if(stopAtNonOption  ||  options.getOption(ch)!=  null  &&  currentOption.hasArg())  {	  else    if(stopAtNonOption    &&    options.getOption(ch)!=    null    &&    currentOption.hasArg())    {    	non-compiled	[CE]  ';'  expected	35	None	replace
48	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  stopAtNonOption)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }      [BUGGY]  else  if(stopAtNonOption  &&  stopAtNonOption)  {  [BUGGY]      {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	else  if(stopAtNonOption  &&  stopAtNonOption)  {	  else    if(stopAtNonOption    ||    stopAtNonOption)    {    	non-compiled	[CE]  ';'  expected	23	None	replace
49	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  currentOption)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }      [BUGGY]  else  if(stopAtNonOption  ||  currentOption)  {  [BUGGY]      {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	else  if(stopAtNonOption  ||  currentOption)  {	  else    if(stopAtNonOption    ||    stopAtNonOption)    {    	non-compiled	[CE]  ';'  expected	23	None	replace
50	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  currentOption.hasArg()  ||  token.length()  ==  i)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }      [BUGGY]  else  if(stopAtNonOption  &&  currentOption.hasArg()  ||  token.length()  ==  i)  {  [BUGGY]      {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	else  if(stopAtNonOption  &&  currentOption.hasArg()  ||  token.length()  ==  i)  {	  else    if(stopAtNonOption    ||    currentOption.hasArg()    ||    token.length()    ==    i)    {    	non-compiled	[CE]  ';'  expected	12	None	replace
51	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  currentOption.hasArg()  &&  token.length()  ==  i)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }      [BUGGY]  else  if(stopAtNonOption  ||  currentOption.hasArg()  &&  token.length()  ==  i)  {  [BUGGY]      {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	else  if(stopAtNonOption  ||  currentOption.hasArg()  &&  token.length()  ==  i)  {	  else    if(stopAtNonOption    ||    currentOption.hasArg()    ||    token.length()    ==    i)    {    	non-compiled	[CE]  ';'  expected	12	None	replace
52	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  token.hasArg()  ||  token.length()  ==  currentOption.length())  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }      [BUGGY]  else  if(stopAtNonOption  ||  token.hasArg()  ||  token.length()  ==  currentOption.length())  {  [BUGGY]      {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	else  if(stopAtNonOption  ||  token.hasArg()  ||  token.length()  ==  currentOption.length())  {	  else    if(stopAtNonOption    ||    currentOption.hasArg()    ||    token.length()    ==    i)    {    	non-compiled	[CE]  	12	None	replace
53	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  token.hasArg()  ||  token.length()  ==  i)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }      [BUGGY]  else  if(stopAtNonOption  ||  token.hasArg()  ||  token.length()  ==  i)  {  [BUGGY]      {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	else  if(stopAtNonOption  ||  token.hasArg()  ||  token.length()  ==  i)  {	  else    if(stopAtNonOption    ||    currentOption.hasArg()    ||    token.length()    ==    i)    {    	non-compiled	[CE]  	12	None	replace
54	[BUG]  [BUGGY]  else  if(haltAtNonOption  ||  currentOption.hasArg())  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }      [BUGGY]  else  if(haltAtNonOption  ||  currentOption.hasArg())  {  [BUGGY]      {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	else  if(haltAtNonOption  ||  currentOption.hasArg())  {	  else    if(eatTheRest    ||    currentOption.hasArg())    {    	non-compiled	[CE]  	40	None	replace
55	[BUG]  [BUGGY]  tokens.add( "- "  +  ch);  break;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }      [BUGGY]  tokens.add( "- "  +  ch);  break;  }  [BUGGY]      else  if  (stopAtNonOption)    {  {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	tokens.add( "- "  +  ch);  break;  }	  if(stopAtNonOption)    {    tokens.add(   "-   "    +    ch);    break;    }    	non-compiled	[CE]  	31	None	replace
56	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  options.getOption(ch)!=  null  &&  currentOption.hasArgs())  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }      [BUGGY]  else  if(stopAtNonOption  &&  options.getOption(ch)!=  null  &&  currentOption.hasArgs())  {  [BUGGY]      {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	else  if(stopAtNonOption  &&  options.getOption(ch)!=  null  &&  currentOption.hasArgs())  {	  else    if(stopAtNonOption    &&    options.getOption(ch)!=    null    &&    currentOption.hasArg())    {    	non-compiled	[CE]  	35	None	replace
57	[BUG]  [BUGGY]  tokens.add( "- "  +  i  +  1);  currentOption  =  options.getOption(i);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }      [BUGGY]  tokens.add( "- "  +  i  +  1);  currentOption  =  options.getOption(i);  [BUGGY]      else  if  (stopAtNonOption)    {  {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	tokens.add( "- "  +  i  +  1);  currentOption  =  options.getOption(i);	  tokens.add(   "-   "    +    i);    currentOption    =    options.getOption(i);    	non-compiled	[CE]  	7	None	replace
58	[BUG]  [BUGGY]  AssertionFailedError.show(token,  stopAtNonOption);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }      [BUGGY]  AssertionFailedError.show(token,  stopAtNonOption);  [BUGGY]      else  if  (stopAtNonOption)    {  {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	AssertionFailedError.show(token,  stopAtNonOption);	  AssertionFailedError.show(token);    	non-compiled	[CE]  	43	None	replace
59	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  token.length()  >=  (i  +  1))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }      [BUGGY]  else  if(stopAtNonOption  ||  token.length()  >=  (i  +  1))  {  [BUGGY]      {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	else  if(stopAtNonOption  ||  token.length()  >=  (i  +  1))  {	  else    if(stopAtNonOption    &&    token.length()    >=    (i    +    1))    {    	non-compiled	[CE]  	11	None	replace
60	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(ch);  if(currentOption!=  null)  {  tokens.add( "- "  +  ch);  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }      [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(ch);  if(currentOption!=  null)  {  tokens.add( "- "  +  ch);  }  [BUGGY]      else  if  (stopAtNonOption)    {  {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(ch);  if(currentOption!=  null)  {  tokens.add( "- "  +  ch);  }	  Option    currentOption    =    options.getOption(ch);    	non-compiled	[CE]  	26	None	replace
61	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  currentOption!=  null)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }      [BUGGY]  else  if(stopAtNonOption  ||  currentOption!=  null)  {  [BUGGY]      {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	else  if(stopAtNonOption  ||  currentOption!=  null)  {	  else    if(!stopAtNonOption    &&    currentOption!=    null)    {    	non-compiled	[CE]  	2	None	replace
62	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  currentOption.hasArg()  &&  token.length()  ==  i)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }      [BUGGY]  else  if(stopAtNonOption  &&  currentOption.hasArg()  &&  token.length()  ==  i)  {  [BUGGY]      {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	else  if(stopAtNonOption  &&  currentOption.hasArg()  &&  token.length()  ==  i)  {	  else    if(stopAtNonOption    ||    currentOption.hasArg()    ||    token.length()    ==    i)    {    	non-compiled	[CE]  	12	None	replace
63	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  currentOption.hasArg()  &&(token.charAt(i  +  1)!=  (i  +  1)))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }      [BUGGY]  else  if(stopAtNonOption  &&  currentOption.hasArg()  &&(token.charAt(i  +  1)!=  (i  +  1)))  {  [BUGGY]      {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	else  if(stopAtNonOption  &&  currentOption.hasArg()  &&(token.charAt(i  +  1)!=  (i  +  1)))  {	  else    if(stopAtNonOption    &&    currentOption.hasArg()    &&(token.length()!=    (i    +    1)))    {    	non-compiled	[CE]  	38	None	replace
64	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  currentOption.hasArg()  &&(token.charAt(i  +  1)!=  ')')  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }      [BUGGY]  else  if(stopAtNonOption  &&  currentOption.hasArg()  &&(token.charAt(i  +  1)!=  ')')  {  [BUGGY]      {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	else  if(stopAtNonOption  &&  currentOption.hasArg()  &&(token.charAt(i  +  1)!=  ')')  {	  else    if(stopAtNonOption    &&    currentOption.hasArg()    &&(token.length()!=    (i    +    1)))    {    	non-compiled	[CE]  	38	None	replace
65	[BUG]  [BUGGY]  kens.add( "- "  +  i);  currentOption  =  options.getOption(ch);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }      [BUGGY]  kens.add( "- "  +  i);  currentOption  =  options.getOption(ch);  [BUGGY]      else  if  (stopAtNonOption)    {  {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	kens.add( "- "  +  i);  currentOption  =  options.getOption(ch);	  if(stopAtNonOption)    {    tokens.add(   "-   "    +    i);    currentOption    =    options.getOption(ch);    }    	non-compiled	[CE]  	3	None	replace
66	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  currentOption.hasArg()  &&  token.charAt(i)!=  '-')  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }      [BUGGY]  else  if(stopAtNonOption  &&  currentOption.hasArg()  &&  token.charAt(i)!=  '-')  {  [BUGGY]      {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	else  if(stopAtNonOption  &&  currentOption.hasArg()  &&  token.charAt(i)!=  '-')  {	  else    if(stopAtNonOption    &&    currentOption.hasArgs())    {    	non-compiled	[CE]  	28	None	replace
67	[BUG]  [BUGGY]  kens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }      [BUGGY]  kens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  [BUGGY]      else  if  (stopAtNonOption)    {  {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	kens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);	  if(stopAtNonOption)    {    tokens.add(   "-   "    +    ch);    currentOption    =    options.getOption(ch);    }    	non-compiled	[CE]  	13	None	replace
68	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  currentOption.hasArg()  &&(token.charAt(i  +  1)  ==  ')')  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }      [BUGGY]  else  if(stopAtNonOption  &&  currentOption.hasArg()  &&(token.charAt(i  +  1)  ==  ')')  {  [BUGGY]      {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	else  if(stopAtNonOption  &&  currentOption.hasArg()  &&(token.charAt(i  +  1)  ==  ')')  {	  else    if(stopAtNonOption    &&    currentOption.hasArg()    &&(token.length()    ==    (i    +    1)))    {    	non-compiled	[CE]  ';'  expected	39	None	replace
69	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  token.length()!=  1)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }      [BUGGY]  else  if(stopAtNonOption  &&  token.length()!=  1)  {  [BUGGY]      {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	else  if(stopAtNonOption  &&  token.length()!=  1)  {	  else    if(stopAtNonOption    &&    token.length()!=    0)    {    	non-compiled	[CE]  ';'  expected	21	None	replace
70	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  token.charAt(i  +  1)!=  ')')  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }      [BUGGY]  else  if(stopAtNonOption  ||  token.charAt(i  +  1)!=  ')')  {  [BUGGY]      {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	else  if(stopAtNonOption  ||  token.charAt(i  +  1)!=  ')')  {	  else    if(stopAtNonOption    &&    token.charAt(i    +    1)!=    ')')    {    	non-compiled	[CE]  	42	None	replace
71	[BUG]  [BUGGY]  tokens.add( "-- "  +  ch);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }      [BUGGY]  tokens.add( "-- "  +  ch);  [BUGGY]      else  if  (stopAtNonOption)    {  {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	tokens.add( "-- "  +  ch);	  tokens.add(   "-n   "    +    ch);    	non-compiled	[CE]  	16	None	replace
72	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  currentOption.hasArg()  &&  token.charAt(i  +  1)!=  ')')  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }      [BUGGY]  else  if(stopAtNonOption  &&  currentOption.hasArg()  &&  token.charAt(i  +  1)!=  ')')  {  [BUGGY]      {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	else  if(stopAtNonOption  &&  currentOption.hasArg()  &&  token.charAt(i  +  1)!=  ')')  {	  else    if(stopAtNonOption    &&    currentOption.hasArg()    &&    token.length()!=    (i    +    1))    {    	non-compiled	[CE]  	15	None	replace
73	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  options.getOption(ch)  ==  null  &&  token.length()  >  0)  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }      [BUGGY]  else  if(stopAtNonOption  &&  options.getOption(ch)  ==  null  &&  token.length()  >  0)  {  [BUGGY]      {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	else  if(stopAtNonOption  &&  options.getOption(ch)  ==  null  &&  token.length()  >  0)  {	  else    if(stopAtNonOption    &&    options.getOption(ch)!=    null    &&    token.length()    >    0)    {    	non-compiled	[CE]  	34	None	replace
74	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  options.getOption(ch)!=  null  &&  currentOption.length()  >  0)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }      [BUGGY]  else  if(stopAtNonOption  &&  options.getOption(ch)!=  null  &&  currentOption.length()  >  0)  {  [BUGGY]      {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	else  if(stopAtNonOption  &&  options.getOption(ch)!=  null  &&  currentOption.length()  >  0)  {	  else    if(stopAtNonOption    &&    options.getOption(ch)!=    null    &&    token.length()    >    0)    {    	non-compiled	[CE]  ';'  expected	34	None	replace
75	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  currentOption.hasArg()  &&  token.charAt(i  +  1)  ==  ')')  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }      [BUGGY]  else  if(stopAtNonOption  &&  currentOption.hasArg()  &&  token.charAt(i  +  1)  ==  ')')  {  [BUGGY]      {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	else  if(stopAtNonOption  &&  currentOption.hasArg()  &&  token.charAt(i  +  1)  ==  ')')  {	  else    if(stopAtNonOption    &&    currentOption.hasArg()    &&    token.length()    ==    (i    +    1))    {    	non-compiled	[CE]  ';'  expected	14	None	replace
76	[BUG]  [BUGGY]  kens.add( "- "  +  ch);  currentOption  =  options.getOption(i);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }      [BUGGY]  kens.add( "- "  +  ch);  currentOption  =  options.getOption(i);  [BUGGY]      else  if  (stopAtNonOption)    {  {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	kens.add( "- "  +  ch);  currentOption  =  options.getOption(i);	  if(stopAtNonOption)    {    tokens.add(   "-   "    +    ch);    currentOption    =    options.getOption(i);    }    	non-compiled	[CE]  	8	None	replace
77	[BUG]  [BUGGY]  tokens.add( "-n "  +  ch);  currentOption  =  options.getOption(i);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }      [BUGGY]  tokens.add( "-n "  +  ch);  currentOption  =  options.getOption(i);  [BUGGY]      else  if  (stopAtNonOption)    {  {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	tokens.add( "-n "  +  ch);  currentOption  =  options.getOption(i);	  if(stopAtNonOption)    {    tokens.add(   "-   "    +    ch);    currentOption    =    options.getOption(i);    }    	non-compiled	[CE]  	8	None	replace
78	[BUG]  [BUGGY]  tors.add( "- "  +  ch);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }      [BUGGY]  tors.add( "- "  +  ch);  [BUGGY]      {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	tors.add( "- "  +  ch);	  if(stopAtNonOption)    {    tokens.add(   "-   "    +    ch);    }    else    {    tokens.add(   "-   "    +    ch);    }    	non-compiled	[CE]  	32	None	replace
79	[BUG]  [BUGGY]  tokens.add( "- ",  ch);  currentOption  =  options.getOption(ch);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }      [BUGGY]  tokens.add( "- ",  ch);  currentOption  =  options.getOption(ch);  [BUGGY]      else  if  (stopAtNonOption)    {  {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	tokens.add( "- ",  ch);  currentOption  =  options.getOption(ch);	  if(stopAtNonOption)    {    tokens.add(   "-   "    +    ch);    currentOption    =    options.getOption(ch);    }    	non-compiled	[CE]  	13	None	replace
80	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  options.getOption(ch)!=  null  &&  token.length()  >  0)  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }      [BUGGY]  else  if(stopAtNonOption  ||  options.getOption(ch)!=  null  &&  token.length()  >  0)  {  [BUGGY]      {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	else  if(stopAtNonOption  ||  options.getOption(ch)!=  null  &&  token.length()  >  0)  {	  else    if(stopAtNonOption    &&    options.getOption(ch)!=    null    &&    token.length()    >    0)    {    	non-compiled	[CE]  	34	None	replace
81	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  currentOption.hasArg()  ||  token.length()  ==  1)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }      [BUGGY]  else  if(stopAtNonOption  ||  currentOption.hasArg()  ||  token.length()  ==  1)  {  [BUGGY]      {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	else  if(stopAtNonOption  ||  currentOption.hasArg()  ||  token.length()  ==  1)  {	  else    if(stopAtNonOption    ||    currentOption.hasArg()    ||    token.length()    ==    i)    {    	non-compiled	[CE]  	12	None	replace
82	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  token.charAt(0)  ==  ')')  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }      [BUGGY]  else  if(stopAtNonOption  &&  token.charAt(0)  ==  ')')  {  [BUGGY]      {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	else  if(stopAtNonOption  &&  token.charAt(0)  ==  ')')  {	  else    if(stopAtNonOption    &&    token.charAt(i    +    1)!=    ')')    {    	non-compiled	[CE]  	42	None	replace
83	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }      [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      else  if  (stopAtNonOption)    {  {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  kens.add(   "-   "    +    ch);    	non-compiled	[CE]  	27	None	replace
84	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  token.length()!=  2)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }      [BUGGY]  else  if(stopAtNonOption  &&  token.length()!=  2)  {  [BUGGY]      {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	else  if(stopAtNonOption  &&  token.length()!=  2)  {	  else    if(stopAtNonOption    &&    token.length()!=    0)    {    	non-compiled	[CE]  	21	None	replace
85	[BUG]  [BUGGY]  tokens.add(')');  break;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }      [BUGGY]  tokens.add(')');  break;  [BUGGY]      else  if  (stopAtNonOption)    {  {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	tokens.add(')');  break;	  tokens.add(token);    break;    	non-compiled	[CE]  	41	None	replace
86	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  currentOption!=  null  &&  token.length()  >  0)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }      [BUGGY]  else  if(stopAtNonOption  &&  currentOption!=  null  &&  token.length()  >  0)  {  [BUGGY]      {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	else  if(stopAtNonOption  &&  currentOption!=  null  &&  token.length()  >  0)  {	  else    if(!stopAtNonOption    &&    currentOption!=    null)    {    	non-compiled	[CE]  	2	None	replace
87	[BUG]  [BUGGY]  else  if(!stopAtNonOption  &&  currentOption!=  null  &&  token.length()  >  0)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }      [BUGGY]  else  if(!stopAtNonOption  &&  currentOption!=  null  &&  token.length()  >  0)  {  [BUGGY]      {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	else  if(!stopAtNonOption  &&  currentOption!=  null  &&  token.length()  >  0)  {	  else    if(!stopAtNonOption    &&    currentOption!=    null)    {    	non-compiled	[CE]  	2	None	replace
88	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(ch);  if(!stopAtNonOption)  {  tokens.add( "- "  +  ch);  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }      [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(ch);  if(!stopAtNonOption)  {  tokens.add( "- "  +  ch);  }  [BUGGY]      else  if  (stopAtNonOption)    {  {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(ch);  if(!stopAtNonOption)  {  tokens.add( "- "  +  ch);  }	  Option    currentOption    =    options.getOption(ch);    	non-compiled	[CE]  	26	None	replace
89	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  token.hasArg()  &&  token.length()!=  (i  +  1))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }      [BUGGY]  else  if(stopAtNonOption  &&  token.hasArg()  &&  token.length()!=  (i  +  1))  {  [BUGGY]      {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	else  if(stopAtNonOption  &&  token.hasArg()  &&  token.length()!=  (i  +  1))  {	  else    if(stopAtNonOption    &&    currentOption.hasArg()    &&    token.length()!=    (i    +    1))    {    	non-compiled	[CE]  	15	None	replace
90	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  currentOption.hasNext())  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }      [BUGGY]  else  if(stopAtNonOption  &&  currentOption.hasNext())  {  [BUGGY]      {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	else  if(stopAtNonOption  &&  currentOption.hasNext())  {	  else    if(stopAtNonOption    &&    currentOption.hasArgs())    {    	non-compiled	[CE]  	28	None	replace
91	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  currentOption.hasMoreArgs())  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }      [BUGGY]  else  if(stopAtNonOption  &&  currentOption.hasMoreArgs())  {  [BUGGY]      {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	else  if(stopAtNonOption  &&  currentOption.hasMoreArgs())  {	  else    if(stopAtNonOption    &&    currentOption.hasArgs())    {    	non-compiled	[CE]  	28	None	replace
92	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  options.getOption(i)!=  null  &&  token.length()  >  0)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }      [BUGGY]  else  if(stopAtNonOption  &&  options.getOption(i)!=  null  &&  token.length()  >  0)  {  [BUGGY]      {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	else  if(stopAtNonOption  &&  options.getOption(i)!=  null  &&  token.length()  >  0)  {	  else    if(stopAtNonOption    &&    options.getOption(i)!=    null)    {    	non-compiled	[CE]  	19	None	replace
93	[BUG]  [BUGGY]  tokens.add( "- ",  i);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }      [BUGGY]  tokens.add( "- ",  i);  [BUGGY]      else  if  (stopAtNonOption)    {  {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	tokens.add( "- ",  i);	  tokens.add(   "-   ",    ch);    	non-compiled	[CE]  	37	None	replace
