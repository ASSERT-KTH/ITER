bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  else  if(!stopAtNonOption  &&  currentOption.hasArg())  {  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }    [BUGGY]  else  if(!stopAtNonOption  &&  currentOption.hasArg())  {  [BUGGY]    {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	else  if(!stopAtNonOption  &&  currentOption.hasArg())  {	  else    if(!stopAtNonOption)    {    	non-compiled	[CE]  ')'  expected	4	None	replace
2	[BUG]  [BUGGY]  else  if(!stopAtNonOption  &&  currentOption!=  null)  {  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }    [BUGGY]  else  if(!stopAtNonOption  &&  currentOption!=  null)  {  [BUGGY]    {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	else  if(!stopAtNonOption  &&  currentOption!=  null)  {	  else    if(!stopAtNonOption)    {    	non-compiled	[CE]  ')'  expected	4	None	replace
3	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- "  +  i);  currentOption  =  options.getOption(ch);  }  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }    [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- "  +  i);  currentOption  =  options.getOption(ch);  }  [BUGGY]    else  if  (stopAtNonOption)    {  {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	if(stopAtNonOption)  {  tokens.add( "- "  +  i);  currentOption  =  options.getOption(ch);  }	      tokens.add(   "-   "    +    i);    currentOption    =    options.getOption(ch);    	non-compiled	[CE]  ')'  expected	6	None	replace
4	[BUG]  [BUGGY]  tokens.add( "- ");  currentOption  =  options.getOption(ch);  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }    [BUGGY]  tokens.add( "- ");  currentOption  =  options.getOption(ch);  [BUGGY]    else  if  (stopAtNonOption)    {  {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	tokens.add( "- ");  currentOption  =  options.getOption(ch);	      tokens.add(   "-   "    +    i);    currentOption    =    options.getOption(ch);    	non-compiled	[CE]  ')'  expected	6	None	replace
5	[BUG]  [BUGGY]  tokens.add( "- "  +  i);  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }    [BUGGY]  tokens.add( "- "  +  i);  [BUGGY]    else  if  (stopAtNonOption)    {  {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	tokens.add( "- "  +  i);	      tokens.add(   "-   "    +    i);    currentOption    =    options.getOption(ch);    	non-compiled	[CE]  ')'  expected	6	None	replace
6	[BUG]  [BUGGY]  tokens.add(')');  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }    [BUGGY]  tokens.add(')');  [BUGGY]    else  if  (stopAtNonOption)    {  {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	tokens.add(')');	      tokens.add(token);    	non-compiled	[CE]  ')'  expected	15	None	replace
7	[BUG]  [BUGGY]  tokens.add( "- "  +  i);  currentOption  =  options.getOption(i);  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }    [BUGGY]  tokens.add( "- "  +  i);  currentOption  =  options.getOption(i);  [BUGGY]    else  if  (stopAtNonOption)    {  {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	tokens.add( "- "  +  i);  currentOption  =  options.getOption(i);	      tokens.add(   "-   "    +    ch);    currentOption    =    options.getOption(i);    	non-compiled	[CE]  ')'  expected	9	None	replace
8	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(i);  }  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }    [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(i);  }  [BUGGY]    else  if  (stopAtNonOption)    {  {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(i);  }	      tokens.add(   "-   "    +    ch);    currentOption    =    options.getOption(i);    	non-compiled	[CE]  ')'  expected	9	None	replace
9	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  token.length()  ==  (i  +  1))  {  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }    [BUGGY]  else  if(stopAtNonOption  &&  token.length()  ==  (i  +  1))  {  [BUGGY]    {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	else  if(stopAtNonOption  &&  token.length()  ==  (i  +  1))  {	  else    if(stopAtNonOption    &&    token.length()!=    (i    +    1))    {    	non-compiled	[CE]  ')'  expected	14	None	replace
10	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  token.length()!=  (i  +  1))  {  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }    [BUGGY]  else  if(stopAtNonOption  ||  token.length()!=  (i  +  1))  {  [BUGGY]    {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	else  if(stopAtNonOption  ||  token.length()!=  (i  +  1))  {	  else    if(stopAtNonOption    &&    token.length()!=    (i    +    1))    {    	non-compiled	[CE]  ')'  expected	14	None	replace
11	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  token.length()  >=  (i  +  1))  {  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }    [BUGGY]  else  if(stopAtNonOption  &&  token.length()  >=  (i  +  1))  {  [BUGGY]    {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	else  if(stopAtNonOption  &&  token.length()  >=  (i  +  1))  {	  else    if(stopAtNonOption    &&    token.length()!=    (i    +    1))    {    	non-compiled	[CE]  ')'  expected	14	None	replace
12	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  currentOption.hasArg()  ||  token.length()  ==  i)  {  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }    [BUGGY]  else  if(stopAtNonOption  ||  currentOption.hasArg()  ||  token.length()  ==  i)  {  [BUGGY]    {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	else  if(stopAtNonOption  ||  currentOption.hasArg()  ||  token.length()  ==  i)  {	  else    if(stopAtNonOption    ||    currentOption.hasArg())    {    	non-compiled	[CE]  ')'  expected	2	None	replace
13	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  }  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }    [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  }  [BUGGY]    else  if  (stopAtNonOption)    {  {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  }	      tokens.add(   "-   "    +    ch);    currentOption    =    options.getOption(ch);    	non-compiled	[CE]  ')'  expected	8	None	replace
14	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  currentOption.hasArg()  &&  token.length()  ==  (i  +  1))  {  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }    [BUGGY]  else  if(stopAtNonOption  &&  currentOption.hasArg()  &&  token.length()  ==  (i  +  1))  {  [BUGGY]    {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	else  if(stopAtNonOption  &&  currentOption.hasArg()  &&  token.length()  ==  (i  +  1))  {	  else    if(stopAtNonOption    &&    currentOption.hasArg())    {    	non-compiled	[CE]  ')'  expected	1	None	replace
15	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  currentOption.hasArg()  &&  token.length()!=  (i  +  1))  {  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }    [BUGGY]  else  if(stopAtNonOption  &&  currentOption.hasArg()  &&  token.length()!=  (i  +  1))  {  [BUGGY]    {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	else  if(stopAtNonOption  &&  currentOption.hasArg()  &&  token.length()!=  (i  +  1))  {	  else    if(stopAtNonOption    &&    currentOption.hasArg())    {    	non-compiled	[CE]  ')'  expected	1	None	replace
16	[BUG]  [BUGGY]  tokens.add( "-n "  +  ch);  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }    [BUGGY]  tokens.add( "-n "  +  ch);  [BUGGY]    else  if  (stopAtNonOption)    {  {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	tokens.add( "-n "  +  ch);	      tokens.add(   "-   "    +    ch);    	non-compiled	[CE]  ')'  expected	7	None	replace
17	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  options.getOption(ch)  ==  null)  {  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }    [BUGGY]  else  if(stopAtNonOption  &&  options.getOption(ch)  ==  null)  {  [BUGGY]    {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	else  if(stopAtNonOption  &&  options.getOption(ch)  ==  null)  {	  else    if(stopAtNonOption    &&    options.getOption(ch)!=    null)    {    	non-compiled	[CE]  ')'  expected	11	None	replace
18	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  options.getOption(ch)!=  null)  {  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }    [BUGGY]  else  if(stopAtNonOption  ||  options.getOption(ch)!=  null)  {  [BUGGY]    {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	else  if(stopAtNonOption  ||  options.getOption(ch)!=  null)  {	  else    if(stopAtNonOption    &&    options.getOption(ch)!=    null)    {    	non-compiled	[CE]  ')'  expected	11	None	replace
19	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  options.getOption(i)!=  null)  {  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }    [BUGGY]  else  if(stopAtNonOption  &&  options.getOption(i)!=  null)  {  [BUGGY]    {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	else  if(stopAtNonOption  &&  options.getOption(i)!=  null)  {	  else    if(stopAtNonOption    &&    options.getOption(ch)!=    null)    {    	non-compiled	[CE]  ')'  expected	11	None	replace
20	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  token.length()  ==  0)  {  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }    [BUGGY]  else  if(stopAtNonOption  &&  token.length()  ==  0)  {  [BUGGY]    {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	else  if(stopAtNonOption  &&  token.length()  ==  0)  {	  else    if(stopAtNonOption    &&    token.length()    >    0)    {    	non-compiled	[CE]  ')'  expected	13	None	replace
21	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  token.length()!=  0)  {  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }    [BUGGY]  else  if(stopAtNonOption  &&  token.length()!=  0)  {  [BUGGY]    {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	else  if(stopAtNonOption  &&  token.length()!=  0)  {	  else    if(stopAtNonOption    &&    token.length()    >    0)    {    	non-compiled	[CE]  ')'  expected	13	None	replace
22	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  token.length()  >  0)  {  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }    [BUGGY]  else  if(stopAtNonOption  ||  token.length()  >  0)  {  [BUGGY]    {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	else  if(stopAtNonOption  ||  token.length()  >  0)  {	  else    if(stopAtNonOption    &&    token.length()    >    0)    {    	non-compiled	[CE]  ')'  expected	13	None	replace
23	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  stopAtNonOption)  {  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }    [BUGGY]  else  if(stopAtNonOption  ||  stopAtNonOption)  {  [BUGGY]    {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	else  if(stopAtNonOption  ||  stopAtNonOption)  {	  else    if(stopTheRest)    {    	non-compiled	[CE]  ')'  expected	3	None	replace
24	[BUG]  [BUGGY]  tokens.add( "- "  +  i  +  1);  currentOption  =  options.getOption(ch);  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }    [BUGGY]  tokens.add( "- "  +  i  +  1);  currentOption  =  options.getOption(ch);  [BUGGY]    else  if  (stopAtNonOption)    {  {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	tokens.add( "- "  +  i  +  1);  currentOption  =  options.getOption(ch);	      tokens.add(   "-   "    +    i);    currentOption    =    options.getOption(ch);    	non-compiled	[CE]  ')'  expected	6	None	replace
25	[BUG]  [BUGGY]  else  if(haltAtNonOption)  {  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }    [BUGGY]  else  if(haltAtNonOption)  {  [BUGGY]    {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	else  if(haltAtNonOption)  {	  else    if(stopTheRest)    {    	non-compiled	[CE]  ')'  expected	3	None	replace
26	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(ch);  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }    [BUGGY]  Option  currentOption  =  options.getOption(ch);  [BUGGY]    else  if  (stopAtNonOption)    {  {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	Option  currentOption  =  options.getOption(ch);	      if(stopAtNonOption)    {    tokens.add(   "-   "    +    ch);    }    	non-compiled	[CE]  ')'  expected	10	None	replace
27	[BUG]  [BUGGY]  kens.add( "- "  +  ch);  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }    [BUGGY]  kens.add( "- "  +  ch);  [BUGGY]    else  if  (stopAtNonOption)    {  {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	kens.add( "- "  +  ch);	      if(stopAtNonOption)    {    tokens.add(   "-   "    +    ch);    }    	non-compiled	[CE]  ')'  expected	10	None	replace
28	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  currentOption.hasArgs())  {  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }    [BUGGY]  else  if(stopAtNonOption  &&  currentOption.hasArgs())  {  [BUGGY]    {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	else  if(stopAtNonOption  &&  currentOption.hasArgs())  {	  else    if(stopAtNonOption    ||    currentOption.hasArg())    {    	non-compiled	[CE]  ')'  expected	2	None	replace
29	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  currentOption.hasArgs())  {  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }    [BUGGY]  else  if(stopAtNonOption  ||  currentOption.hasArgs())  {  [BUGGY]    {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	else  if(stopAtNonOption  ||  currentOption.hasArgs())  {	  else    if(stopAtNonOption    ||    currentOption.hasArg())    {    	non-compiled	[CE]  ')'  expected	2	None	replace
30	[BUG]  [BUGGY]  tokens.add( "- "  +  ch);  break;  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }    [BUGGY]  tokens.add( "- "  +  ch);  break;  [BUGGY]    else  if  (stopAtNonOption)    {  {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	tokens.add( "- "  +  ch);  break;	      if(stopAtNonOption)    {    tokens.add(token);    break;    }    	non-compiled	[CE]  ')'  expected	16	None	replace
31	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  break;  }  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }    [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  break;  }  [BUGGY]    else  if  (stopAtNonOption)    {  {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  break;  }	      if(stopAtNonOption)    {    tokens.add(token);    break;    }    	non-compiled	[CE]  ')'  expected	16	None	replace
32	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  }  else  {  tokens.add( "- "  +  ch);  }  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }    [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  }  else  {  tokens.add( "- "  +  ch);  }  [BUGGY]    {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  }  else  {  tokens.add( "- "  +  ch);  }	      	non-compiled	[CE]  ')'  expected	5	None	replace
33	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  token.length()  >=  0)  {  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }    [BUGGY]  else  if(stopAtNonOption  &&  token.length()  >=  0)  {  [BUGGY]    {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	else  if(stopAtNonOption  &&  token.length()  >=  0)  {	  else    if(stopAtNonOption    &&    token.length()    >    0)    {    	non-compiled	[CE]  ')'  expected	13	None	replace
34	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  options.getOption(ch)!=  null  &&  token.length()  >  0)  {  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }    [BUGGY]  else  if(stopAtNonOption  &&  options.getOption(ch)!=  null  &&  token.length()  >  0)  {  [BUGGY]    {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	else  if(stopAtNonOption  &&  options.getOption(ch)!=  null  &&  token.length()  >  0)  {	  else    if(stopAtNonOption    &&    options.getOption(ch)!=    null)    {    	non-compiled	[CE]  ')'  expected	11	None	replace
35	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  options.getOption(ch)!=  null  &&  currentOption.hasArg())  {  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }    [BUGGY]  else  if(stopAtNonOption  &&  options.getOption(ch)!=  null  &&  currentOption.hasArg())  {  [BUGGY]    {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	else  if(stopAtNonOption  &&  options.getOption(ch)!=  null  &&  currentOption.hasArg())  {	  else    if(stopAtNonOption    &&    options.getOption(ch)!=    null)    {    	non-compiled	[CE]  ')'  expected	11	None	replace
36	[BUG]  [BUGGY]  tokens.add( "- "  +  0);  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }    [BUGGY]  tokens.add( "- "  +  0);  [BUGGY]    else  if  (stopAtNonOption)    {  {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	tokens.add( "- "  +  0);	      tokens.add(   "-   "    +    ch);    	non-compiled	[CE]  ')'  expected	7	None	replace
37	[BUG]  [BUGGY]  tokens.add( "- ",  ch);  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }    [BUGGY]  tokens.add( "- ",  ch);  [BUGGY]    else  if  (stopAtNonOption)    {  {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	tokens.add( "- ",  ch);	      if(stopAtNonOption)    {    tokens.add(   "-   "    +    ch);    }    	non-compiled	[CE]  ')'  expected	10	None	replace
38	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  currentOption.hasArg()  &&(token.length()!=  (i  +  1)))  {  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }    [BUGGY]  else  if(stopAtNonOption  &&  currentOption.hasArg()  &&(token.length()!=  (i  +  1)))  {  [BUGGY]    {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	else  if(stopAtNonOption  &&  currentOption.hasArg()  &&(token.length()!=  (i  +  1)))  {	  else    if(stopAtNonOption    &&    currentOption.hasArg())    {    	non-compiled	[CE]  ')'  expected	1	None	replace
39	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  currentOption.hasArg()  &&(token.length()  ==  (i  +  1)))  {  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }    [BUGGY]  else  if(stopAtNonOption  &&  currentOption.hasArg()  &&(token.length()  ==  (i  +  1)))  {  [BUGGY]    {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	else  if(stopAtNonOption  &&  currentOption.hasArg()  &&(token.length()  ==  (i  +  1)))  {	  else    if(stopAtNonOption    &&    currentOption.hasArg())    {    	non-compiled	[CE]  ')'  expected	1	None	replace
40	[BUG]  [BUGGY]  else  if(eatTheRest  ||  currentOption.hasArg())  {  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }    [BUGGY]  else  if(eatTheRest  ||  currentOption.hasArg())  {  [BUGGY]    {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	else  if(eatTheRest  ||  currentOption.hasArg())  {	  else    if(stopTheRest)    {    	non-compiled	[CE]  ')'  expected	3	None	replace
41	[BUG]  [BUGGY]  tokens.add(token);  break;  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }    [BUGGY]  tokens.add(token);  break;  [BUGGY]    else  if  (stopAtNonOption)    {  {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	tokens.add(token);  break;	      if(stopAtNonOption)    {    tokens.add(token);    break;    }    	non-compiled	[CE]  ')'  expected	16	None	replace
42	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  token.charAt(i  +  1)!=  ')')  {  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }    [BUGGY]  else  if(stopAtNonOption  &&  token.charAt(i  +  1)!=  ')')  {  [BUGGY]    {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	else  if(stopAtNonOption  &&  token.charAt(i  +  1)!=  ')')  {	  else    if(stopAtNonOption    &&    token.length()!=    (i    +    1))    {    	non-compiled	[CE]  ')'  expected	14	None	replace
43	[BUG]  [BUGGY]  AssertionFailedError.show(token);  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }    [BUGGY]  AssertionFailedError.show(token);  [BUGGY]    else  if  (stopAtNonOption)    {  {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	AssertionFailedError.show(token);	      if(stopAtNonOption)    {    tokens.add(   "-   "    +    ch);    currentOption    =    options.getOption(ch);    if(currentOption.hasArg()    &&    (token.length()!=    (i    +    1)))    {    tokens.add(token.substring    	non-compiled	[CE]  ')'  expected	12	None	replace
