bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  process(token,  token.substring(i  +  1),  currentOption);  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  process(token,  token.substring(i  +  1),  currentOption);  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	process(token,  token.substring(i  +  1),  currentOption);	  process(token,    token.substring(i    +    1));    	non-compiled	[CE]  ';'  expected	4	None	replace
2	[BUG]  [BUGGY]  process(token,  token.substring(i  +  1),  stopAtNonOption);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  process(token,  token.substring(i  +  1),  stopAtNonOption);  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	process(token,  token.substring(i  +  1),  stopAtNonOption);	  process(token,    token.substring(i    +    1));    	non-compiled	[CE]  ';'  expected	4	None	replace
3	[BUG]  [BUGGY]  process(token,  ch,  token.substring(i  +  1));  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  process(token,  ch,  token.substring(i  +  1));  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	process(token,  ch,  token.substring(i  +  1));	  process(token,    token.substring(i    +    1));    	non-compiled	[CE]  ';'  expected	4	None	replace
4	[BUG]  [BUGGY]  process(token.substring(0,  2));  [CE]  'else'  without  'if'  [FE]                AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  process(token.substring(0,  2));  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	process(token.substring(0,  2));	  process(token.substring(0,    1));    	non-compiled	[CE]  'else'  without  'if'	27	None	replace
5	[BUG]  [BUGGY]  process(ch,  token.substring(0,  1));  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  process(ch,  token.substring(0,  1));  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	process(ch,  token.substring(0,  1));	  process(token.substring(0,    1));    	non-compiled	[CE]  ';'  expected	27	None	replace
6	[BUG]  [BUGGY]  tokens.add(token.substring(i  +  1,  ch));  [CE]  'else'  without  'if'  [FE]          AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tokens.add(token.substring(i  +  1,  ch));  [BUGGY]      process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	tokens.add(token.substring(i  +  1,  ch));	  tokens.add(token.substring(i,    i    +    1));    	non-compiled	[CE]  'else'  without  'if'	9	None	replace
7	[BUG]  [BUGGY]  proceed(token.substring(0,  i  +  1),  stopAtNonOption);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  proceed(token.substring(0,  i  +  1),  stopAtNonOption);  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	proceed(token.substring(0,  i  +  1),  stopAtNonOption);	  proceed(token.substring(0,    i    +    1));    	non-compiled	[CE]  ';'  expected	29	None	replace
8	[BUG]  [BUGGY]  proceed(token.substring(0,  i  +  1),  currentOption);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  proceed(token.substring(0,  i  +  1),  currentOption);  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	proceed(token.substring(0,  i  +  1),  currentOption);	  proceed(token.substring(0,    i    +    1));    	non-compiled	[CE]  ';'  expected	29	None	replace
9	[BUG]  [BUGGY]  proceed(token.substring(0,  i));  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  proceed(token.substring(0,  i));  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	proceed(token.substring(0,  i));	  proceed(token.substring(0,    i    +    1));    	non-compiled	[CE]  ';'  expected	29	None	replace
10	[BUG]  [BUGGY]  ||  currentOption.hasArg(ch))  {  tokens.add(token.substring(i  +  1));  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  ||  currentOption.hasArg(ch))  {  tokens.add(token.substring(i  +  1));  [BUGGY]      process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	||  currentOption.hasArg(ch))  {  tokens.add(token.substring(i  +  1));	  ||    currentOption.hasArgs())    {    tokens.add(token.substring(i    +    1));    	non-compiled	[CE]  ';'  expected	1	None	replace
11	[BUG]  [BUGGY]  tokens.add(i  +  1);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tokens.add(i  +  1);  [BUGGY]      process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	tokens.add(i  +  1);	  tokens.add(i);    	non-compiled	[CE]  ';'  expected	11	None	replace
12	[BUG]  [BUGGY]  tokens.add(')');  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tokens.add(')');  [BUGGY]      process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	tokens.add(')');	  tokens.add(i);    	non-compiled	[CE]  ';'  expected	11	None	replace
13	[BUG]  [BUGGY]  beginOption(token,  token.substring(i  +  1));  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  beginOption(token,  token.substring(i  +  1));  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	beginOption(token,  token.substring(i  +  1));	  beginOption(ch,    token.substring(i    +    1));    	non-compiled	[CE]  ';'  expected	23	None	replace
14	[BUG]  [BUGGY]  beginOption(token,  ch.substring(i  +  1));  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  beginOption(token,  ch.substring(i  +  1));  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	beginOption(token,  ch.substring(i  +  1));	  beginOption(ch,    token.substring(i    +    1));    	non-compiled	[CE]  ';'  expected	23	None	replace
15	[BUG]  [BUGGY]  joinOption(ch,  token.substring(i  +  1));  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  joinOption(ch,  token.substring(i  +  1));  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	joinOption(ch,  token.substring(i  +  1));	  beginOption(ch,    token.substring(i    +    1));    	non-compiled	[CE]  ';'  expected	23	None	replace
16	[BUG]  [BUGGY]  accept(token,  token.substring(i  +  1));  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  accept(token,  token.substring(i  +  1));  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	accept(token,  token.substring(i  +  1));	  beginOption(ch,    token.substring(i    +    1));    	non-compiled	[CE]  ';'  expected	23	None	replace
17	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token.substring(i  +  1));  tokens.add(token.substring(0,  i  +  1));  }  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption)  {  tokens.add(token.substring(i  +  1));  tokens.add(token.substring(0,  i  +  1));  }  [BUGGY]      process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	if(stopAtNonOption)  {  tokens.add(token.substring(i  +  1));  tokens.add(token.substring(0,  i  +  1));  }	          tokens.add(token.substring(i    +    1));    tokens.add(token.substring(0,    i    +    1));    	non-compiled	[CE]  ';'  expected	43	None	replace
18	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token.substring(i  +  1));  tokens.add(token.substring(0,  i  +  1));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption)  {  tokens.add(token.substring(i  +  1));  tokens.add(token.substring(0,  i  +  1));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	if(stopAtNonOption)  {  tokens.add(token.substring(i  +  1));  tokens.add(token.substring(0,  i  +  1));  }  else  {  throw  new  IllegalArgumentException( " ");  }	          tokens.add(token.substring(i    +    1));    tokens.add(token.substring(0,    i    +    1));    	non-compiled	[CE]  ';'  expected	43	None	replace
19	[BUG]  [BUGGY]  ||  currentOption.hasNext())  {  tokens.add(token.substring(i  +  2));  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  ||  currentOption.hasNext())  {  tokens.add(token.substring(i  +  2));  [BUGGY]      process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	||  currentOption.hasNext())  {  tokens.add(token.substring(i  +  2));	  ||    currentOption.hasNext())    {    tokens.add(token.substring(i    +    1));    	non-compiled	[CE]  ';'  expected	50	None	replace
20	[BUG]  [BUGGY]  ||  currentOption.hasNext())  {  tokens.add(token.substring(i  +  1);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  ||  currentOption.hasNext())  {  tokens.add(token.substring(i  +  1);  [BUGGY]      process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	||  currentOption.hasNext())  {  tokens.add(token.substring(i  +  1);	  ||    currentOption.hasNext())    {    tokens.add(token.substring(i    +    1));    	non-compiled	[CE]  ';'  expected	50	None	replace
21	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token.substring(0,  i  +  1));  break;  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption)  {  tokens.add(token.substring(0,  i  +  1));  break;  }  [BUGGY]      process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	if(stopAtNonOption)  {  tokens.add(token.substring(0,  i  +  1));  break;  }	  tokens.add(token.substring(0,    i    +    1));    break;    	non-compiled	[CE]  ';'  expected	18	None	replace
22	[BUG]  [BUGGY]  process(token,  token.substring(0,  i));  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  process(token,  token.substring(0,  i));  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	process(token,  token.substring(0,  i));	  process(ch,    token.substring(0,    i));    	non-compiled	[CE]  ';'  expected	28	None	replace
23	[BUG]  [BUGGY]  process(token,  token.substring(0,  i  +  1));  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  process(token,  token.substring(0,  i  +  1));  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	process(token,  token.substring(0,  i  +  1));	  process(ch,    token.substring(0,    i));    	non-compiled	[CE]  ';'  expected	28	None	replace
24	[BUG]  [BUGGY]  process(token,  ch.substring(0,  i));  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  process(token,  ch.substring(0,  i));  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	process(token,  ch.substring(0,  i));	  process(ch,    token.substring(0,    i));    	non-compiled	[CE]  ';'  expected	28	None	replace
25	[BUG]  [BUGGY]  proceed(token.substring(i  +  1),  stopAtNonOption);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  proceed(token.substring(i  +  1),  stopAtNonOption);  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	proceed(token.substring(i  +  1),  stopAtNonOption);	  proceed(token.substring(i    +    1));    	non-compiled	[CE]  ';'  expected	38	None	replace
26	[BUG]  [BUGGY]  proceed(token.substring(i  +  1),  currentOption.hasArg());  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  proceed(token.substring(i  +  1),  currentOption.hasArg());  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	proceed(token.substring(i  +  1),  currentOption.hasArg());	  proceed(token.substring(i    +    1));    	non-compiled	[CE]  ';'  expected	38	None	replace
27	[BUG]  [BUGGY]  addToken(token.substring(i  +  1),  ch,  stopAtNonOption);  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  addToken(token.substring(i  +  1),  ch,  stopAtNonOption);  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	addToken(token.substring(i  +  1),  ch,  stopAtNonOption);	  addToken(token.substring(i    +    1),    ch);    	non-compiled	[CE]  ';'  expected	36	None	replace
28	[BUG]  [BUGGY]  tokens.add(token.substring(i  +  1),  ch);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tokens.add(token.substring(i  +  1),  ch);  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	tokens.add(token.substring(i  +  1),  ch);	  addToken(token.substring(i    +    1),    ch);    	non-compiled	[CE]  ';'  expected	36	None	replace
29	[BUG]  [BUGGY]  tokens.add(token,  eatTheRest);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tokens.add(token,  eatTheRest);  [BUGGY]      process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	tokens.add(token,  eatTheRest);	  tokens.add(token,    stopAtNonOption);    	non-compiled	[CE]  ';'  expected	10	None	replace
30	[BUG]  [BUGGY]  tokens.add(ch,  stopAtNonOption);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tokens.add(ch,  stopAtNonOption);  [BUGGY]      process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	tokens.add(ch,  stopAtNonOption);	  tokens.add(token,    stopAtNonOption);    	non-compiled	[CE]  ')'  expected	10	None	replace
31	[BUG]  [BUGGY]  tokens.add(token,  currentOption);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tokens.add(token,  currentOption);  [BUGGY]      process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	tokens.add(token,  currentOption);	  tokens.add(token,    stopAtNonOption);    	non-compiled	[CE]  ';'  expected	10	None	replace
32	[BUG]  [BUGGY]  tokens.add(token,  i);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tokens.add(token,  i);  [BUGGY]      process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	tokens.add(token,  i);	  tokens.add(token,    stopAtNonOption);    	non-compiled	[CE]  ')'  expected	10	None	replace
33	[BUG]  [BUGGY]  process(token,  ch,  token.substring(i));  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  process(token,  ch,  token.substring(i));  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	process(token,  ch,  token.substring(i));	  process(token,    token.substring(i));    	non-compiled	[CE]  ')'  expected	5	None	replace
34	[BUG]  [BUGGY]  tokens.add( "null ");  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tokens.add( "null ");  [BUGGY]      process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	tokens.add( "null ");	  tokens.add(   "n   ");    	non-compiled	[CE]  ')'  expected	47	None	replace
35	[BUG]  [BUGGY]  tokens.add( "- ");  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tokens.add( "- ");  [BUGGY]      process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	tokens.add( "- ");	  tokens.add(   "n   ");    	non-compiled	[CE]  ')'  expected	47	None	replace
36	[BUG]  [BUGGY]  tokens.add( "   ");  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tokens.add( "   ");  [BUGGY]      process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	tokens.add( "   ");	  tokens.add(   "n   ");    	non-compiled	[CE]  	47	None	replace
37	[BUG]  [BUGGY]  addToken(token.substring(i  +  1),  token);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  addToken(token.substring(i  +  1),  token);  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	addToken(token.substring(i  +  1),  token);	  addToken(token.substring(i    +    1),    currentOption);    	non-compiled	[CE]  ')'  expected	21	None	replace
38	[BUG]  [BUGGY]  tokens.add(token.substring(i  +  1),  currentOption);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tokens.add(token.substring(i  +  1),  currentOption);  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	tokens.add(token.substring(i  +  1),  currentOption);	  addToken(token.substring(i    +    1),    currentOption);    	non-compiled	[CE]  ')'  expected	21	None	replace
39	[BUG]  [BUGGY]  addToken(token.substring(i  +  1),  currentOption.ch);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  addToken(token.substring(i  +  1),  currentOption.ch);  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	addToken(token.substring(i  +  1),  currentOption.ch);	  addToken(token.substring(i    +    1),    currentOption);    	non-compiled	[CE]  ')'  expected	21	None	replace
40	[BUG]  [BUGGY]  ||  currentOption.hasArg())  {  tokens.add(token.substring(i,  i  +  1));  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  ||  currentOption.hasArg())  {  tokens.add(token.substring(i,  i  +  1));  [BUGGY]      process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	||  currentOption.hasArg())  {  tokens.add(token.substring(i,  i  +  1));	  ||    currentOption.hasArg())    {    tokens.add(token.substring(0,    i    +    1));    	non-compiled	[CE]  ')'  expected	3	None	replace
41	[BUG]  [BUGGY]  ||  currentOption.hasArgs())  {  tokens.add(token.substring(0,  i  +  1));  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  ||  currentOption.hasArgs())  {  tokens.add(token.substring(0,  i  +  1));  [BUGGY]      process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	||  currentOption.hasArgs())  {  tokens.add(token.substring(0,  i  +  1));	  ||    currentOption.hasArg())    {    tokens.add(token.substring(0,    i    +    1));    	non-compiled	[CE]  ')'  expected	3	None	replace
42	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token.substring(i  +  1));  tokens.add(token.substring(i  +  1));  }  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption)  {  tokens.add(token.substring(i  +  1));  tokens.add(token.substring(i  +  1));  }  [BUGGY]      process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	if(stopAtNonOption)  {  tokens.add(token.substring(i  +  1));  tokens.add(token.substring(i  +  1));  }	          tokens.add(token.substring(i    +    1));    tokens.add(token.substring(i));    	non-compiled	[CE]  ')'  expected	42	None	replace
43	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token.substring(i  +  1));  tokens.add(token.substring(i  +  1));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption)  {  tokens.add(token.substring(i  +  1));  tokens.add(token.substring(i  +  1));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	if(stopAtNonOption)  {  tokens.add(token.substring(i  +  1));  tokens.add(token.substring(i  +  1));  }  else  {  throw  new  IllegalArgumentException( " ");  }	          tokens.add(token.substring(i    +    1));    tokens.add(token.substring(i));    	non-compiled	[CE]  ')'  expected	42	None	replace
44	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token.substring(i  +  1));  tokens.add(token.substring(i  +  1));  }  else  {  break;  }  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption)  {  tokens.add(token.substring(i  +  1));  tokens.add(token.substring(i  +  1));  }  else  {  break;  }  [BUGGY]      process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	if(stopAtNonOption)  {  tokens.add(token.substring(i  +  1));  tokens.add(token.substring(i  +  1));  }  else  {  break;  }	          tokens.add(token.substring(i    +    1));    tokens.add(token.substring(i));    	non-compiled	[CE]  ')'  expected	42	None	replace
45	[BUG]  [BUGGY]  execute(token,  token.substring(i  +  1));  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  execute(token,  token.substring(i  +  1));  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	execute(token,  token.substring(i  +  1));	  process(ch,    token.substring(i    +    1));    	non-compiled	[CE]  ')'  expected	32	None	replace
46	[BUG]  [BUGGY]  process(token.substring(0,  i  +  1),  currentOption);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  process(token.substring(0,  i  +  1),  currentOption);  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	process(token.substring(0,  i  +  1),  currentOption);	  process(token.substring(0,    i    +    1));    	non-compiled	[CE]  ')'  expected	26	None	replace
47	[BUG]  [BUGGY]  process(token.substring(0,  i  +  1),  stopAtNonOption);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  process(token.substring(0,  i  +  1),  stopAtNonOption);  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	process(token.substring(0,  i  +  1),  stopAtNonOption);	  process(token.substring(0,    i    +    1));    	non-compiled	[CE]  ')'  expected	26	None	replace
48	[BUG]  [BUGGY]  process(ch,  token.substring(0,  i  +  1));  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  process(ch,  token.substring(0,  i  +  1));  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	process(ch,  token.substring(0,  i  +  1));	  process(token.substring(0,    i    +    1));    	non-compiled	[CE]  ')'  expected	26	None	replace
49	[BUG]  [BUGGY]  ||  currentOption.hasArg())  {  tokens.add(token.substring(i  +  1,  ch),  stopAtNonOption);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  ||  currentOption.hasArg())  {  tokens.add(token.substring(i  +  1,  ch),  stopAtNonOption);  [BUGGY]      process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	||  currentOption.hasArg())  {  tokens.add(token.substring(i  +  1,  ch),  stopAtNonOption);	  ||    currentOption.hasArg())    {    tokens.add(token.substring(i    +    1,    ch));    	non-compiled	[CE]  ')'  expected	46	None	replace
50	[BUG]  [BUGGY]  ||  currentOption.hasArgs())  {  tokens.add(token.substring(i  +  1,  ch));  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  ||  currentOption.hasArgs())  {  tokens.add(token.substring(i  +  1,  ch));  [BUGGY]      process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	||  currentOption.hasArgs())  {  tokens.add(token.substring(i  +  1,  ch));	  ||    currentOption.hasArg())    {    tokens.add(token.substring(i    +    1,    ch));    	non-compiled	[CE]  ')'  expected	46	None	replace
51	[BUG]  [BUGGY]  ||  currentOption.hasArg())  {  tokens.add(token.substring(i  +  1,  end));  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  ||  currentOption.hasArg())  {  tokens.add(token.substring(i  +  1,  end));  [BUGGY]      process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	||  currentOption.hasArg())  {  tokens.add(token.substring(i  +  1,  end));	  ||    currentOption.hasArg())    {    tokens.add(token.substring(i    +    1,    ch));    	non-compiled	[CE]  ')'  expected	46	None	replace
52	[BUG]  [BUGGY]  process(token.substring(i  +  1,  currentOption.getName()));  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  process(token.substring(i  +  1,  currentOption.getName()));  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	process(token.substring(i  +  1,  currentOption.getName()));	  process(token.substring(i,    currentOption.getName()));    	non-compiled	[CE]  ')'  expected	57	None	replace
53	[BUG]  [BUGGY]  process(token.substring(0,  currentOption.getName()));  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  process(token.substring(0,  currentOption.getName()));  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	process(token.substring(0,  currentOption.getName()));	  process(token.substring(i,    currentOption.getName()));    	non-compiled	[CE]  ')'  expected	57	None	replace
54	[BUG]  [BUGGY]  process(token.substring(i,  currentOption.getName()  +  1));  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  process(token.substring(i,  currentOption.getName()  +  1));  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	process(token.substring(i,  currentOption.getName()  +  1));	  process(token.substring(i,    currentOption.getName()));    	non-compiled	[CE]  ')'  expected	57	None	replace
55	[BUG]  [BUGGY]  process(token.substring(i,  currentOption.getLength()));  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  process(token.substring(i,  currentOption.getLength()));  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	process(token.substring(i,  currentOption.getLength()));	  process(token.substring(i,    currentOption.getName()));    	non-compiled	[CE]  ')'  expected	57	None	replace
56	[BUG]  [BUGGY]  accept(token.substring(i  +  1),  stopAtNonOption);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  accept(token.substring(i  +  1),  stopAtNonOption);  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	accept(token.substring(i  +  1),  stopAtNonOption);	  accept(token.substring(i    +    1));    	non-compiled	[CE]  	54	None	replace
57	[BUG]  [BUGGY]  accept(token.substring(i  +  1),  currentOption);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  accept(token.substring(i  +  1),  currentOption);  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	accept(token.substring(i  +  1),  currentOption);	  accept(token.substring(i    +    1));    	non-compiled	[CE]  ')'  expected	54	None	replace
58	[BUG]  [BUGGY]  accept(token.substring(i  +  1),  ch);  [CE]  unclosed  string  literal  [FE]                      AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  accept(token.substring(i  +  1),  ch);  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	accept(token.substring(i  +  1),  ch);	  accept(token.substring(i    +    1));    	non-compiled	[CE]  unclosed  string  literal	54	None	replace
59	[BUG]  [BUGGY]  Process(token.substring(0,  i  +  1),  currentOption);  [CE]  unclosed  string  literal  [FE]              AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  Process(token.substring(0,  i  +  1),  currentOption);  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	Process(token.substring(0,  i  +  1),  currentOption);	  Process(token.substring(0,    i    +    1));    	non-compiled	[CE]  unclosed  string  literal	45	None	replace
60	[BUG]  [BUGGY]  Process(token.substring(0,  i  +  1),  currentOption.hasArg());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  Process(token.substring(0,  i  +  1),  currentOption.hasArg());  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	Process(token.substring(0,  i  +  1),  currentOption.hasArg());	  Process(token.substring(0,    i    +    1));    	non-compiled	[CE]  	45	None	replace
61	[BUG]  [BUGGY]  Process(token.substring(0,  i));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  Process(token.substring(0,  i));  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	Process(token.substring(0,  i));	  Process(token.substring(0,    i    +    1));    	non-compiled	[CE]  	45	None	replace
62	[BUG]  [BUGGY]  Process(token.substring(0,  i  +  1),  stopAtNonOption);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  Process(token.substring(0,  i  +  1),  stopAtNonOption);  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	Process(token.substring(0,  i  +  1),  stopAtNonOption);	  Process(token.substring(0,    i    +    1));    	non-compiled	[CE]  	45	None	replace
63	[BUG]  [BUGGY]  beginOption(token.substring(i  +  1),  currentOption);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  beginOption(token.substring(i  +  1),  currentOption);  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	beginOption(token.substring(i  +  1),  currentOption);	  beginOption(token.substring(i    +    1),    stopAtNonOption);    	non-compiled	[CE]  	55	None	replace
64	[BUG]  [BUGGY]  beginOption(token.substring(i  +  1),  ch);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  beginOption(token.substring(i  +  1),  ch);  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	beginOption(token.substring(i  +  1),  ch);	  beginOption(token.substring(i    +    1),    stopAtNonOption);    	non-compiled	[CE]  	55	None	replace
65	[BUG]  [BUGGY]  beginOption(ch,  token.substring(1));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  beginOption(ch,  token.substring(1));  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	beginOption(ch,  token.substring(1));	  beginOption(token.substring(1));    	non-compiled	[CE]  	13	None	replace
66	[BUG]  [BUGGY]  addToken(token.substring(1));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  addToken(token.substring(1));  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	addToken(token.substring(1));	  beginOption(token.substring(1));    	non-compiled	[CE]  	13	None	replace
67	[BUG]  [BUGGY]  beginOption(ch);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  beginOption(ch);  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	beginOption(ch);	  beginOption(token.substring(1));    	non-compiled	[CE]  	13	None	replace
68	[BUG]  [BUGGY]  joinOption(token.substring(1));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  joinOption(token.substring(1));  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	joinOption(token.substring(1));	  beginOption(token.substring(1));    	non-compiled	[CE]  	13	None	replace
69	[BUG]  [BUGGY]  addToken(token.substring(i  +  1),  token.length()  -  1);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  addToken(token.substring(i  +  1),  token.length()  -  1);  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	addToken(token.substring(i  +  1),  token.length()  -  1);	  addToken(token.substring(i    +    1),    token.length());    	non-compiled	[CE]  	22	None	replace
70	[BUG]  [BUGGY]  addToken(token.substring(i  +  1),  token.length()  -  1,  token.length());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  addToken(token.substring(i  +  1),  token.length()  -  1,  token.length());  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	addToken(token.substring(i  +  1),  token.length()  -  1,  token.length());	  addToken(token.substring(i    +    1),    token.length());    	non-compiled	[CE]  	22	None	replace
71	[BUG]  [BUGGY]  tokens.add(token.substring(i  +  1),  token.length());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tokens.add(token.substring(i  +  1),  token.length());  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	tokens.add(token.substring(i  +  1),  token.length());	  addToken(token.substring(i    +    1),    token.length());    	non-compiled	[CE]  	22	None	replace
72	[BUG]  [BUGGY]  addToken(token.substring(i  +  1),  token.length()  +  1);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  addToken(token.substring(i  +  1),  token.length()  +  1);  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	addToken(token.substring(i  +  1),  token.length()  +  1);	  addToken(token.substring(i    +    1),    token.length());    	non-compiled	[CE]  	22	None	replace
73	[BUG]  [BUGGY]  ||  currentOption.hasArg(ch))  {  tokens.add(token.substring(i  +  1));  break;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  ||  currentOption.hasArg(ch))  {  tokens.add(token.substring(i  +  1));  break;  [BUGGY]      process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	||  currentOption.hasArg(ch))  {  tokens.add(token.substring(i  +  1));  break;	  ||    currentOption.hasArgs())    {    tokens.add(token.substring(i    +    1));    break;    	non-compiled	[CE]  	34	None	replace
74	[BUG]  [BUGGY]  process(token,  token.substring(1));  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  process(token,  token.substring(1));  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	process(token,  token.substring(1));	  process(ch,    token.substring(1));    	non-compiled	[CE]  	12	None	replace
75	[BUG]  [BUGGY]  process(token,  ch.substring(1));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  process(token,  ch.substring(1));  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	process(token,  ch.substring(1));	  process(ch,    token.substring(1));    	non-compiled	[CE]  	12	None	replace
76	[BUG]  [BUGGY]  process(token,  ch);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  process(token,  ch);  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	process(token,  ch);	  process(ch,    token.substring(1));    	non-compiled	[CE]  	12	None	replace
77	[BUG]  [BUGGY]  process(token,  token.substring(2));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  process(token,  token.substring(2));  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	process(token,  token.substring(2));	  process(ch,    token.substring(1));    	non-compiled	[CE]  	12	None	replace
78	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token.substring(i  +  1));  tokens.add(token.substring(0,  i));  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption)  {  tokens.add(token.substring(i  +  1));  tokens.add(token.substring(0,  i));  }  [BUGGY]      process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	if(stopAtNonOption)  {  tokens.add(token.substring(i  +  1));  tokens.add(token.substring(0,  i));  }	          tokens.add(token.substring(i    +    1));    tokens.add(token.substring(0,    i));    	non-compiled	[CE]  	44	None	replace
79	[BUG]  [BUGGY]  else  if(stopAtNonOption)  {  tokens.add(token.substring(i  +  1));  tokens.add(token.substring(0,  i));  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  else  if(stopAtNonOption)  {  tokens.add(token.substring(i  +  1));  tokens.add(token.substring(0,  i));  }  [BUGGY]      process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	else  if(stopAtNonOption)  {  tokens.add(token.substring(i  +  1));  tokens.add(token.substring(0,  i));  }	          tokens.add(token.substring(i    +    1));    tokens.add(token.substring(0,    i));    	non-compiled	[CE]  	44	None	replace
80	[BUG]  [BUGGY]  accept(token.substring(0,  i  +  1));  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  accept(token.substring(0,  i  +  1));  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	accept(token.substring(0,  i  +  1));	  accept(token.substring(0,    i));    	non-compiled	[CE]  	51	None	replace
81	[BUG]  [BUGGY]  accept(token.substring(0,  1));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  accept(token.substring(0,  1));  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	accept(token.substring(0,  1));	  accept(token.substring(0,    i));    	non-compiled	[CE]  	51	None	replace
82	[BUG]  [BUGGY]  accept(ch,  token.substring(0,  i));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  accept(ch,  token.substring(0,  i));  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	accept(ch,  token.substring(0,  i));	  accept(token.substring(0,    i));    	non-compiled	[CE]  	51	None	replace
83	[BUG]  [BUGGY]  accept(ch.substring(0,  i));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  accept(ch.substring(0,  i));  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	accept(ch.substring(0,  i));	  accept(token.substring(0,    i));    	non-compiled	[CE]  	51	None	replace
84	[BUG]  [BUGGY]  ||  currentOption.hasArg())  {  tokens.add(token.substring(0,  i  +  1));  break;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  ||  currentOption.hasArg())  {  tokens.add(token.substring(0,  i  +  1));  break;  }  [BUGGY]      process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	||  currentOption.hasArg())  {  tokens.add(token.substring(0,  i  +  1));  break;  }	  ||    currentOption.hasArg())    {    tokens.add(token.substring(0,    i    +    1));    break;    	non-compiled	[CE]  	35	None	replace
85	[BUG]  [BUGGY]  ||  currentOption.hasArg())  {  tokens.add(token.substring(i  +  1,  i  +  1));  break;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  ||  currentOption.hasArg())  {  tokens.add(token.substring(i  +  1,  i  +  1));  break;  [BUGGY]      process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	||  currentOption.hasArg())  {  tokens.add(token.substring(i  +  1,  i  +  1));  break;	  ||    currentOption.hasArg())    {    tokens.add(token.substring(0,    i    +    1));    break;    	non-compiled	[CE]  	35	None	replace
86	[BUG]  [BUGGY]  tokens.add(token.substring(i  +  2));  break;  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tokens.add(token.substring(i  +  2));  break;  [BUGGY]      process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	tokens.add(token.substring(i  +  2));  break;	  tokens.add(token.substring(2));    break;    	non-compiled	[CE]  	41	None	replace
87	[BUG]  [BUGGY]  tokens.add(token.substring(i  +  1,  i  +  1));  break;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tokens.add(token.substring(i  +  1,  i  +  1));  break;  [BUGGY]      process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	tokens.add(token.substring(i  +  1,  i  +  1));  break;	  tokens.add(token.substring(i,    i    +    1));    break;    	non-compiled	[CE]  	53	None	replace
88	[BUG]  [BUGGY]  tokens.add(Token.NAME,  ch);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tokens.add(Token.NAME,  ch);  [BUGGY]      process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	tokens.add(Token.NAME,  ch);	  tokens.add(Token.NAME);    	non-compiled	[CE]  	49	None	replace
89	[BUG]  [BUGGY]  tokens.add(Token.NAME,  currentOption);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tokens.add(Token.NAME,  currentOption);  [BUGGY]      process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	tokens.add(Token.NAME,  currentOption);	  tokens.add(Token.NAME);    	non-compiled	[CE]  	49	None	replace
90	[BUG]  [BUGGY]  tokens.add(Token.NAME,  stopAtNonOption);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tokens.add(Token.NAME,  stopAtNonOption);  [BUGGY]      process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	tokens.add(Token.NAME,  stopAtNonOption);	  tokens.add(Token.NAME);    	non-compiled	[CE]  	49	None	replace
91	[BUG]  [BUGGY]  process(token.substring(i  +  1),  ch);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  process(token.substring(i  +  1),  ch);  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	process(token.substring(i  +  1),  ch);	  process(token.substring(i    +    1),    stopAtNonOption);    	non-compiled	[CE]  	31	None	replace
92	[BUG]  [BUGGY]  process(token.substring(i  +  1),  stopAtNonOption,  currentOption);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  process(token.substring(i  +  1),  stopAtNonOption,  currentOption);  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	process(token.substring(i  +  1),  stopAtNonOption,  currentOption);	  process(token.substring(i    +    1),    stopAtNonOption);    	non-compiled	[CE]  	31	None	replace
93	[BUG]  [BUGGY]  execute(ch,  token.substring(i));  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  execute(ch,  token.substring(i));  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	execute(ch,  token.substring(i));	  execute(token,    token.substring(i));    	non-compiled	[CE]  	40	None	replace
94	[BUG]  [BUGGY]  execute(token,  ch,  token.substring(i));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  execute(token,  ch,  token.substring(i));  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	execute(token,  ch,  token.substring(i));	  execute(token,    token.substring(i));    	non-compiled	[CE]  	40	None	replace
95	[BUG]  [BUGGY]  execute(token,  token.substring(0,  i));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  execute(token,  token.substring(0,  i));  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	execute(token,  token.substring(0,  i));	  execute(token,    token.substring(i));    	non-compiled	[CE]  	40	None	replace
96	[BUG]  [BUGGY]  process(token,  currentOption.substring(i));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  process(token,  currentOption.substring(i));  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	process(token,  currentOption.substring(i));	  process(token,    ch.substring(i));    	non-compiled	[CE]  	6	None	replace
97	[BUG]  [BUGGY]  tokens.add(token.substring(0,  6));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tokens.add(token.substring(0,  6));  [BUGGY]      process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	tokens.add(token.substring(0,  6));	  tokens.add(token.substring(0,    2));    	non-compiled	[CE]  	15	None	replace
98	[BUG]  [BUGGY]  joinOption(ch);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  joinOption(ch);  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	joinOption(ch);	  joinOption(token.substring(i    +    1));    	non-compiled	[CE]  	24	None	replace
99	[BUG]  [BUGGY]  joinOption(ch.substring(i  +  1));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  joinOption(ch.substring(i  +  1));  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	joinOption(ch.substring(i  +  1));	  joinOption(token.substring(i    +    1));    	non-compiled	[CE]  	24	None	replace
100	[BUG]  [BUGGY]  process(ch,  token.substring(i,  i));  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  process(ch,  token.substring(i,  i));  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	process(ch,  token.substring(i,  i));	  process(token.substring(i,    i));    	non-compiled	[CE]  	48	None	replace
101	[BUG]  [BUGGY]  process(token.substring(i,  ch));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  process(token.substring(i,  ch));  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	process(token.substring(i,  ch));	  process(token.substring(i,    i));    	non-compiled	[CE]  	48	None	replace
102	[BUG]  [BUGGY]  process(token.substring(i  +  1,  i));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  process(token.substring(i  +  1,  i));  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	process(token.substring(i  +  1,  i));	  process(token.substring(i,    i));    	non-compiled	[CE]  	48	None	replace
103	[BUG]  [BUGGY]  tokens.add(token.substring(i,  1));  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tokens.add(token.substring(i,  1));  [BUGGY]      process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	tokens.add(token.substring(i,  1));	  tokens.add(token.substring(0,    1));    	non-compiled	[CE]  	14	None	replace
104	[BUG]  [BUGGY]  try  ==  stopAtNonOption)  {  tokens.add(token.substring(i  +  1));  break;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  try  ==  stopAtNonOption)  {  tokens.add(token.substring(i  +  1));  break;  }  [BUGGY]      process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	try  ==  stopAtNonOption)  {  tokens.add(token.substring(i  +  1));  break;  }	  if(stopAtNonOption)    {    tokens.add(token.substring(i    +    1));    break;    }    	non-compiled	[CE]  	17	None	replace
105	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(i);  if(stopAtNonOption)  {  tokens.add(token.substring(i  +  1));  break;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  Option  currentOption  =  options.getOption(i);  if(stopAtNonOption)  {  tokens.add(token.substring(i  +  1));  break;  }  [BUGGY]      process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	Option  currentOption  =  options.getOption(i);  if(stopAtNonOption)  {  tokens.add(token.substring(i  +  1));  break;  }	  if(stopAtNonOption)    {    tokens.add(token.substring(i    +    1));    break;    }    	non-compiled	[CE]  	17	None	replace
106	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(i);  if(stopAtNonOption)  {  tokens.add(currentOption.substring(i  +  1));  break;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  Option  currentOption  =  options.getOption(i);  if(stopAtNonOption)  {  tokens.add(currentOption.substring(i  +  1));  break;  }  [BUGGY]      process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	Option  currentOption  =  options.getOption(i);  if(stopAtNonOption)  {  tokens.add(currentOption.substring(i  +  1));  break;  }	  if(stopAtNonOption)    {    tokens.add(token.substring(i    +    1));    break;    }    	non-compiled	[CE]  	17	None	replace
107	[BUG]  [BUGGY]  process(token.substring(i  +  1,  currentOption.getValue()));  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  process(token.substring(i  +  1,  currentOption.getValue()));  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	process(token.substring(i  +  1,  currentOption.getValue()));	  process(token.substring(i,    currentOption.getValue()));    	non-compiled	[CE]  	56	None	replace
108	[BUG]  [BUGGY]  process(token.substring(i,  currentOption.getValue()  +  1));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  process(token.substring(i,  currentOption.getValue()  +  1));  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	process(token.substring(i,  currentOption.getValue()  +  1));	  process(token.substring(i,    currentOption.getValue()));    	non-compiled	[CE]  	56	None	replace
109	[BUG]  [BUGGY]  process(token.substring(i,  currentOption.getValue()  -  1));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  process(token.substring(i,  currentOption.getValue()  -  1));  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	process(token.substring(i,  currentOption.getValue()  -  1));	  process(token.substring(i,    currentOption.getValue()));    	non-compiled	[CE]  	56	None	replace
110	[BUG]  [BUGGY]  process(token.substring(0,  currentOption.getValue()));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  process(token.substring(0,  currentOption.getValue()));  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	process(token.substring(0,  currentOption.getValue()));	  process(token.substring(i,    currentOption.getValue()));    	non-compiled	[CE]  	56	None	replace
111	[BUG]  [BUGGY]  continueOption(ch,  token.substring(i  +  1));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  continueOption(ch,  token.substring(i  +  1));  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	continueOption(ch,  token.substring(i  +  1));	  continueOption(token.substring(i    +    1));    	non-compiled	[CE]  	25	None	replace
112	[BUG]  [BUGGY]  continueOption(ch.substring(i  +  1));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  continueOption(ch.substring(i  +  1));  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	continueOption(ch.substring(i  +  1));	  continueOption(token.substring(i    +    1));    	non-compiled	[CE]  	25	None	replace
113	[BUG]  [BUGGY]  continueOption(ch);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  continueOption(ch);  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	continueOption(ch);	  continueOption(token.substring(i    +    1));    	non-compiled	[CE]  	25	None	replace
114	[BUG]  [BUGGY]  continueOption(token.substring(i  +  1),  stopAtNonOption);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  continueOption(token.substring(i  +  1),  stopAtNonOption);  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	continueOption(token.substring(i  +  1),  stopAtNonOption);	  continueOption(token.substring(i    +    1));    	non-compiled	[CE]  	25	None	replace
115	[BUG]  [BUGGY]  accept(ch,  token.substring(i));  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  accept(ch,  token.substring(i));  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	accept(ch,  token.substring(i));	  accept(token,    token.substring(i));    	non-compiled	[CE]  	39	None	replace
116	[BUG]  [BUGGY]  accept(token,  ch,  token.substring(i));  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  accept(token,  ch,  token.substring(i));  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	accept(token,  ch,  token.substring(i));	  accept(token,    token.substring(i));    	non-compiled	[CE]  	39	None	replace
117	[BUG]  [BUGGY]  accept(token,  token.substring(0,  i));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  accept(token,  token.substring(0,  i));  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	accept(token,  token.substring(0,  i));	  accept(token,    token.substring(i));    	non-compiled	[CE]  	39	None	replace
118	[BUG]  [BUGGY]  process(token,  ch.substring(i  +  1),  currentOption);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  process(token,  ch.substring(i  +  1),  currentOption);  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	process(token,  ch.substring(i  +  1),  currentOption);	  process(token,    ch.substring(i    +    1));    	non-compiled	[CE]  	7	None	replace
119	[BUG]  [BUGGY]  process(token,  ch.substring(i  +  1),  stopAtNonOption);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  process(token,  ch.substring(i  +  1),  stopAtNonOption);  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	process(token,  ch.substring(i  +  1),  stopAtNonOption);	  process(token,    ch.substring(i    +    1));    	non-compiled	[CE]  	7	None	replace
120	[BUG]  [BUGGY]  process(token.substring(i  +  1),  token);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  process(token.substring(i  +  1),  token);  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	process(token.substring(i  +  1),  token);	  process(token.substring(i    +    1),    currentOption);    	non-compiled	[CE]  	30	None	replace
121	[BUG]  [BUGGY]  process(token.substring(i  +  1),  currentOption,  stopAtNonOption);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  process(token.substring(i  +  1),  currentOption,  stopAtNonOption);  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	process(token.substring(i  +  1),  currentOption,  stopAtNonOption);	  process(token.substring(i    +    1),    currentOption);    	non-compiled	[CE]  	30	None	replace
122	[BUG]  [BUGGY]  ||  currentOption.hasArgs())  {  tokens.add(token.substring(i  +  1));  break;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  ||  currentOption.hasArgs())  {  tokens.add(token.substring(i  +  1));  break;  }  [BUGGY]      process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	||  currentOption.hasArgs())  {  tokens.add(token.substring(i  +  1));  break;  }	  ||    currentOption.hasArg())    {    tokens.add(token.substring(i    +    1));    break;    }    	non-compiled	[CE]  	33	None	replace
123	[BUG]  [BUGGY]  ||  currentOption.hasArg())  {  tokens.add(token.substring(i  +  1);  break;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  ||  currentOption.hasArg())  {  tokens.add(token.substring(i  +  1);  break;  }  [BUGGY]      process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	||  currentOption.hasArg())  {  tokens.add(token.substring(i  +  1);  break;  }	  ||    currentOption.hasArg())    {    tokens.add(token.substring(i    +    1));    break;    }    	non-compiled	[CE]  	33	None	replace
124	[BUG]  [BUGGY]  tokens.add(token.substring(0,  1));  break;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tokens.add(token.substring(0,  1));  break;  [BUGGY]      process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	tokens.add(token.substring(0,  1));  break;	  tokens.add(token.substring(0,    i));    break;    	non-compiled	[CE]  	20	None	replace
125	[BUG]  [BUGGY]  tokens.add(token.substring(0,  i  +  2));  break;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tokens.add(token.substring(0,  i  +  2));  break;  [BUGGY]      process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	tokens.add(token.substring(0,  i  +  2));  break;	  tokens.add(token.substring(0,    i));    break;    	non-compiled	[CE]  	20	None	replace
126	[BUG]  [BUGGY]  tokens.add(token.substring(i  +  1,  i));  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tokens.add(token.substring(i  +  1,  i));  [BUGGY]      process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	tokens.add(token.substring(i  +  1,  i));	  tokens.add(token.substring(i,    i));    	non-compiled	[CE]  	37	None	replace
127	[BUG]  [BUGGY]  process(token.substring(i,  token.length()));  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  process(token.substring(i,  token.length()));  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	process(token.substring(i,  token.length()));	  process(ch,    token.substring(1));    	non-compiled	[CE]  	12	None	replace
128	[BUG]  [BUGGY]  addToken(token.substring(i  +  1),  stopAtNonOption);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  addToken(token.substring(i  +  1),  stopAtNonOption);  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	addToken(token.substring(i  +  1),  stopAtNonOption);	  addToken(token.substring(i    +    1),    currentOption);    	non-compiled	[CE]  	21	None	replace
129	[BUG]  [BUGGY]  process(token.substring(i  +  1),  stopAtNonOption,  ch);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  process(token.substring(i  +  1),  stopAtNonOption,  ch);  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	process(token.substring(i  +  1),  stopAtNonOption,  ch);	  process(token.substring(i    +    1),    stopAtNonOption);    	non-compiled	[CE]  	31	None	replace
130	[BUG]  [BUGGY]  tokens.add(token.substring(i,  i));  break;  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tokens.add(token.substring(i,  i));  break;  [BUGGY]      process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	tokens.add(token.substring(i,  i));  break;	  tokens.add(token.substring(2));    break;    	non-compiled	[CE]  	41	None	replace
131	[BUG]  [BUGGY]  accept(ch,  token.substring(i  +  1));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  accept(ch,  token.substring(i  +  1));  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	accept(ch,  token.substring(i  +  1));	  accept(token.substring(i    +    1));    	non-compiled	[CE]  	54	None	replace
132	[BUG]  [BUGGY]  beginOption(ch,  token.substring(i  +  1),  stopAtNonOption);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  beginOption(ch,  token.substring(i  +  1),  stopAtNonOption);  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	beginOption(ch,  token.substring(i  +  1),  stopAtNonOption);	  beginOption(token.substring(i    +    1),    stopAtNonOption);    	non-compiled	[CE]  	55	None	replace
133	[BUG]  [BUGGY]  execute(token.substring(i  +  1));  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  execute(token.substring(i  +  1));  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	execute(token.substring(i  +  1));	  execute(token,    token.substring(i));    	non-compiled	[CE]  	40	None	replace
134	[BUG]  [BUGGY]  joinOption(token.substring(i  +  1),  stopAtNonOption);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  joinOption(token.substring(i  +  1),  stopAtNonOption);  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	joinOption(token.substring(i  +  1),  stopAtNonOption);	  joinOption(token.substring(i    +    1));    	non-compiled	[CE]  	24	None	replace
135	[BUG]  [BUGGY]  tokens.add(Token.NAME  +  ch);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tokens.add(Token.NAME  +  ch);  [BUGGY]      process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	tokens.add(Token.NAME  +  ch);	  tokens.add(Token.NAME);    	non-compiled	[CE]  	49	None	replace
136	[BUG]  [BUGGY]  ||  currentOption.hasArg())  {  tokens.add(token.substring(0,  i));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  ||  currentOption.hasArg())  {  tokens.add(token.substring(0,  i));  [BUGGY]      process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	||  currentOption.hasArg())  {  tokens.add(token.substring(0,  i));	  ||    currentOption.hasArg())    {    tokens.add(token.substring(0,    i    +    1));    	non-compiled	[CE]  	3	None	replace
137	[BUG]  [BUGGY]  accept(token,  token.charAt(i));  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  accept(token,  token.charAt(i));  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	accept(token,  token.charAt(i));	  accept(token,    token.substring(i));    	non-compiled	[CE]  	39	None	replace
138	[BUG]  [BUGGY]  tokens.add(token.substring(i,  0));  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tokens.add(token.substring(i,  0));  [BUGGY]      process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	tokens.add(token.substring(i,  0));	  tokens.add(token.substring(i,    i));    	non-compiled	[CE]  	37	None	replace
139	[BUG]  [BUGGY]  tokens.add(ch.substring(0,  i  +  1));  [CE]  [FE]        AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tokens.add(ch.substring(0,  i  +  1));  [BUGGY]      process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	tokens.add(ch.substring(0,  i  +  1));	  tokens.add(token.substring(0,    i    +    1));    	non-compiled	[CE]  	8	None	replace
140	[BUG]  [BUGGY]  Process(token.substring(0,  i  +  1),  currentOption));  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  Process(token.substring(0,  i  +  1),  currentOption));  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	Process(token.substring(0,  i  +  1),  currentOption));	  Process(token.substring(0,    i    +    1));    	non-compiled	[CE]  	45	None	replace
141	[BUG]  [BUGGY]  proceed(token.substring(0,  i  +  1)+  1);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  proceed(token.substring(0,  i  +  1)+  1);  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	proceed(token.substring(0,  i  +  1)+  1);	  proceed(token.substring(0,    i    +    1));    	non-compiled	[CE]  	29	None	replace
142	[BUG]  [BUGGY]  addToken(token,  token.substring(i  +  1));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  addToken(token,  token.substring(i  +  1));  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	addToken(token,  token.substring(i  +  1));	  beginOption(ch,    token.substring(i    +    1));    	non-compiled	[CE]  	23	None	replace
143	[BUG]  [BUGGY]  tokens.add(token.substring(i,  ch  +  1));  [CE]  [FE]        AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tokens.add(token.substring(i,  ch  +  1));  [BUGGY]      process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	tokens.add(token.substring(i,  ch  +  1));	  tokens.add(token.substring(i,    ch));    	non-compiled	[CE]  	52	None	replace
144	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token.substring(i  +  1));  tokens.add(token.substring(0,  i));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption)  {  tokens.add(token.substring(i  +  1));  tokens.add(token.substring(0,  i));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	if(stopAtNonOption)  {  tokens.add(token.substring(i  +  1));  tokens.add(token.substring(0,  i));  }  else  {  throw  new  IllegalArgumentException( " ");  }	          tokens.add(token.substring(i    +    1));    tokens.add(token.substring(0,    i));    	non-compiled	[CE]  	44	None	replace
145	[BUG]  [BUGGY]  proceed(ch,  token.substring(i  +  1));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  proceed(ch,  token.substring(i  +  1));  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	proceed(ch,  token.substring(i  +  1));	  proceed(token.substring(i    +    1));    	non-compiled	[CE]  	38	None	replace
146	[BUG]  [BUGGY]  proceed(token.charAt(i  +  1));  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  proceed(token.charAt(i  +  1));  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	proceed(token.charAt(i  +  1));	  proceed(token.substring(i    +    1));    	non-compiled	[CE]  ')'  expected	38	None	replace
147	[BUG]  [BUGGY]  process(currentOption.substring(i,  token.getName()));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  process(currentOption.substring(i,  token.getName()));  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	process(currentOption.substring(i,  token.getName()));	  process(token.substring(i,    currentOption.getName()));    	non-compiled	[CE]  	57	None	replace
148	[BUG]  [BUGGY]  parent  ==  null  &&  stopAtNonOption)  {  tokens.add(token.substring(i  +  1));  break;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  parent  ==  null  &&  stopAtNonOption)  {  tokens.add(token.substring(i  +  1));  break;  }  [BUGGY]      process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	parent  ==  null  &&  stopAtNonOption)  {  tokens.add(token.substring(i  +  1));  break;  }	  if(stopAtNonOption)    {    tokens.add(token.substring(i    +    1));    break;    }    	non-compiled	[CE]  	17	None	replace
149	[BUG]  [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  tokens.add(token.substring(i  +  1));  break;  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  tokens.add(token.substring(i  +  1));  break;  }  [BUGGY]      process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	parent!=  null  &&  stopAtNonOption)  {  tokens.add(token.substring(i  +  1));  break;  }	  if(stopAtNonOption)    {    tokens.add(token.substring(i    +    1));    break;    }    	non-compiled	[CE]  ';'  expected	17	None	replace
150	[BUG]  [BUGGY]  options.add(token.substring(i  +  1));  break;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  options.add(token.substring(i  +  1));  break;  [BUGGY]      process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	options.add(token.substring(i  +  1));  break;	  if(stopAtNonOption)    {    tokens.add(token.substring(i    +    1));    break;    }    	non-compiled	[CE]  	17	None	replace
151	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(ch);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  Option  currentOption  =  options.getOption(ch);  [BUGGY]      process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	Option  currentOption  =  options.getOption(ch);	  if(stopAtNonOption)    {    tokens.add(token.substring(i    +    1));    break;    }    	non-compiled	[CE]  	17	None	replace
152	[BUG]  [BUGGY]  ||  currentOption.hasArg())  {  tokens.add(token.substring(i  +  1,  ch));  break;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  ||  currentOption.hasArg())  {  tokens.add(token.substring(i  +  1,  ch));  break;  }  [BUGGY]      process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	||  currentOption.hasArg())  {  tokens.add(token.substring(i  +  1,  ch));  break;  }	  ||    currentOption.hasArg())    {    tokens.add(token.substring(i    +    1));    break;    }    	non-compiled	[CE]  	33	None	replace
153	[BUG]  [BUGGY]  tokens.add(token.substring(i  +  1,  i  +  1));  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tokens.add(token.substring(i  +  1,  i  +  1));  [BUGGY]      process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	tokens.add(token.substring(i  +  1,  i  +  1));	  tokens.add(token.substring(i,    i    +    1));    	non-compiled	[CE]  ';'  expected	9	None	replace
154	[BUG]  [BUGGY]  tokens.add( "') ");  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tokens.add( "') ");  [BUGGY]      process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	tokens.add( "') ");	  tokens.add(   "n   ");    	non-compiled	[CE]  ';'  expected	47	None	replace
155	[BUG]  [BUGGY]  continueOption(ch  +  1);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  continueOption(ch  +  1);  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	continueOption(ch  +  1);	  continueOption(token.substring(i    +    1));    	non-compiled	[CE]  ')'  expected	25	None	replace
156	[BUG]  [BUGGY]  tokens.add(currentOption);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tokens.add(currentOption);  [BUGGY]      process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	tokens.add(currentOption);	  tokens.add(i);    	non-compiled	[CE]  ')'  expected	11	None	replace
157	[BUG]  [BUGGY]  ||  currentOption.hasNext())  {  tokens.add(token.substring(i  +  1,  ch));  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  ||  currentOption.hasNext())  {  tokens.add(token.substring(i  +  1,  ch));  [BUGGY]      process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	||  currentOption.hasNext())  {  tokens.add(token.substring(i  +  1,  ch));	  ||    currentOption.hasNext())    {    tokens.add(token.substring(i    +    1));    	non-compiled	[CE]  ';'  expected	50	None	replace
158	[BUG]  [BUGGY]  ||  currentOption.hasArg(token.length()))  {  tokens.add(token.substring(i  +  1));  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  ||  currentOption.hasArg(token.length()))  {  tokens.add(token.substring(i  +  1));  [BUGGY]      process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	||  currentOption.hasArg(token.length()))  {  tokens.add(token.substring(i  +  1));	  ||    currentOption.hasArgs())    {    tokens.add(token.substring(i    +    1));    	non-compiled	[CE]  ')'  expected	1	None	replace
159	[BUG]  [BUGGY]  ||  currentOption.hasArgument())  {  tokens.add(token.substring(i  +  1));  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  ||  currentOption.hasArgument())  {  tokens.add(token.substring(i  +  1));  [BUGGY]      process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	||  currentOption.hasArgument())  {  tokens.add(token.substring(i  +  1));	  ||    currentOption.hasArgs())    {    tokens.add(token.substring(i    +    1));    	non-compiled	[CE]  ')'  expected	1	None	replace
160	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token.substring(i  +  1));  tokens.add(token.substring(1));  }  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption)  {  tokens.add(token.substring(i  +  1));  tokens.add(token.substring(1));  }  [BUGGY]      process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	if(stopAtNonOption)  {  tokens.add(token.substring(i  +  1));  tokens.add(token.substring(1));  }	          tokens.add(token.substring(i    +    1));    tokens.add(token.substring(i));    	non-compiled	[CE]  ')'  expected	42	None	replace
161	[BUG]  [BUGGY]  process(token.substring(i,  1));  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  process(token.substring(i,  1));  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	process(token.substring(i,  1));	  process(token.substring(0,    1));    	non-compiled	[CE]  ')'  expected	27	None	replace
162	[BUG]  [BUGGY]  ||  currentOption.hasArg(token))  {  tokens.add(token.substring(i  +  1,  ch));  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  ||  currentOption.hasArg(token))  {  tokens.add(token.substring(i  +  1,  ch));  [BUGGY]      process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	||  currentOption.hasArg(token))  {  tokens.add(token.substring(i  +  1,  ch));	  ||    currentOption.hasArg())    {    tokens.add(token.substring(i    +    1,    ch));    	non-compiled	[CE]  ')'  expected	46	None	replace
163	[BUG]  [BUGGY]  ||  currentOption.hasArgs())  {  tokens.add(token.substring(0,  i  +  1));  break;  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  ||  currentOption.hasArgs())  {  tokens.add(token.substring(0,  i  +  1));  break;  [BUGGY]      process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	||  currentOption.hasArgs())  {  tokens.add(token.substring(0,  i  +  1));  break;	  ||    currentOption.hasArg())    {    tokens.add(token.substring(0,    i    +    1));    break;    	non-compiled	[CE]  ')'  expected	35	None	replace
164	[BUG]  [BUGGY]  tokens.add(token.substring(i,  2));  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tokens.add(token.substring(i,  2));  [BUGGY]      process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	tokens.add(token.substring(i,  2));	  tokens.add(token.substring(0,    2));    	non-compiled	[CE]  ')'  expected	15	None	replace
165	[BUG]  [BUGGY]  process(token.substring(i,  i  +  1));  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  process(token.substring(i,  i  +  1));  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	process(token.substring(i,  i  +  1));	  process(token.substring(i,    i));    	non-compiled	[CE]  ')'  expected	48	None	replace
166	[BUG]  [BUGGY]  joinOption(currentOption.getArg(),  token.substring(1));  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  joinOption(currentOption.getArg(),  token.substring(1));  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	joinOption(currentOption.getArg(),  token.substring(1));	  beginOption(token.substring(1));    	non-compiled	[CE]  ')'  expected	13	None	replace
167	[BUG]  [BUGGY]  Process(token.substring(0,  i),  currentOption.hasArg());  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  Process(token.substring(0,  i),  currentOption.hasArg());  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	Process(token.substring(0,  i),  currentOption.hasArg());	  Process(token.substring(0,    i    +    1));    	non-compiled	[CE]  ')'  expected	45	None	replace
168	[BUG]  [BUGGY]  ||  currentOption.hasArg())  {  tokens.add(token.substring(0,  ch));  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  ||  currentOption.hasArg())  {  tokens.add(token.substring(0,  ch));  [BUGGY]      process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	||  currentOption.hasArg())  {  tokens.add(token.substring(0,  ch));	  ||    currentOption.hasArg())    {    tokens.add(token.substring(i    +    1,    ch));    	non-compiled	[CE]  ')'  expected	46	None	replace
169	[BUG]  [BUGGY]  tokens.add(token.substring(i  +  1,  ch));  break;  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tokens.add(token.substring(i  +  1,  ch));  break;  [BUGGY]      process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	tokens.add(token.substring(i  +  1,  ch));  break;	  tokens.add(token.substring(i,    i    +    1));    break;    	non-compiled	[CE]  ')'  expected	53	None	replace
170	[BUG]  [BUGGY]  ||  currentOption.hasNext())  {  tokens.add(token.substring(i  +  1));  break;  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  ||  currentOption.hasNext())  {  tokens.add(token.substring(i  +  1));  break;  }  [BUGGY]      process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	||  currentOption.hasNext())  {  tokens.add(token.substring(i  +  1));  break;  }	  ||    currentOption.hasArg())    {    tokens.add(token.substring(i    +    1));    break;    }    	non-compiled	[CE]  ')'  expected	33	None	replace
171	[BUG]  [BUGGY]  beginOption(token.substring(i  +  1),  stopAtNonOption,  ch);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  beginOption(token.substring(i  +  1),  stopAtNonOption,  ch);  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	beginOption(token.substring(i  +  1),  stopAtNonOption,  ch);	  beginOption(token.substring(i    +    1),    stopAtNonOption);    	non-compiled	[CE]  ')'  expected	55	None	replace
172	[BUG]  [BUGGY]  process(token.substring(i  +  1,  currentOption));  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  process(token.substring(i  +  1,  currentOption));  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	process(token.substring(i  +  1,  currentOption));	  process(token.substring(i    +    1),    currentOption);    	non-compiled	[CE]  ')'  expected	30	None	replace
173	[BUG]  [BUGGY]  tokens.add(token.substring(0,  i),  currentOption);  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tokens.add(token.substring(0,  i),  currentOption);  [BUGGY]      process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	tokens.add(token.substring(0,  i),  currentOption);	  tokens.add(token.substring(0,    i    +    1));    	non-compiled	[CE]  ')'  expected	8	None	replace
174	[BUG]  [BUGGY]  startOption(ch,  token.substring(i  +  1));  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  startOption(ch,  token.substring(i  +  1));  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	startOption(ch,  token.substring(i  +  1));	  beginOption(ch,    token.substring(i    +    1));    	non-compiled	[CE]  ')'  expected	23	None	replace
175	[BUG]  [BUGGY]  tokens.add(token.substring(i,  stopAtNonOption));  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tokens.add(token.substring(i,  stopAtNonOption));  [BUGGY]      process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	tokens.add(token.substring(i,  stopAtNonOption));	  tokens.add(token,    stopAtNonOption);    	non-compiled	[CE]  ')'  expected	10	None	replace
176	[BUG]  [BUGGY]  process(token,  ch.substring(2));  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  process(token,  ch.substring(2));  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	process(token,  ch.substring(2));	  process(ch,    token.substring(1));    	non-compiled	[CE]  ')'  expected	12	None	replace
177	[BUG]  [BUGGY]  tokens.add(token.substring(i,  2));  break;  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tokens.add(token.substring(i,  2));  break;  [BUGGY]      process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	tokens.add(token.substring(i,  2));  break;	  tokens.add(token.substring(2));    break;    	non-compiled	[CE]  ')'  expected	41	None	replace
178	[BUG]  [BUGGY]  implement(ch,  token.substring(i));  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  implement(ch,  token.substring(i));  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	implement(ch,  token.substring(i));	  execute(token,    token.substring(i));    	non-compiled	[CE]  ')'  expected	40	None	replace
179	[BUG]  [BUGGY]  execute(token,  ch,  token.substring(i  +  1));  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  execute(token,  ch,  token.substring(i  +  1));  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	execute(token,  ch,  token.substring(i  +  1));	  execute(token,    token.substring(i));    	non-compiled	[CE]  ')'  expected	40	None	replace
180	[BUG]  [BUGGY]  proceed(token.substring(i  +  1),  ch);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  proceed(token.substring(i  +  1),  ch);  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	proceed(token.substring(i  +  1),  ch);	  proceed(token.substring(i    +    1));    	non-compiled	[CE]  ')'  expected	38	None	replace
181	[BUG]  [BUGGY]  accept(token,  ch.substring(i  +  1));  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  accept(token,  ch.substring(i  +  1));  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	accept(token,  ch.substring(i  +  1));	  process(token,    ch.substring(i));    	non-compiled	[CE]  ')'  expected	6	None	replace
182	[BUG]  [BUGGY]  process(token.substring(i,  currentOption.getKey()));  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  process(token.substring(i,  currentOption.getKey()));  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	process(token.substring(i,  currentOption.getKey()));	  process(token.substring(i,    currentOption.getValue()));    	non-compiled	[CE]  ')'  expected	56	None	replace
183	[BUG]  [BUGGY]  addToken(token.substring(i  +  1,  ch));  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  addToken(token.substring(i  +  1,  ch));  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	addToken(token.substring(i  +  1,  ch));	  addToken(token.substring(i    +    1),    ch);    	non-compiled	[CE]  ')'  expected	36	None	replace
184	[BUG]  [BUGGY]  addToken(token.substring(i  +  1,  currentOption));  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  addToken(token.substring(i  +  1,  currentOption));  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	addToken(token.substring(i  +  1,  currentOption));	  addToken(token.substring(i    +    1),    currentOption);    	non-compiled	[CE]  ')'  expected	21	None	replace
185	[BUG]  [BUGGY]  Acceptables.accept(token,  ch,  token.substring(i));  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  Acceptables.accept(token,  ch,  token.substring(i));  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	Acceptables.accept(token,  ch,  token.substring(i));	  accept(token,    token.substring(i));    	non-compiled	[CE]  ')'  expected	39	None	replace
186	[BUG]  [BUGGY]  accept(token,  ch,  token.substring(i  +  1));  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  accept(token,  ch,  token.substring(i  +  1));  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	accept(token,  ch,  token.substring(i  +  1));	  accept(token,    token.substring(i));    	non-compiled	[CE]  ')'  expected	39	None	replace
187	[BUG]  [BUGGY]  accept(token.substring(i  +  1,  token.length()));  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  accept(token.substring(i  +  1,  token.length()));  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	accept(token.substring(i  +  1,  token.length()));	  beginOption(token.substring(1));    	non-compiled	[CE]  ')'  expected	13	None	replace
188	[BUG]  [BUGGY]  accept(token.substring(i  +  1,  token.length()  -  1));  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  accept(token.substring(i  +  1,  token.length()  -  1));  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	accept(token.substring(i  +  1,  token.length()  -  1));	  beginOption(token.substring(1));    	non-compiled	[CE]  ')'  expected	13	None	replace
189	[BUG]  [BUGGY]  accept(token.substring(i,  currentOption.getValue()));  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  accept(token.substring(i,  currentOption.getValue()));  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	accept(token.substring(i,  currentOption.getValue()));	  beginOption(token.substring(1));    	non-compiled	[CE]  ')'  expected	13	None	replace
190	[BUG]  [BUGGY]  process(token.substring(i  +  1,  stopAtNonOption));  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  process(token.substring(i  +  1,  stopAtNonOption));  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	process(token.substring(i  +  1,  stopAtNonOption));	  process(token.substring(i    +    1),    stopAtNonOption);    	non-compiled	[CE]  ')'  expected	31	None	replace
191	[BUG]  [BUGGY]  parent  ==  null  ||  stopAtNonOption)  {  tokens.add(token.substring(i  +  1));  break;  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  parent  ==  null  ||  stopAtNonOption)  {  tokens.add(token.substring(i  +  1));  break;  }  [BUGGY]      process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	parent  ==  null  ||  stopAtNonOption)  {  tokens.add(token.substring(i  +  1));  break;  }	  if(stopAtNonOption)    {    tokens.add(token.substring(i    +    1));    break;    }    	non-compiled	[CE]  ';'  expected	17	None	replace
192	[BUG]  [BUGGY]  [Delete]  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  [Delete]  [BUGGY]      process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	[Delete]	  if(stopAtNonOption)    {    tokens.add(token.substring(i    +    1));    break;    }    	non-compiled	[CE]  not  a  statement	17	None	replace
193	[BUG]  [BUGGY]  parent  ==  null  &&  currentOption.hasArg()  &&(token.charAt(0)  ==  '-'  ||  token.charAt(0)  ==  '-');  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  parent  ==  null  &&  currentOption.hasArg()  &&(token.charAt(0)  ==  '-'  ||  token.charAt(0)  ==  '-');  [BUGGY]      process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	parent  ==  null  &&  currentOption.hasArg()  &&(token.charAt(0)  ==  '-'  ||  token.charAt(0)  ==  '-');	  if(stopAtNonOption)    {    tokens.add(token.substring(i    +    1));    break;    }    	non-compiled	[CE]  not  a  statement	17	None	replace
194	[BUG]  [BUGGY]  joinOption(ch,  i  +  1);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  joinOption(ch,  i  +  1);  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	joinOption(ch,  i  +  1);	  joinOption(token.substring(i    +    1));    	non-compiled	[CE]  ')'  expected	24	None	replace
195	[BUG]  [BUGGY]  joinOption(ch,  currentOption.substring(i  +  1));  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  joinOption(ch,  currentOption.substring(i  +  1));  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	joinOption(ch,  currentOption.substring(i  +  1));	  joinOption(token.substring(i    +    1));    	non-compiled	[CE]  ')'  expected	24	None	replace
196	[BUG]  [BUGGY]  addToken(token.substring(i  +  1),  token.substring(i  +  1,  token.length()));  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  addToken(token.substring(i  +  1),  token.substring(i  +  1,  token.length()));  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	addToken(token.substring(i  +  1),  token.substring(i  +  1,  token.length()));	  addToken(token.substring(i    +    1),    token.length());    	non-compiled	[CE]  ')'  expected	22	None	replace
197	[BUG]  [BUGGY]  addToken(token.substring(i  +  1,  ch),  token.length());  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  addToken(token.substring(i  +  1,  ch),  token.length());  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	addToken(token.substring(i  +  1,  ch),  token.length());	  addToken(token.substring(i    +    1),    token.length());    	non-compiled	[CE]  ')'  expected	22	None	replace
198	[BUG]  [BUGGY]  addToken(token.substring(i  +  1,  token.length()));  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  addToken(token.substring(i  +  1,  token.length()));  [BUGGY]      }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	addToken(token.substring(i  +  1,  token.length()));	  addToken(token.substring(i    +    1),    token.length());    	non-compiled	[CE]  ')'  expected	22	None	replace
