bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [BUGGY]    tokens.add(token.substring(i  +  1));  [BUGGY]  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	add	    tokens.add(token.substring(i  +  1));		compilable	  [FE]  AssertionFailedError  	2	1	add
2	[BUG]  [BUGGY]    tokens.add(token.substring(i  +  1));  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [BUGGY]    tokens.add(token.substring(i  +  1));  [BUGGY]  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	    tokens.add(token.substring(i  +  1));		compilable	  [FE]  AssertionFailedError  	2	1	add
3	[BUG]  [BUGGY]    tokens.add(token.substring(i));  [CE]  ';'  expected  [FE]      AssertionFailedError  [CONTEXT]  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [BUGGY]    tokens.add(token.substring(i));  [BUGGY]  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	    tokens.add(token.substring(i));		non-compiled	[CE]  ';'  expected	2	None	add
4	[BUG]  [BUGGY]    ||  currentOption.hasArg())  {  tokens.add(token.substring(i  +  1));  [CE]  'else'  without  'if'  [FE]        AssertionFailedError  [CONTEXT]  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [BUGGY]    ||  currentOption.hasArg())  {  tokens.add(token.substring(i  +  1));  [BUGGY]  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	    ||  currentOption.hasArg())  {  tokens.add(token.substring(i  +  1));		non-compiled	[CE]  'else'  without  'if'	2	None	add
5	[BUG]  [BUGGY]    tokens.add(token.substring(i  +  1));  break;  [CE]  ';'  expected  [FE]          AssertionFailedError  [CONTEXT]  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [BUGGY]    tokens.add(token.substring(i  +  1));  break;  [BUGGY]  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	    tokens.add(token.substring(i  +  1));  break;		non-compiled	[CE]  ';'  expected	2	None	add
6	[BUG]  [BUGGY]    ||  currentOption.hasArg())  {  tokens.add(token.substring(i  +  1));  break;  [CE]  ';'  expected  [FE]            AssertionFailedError  [CONTEXT]  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [BUGGY]    ||  currentOption.hasArg())  {  tokens.add(token.substring(i  +  1));  break;  [BUGGY]  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	    ||  currentOption.hasArg())  {  tokens.add(token.substring(i  +  1));  break;		non-compiled	[CE]  ';'  expected	2	None	add
7	[BUG]  [BUGGY]  process(ch,  token.substring(i));  [CE]  ';'  expected  [FE]    AssertionFailedError  [CONTEXT]  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [BUGGY]  process(ch,  token.substring(i));  [BUGGY]  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	process(ch,  token.substring(i));	process(token.substring(i));  	non-compiled	[CE]  ';'  expected	1	None	replace
8	[BUG]  [BUGGY]  process(token.substring(0,  i));  [CE]  ';'  expected  [FE]      AssertionFailedError  [CONTEXT]  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [BUGGY]  process(token.substring(0,  i));  [BUGGY]  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	process(token.substring(0,  i));	process(token.substring(i));  	non-compiled	[CE]  ';'  expected	1	None	replace
9	[BUG]  [BUGGY]  process(token.substring(i  +  1));  [CE]  [FE]        AssertionFailedError  [CONTEXT]  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [BUGGY]  process(token.substring(i  +  1));  [BUGGY]  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	process(token.substring(i  +  1));	process(token.substring(i));  	non-compiled	[CE]  	1	None	replace
10	[BUG]  [BUGGY]  beginOption(token.substring(i  +  1));  [CE]  [FE]          AssertionFailedError  [CONTEXT]  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [BUGGY]  beginOption(token.substring(i  +  1));  [BUGGY]  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	beginOption(token.substring(i  +  1));	process(token.substring(i));  	non-compiled	[CE]  	1	None	replace
11	[BUG]  [BUGGY]    tokens.add(token.substring(i));  break;  [CE]  [FE]    AssertionFailedError  [CONTEXT]  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [BUGGY]    tokens.add(token.substring(i));  break;  [BUGGY]  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	    tokens.add(token.substring(i));  break;		non-compiled	[CE]  	2	None	add
12	[BUG]  [BUGGY]    tokens.add(token.substring(0,  i));  [CE]  [FE]      AssertionFailedError  [CONTEXT]  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [BUGGY]    tokens.add(token.substring(0,  i));  [BUGGY]  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	    tokens.add(token.substring(0,  i));		non-compiled	[CE]  	2	None	add
13	[BUG]  [BUGGY]  addToken(token.substring(i  +  1));  [CE]  [FE]    AssertionFailedError  [CONTEXT]  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [BUGGY]  addToken(token.substring(i  +  1));  [BUGGY]  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	addToken(token.substring(i  +  1));	process(token.substring(i));  	non-compiled	[CE]  	1	None	replace
14	[BUG]  [BUGGY]  process(token.substring(1));  [CE]  [FE]      AssertionFailedError  [CONTEXT]  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [BUGGY]  process(token.substring(1));  [BUGGY]  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	process(token.substring(1));	process(token.substring(i));  	non-compiled	[CE]  	1	None	replace
15	[BUG]  [BUGGY]    tokens.add(token);  [CE]  [FE]    AssertionFailedError  [CONTEXT]  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [BUGGY]    tokens.add(token);  [BUGGY]  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	    tokens.add(token);		non-compiled	[CE]  	2	None	add
16	[BUG]  [BUGGY]    tokens.add(ch);  [CE]  [FE]      AssertionFailedError  [CONTEXT]  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [BUGGY]    tokens.add(ch);  [BUGGY]  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	    tokens.add(ch);		non-compiled	[CE]  	2	None	add
