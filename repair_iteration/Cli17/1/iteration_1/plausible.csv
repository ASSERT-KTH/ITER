12	[BUG]    [BUGGY]        tokens.add(token.substring(i));    [CE]    ';'    expected    [FE]            AssertionFailedError    [CONTEXT]    if    (currentOption.hasArg()    &&    (token.length()    !=    (i    +    1)))    {    tokens.add(token.substring(i    +    1));    break;    }    }    else    if    (stopAtNonOption)    {    [BUGGY]        tokens.add(token.substring(i));    [BUGGY]    process(token.substring(i));    }    else    {    tokens.add(token);    break;    }    }    }    [CLASS]    PosixParser    [METHOD]    burstToken    [RETURN_TYPE]    void    String    token    boolean    stopAtNonOption    [VARIABLES]    Options    options    List    tokens    Option    currentOption    boolean    eatTheRest    stopAtNonOption    String    ch    token    int    i    	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	tokens.add(token.substring(1));	      tokens.add(token.substring(i));    	plausible		3	0
12	[BUG]    [BUGGY]        tokens.add(token.substring(i));    [CE]    ';'    expected    [FE]            AssertionFailedError    [CONTEXT]    if    (currentOption.hasArg()    &&    (token.length()    !=    (i    +    1)))    {    tokens.add(token.substring(i    +    1));    break;    }    }    else    if    (stopAtNonOption)    {    [BUGGY]        tokens.add(token.substring(i));    [BUGGY]    process(token.substring(i));    }    else    {    tokens.add(token);    break;    }    }    }    [CLASS]    PosixParser    [METHOD]    burstToken    [RETURN_TYPE]    void    String    token    boolean    stopAtNonOption    [VARIABLES]    Options    options    List    tokens    Option    currentOption    boolean    eatTheRest    stopAtNonOption    String    ch    token    int    i    	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	tokens.add(token.substring(2));	      tokens.add(token.substring(i));    	plausible		3	0
12	[BUG]    [BUGGY]    [FE]    AssertionFailedError    [FE]        AssertionFailedError    [CONTEXT]    if    (currentOption.hasArg()    &&    (token.length()    !=    (i    +    1)))    {    tokens.add(token.substring(i    +    1));    break;    }    }    else    if    (stopAtNonOption)    {    [BUGGY]        tokens.add(token.substring(i    +    1));    [BUGGY]    process(token.substring(i));    }    else    {    tokens.add(token);    break;    }    }    }    [CLASS]    PosixParser    [METHOD]    burstToken    [RETURN_TYPE]    void    String    token    boolean    stopAtNonOption    [VARIABLES]    Options    options    List    tokens    Option    currentOption    boolean    eatTheRest    stopAtNonOption    String    ch    token    int    i    	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	add	        tokens.add(token.substring(i    +    1));    tokens.add(token.substring(i  +  1));	  	plausible		1	0
12	[BUG]    [BUGGY]    [FE]    AssertionFailedError    [FE]        AssertionFailedError    [CONTEXT]    if    (currentOption.hasArg()    &&    (token.length()    !=    (i    +    1)))    {    tokens.add(token.substring(i    +    1));    break;    }    }    else    if    (stopAtNonOption)    {    [BUGGY]        tokens.add(token.substring(i    +    1));    [BUGGY]    process(token.substring(i));    }    else    {    tokens.add(token);    break;    }    }    }    [CLASS]    PosixParser    [METHOD]    burstToken    [RETURN_TYPE]    void    String    token    boolean    stopAtNonOption    [VARIABLES]    Options    options    List    tokens    Option    currentOption    boolean    eatTheRest    stopAtNonOption    String    ch    token    int    i    	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	add	        tokens.add(token.substring(i    +    1));    tokens.add(Token.substring(i  +  1));	  	plausible		1	0
36	[BUG]    [BUGGY]        ||    currentOption.hasArg())    {    tokens.add(token.substring(i    +    1));    break;    [CE]    ';'    expected    [FE]                        AssertionFailedError    [CONTEXT]    if    (currentOption.hasArg()    &&    (token.length()    !=    (i    +    1)))    {    tokens.add(token.substring(i    +    1));    break;    }    }    else    if    (stopAtNonOption)    {    [BUGGY]        ||    currentOption.hasArg())    {    tokens.add(token.substring(i    +    1));    break;    [BUGGY]    process(token.substring(i));    }    else    {    tokens.add(token);    break;    }    }    }    [CLASS]    PosixParser    [METHOD]    burstToken    [RETURN_TYPE]    void    String    token    boolean    stopAtNonOption    [VARIABLES]    Options    options    List    tokens    Option    currentOption    boolean    eatTheRest    stopAtNonOption    String    ch    token    int    i    	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	||  currentOption.hasArg())  {  tokens.add(token.substring(i  +  1,  ch));  break;	      ||    currentOption.hasArg())    {    tokens.add(token.substring(i    +    1));    break;    	plausible		6	0
