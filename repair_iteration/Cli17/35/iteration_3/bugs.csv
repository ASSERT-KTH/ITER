bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  tokens  =(String[])iter.peek();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  else  {  tokens.add(token);  }  }  gobble(iter);  }      [BUGGY]  tokens  =(String[])iter.peek();  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	163	163	1	replace	tokens  =(String[])iter.peek();	  tokens    =(String[])iter.nextToken();    	non-compiled	[CE]  <identifier>  expected	3	None	replace
2	[BUG]  [BUGGY]  tokens.add(arguments[0],  arguments[1],  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  else  {  tokens.add(token);  }  }  gobble(iter);  }      [BUGGY]  tokens.add(arguments[0],  arguments[1],  stopAtNonOption);  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	163	163	1	replace	tokens.add(arguments[0],  arguments[1],  stopAtNonOption);	  tokens.add(arguments[0],    arguments[1]);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
3	[BUG]  [BUGGY]  tokens.add(arguments[0],  arguments[1]  +  1);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  else  {  tokens.add(token);  }  }  gobble(iter);  }      [BUGGY]  tokens.add(arguments[0],  arguments[1]  +  1);  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	163	163	1	replace	tokens.add(arguments[0],  arguments[1]  +  1);	  tokens.add(arguments[0],    arguments[1]);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
4	[BUG]  [BUGGY]  tokens.add(arguments[0],  arguments[1].toLowerCase());  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  else  {  tokens.add(token);  }  }  gobble(iter);  }      [BUGGY]  tokens.add(arguments[0],  arguments[1].toLowerCase());  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	163	163	1	replace	tokens.add(arguments[0],  arguments[1].toLowerCase());	  tokens.add(arguments[0],    arguments[1]);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
5	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(tokenLength  -  2);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  else  {  tokens.add(token);  }  }  gobble(iter);  }      [BUGGY]  Option  currentOption  =  options.getOption(tokenLength  -  2);  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	163	163	1	replace	Option  currentOption  =  options.getOption(tokenLength  -  2);	  Option    currentOption    =    options.getOption(tokenLength    -    1);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
6	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(tokenLength  -  1  +  1);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  else  {  tokens.add(token);  }  }  gobble(iter);  }      [BUGGY]  Option  currentOption  =  options.getOption(tokenLength  -  1  +  1);  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	163	163	1	replace	Option  currentOption  =  options.getOption(tokenLength  -  1  +  1);	  Option    currentOption    =    options.getOption(tokenLength    -    1);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
7	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  this.tokens.iterator();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  else  {  tokens.add(token);  }  }  gobble(iter);  }      [BUGGY]  Iterator  <  String>  iter  =  this.tokens.iterator();  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	163	163	1	replace	Iterator  <  String>  iter  =  this.tokens.iterator();	  Iterator    <    String>    iter    =    tokens.iterator();    	non-compiled	[CE]  <identifier>  expected	23	None	replace
8	[BUG]  [BUGGY]  tokens  =(String[])iter.cloneTree();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  else  {  tokens.add(token);  }  }  gobble(iter);  }      [BUGGY]  tokens  =(String[])iter.cloneTree();  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	163	163	1	replace	tokens  =(String[])iter.cloneTree();	  tokens    =(String[])iter.clone();    	non-compiled	[CE]  <identifier>  expected	2	None	replace
9	[BUG]  [BUGGY]  tokens  =(String[])this.options.clone();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  else  {  tokens.add(token);  }  }  gobble(iter);  }      [BUGGY]  tokens  =(String[])this.options.clone();  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	163	163	1	replace	tokens  =(String[])this.options.clone();	  tokens    =(String[])iter.clone();    	non-compiled	[CE]  <identifier>  expected	2	None	replace
10	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(tokenLength,  arguments);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      }  else  {  tokens.add(token);  }  }  gobble(iter);  }      [BUGGY]  Option  currentOption  =  options.getOption(tokenLength,  arguments);  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	163	163	1	replace	Option  currentOption  =  options.getOption(tokenLength,  arguments);	  Option    currentOption    =    options.getOption(tokenLength,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
11	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(tokenLength,  arguments[0]);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  else  {  tokens.add(token);  }  }  gobble(iter);  }      [BUGGY]  Option  currentOption  =  options.getOption(tokenLength,  arguments[0]);  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	163	163	1	replace	Option  currentOption  =  options.getOption(tokenLength,  arguments[0]);	  Option    currentOption    =    options.getOption(tokenLength,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
12	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  else  {  tokens.add(token);  }  }  gobble(iter);  }      [BUGGY]  Option  currentOption  =  options.getOption(token,  stopAtNonOption);  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	163	163	1	replace	Option  currentOption  =  options.getOption(token,  stopAtNonOption);	  Option    currentOption    =    options.getOption(tokenLength,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
13	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(tokenLength  -  1,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  else  {  tokens.add(token);  }  }  gobble(iter);  }      [BUGGY]  Option  currentOption  =  options.getOption(tokenLength  -  1,  stopAtNonOption);  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	163	163	1	replace	Option  currentOption  =  options.getOption(tokenLength  -  1,  stopAtNonOption);	  Option    currentOption    =    options.getOption(tokenLength,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
14	[BUG]  [BUGGY]  List  <  String>  iter  =  options.iterator();  tokens.add(token);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      }  else  {  tokens.add(token);  }  }  gobble(iter);  }      [BUGGY]  List  <  String>  iter  =  options.iterator();  tokens.add(token);  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	163	163	1	replace	List  <  String>  iter  =  options.iterator();  tokens.add(token);	  Iterator    <    String>    iter    =    options.iterator();    tokens.add(token);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
15	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  arguments.iterator();  tokens.add(token);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  else  {  tokens.add(token);  }  }  gobble(iter);  }      [BUGGY]  Iterator  <  String>  iter  =  arguments.iterator();  tokens.add(token);  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	163	163	1	replace	Iterator  <  String>  iter  =  arguments.iterator();  tokens.add(token);	  Iterator    <    String>    iter    =    options.iterator();    tokens.add(token);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
16	[BUG]  [BUGGY]  tokens.add(token);  currentOption  =  options.getOption(tokenLength  +  2);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  else  {  tokens.add(token);  }  }  gobble(iter);  }      [BUGGY]  tokens.add(token);  currentOption  =  options.getOption(tokenLength  +  2);  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	163	163	1	replace	tokens.add(token);  currentOption  =  options.getOption(tokenLength  +  2);	  tokens.add(token);    currentOption    =    options.getOption(tokenLength    +    1);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
17	[BUG]  [BUGGY]  tokens.add(tokenLength);  currentOption  =  options.getOption(tokenLength  +  1);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  else  {  tokens.add(token);  }  }  gobble(iter);  }      [BUGGY]  tokens.add(tokenLength);  currentOption  =  options.getOption(tokenLength  +  1);  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	163	163	1	replace	tokens.add(tokenLength);  currentOption  =  options.getOption(tokenLength  +  1);	  tokens.add(token);    currentOption    =    options.getOption(tokenLength    +    1);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
18	[BUG]  [BUGGY]  tokens.add(arguments[1]);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      }  else  {  tokens.add(token);  }  }  gobble(iter);  }      [BUGGY]  tokens.add(arguments[1]);  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	163	163	1	replace	tokens.add(arguments[1]);	  tokens.add(arguments[0]);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
19	[BUG]  [BUGGY]  tokens.add(arguments[0],  stopAtNonOption);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  else  {  tokens.add(token);  }  }  gobble(iter);  }      [BUGGY]  tokens.add(arguments[0],  stopAtNonOption);  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	163	163	1	replace	tokens.add(arguments[0],  stopAtNonOption);	  tokens.add(arguments[0]);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
20	[BUG]  [BUGGY]  tokens.add(arguments[0].toLowerCase());  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  else  {  tokens.add(token);  }  }  gobble(iter);  }      [BUGGY]  tokens.add(arguments[0].toLowerCase());  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	163	163	1	replace	tokens.add(arguments[0].toLowerCase());	  tokens.add(arguments[0]);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
21	[BUG]  [BUGGY]  return(String[])arguments.toArray(new  String[tokens.size()  ],  arguments);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      }  else  {  tokens.add(token);  }  }  gobble(iter);  }      [BUGGY]  return(String[])arguments.toArray(new  String[tokens.size()  ],  arguments);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	163	163	1	replace	return(String[])arguments.toArray(new  String[tokens.size()  ],  arguments);	  return(String[])tokens.toArray(new    String[tokens.size()    ],    arguments);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
22	[BUG]  [BUGGY]  return(String[])arguments.toArray(new  String[tokens.size()  ],  token);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  else  {  tokens.add(token);  }  }  gobble(iter);  }      [BUGGY]  return(String[])arguments.toArray(new  String[tokens.size()  ],  token);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	163	163	1	replace	return(String[])arguments.toArray(new  String[tokens.size()  ],  token);	  return(String[])tokens.toArray(new    String[tokens.size()    ],    arguments);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
23	[BUG]  [BUGGY]  return(String[])arguments.toArray(new  String[tokens.size()  ],  tokenLength);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  else  {  tokens.add(token);  }  }  gobble(iter);  }      [BUGGY]  return(String[])arguments.toArray(new  String[tokens.size()  ],  tokenLength);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	163	163	1	replace	return(String[])arguments.toArray(new  String[tokens.size()  ],  tokenLength);	  return(String[])tokens.toArray(new    String[tokens.size()    ],    arguments);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
24	[BUG]  [BUGGY]  return(String[])arguments.toArray(new  String[tokens.size()  ],  tokens);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  else  {  tokens.add(token);  }  }  gobble(iter);  }      [BUGGY]  return(String[])arguments.toArray(new  String[tokens.size()  ],  tokens);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	163	163	1	replace	return(String[])arguments.toArray(new  String[tokens.size()  ],  tokens);	  return(String[])tokens.toArray(new    String[tokens.size()    ],    arguments);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
25	[BUG]  [BUGGY]  tokens.add(arguments[1].toString());  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      }  else  {  tokens.add(token);  }  }  gobble(iter);  }      [BUGGY]  tokens.add(arguments[1].toString());  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	163	163	1	replace	tokens.add(arguments[1].toString());	  tokens.add(arguments[0].toString());    	non-compiled	[CE]  <identifier>  expected	29	None	replace
26	[BUG]  [BUGGY]  tokens.add(arguments[0].toString(),  stopAtNonOption);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  else  {  tokens.add(token);  }  }  gobble(iter);  }      [BUGGY]  tokens.add(arguments[0].toString(),  stopAtNonOption);  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	163	163	1	replace	tokens.add(arguments[0].toString(),  stopAtNonOption);	  tokens.add(arguments[0].toString());    	non-compiled	[CE]  <identifier>  expected	29	None	replace
27	[BUG]  [BUGGY]  tokens.add(arguments[0].toString()  +  1);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  else  {  tokens.add(token);  }  }  gobble(iter);  }      [BUGGY]  tokens.add(arguments[0].toString()  +  1);  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	163	163	1	replace	tokens.add(arguments[0].toString()  +  1);	  tokens.add(arguments[0].toString());    	non-compiled	[CE]  <identifier>  expected	29	None	replace
28	[BUG]  [BUGGY]  tokens.add(token);  currentOption  =  options.getOption(tokenLength  -  2);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  else  {  tokens.add(token);  }  }  gobble(iter);  }      [BUGGY]  tokens.add(token);  currentOption  =  options.getOption(tokenLength  -  2);  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	163	163	1	replace	tokens.add(token);  currentOption  =  options.getOption(tokenLength  -  2);	  tokens.add(token);    currentOption    =    options.getOption(tokenLength    -    1);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
29	[BUG]  [BUGGY]  tokens.add(tokenLength);  currentOption  =  options.getOption(tokenLength  -  1);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  else  {  tokens.add(token);  }  }  gobble(iter);  }      [BUGGY]  tokens.add(tokenLength);  currentOption  =  options.getOption(tokenLength  -  1);  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	163	163	1	replace	tokens.add(tokenLength);  currentOption  =  options.getOption(tokenLength  -  1);	  tokens.add(token);    currentOption    =    options.getOption(tokenLength    -    1);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
30	[BUG]  [BUGGY]  tokens  =(String[])iter.getKey();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  else  {  tokens.add(token);  }  }  gobble(iter);  }      [BUGGY]  tokens  =(String[])iter.getKey();  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	163	163	1	replace	tokens  =(String[])iter.getKey();	  tokens    =(String[])iter.getValue();    	non-compiled	[CE]  <identifier>  expected	27	None	replace
31	[BUG]  [BUGGY]  return(String[])tokens.toArray(new  String[tokens.size()  ],  arguments.length);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  else  {  tokens.add(token);  }  }  gobble(iter);  }      [BUGGY]  return(String[])tokens.toArray(new  String[tokens.size()  ],  arguments.length);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	163	163	1	replace	return(String[])tokens.toArray(new  String[tokens.size()  ],  arguments.length);	  return(String[])tokens.toArray(new    String[tokens.size()    ],    argumentLength);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
32	[BUG]  [BUGGY]  return(String[])arguments.toArray(new  String[tokens.size()  ],  argumentLength);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  else  {  tokens.add(token);  }  }  gobble(iter);  }      [BUGGY]  return(String[])arguments.toArray(new  String[tokens.size()  ],  argumentLength);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	163	163	1	replace	return(String[])arguments.toArray(new  String[tokens.size()  ],  argumentLength);	  return(String[])tokens.toArray(new    String[tokens.size()    ],    argumentLength);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
33	[BUG]  [BUGGY]  return(String[])options.toArray(new  String[tokens.size()  ],  argumentLength);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  else  {  tokens.add(token);  }  }  gobble(iter);  }      [BUGGY]  return(String[])options.toArray(new  String[tokens.size()  ],  argumentLength);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	163	163	1	replace	return(String[])options.toArray(new  String[tokens.size()  ],  argumentLength);	  return(String[])tokens.toArray(new    String[tokens.size()    ],    argumentLength);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
34	[BUG]  [BUGGY]  return(String[])tokens.toArray(new  String[tokens.size()  +  1],  argumentLength);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  else  {  tokens.add(token);  }  }  gobble(iter);  }      [BUGGY]  return(String[])tokens.toArray(new  String[tokens.size()  +  1],  argumentLength);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	163	163	1	replace	return(String[])tokens.toArray(new  String[tokens.size()  +  1],  argumentLength);	  return(String[])tokens.toArray(new    String[tokens.size()    ],    argumentLength);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
35	[BUG]  [BUGGY]  Option  <  String>  currentOption  =  options.get(tokens.size()  -  1);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  else  {  tokens.add(token);  }  }  gobble(iter);  }      [BUGGY]  Option  <  String>  currentOption  =  options.get(tokens.size()  -  1);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	163	163	1	replace	Option  <  String>  currentOption  =  options.get(tokens.size()  -  1);	  if(stopAtNonOption)    {    return(String[])tokens.toArray(new    String[tokens.size()    ],    stopAtNonOption);    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
36	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(stopAtNonOption);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  else  {  tokens.add(token);  }  }  gobble(iter);  }      [BUGGY]  Option  currentOption  =  options.getOption(stopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	163	163	1	replace	Option  currentOption  =  options.getOption(stopAtNonOption);	  if(stopAtNonOption)    {    return(String[])tokens.toArray(new    String[tokens.size()    ],    stopAtNonOption);    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
37	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(tokens.size()  -  1);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  else  {  tokens.add(token);  }  }  gobble(iter);  }      [BUGGY]  Option  currentOption  =  options.getOption(tokens.size()  -  1);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	163	163	1	replace	Option  currentOption  =  options.getOption(tokens.size()  -  1);	  if(stopAtNonOption)    {    return(String[])tokens.toArray(new    String[tokens.size()    ],    stopAtNonOption);    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
38	[BUG]  [BUGGY]  if(stopAtNonOption)  {  return(String[])options.toArray(new  String[tokens.size()  ],  stopAtNonOption);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  else  {  tokens.add(token);  }  }  gobble(iter);  }      [BUGGY]  if(stopAtNonOption)  {  return(String[])options.toArray(new  String[tokens.size()  ],  stopAtNonOption);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	163	163	1	replace	if(stopAtNonOption)  {  return(String[])options.toArray(new  String[tokens.size()  ],  stopAtNonOption);  }	  return(String[])options.toArray(new    String[tokens.size()    ],    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
39	[BUG]  [BUGGY]  return(String[])options.toArray(new  String[tokens.size()  ],  arguments);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  else  {  tokens.add(token);  }  }  gobble(iter);  }      [BUGGY]  return(String[])options.toArray(new  String[tokens.size()  ],  arguments);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	163	163	1	replace	return(String[])options.toArray(new  String[tokens.size()  ],  arguments);	  return(String[])options.toArray(new    String[tokens.size()    ],    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
40	[BUG]  [BUGGY]  return(String[])options.toArray(new  String[tokens.size()  ],  stopAtNonOption,  arguments.length);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  else  {  tokens.add(token);  }  }  gobble(iter);  }      [BUGGY]  return(String[])options.toArray(new  String[tokens.size()  ],  stopAtNonOption,  arguments.length);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	163	163	1	replace	return(String[])options.toArray(new  String[tokens.size()  ],  stopAtNonOption,  arguments.length);	  return(String[])options.toArray(new    String[tokens.size()    ],    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
41	[BUG]  [BUGGY]  Option  option  =  options.getOption(stopAtNonOption);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      }  else  {  tokens.add(token);  }  }  gobble(iter);  }      [BUGGY]  Option  option  =  options.getOption(stopAtNonOption);  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	163	163	1	replace	Option  option  =  options.getOption(stopAtNonOption);	  if(stopAtNonOption)    {    Iterator    iter    =    options.iterator();    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
42	[BUG]  [BUGGY]  Option  options  =  options.getOption(stopAtNonOption);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  else  {  tokens.add(token);  }  }  gobble(iter);  }      [BUGGY]  Option  options  =  options.getOption(stopAtNonOption);  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	163	163	1	replace	Option  options  =  options.getOption(stopAtNonOption);	  if(stopAtNonOption)    {    Iterator    iter    =    options.iterator();    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
43	[BUG]  [BUGGY]  return(String[])tokens.toArray(new  String[tokens.size()  0]);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      }  else  {  tokens.add(token);  }  }  gobble(iter);  }      [BUGGY]  return(String[])tokens.toArray(new  String[tokens.size()  0]);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	163	163	1	replace	return(String[])tokens.toArray(new  String[tokens.size()  0]);	  return(String[])tokens.toArray(new    String[tokens.size()    1]);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
44	[BUG]  [BUGGY]  tokens.add(token);  currentOption  =  options.getOption(tokenLength,  arguments.length);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  else  {  tokens.add(token);  }  }  gobble(iter);  }      [BUGGY]  tokens.add(token);  currentOption  =  options.getOption(tokenLength,  arguments.length);  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	163	163	1	replace	tokens.add(token);  currentOption  =  options.getOption(tokenLength,  arguments.length);	  tokens.add(token);    currentOption    =    options.getOption(tokenLength,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
45	[BUG]  [BUGGY]  tokens.add(token);  currentOption  =  options.getOption(tokenLength  -  1,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  else  {  tokens.add(token);  }  }  gobble(iter);  }      [BUGGY]  tokens.add(token);  currentOption  =  options.getOption(tokenLength  -  1,  stopAtNonOption);  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	163	163	1	replace	tokens.add(token);  currentOption  =  options.getOption(tokenLength  -  1,  stopAtNonOption);	  tokens.add(token);    currentOption    =    options.getOption(tokenLength,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
46	[BUG]  [BUGGY]  tokens.add(tokenLength);  currentOption  =  options.getOption(tokenLength,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  else  {  tokens.add(token);  }  }  gobble(iter);  }      [BUGGY]  tokens.add(tokenLength);  currentOption  =  options.getOption(tokenLength,  stopAtNonOption);  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	163	163	1	replace	tokens.add(tokenLength);  currentOption  =  options.getOption(tokenLength,  stopAtNonOption);	  tokens.add(token);    currentOption    =    options.getOption(tokenLength,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
47	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(tokenLength  +  2);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      }  else  {  tokens.add(token);  }  }  gobble(iter);  }      [BUGGY]  Option  currentOption  =  options.getOption(tokenLength  +  2);  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	163	163	1	replace	Option  currentOption  =  options.getOption(tokenLength  +  2);	  Option    currentOption    =    options.getOption(tokenLength    +    1);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
48	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(tokenLength  /  1);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  else  {  tokens.add(token);  }  }  gobble(iter);  }      [BUGGY]  Option  currentOption  =  options.getOption(tokenLength  /  1);  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	163	163	1	replace	Option  currentOption  =  options.getOption(tokenLength  /  1);	  Option    currentOption    =    options.getOption(tokenLength    +    1);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
49	[BUG]  [BUGGY]  return(String[])options.toArray(new  String[tokens.size()  ],  stopAtNonOption,  arguments);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      }  else  {  tokens.add(token);  }  }  gobble(iter);  }      [BUGGY]  return(String[])options.toArray(new  String[tokens.size()  ],  stopAtNonOption,  arguments);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	163	163	1	replace	return(String[])options.toArray(new  String[tokens.size()  ],  stopAtNonOption,  arguments);	  return(String[])tokens.toArray(new    String[tokens.size()    ],    stopAtNonOption,    arguments);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
50	[BUG]  [BUGGY]  return(String[])arguments.toArray(new  String[tokens.size()  ],  stopAtNonOption,  arguments);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  else  {  tokens.add(token);  }  }  gobble(iter);  }      [BUGGY]  return(String[])arguments.toArray(new  String[tokens.size()  ],  stopAtNonOption,  arguments);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	163	163	1	replace	return(String[])arguments.toArray(new  String[tokens.size()  ],  stopAtNonOption,  arguments);	  return(String[])tokens.toArray(new    String[tokens.size()    ],    stopAtNonOption,    arguments);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
51	[BUG]  [BUGGY]  if(stopAtNonOption)  {  return(String[])tokens.toArray(new  String[tokens.size()  ],  stopAtNonOption,  arguments);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  else  {  tokens.add(token);  }  }  gobble(iter);  }      [BUGGY]  if(stopAtNonOption)  {  return(String[])tokens.toArray(new  String[tokens.size()  ],  stopAtNonOption,  arguments);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	163	163	1	replace	if(stopAtNonOption)  {  return(String[])tokens.toArray(new  String[tokens.size()  ],  stopAtNonOption,  arguments);  }	  return(String[])tokens.toArray(new    String[tokens.size()    ],    stopAtNonOption,    arguments);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
52	[BUG]  [BUGGY]  return(String[])tokens.toArray(new  String[tokens.size()  -1],  arguments);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      }  else  {  tokens.add(token);  }  }  gobble(iter);  }      [BUGGY]  return(String[])tokens.toArray(new  String[tokens.size()  -1],  arguments);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	163	163	1	replace	return(String[])tokens.toArray(new  String[tokens.size()  -1],  arguments);	  return(String[])tokens.toArray(new    String[tokens.size()    -1],    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
53	[BUG]  [BUGGY]  return(String[])tokens.toArray(new  String[tokens.size()  -1],  stopAtNonOption,  arguments);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  else  {  tokens.add(token);  }  }  gobble(iter);  }      [BUGGY]  return(String[])tokens.toArray(new  String[tokens.size()  -1],  stopAtNonOption,  arguments);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	163	163	1	replace	return(String[])tokens.toArray(new  String[tokens.size()  -1],  stopAtNonOption,  arguments);	  return(String[])tokens.toArray(new    String[tokens.size()    -1],    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
54	[BUG]  [BUGGY]  (String[])tokens.toArray(new  String[tokens.size()  -  1]);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  else  {  tokens.add(token);  }  }  gobble(iter);  }      [BUGGY]  (String[])tokens.toArray(new  String[tokens.size()  -  1]);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	163	163	1	replace	(String[])tokens.toArray(new  String[tokens.size()  -  1]);	  (String[])tokens.toArray(new    String[tokens.size()]);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
55	[BUG]  [BUGGY]  (String[])arguments.toArray(new  String[tokens.size()  ]);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  else  {  tokens.add(token);  }  }  gobble(iter);  }      [BUGGY]  (String[])arguments.toArray(new  String[tokens.size()  ]);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	163	163	1	replace	(String[])arguments.toArray(new  String[tokens.size()  ]);	  (String[])tokens.toArray(new    String[tokens.size()]);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
56	[BUG]  [BUGGY]  (String[])options.toArray(new  String[tokens.size()  ]);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  else  {  tokens.add(token);  }  }  gobble(iter);  }      [BUGGY]  (String[])options.toArray(new  String[tokens.size()  ]);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	163	163	1	replace	(String[])options.toArray(new  String[tokens.size()  ]);	  (String[])tokens.toArray(new    String[tokens.size()]);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
57	[BUG]  [BUGGY]  Iterator  iter  =  this.tokens.iterator();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  else  {  tokens.add(token);  }  }  gobble(iter);  }      [BUGGY]  Iterator  iter  =  this.tokens.iterator();  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	163	163	1	replace	Iterator  iter  =  this.tokens.iterator();	  Iterator    iter    =    tokens.iterator();    	non-compiled	[CE]  <identifier>  expected	14	None	replace
58	[BUG]  [BUGGY]  tokens.add(arguments[tokenLength  -  1]);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  else  {  tokens.add(token);  }  }  gobble(iter);  }      [BUGGY]  tokens.add(arguments[tokenLength  -  1]);  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	163	163	1	replace	tokens.add(arguments[tokenLength  -  1]);	  tokens.add(arguments[tokenLength]);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
59	[BUG]  [BUGGY]  tokens.add(arguments[tokenLength  +  1]);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  else  {  tokens.add(token);  }  }  gobble(iter);  }      [BUGGY]  tokens.add(arguments[tokenLength  +  1]);  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	163	163	1	replace	tokens.add(arguments[tokenLength  +  1]);	  tokens.add(arguments[tokenLength]);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
60	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(arguments);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  else  {  tokens.add(token);  }  }  gobble(iter);  }      [BUGGY]  Option  currentOption  =  options.getOption(arguments);  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	163	163	1	replace	Option  currentOption  =  options.getOption(arguments);	  Option    currentOption    =    options.getOption(token);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
61	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.keySet().iterator();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  else  {  tokens.add(token);  }  }  gobble(iter);  }      [BUGGY]  Iterator  <  String>  iter  =  options.keySet().iterator();  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	163	163	1	replace	Iterator  <  String>  iter  =  options.keySet().iterator();	  Iterator    <    String>    iter    =    options.values().iterator();    	non-compiled	[CE]  <identifier>  expected	32	None	replace
62	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  currentOption  =  options.getOption(tokenLength,  stopAtNonOption);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  else  {  tokens.add(token);  }  }  gobble(iter);  }      [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  currentOption  =  options.getOption(tokenLength,  stopAtNonOption);  }  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	163	163	1	replace	if(stopAtNonOption)  {  tokens.add(token);  currentOption  =  options.getOption(tokenLength,  stopAtNonOption);  }	  tokens.add(token);    currentOption    =    options.getOption(tokenLength,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
63	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  currentOption  =  options.getOption(tokenLength  -  1);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  else  {  tokens.add(token);  }  }  gobble(iter);  }      [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  currentOption  =  options.getOption(tokenLength  -  1);  }  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	163	163	1	replace	if(stopAtNonOption)  {  tokens.add(token);  currentOption  =  options.getOption(tokenLength  -  1);  }	  tokens.add(token);    currentOption    =    options.getOption(tokenLength    -    1);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
64	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      }  else  {  tokens.add(token);  }  }  gobble(iter);  }      [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	163	163	1	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti	  if(stopAtNonOption)    {    Iterator    iter    =    options.iterator();    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
65	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  else  {  tokens.add(token);  }  }  gobble(iter);  }      [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	163	163	1	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti	  if(stopAtNonOption)    {    Iterator    iter    =    options.iterator();    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
66	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  else  {  tokens.add(token);  }  }  gobble(iter);  }      [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	163	163	1	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti	  if(stopAtNonOption)    {    Iterator    iter    =    options.iterator();    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
67	[BUG]  [BUGGY]  return(String[])tokens.toArray(new  String[tokens.size()  -1],  argumentLength);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  else  {  tokens.add(token);  }  }  gobble(iter);  }      [BUGGY]  return(String[])tokens.toArray(new  String[tokens.size()  -1],  argumentLength);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	163	163	1	replace	return(String[])tokens.toArray(new  String[tokens.size()  -1],  argumentLength);	  return(String[])tokens.toArray(new    String[tokens.size()    ],    argumentLength);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
68	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(tokenLength);  currentOption  =  options.getOption(tokenLength);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  else  {  tokens.add(token);  }  }  gobble(iter);  }      [BUGGY]  if(stopAtNonOption)  {  tokens.add(tokenLength);  currentOption  =  options.getOption(tokenLength);  }  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	163	163	1	replace	if(stopAtNonOption)  {  tokens.add(tokenLength);  currentOption  =  options.getOption(tokenLength);  }	  tokens.add(tokenLength);    currentOption    =    options.getOption(tokenLength);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
69	[BUG]  [BUGGY]  return(String[])tokens.toArray(new  String[tokens.size()  ],  options);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      }  else  {  tokens.add(token);  }  }  gobble(iter);  }      [BUGGY]  return(String[])tokens.toArray(new  String[tokens.size()  ],  options);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	163	163	1	replace	return(String[])tokens.toArray(new  String[tokens.size()  ],  options);	  return(String[])tokens.toArray(new    String[tokens.size()    ],    arguments);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
70	[BUG]  [BUGGY]  (String[])this.options.toArray(new  String[tokens.size()  ]);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  else  {  tokens.add(token);  }  }  gobble(iter);  }      [BUGGY]  (String[])this.options.toArray(new  String[tokens.size()  ]);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	163	163	1	replace	(String[])this.options.toArray(new  String[tokens.size()  ]);	  (String[])tokens.toArray(new    String[tokens.size()]);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
71	[BUG]  [BUGGY]  Iterator  <  String>  iter  =(this.options!=  null)?  options.iterator()  :  this.options.iterator();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  else  {  tokens.add(token);  }  }  gobble(iter);  }      [BUGGY]  Iterator  <  String>  iter  =(this.options!=  null)?  options.iterator()  :  this.options.iterator();  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	163	163	1	replace	Iterator  <  String>  iter  =(this.options!=  null)?  options.iterator()  :  this.options.iterator();	  Iterator    <    String>    iter    =    this.options.iterator();    	non-compiled	[CE]  <identifier>  expected	37	None	replace
72	[BUG]  [BUGGY]  tokens.add(arguments[0],  arguments[2]);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  else  {  tokens.add(token);  }  }  gobble(iter);  }      [BUGGY]  tokens.add(arguments[0],  arguments[2]);  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	163	163	1	replace	tokens.add(arguments[0],  arguments[2]);	  tokens.add(arguments[0],    arguments[1]);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
73	[BUG]  [BUGGY]  tokens.add(arguments[0],  arguments[1]  +  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  else  {  tokens.add(token);  }  }  gobble(iter);  }      [BUGGY]  tokens.add(arguments[0],  arguments[1]  +  stopAtNonOption);  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	163	163	1	replace	tokens.add(arguments[0],  arguments[1]  +  stopAtNonOption);	  tokens.add(arguments[0],    arguments[1]);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
74	[BUG]  [BUGGY]  return(String[])tokens.toArray(new  String[tokens.size()  -1],  stopAtNonOption,  options);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      }  else  {  tokens.add(token);  }  }  gobble(iter);  }      [BUGGY]  return(String[])tokens.toArray(new  String[tokens.size()  -1],  stopAtNonOption,  options);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	163	163	1	replace	return(String[])tokens.toArray(new  String[tokens.size()  -1],  stopAtNonOption,  options);	  return(String[])tokens.toArray(new    String[tokens.size()    -1],    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
75	[BUG]  [BUGGY]  return(String[])options.toArray(new  String[tokens.size()  -1],  stopAtNonOption);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  else  {  tokens.add(token);  }  }  gobble(iter);  }      [BUGGY]  return(String[])options.toArray(new  String[tokens.size()  -1],  stopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	163	163	1	replace	return(String[])options.toArray(new  String[tokens.size()  -1],  stopAtNonOption);	  return(String[])tokens.toArray(new    String[tokens.size()    -1],    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
76	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Iterator  <  String>  iter  =  options.iterator();  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      }  else  {  tokens.add(token);  }  }  gobble(iter);  }      [BUGGY]  if(stopAtNonOption)  {  Iterator  <  String>  iter  =  options.iterator();  tokens.add(token);  }  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	163	163	1	replace	if(stopAtNonOption)  {  Iterator  <  String>  iter  =  options.iterator();  tokens.add(token);  }	  Iterator    <    String>    iter    =    options.iterator();    tokens.add(token);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
77	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  currentOption.options.iterator();  tokens.add(token);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  else  {  tokens.add(token);  }  }  gobble(iter);  }      [BUGGY]  Iterator  <  String>  iter  =  currentOption.options.iterator();  tokens.add(token);  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	163	163	1	replace	Iterator  <  String>  iter  =  currentOption.options.iterator();  tokens.add(token);	  Iterator    <    String>    iter    =    options.iterator();    tokens.add(token);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
78	[BUG]  [BUGGY]  Ilerator  iter  =  currentOption.options.iterator();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  else  {  tokens.add(token);  }  }  gobble(iter);  }      [BUGGY]  Ilerator  iter  =  currentOption.options.iterator();  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	163	163	1	replace	Ilerator  iter  =  currentOption.options.iterator();	  Ilerator    iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	36	None	replace
79	[BUG]  [BUGGY]  Ilerator  <  String>  iter  =  options.values().iterator();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  else  {  tokens.add(token);  }  }  gobble(iter);  }      [BUGGY]  Ilerator  <  String>  iter  =  options.values().iterator();  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	163	163	1	replace	Ilerator  <  String>  iter  =  options.values().iterator();	  Iterator    <    String>    iter    =    options.values().iterator();    	non-compiled	[CE]  <identifier>  expected	32	None	replace
80	[BUG]  [BUGGY]  Iterator  <  String>  iter  =(this.arguments!=  null)?  this.arguments.iterator()  :  arguments.iterator();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  else  {  tokens.add(token);  }  }  gobble(iter);  }      [BUGGY]  Iterator  <  String>  iter  =(this.arguments!=  null)?  this.arguments.iterator()  :  arguments.iterator();  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	163	163	1	replace	Iterator  <  String>  iter  =(this.arguments!=  null)?  this.arguments.iterator()  :  arguments.iterator();	  Iterator    <    String>    iter    =    this.arguments.iterator();    	non-compiled	[CE]  <identifier>  expected	24	None	replace
81	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(tokenLength,  stopAtNonOption,  arguments);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      }  else  {  tokens.add(token);  }  }  gobble(iter);  }      [BUGGY]  Option  currentOption  =  options.getOption(tokenLength,  stopAtNonOption,  arguments);  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	163	163	1	replace	Option  currentOption  =  options.getOption(tokenLength,  stopAtNonOption,  arguments);	  Option    currentOption    =    options.getOption(tokenLength,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
82	[BUG]  [BUGGY]  return(String[])this.options.toArray(new  String[tokens.size()  ]);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      }  else  {  tokens.add(token);  }  }  gobble(iter);  }      [BUGGY]  return(String[])this.options.toArray(new  String[tokens.size()  ]);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	163	163	1	replace	return(String[])this.options.toArray(new  String[tokens.size()  ]);	  return(String[])tokens.toArray(new    String[tokens.size()    1]);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
83	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(this.stopAtNonOption);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  else  {  tokens.add(token);  }  }  gobble(iter);  }      [BUGGY]  Option  currentOption  =  options.getOption(this.stopAtNonOption);  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	163	163	1	replace	Option  currentOption  =  options.getOption(this.stopAtNonOption);	  Option    currentOption    =    options.getOption(token);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
84	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(tokenLength,  arguments.length);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      }  else  {  tokens.add(token);  }  }  gobble(iter);  }      [BUGGY]  Option  currentOption  =  options.getOption(tokenLength,  arguments.length);  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	163	163	1	replace	Option  currentOption  =  options.getOption(tokenLength,  arguments.length);	  Option    currentOption    =    options.getOption(tokenLength,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
85	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(tokenLength,  arguments[stopAtNonOption]);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  else  {  tokens.add(token);  }  }  gobble(iter);  }      [BUGGY]  Option  currentOption  =  options.getOption(tokenLength,  arguments[stopAtNonOption]);  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	163	163	1	replace	Option  currentOption  =  options.getOption(tokenLength,  arguments[stopAtNonOption]);	  Option    currentOption    =    options.getOption(tokenLength,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
86	[BUG]  [BUGGY]  return(String[])tokens.toArray(new  String[tokens.size()  ],  arguments,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      }  else  {  tokens.add(token);  }  }  gobble(iter);  }      [BUGGY]  return(String[])tokens.toArray(new  String[tokens.size()  ],  arguments,  stopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	163	163	1	replace	return(String[])tokens.toArray(new  String[tokens.size()  ],  arguments,  stopAtNonOption);	  return(String[])tokens.toArray(new    String[tokens.size()    ],    stopAtNonOption,    arguments);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
87	[BUG]  [BUGGY]  return(String[])tokens.toArray(new  String[tokens.size()  ],  options,  stopAtNonOption,  arguments);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  else  {  tokens.add(token);  }  }  gobble(iter);  }      [BUGGY]  return(String[])tokens.toArray(new  String[tokens.size()  ],  options,  stopAtNonOption,  arguments);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	163	163	1	replace	return(String[])tokens.toArray(new  String[tokens.size()  ],  options,  stopAtNonOption,  arguments);	  return(String[])tokens.toArray(new    String[tokens.size()    ],    stopAtNonOption,    arguments);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
88	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  this.currentOption.iterator();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  else  {  tokens.add(token);  }  }  gobble(iter);  }      [BUGGY]  Iterator  <  String>  iter  =  this.currentOption.iterator();  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	163	163	1	replace	Iterator  <  String>  iter  =  this.currentOption.iterator();	  Iterator    <    String>    iter    =    currentOption.iterator();    	non-compiled	[CE]  <identifier>  expected	25	None	replace
89	[BUG]  [BUGGY]  tokens.add(arguments[0].toString()  + ", ");  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      }  else  {  tokens.add(token);  }  }  gobble(iter);  }      [BUGGY]  tokens.add(arguments[0].toString()  + ", ");  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	163	163	1	replace	tokens.add(arguments[0].toString()  + ", ");	  tokens.add(arguments[0].toString());    	non-compiled	[CE]  <identifier>  expected	29	None	replace
90	[BUG]  [BUGGY]  tokens.add(arguments[0],  arguments[1]).toLowerCase();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  else  {  tokens.add(token);  }  }  gobble(iter);  }      [BUGGY]  tokens.add(arguments[0],  arguments[1]).toLowerCase();  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	163	163	1	replace	tokens.add(arguments[0],  arguments[1]).toLowerCase();	  tokens.add(arguments[0],    arguments[1]);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
91	[BUG]  [BUGGY]  Iterator  iter  =  this.currentOption.options.iterator();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  else  {  tokens.add(token);  }  }  gobble(iter);  }      [BUGGY]  Iterator  iter  =  this.currentOption.options.iterator();  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	163	163	1	replace	Iterator  iter  =  this.currentOption.options.iterator();	  Iterator    iter    =    currentOption.options.iterator();    	non-compiled	[CE]  <identifier>  expected	35	None	replace
92	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.entrySet().iterator();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  else  {  tokens.add(token);  }  }  gobble(iter);  }      [BUGGY]  Iterator  <  String>  iter  =  options.entrySet().iterator();  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	163	163	1	replace	Iterator  <  String>  iter  =  options.entrySet().iterator();	  Iterator    <    String>    iter    =    options.values().iterator();    	non-compiled	[CE]  <identifier>  expected	32	None	replace
93	[BUG]  [BUGGY]  (String[])this.tokens.toArray(new  String[tokens.size()  ]);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  else  {  tokens.add(token);  }  }  gobble(iter);  }      [BUGGY]  (String[])this.tokens.toArray(new  String[tokens.size()  ]);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	163	163	1	replace	(String[])this.tokens.toArray(new  String[tokens.size()  ]);	  (String[])tokens.toArray(new    String[tokens.size()]);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
94	[BUG]  [BUGGY]  tokens.add(tokenLength  -  1);  currentOption  =  options.getOption(tokenLength  -  1);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  else  {  tokens.add(token);  }  }  gobble(iter);  }      [BUGGY]  tokens.add(tokenLength  -  1);  currentOption  =  options.getOption(tokenLength  -  1);  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	163	163	1	replace	tokens.add(tokenLength  -  1);  currentOption  =  options.getOption(tokenLength  -  1);	  tokens.add(token);    currentOption    =    options.getOption(tokenLength    -    1);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
95	[BUG]  [BUGGY]  tryFallThrough(stopAtNonOption)  {  return(String[])tokens.toArray(new  String[tokens.size()  ],  stopAtNonOption);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  else  {  tokens.add(token);  }  }  gobble(iter);  }      [BUGGY]  tryFallThrough(stopAtNonOption)  {  return(String[])tokens.toArray(new  String[tokens.size()  ],  stopAtNonOption);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	163	163	1	replace	tryFallThrough(stopAtNonOption)  {  return(String[])tokens.toArray(new  String[tokens.size()  ],  stopAtNonOption);  }	  if(stopAtNonOption)    {    return(String[])tokens.toArray(new    String[tokens.size()    ],    stopAtNonOption);    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
96	[BUG]  [BUGGY]  tryFallThrough(stopAtNonOption)  {  return(String[])tokens.toArray(new  String[tokens.size()  ],  arguments);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  else  {  tokens.add(token);  }  }  gobble(iter);  }      [BUGGY]  tryFallThrough(stopAtNonOption)  {  return(String[])tokens.toArray(new  String[tokens.size()  ],  arguments);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	163	163	1	replace	tryFallThrough(stopAtNonOption)  {  return(String[])tokens.toArray(new  String[tokens.size()  ],  arguments);  }	  if(stopAtNonOption)    {    return(String[])tokens.toArray(new    String[tokens.size()    ],    stopAtNonOption);    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
97	[BUG]  [BUGGY]  tryFallThrough(stopAtNonOption)  {  return(String[])tokens.toArray(new  String[tokens.size()  ],  argument);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  else  {  tokens.add(token);  }  }  gobble(iter);  }      [BUGGY]  tryFallThrough(stopAtNonOption)  {  return(String[])tokens.toArray(new  String[tokens.size()  ],  argument);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	163	163	1	replace	tryFallThrough(stopAtNonOption)  {  return(String[])tokens.toArray(new  String[tokens.size()  ],  argument);  }	  if(stopAtNonOption)    {    return(String[])tokens.toArray(new    String[tokens.size()    ],    stopAtNonOption);    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
98	[BUG]  [BUGGY]  tryFallThrough(stopAtNonOption)  {  return(String[])tokens.toArray(new  String[tokens.size()  ],  argumentLength);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  else  {  tokens.add(token);  }  }  gobble(iter);  }      [BUGGY]  tryFallThrough(stopAtNonOption)  {  return(String[])tokens.toArray(new  String[tokens.size()  ],  argumentLength);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	163	163	1	replace	tryFallThrough(stopAtNonOption)  {  return(String[])tokens.toArray(new  String[tokens.size()  ],  argumentLength);  }	  if(stopAtNonOption)    {    return(String[])tokens.toArray(new    String[tokens.size()    ],    stopAtNonOption);    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
99	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Iterator  <  String>  iter  =  options.iterator();  tokens.add(token);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      }  else  {  tokens.add(token);  }  }  gobble(iter);  }      [BUGGY]  if(stopAtNonOption)  {  Iterator  <  String>  iter  =  options.iterator();  tokens.add(token);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	163	163	1	replace	if(stopAtNonOption)  {  Iterator  <  String>  iter  =  options.iterator();  tokens.add(token);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  Iterator    <    String>    iter    =    options.iterator();    tokens.add(token);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
100	[BUG]  [BUGGY]  tokens  =(String[])iter.nextIterator();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  else  {  tokens.add(token);  }  }  gobble(iter);  }      [BUGGY]  tokens  =(String[])iter.nextIterator();  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	163	163	1	replace	tokens  =(String[])iter.nextIterator();	  tokens    =(String[])iter.nextToken();    	non-compiled	[CE]  <identifier>  expected	3	None	replace
