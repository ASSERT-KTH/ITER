bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  While(stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]        AssertionFailedError    [CONTEXT]    {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(   "--   ");  tokens.add(value);  }    [BUGGY]  While(stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	While(stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }	  if(stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	1	None	replace
2	[BUG]  [BUGGY]  While(!stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]    {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(   "--   ");  tokens.add(value);  }    [BUGGY]  While(!stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	While(!stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }	  if(stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	1	None	replace
3	[BUG]  [BUGGY]  safeToken(stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]    {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(   "--   ");  tokens.add(value);  }    [BUGGY]  safeToken(stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	safeToken(stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }	  if(stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	1	None	replace
4	[BUG]  [BUGGY]  While(stopAtNonOption)  {  if(eatTheRest)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]              AssertionFailedError    [CONTEXT]    {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(   "--   ");  tokens.add(value);  }    [BUGGY]  While(stopAtNonOption)  {  if(eatTheRest)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	While(stopAtNonOption)  {  if(eatTheRest)  {  throw  new  IllegalArgumentException( " ");  }	  if(stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	1	None	replace
5	[BUG]  [BUGGY]  this.stopAtNonOption  =  currentOption;  [CE]  [FE]        AssertionFailedError    [CONTEXT]    {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(   "--   ");  tokens.add(value);  }    [BUGGY]  this.stopAtNonOption  =  currentOption;  [BUGGY]      [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	this.stopAtNonOption  =  currentOption;	  this.stopAtNonOption    =    stopAtNonOption;    	non-compiled	[CE]  	10	None	replace
6	[BUG]  [BUGGY]  this.stopAtNonOption  =  eatTheRest;  [CE]  [FE]          AssertionFailedError    [CONTEXT]    {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(   "--   ");  tokens.add(value);  }    [BUGGY]  this.stopAtNonOption  =  eatTheRest;  [BUGGY]      [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	this.stopAtNonOption  =  eatTheRest;	  this.stopAtNonOption    =    stopAtNonOption;    	non-compiled	[CE]  	10	None	replace
7	[BUG]  [BUGGY]  While(stopAtNonOption)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]        AssertionFailedError    [CONTEXT]    {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(   "--   ");  tokens.add(value);  }    [BUGGY]  While(stopAtNonOption)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	While(stopAtNonOption)  {  throw  new  IllegalStateException( " ");  }	      if(stopAtNonOption)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	6	None	replace
8	[BUG]  [BUGGY]  While(!stopAtNonOption)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]    {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(   "--   ");  tokens.add(value);  }    [BUGGY]  While(!stopAtNonOption)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	While(!stopAtNonOption)  {  throw  new  IllegalStateException( " ");  }	      if(stopAtNonOption)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	6	None	replace
9	[BUG]  [BUGGY]  While(stopAtNonOption)  {  if(eatTheRest)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]    {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(   "--   ");  tokens.add(value);  }    [BUGGY]  While(stopAtNonOption)  {  if(eatTheRest)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	While(stopAtNonOption)  {  if(eatTheRest)  {  throw  new  IllegalStateException( " ");  }	      if(stopAtNonOption)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	6	None	replace
10	[BUG]  [BUGGY]  While(stopAtNonOption)  {  throw  new  IllegalStateException( " ".equals(currentOption.getValue()));  }  [CE]  [FE]              AssertionFailedError    [CONTEXT]    {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(   "--   ");  tokens.add(value);  }    [BUGGY]  While(stopAtNonOption)  {  throw  new  IllegalStateException( " ".equals(currentOption.getValue()));  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	While(stopAtNonOption)  {  throw  new  IllegalStateException( " ".equals(currentOption.getValue()));  }	      if(stopAtNonOption)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	6	None	replace
11	[BUG]  [BUGGY]  this.stopAtNonOption  =  stopAtNonOption?  null  :  stopAtNonOption;  [CE]  [FE]          AssertionFailedError    [CONTEXT]    {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(   "--   ");  tokens.add(value);  }    [BUGGY]  this.stopAtNonOption  =  stopAtNonOption?  null  :  stopAtNonOption;  [BUGGY]      [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	this.stopAtNonOption  =  stopAtNonOption?  null  :  stopAtNonOption;	  this.stopAtNonOption    =    stopAtNonOption?    stopAtNonOption    :    null;    	non-compiled	[CE]  	11	None	replace
12	[BUG]  [BUGGY]  this.stopAtNonOption  =  stopAtNonOption?  currentOption  :  null;  [CE]  [FE]            AssertionFailedError    [CONTEXT]    {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(   "--   ");  tokens.add(value);  }    [BUGGY]  this.stopAtNonOption  =  stopAtNonOption?  currentOption  :  null;  [BUGGY]      [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	this.stopAtNonOption  =  stopAtNonOption?  currentOption  :  null;	  this.stopAtNonOption    =    stopAtNonOption?    stopAtNonOption    :    null;    	non-compiled	[CE]  	11	None	replace
13	[BUG]  [BUGGY]  While(stopAtNonOption)  {  eatTheRest  =  false;  [CE]  [FE]            AssertionFailedError    [CONTEXT]    {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(   "--   ");  tokens.add(value);  }    [BUGGY]  While(stopAtNonOption)  {  eatTheRest  =  false;  [BUGGY]      [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	While(stopAtNonOption)  {  eatTheRest  =  false;	  if(eatTheRest)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	12	None	replace
14	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add( "-- ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                AssertionFailedError    [CONTEXT]    {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(   "--   ");  tokens.add(value);  }    [BUGGY]  if(stopAtNonOption)  {  tokens.add( "-- ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	if(stopAtNonOption)  {  tokens.add( "-- ");  }  else  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  	5	None	replace
15	[BUG]  [BUGGY]  tokens.add( "-- ");  tokens.add(value);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(   "--   ");  tokens.add(value);  }    [BUGGY]  tokens.add( "-- ");  tokens.add(value);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	tokens.add( "-- ");  tokens.add(value);	      if(stopAtNonOption)    {    tokens.add(   "--   ");    tokens.add(value);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	9	None	replace
16	[BUG]  [BUGGY]  While(stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]              AssertionFailedError    [CONTEXT]    {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(   "--   ");  tokens.add(value);  }    [BUGGY]  While(stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	While(stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  throw  new  IllegalStateException( " ");  }	      if(stopAtNonOption)    {    tokens.add(   "--   ");    tokens.add(value);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	9	None	replace
17	[BUG]  [BUGGY]  While(stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(value);  }  [CE]  [FE]                AssertionFailedError    [CONTEXT]    {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(   "--   ");  tokens.add(value);  }    [BUGGY]  While(stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(value);  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	While(stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(value);  }	      if(stopAtNonOption)    {    tokens.add(   "--   ");    tokens.add(value);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	9	None	replace
18	[BUG]  [BUGGY]  While(!stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(   "--   ");  tokens.add(value);  }    [BUGGY]  While(!stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	While(!stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  throw  new  IllegalStateException( " ");  }	      if(stopAtNonOption)    {    tokens.add(   "--   ");    tokens.add(value);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	9	None	replace
19	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption( "stopAtNonOption ");  [CE]  [FE]        AssertionFailedError    [CONTEXT]    {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(   "--   ");  tokens.add(value);  }    [BUGGY]  Option  currentOption  =  options.getOption( "stopAtNonOption ");  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	Option  currentOption  =  options.getOption( "stopAtNonOption ");	      if(stopAtNonOption)    {    tokens.add(   "--   ");    tokens.add(value);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	7	None	replace
20	[BUG]  [BUGGY]  Option  currentOption  =  option.getOption( "stopAtNonOption ");  [CE]  [FE]          AssertionFailedError    [CONTEXT]    {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(   "--   ");  tokens.add(value);  }    [BUGGY]  Option  currentOption  =  option.getOption( "stopAtNonOption ");  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	Option  currentOption  =  option.getOption( "stopAtNonOption ");	      if(stopAtNonOption)    {    tokens.add(   "--   ");    tokens.add(value);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	7	None	replace
21	[BUG]  [BUGGY]  tokens.add( "--n ");  [CE]  [FE]              AssertionFailedError    [CONTEXT]    {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(   "--   ");  tokens.add(value);  }    [BUGGY]  tokens.add( "--n ");  [BUGGY]      [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	tokens.add( "--n ");	  tokens.add(   "--   ");    	non-compiled	[CE]  	4	None	replace
22	[BUG]  [BUGGY]  tokens.remove( "-- ");  [CE]  [FE]                AssertionFailedError    [CONTEXT]    {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(   "--   ");  tokens.add(value);  }    [BUGGY]  tokens.remove( "-- ");  [BUGGY]      [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	tokens.remove( "-- ");	  tokens.add(   "--   ");    	non-compiled	[CE]  	4	None	replace
23	[BUG]  [BUGGY]  While(stopAtNonOption)  {  tokens.add( "-- ");  }  [CE]  [FE]        AssertionFailedError    [CONTEXT]    {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(   "--   ");  tokens.add(value);  }    [BUGGY]  While(stopAtNonOption)  {  tokens.add( "-- ");  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	While(stopAtNonOption)  {  tokens.add( "-- ");  }	      if(eatTheRest)    {    tokens.add(   "--   ");    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	13	None	replace
24	[BUG]  [BUGGY]  While(stopAtNonOption)  {  tokens.add( "-- ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]    {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(   "--   ");  tokens.add(value);  }    [BUGGY]  While(stopAtNonOption)  {  tokens.add( "-- ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	While(stopAtNonOption)  {  tokens.add( "-- ");  }  else  {  throw  new  IllegalArgumentException( " ");  }	      if(eatTheRest)    {    tokens.add(   "--   ");    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	13	None	replace
25	[BUG]  [BUGGY]  While(!stopAtNonOption)  {  tokens.add( "-- ");  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]    {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(   "--   ");  tokens.add(value);  }    [BUGGY]  While(!stopAtNonOption)  {  tokens.add( "-- ");  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	While(!stopAtNonOption)  {  tokens.add( "-- ");  }	      if(eatTheRest)    {    tokens.add(   "--   ");    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	13	None	replace
26	[BUG]  [BUGGY]  While(stopAtNonOption  &&  currentOption!=  null)  {  tokens.add( "-- ");  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]    {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(   "--   ");  tokens.add(value);  }    [BUGGY]  While(stopAtNonOption  &&  currentOption!=  null)  {  tokens.add( "-- ");  }  [BUGGY]      [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	While(stopAtNonOption  &&  currentOption!=  null)  {  tokens.add( "-- ");  }	  if(stopAtNonOption)    {    tokens.add(   "--   ");    }    	non-compiled	[CE]  	3	None	replace
27	[BUG]  [BUGGY]  While(stopAtNonOption  &&  currentOption  ==  null)  {  tokens.add( "-- ");  }  [CE]  [FE]              AssertionFailedError    [CONTEXT]    {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(   "--   ");  tokens.add(value);  }    [BUGGY]  While(stopAtNonOption  &&  currentOption  ==  null)  {  tokens.add( "-- ");  }  [BUGGY]      [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	While(stopAtNonOption  &&  currentOption  ==  null)  {  tokens.add( "-- ");  }	  if(stopAtNonOption)    {    tokens.add(   "--   ");    }    	non-compiled	[CE]  	3	None	replace
28	[BUG]  [BUGGY]  while(!stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(value);  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]    {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(   "--   ");  tokens.add(value);  }    [BUGGY]  while(!stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(value);  }  [BUGGY]      [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	while(!stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(value);  }	  if(stopAtNonOption)    {    tokens.add(   "--   ");    tokens.add(value);    }    	non-compiled	[CE]  	2	None	replace
29	[BUG]  [BUGGY]  while(!stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(value);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(   "--   ");  tokens.add(value);  }    [BUGGY]  while(!stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(value);  [BUGGY]      [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	while(!stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(value);	  if(stopAtNonOption)    {    tokens.add(   "--   ");    tokens.add(value);    }    	non-compiled	[CE]  	2	None	replace
30	[BUG]  [BUGGY]  tokens.add( "-- ");  }  else  {  tokens.add( "-- ");  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]    {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(   "--   ");  tokens.add(value);  }    [BUGGY]  tokens.add( "-- ");  }  else  {  tokens.add( "-- ");  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	tokens.add( "-- ");  }  else  {  tokens.add( "-- ");  }	      if(stopAtNonOption)    {    tokens.add(   "--   ");    }    else    {    tokens.add(   "--   ");    }    	non-compiled	[CE]  	14	None	replace
31	[BUG]  [BUGGY]  tokens.add( "-- ");  tokens.add(getValue());  [CE]  [FE]          AssertionFailedError    [CONTEXT]    {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(   "--   ");  tokens.add(value);  }    [BUGGY]  tokens.add( "-- ");  tokens.add(getValue());  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	tokens.add( "-- ");  tokens.add(getValue());	      if(stopAtNonOption)    {    tokens.add(   "--   ");    tokens.add(getValue());    }    	non-compiled	[CE]  	8	None	replace
32	[BUG]  [BUGGY]  While(stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(getValue());  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]    {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(   "--   ");  tokens.add(value);  }    [BUGGY]  While(stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(getValue());  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	While(stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(getValue());  }	      if(stopAtNonOption)    {    tokens.add(   "--   ");    tokens.add(getValue());    }    	non-compiled	[CE]  	8	None	replace
33	[BUG]  [BUGGY]  while(stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(getValue());  }  [CE]  [FE]              AssertionFailedError    [CONTEXT]    {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(   "--   ");  tokens.add(value);  }    [BUGGY]  while(stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(getValue());  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	while(stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(getValue());  }	      if(stopAtNonOption)    {    tokens.add(   "--   ");    tokens.add(getValue());    }    	non-compiled	[CE]  	8	None	replace
34	[BUG]  [BUGGY]  while(!stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(getValue());  }  [CE]  [FE]                AssertionFailedError    [CONTEXT]    {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(   "--   ");  tokens.add(value);  }    [BUGGY]  while(!stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(getValue());  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	while(!stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(getValue());  }	      if(stopAtNonOption)    {    tokens.add(   "--   ");    tokens.add(getValue());    }    	non-compiled	[CE]  	8	None	replace
35	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption( "stopAtNonOption ");  tokens.add(currentOption);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(   "--   ");  tokens.add(value);  }    [BUGGY]  Option  currentOption  =  options.getOption( "stopAtNonOption ");  tokens.add(currentOption);  [BUGGY]      [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	Option  currentOption  =  options.getOption( "stopAtNonOption ");  tokens.add(currentOption);	      	non-compiled	[CE]  	5	None	replace
36	[BUG]  [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]        AssertionFailedError    [CONTEXT]    {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(   "--   ");  tokens.add(value);  }    [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	parent!=  null  &&  stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }	  if(stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	1	None	replace
37	[BUG]  [BUGGY]  While(stopAtNonOption)  {  tokens.add( "- ");  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]    {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(   "--   ");  tokens.add(value);  }    [BUGGY]  While(stopAtNonOption)  {  tokens.add( "- ");  }  [BUGGY]      [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	While(stopAtNonOption)  {  tokens.add( "- ");  }	  if(stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	1	None	replace
38	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [CE]  [FE]          AssertionFailedError    [CONTEXT]    {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(   "--   ");  tokens.add(value);  }    [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti	      if(stopAtNonOption)    {    tokens.add(   "--   ");    tokens.add(getValue());    }    	non-compiled	[CE]  	8	None	replace
39	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [CE]  [FE]            AssertionFailedError    [CONTEXT]    {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(   "--   ");  tokens.add(value);  }    [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti	      if(stopAtNonOption)    {    tokens.add(   "--   ");    tokens.add(getValue());    }    	non-compiled	[CE]  	8	None	replace
40	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [CE]  [FE]              AssertionFailedError    [CONTEXT]    {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(   "--   ");  tokens.add(value);  }    [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti	      if(stopAtNonOption)    {    tokens.add(   "--   ");    tokens.add(getValue());    }    	non-compiled	[CE]  	8	None	replace
41	[BUG]  [BUGGY]  safeToken(stopAtNonOption)  {  tokens.add( "-- ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]        AssertionFailedError    [CONTEXT]    {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(   "--   ");  tokens.add(value);  }    [BUGGY]  safeToken(stopAtNonOption)  {  tokens.add( "-- ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	safeToken(stopAtNonOption)  {  tokens.add( "-- ");  }  else  {  throw  new  IllegalArgumentException( " ");  }	      if(eatTheRest)    {    tokens.add(   "--   ");    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	13	None	replace
42	[BUG]  [BUGGY]  safeToken(stopAtNonOption)  {  tokens.add( "-- ");  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]    {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(   "--   ");  tokens.add(value);  }    [BUGGY]  safeToken(stopAtNonOption)  {  tokens.add( "-- ");  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	safeToken(stopAtNonOption)  {  tokens.add( "-- ");  }	      if(eatTheRest)    {    tokens.add(   "--   ");    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	13	None	replace
43	[BUG]  [BUGGY]  NeighborTokenizer  tokens  =  new  NeighborTokenizer(this,  currentOption.getValue());  [CE]  [FE]            AssertionFailedError    [CONTEXT]    {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(   "--   ");  tokens.add(value);  }    [BUGGY]  NeighborTokenizer  tokens  =  new  NeighborTokenizer(this,  currentOption.getValue());  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	NeighborTokenizer  tokens  =  new  NeighborTokenizer(this,  currentOption.getValue());	      if(stopAtNonOption)    {    tokens.add(   "--   ");    tokens.add(value);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	9	None	replace
44	[BUG]  [BUGGY]  NeighborTokenizer  tokens  =  new  NeighborTokenizer(getValue(),  currentOption);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(   "--   ");  tokens.add(value);  }    [BUGGY]  NeighborTokenizer  tokens  =  new  NeighborTokenizer(getValue(),  currentOption);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	NeighborTokenizer  tokens  =  new  NeighborTokenizer(getValue(),  currentOption);	      if(stopAtNonOption)    {    tokens.add(   "--   ");    tokens.add(value);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	9	None	replace
45	[BUG]  [BUGGY]  tokens.add( "-- ");  tokens.add(value);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]        AssertionFailedError    [CONTEXT]    {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(   "--   ");  tokens.add(value);  }    [BUGGY]  tokens.add( "-- ");  tokens.add(value);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	tokens.add( "-- ");  tokens.add(value);  }  else  {  throw  new  IllegalArgumentException( " ");  }	      if(stopAtNonOption)    {    tokens.add(   "--   ");    tokens.add(value);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	7	None	replace
46	[BUG]  [BUGGY]  NeighborTokenizer  tokens  =  new  NeighborTokenizer(this,  currentOption.getNativeType(UNKNOWN_TYPE));  [CE]  [FE]          AssertionFailedError    [CONTEXT]    {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(   "--   ");  tokens.add(value);  }    [BUGGY]  NeighborTokenizer  tokens  =  new  NeighborTokenizer(this,  currentOption.getNativeType(UNKNOWN_TYPE));  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	NeighborTokenizer  tokens  =  new  NeighborTokenizer(this,  currentOption.getNativeType(UNKNOWN_TYPE));	      if(stopAtNonOption)    {    tokens.add(   "--   ");    tokens.add(value);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	7	None	replace
47	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption( "stopAtNonOption ");  tokens.add( "-- ");  [CE]  [FE]            AssertionFailedError    [CONTEXT]    {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(   "--   ");  tokens.add(value);  }    [BUGGY]  Option  currentOption  =  options.getOption( "stopAtNonOption ");  tokens.add( "-- ");  [BUGGY]      [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	Option  currentOption  =  options.getOption( "stopAtNonOption ");  tokens.add( "-- ");	  if(stopAtNonOption)    {    tokens.add(   "--   ");    }    	non-compiled	[CE]  	3	None	replace
48	[BUG]  [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  tokens.add( "-- ");  }  else  {  tokens.add( "-- ");  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]    {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(   "--   ");  tokens.add(value);  }    [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  tokens.add( "-- ");  }  else  {  tokens.add( "-- ");  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	parent!=  null  &&  stopAtNonOption)  {  tokens.add( "-- ");  }  else  {  tokens.add( "-- ");  }	      if(stopAtNonOption)    {    tokens.add(   "--   ");    }    else    {    tokens.add(   "--   ");    }    	non-compiled	[CE]  	14	None	replace
49	[BUG]  [BUGGY]  parent  ==  null  &&  stopAtNonOption)  {  tokens.add( "-- ");  }  else  {  tokens.add( "-- ");  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]    {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(   "--   ");  tokens.add(value);  }    [BUGGY]  parent  ==  null  &&  stopAtNonOption)  {  tokens.add( "-- ");  }  else  {  tokens.add( "-- ");  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	parent  ==  null  &&  stopAtNonOption)  {  tokens.add( "-- ");  }  else  {  tokens.add( "-- ");  }	      if(stopAtNonOption)    {    tokens.add(   "--   ");    }    else    {    tokens.add(   "--   ");    }    	non-compiled	[CE]  	14	None	replace
50	[BUG]  [BUGGY]  this.stopAtNonOption  =  stopAtNonOption  &&  currentOption!=  null;  [CE]  [FE]        AssertionFailedError    [CONTEXT]    {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(   "--   ");  tokens.add(value);  }    [BUGGY]  this.stopAtNonOption  =  stopAtNonOption  &&  currentOption!=  null;  [BUGGY]      [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	this.stopAtNonOption  =  stopAtNonOption  &&  currentOption!=  null;	  this.stopAtNonOption    =    stopAtNonOption;    	non-compiled	[CE]  	10	None	replace
51	[BUG]  [BUGGY]  While(stopAtNonOption)  {  tokens.add( "-- ");  [CE]  [FE]            AssertionFailedError    [CONTEXT]    {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(   "--   ");  tokens.add(value);  }    [BUGGY]  While(stopAtNonOption)  {  tokens.add( "-- ");  [BUGGY]      [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	While(stopAtNonOption)  {  tokens.add( "-- ");	  if(eatTheRest)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	12	None	replace
52	[BUG]  [BUGGY]  While(stopAtNonOption)  {  tokens.add( "-- ");  currentOption  =  stopAtNonOption;  [CE]  [FE]              AssertionFailedError    [CONTEXT]    {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(   "--   ");  tokens.add(value);  }    [BUGGY]  While(stopAtNonOption)  {  tokens.add( "-- ");  currentOption  =  stopAtNonOption;  [BUGGY]      [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	While(stopAtNonOption)  {  tokens.add( "-- ");  currentOption  =  stopAtNonOption;	  if(eatTheRest)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	12	None	replace
53	[BUG]  [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]        AssertionFailedError    [CONTEXT]    {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(   "--   ");  tokens.add(value);  }    [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	parent!=  null  &&  stopAtNonOption)  {  throw  new  IllegalStateException( " ");  }	      if(stopAtNonOption)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	6	None	replace
54	[BUG]  [BUGGY]  safeToken(stopAtNonOption)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]    {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(   "--   ");  tokens.add(value);  }    [BUGGY]  safeToken(stopAtNonOption)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	safeToken(stopAtNonOption)  {  throw  new  IllegalStateException( " ");  }	      if(stopAtNonOption)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	6	None	replace
55	[BUG]  [BUGGY]  this.stopAtNonOption  =  stopAtNonOption  &&  currentOption  ==  null;  [CE]  [FE]        AssertionFailedError    [CONTEXT]    {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(   "--   ");  tokens.add(value);  }    [BUGGY]  this.stopAtNonOption  =  stopAtNonOption  &&  currentOption  ==  null;  [BUGGY]      [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	this.stopAtNonOption  =  stopAtNonOption  &&  currentOption  ==  null;	  this.stopAtNonOption    =    stopAtNonOption;    	non-compiled	[CE]  	10	None	replace
56	[BUG]  [BUGGY]  parent  ==  null  &&  stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]        AssertionFailedError    [CONTEXT]    {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(   "--   ");  tokens.add(value);  }    [BUGGY]  parent  ==  null  &&  stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	parent  ==  null  &&  stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }	  if(stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	1	None	replace
57	[BUG]  [BUGGY]  parent  ==  null  ||  stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]    {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(   "--   ");  tokens.add(value);  }    [BUGGY]  parent  ==  null  ||  stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	parent  ==  null  ||  stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }	  if(stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	1	None	replace
58	[BUG]  [BUGGY]  parent!=  null  &&  currentOption  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]    {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(   "--   ");  tokens.add(value);  }    [BUGGY]  parent!=  null  &&  currentOption  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	parent!=  null  &&  currentOption  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	1	None	replace
59	[BUG]  [BUGGY]  tokens.add( "-- ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]        AssertionFailedError    [CONTEXT]    {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(   "--   ");  tokens.add(value);  }    [BUGGY]  tokens.add( "-- ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	tokens.add( "-- ");  }  else  {  throw  new  IllegalArgumentException( " ");  }	      if(eatTheRest)    {    tokens.add(   "--   ");    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	13	None	replace
60	[BUG]  [BUGGY]  [Delete]  [CE]  [FE]          AssertionFailedError    [CONTEXT]    {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(   "--   ");  tokens.add(value);  }    [BUGGY]  [Delete]  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	[Delete]	      if(eatTheRest)    {    tokens.add(   "--   ");    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	13	None	replace
61	[BUG]  [BUGGY]  parent  ==  null  &&  currentOption!=  null)  {  tokens.add( "-- ");  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]    {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(   "--   ");  tokens.add(value);  }    [BUGGY]  parent  ==  null  &&  currentOption!=  null)  {  tokens.add( "-- ");  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	parent  ==  null  &&  currentOption!=  null)  {  tokens.add( "-- ");  }	      if(eatTheRest)    {    tokens.add(   "--   ");    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	13	None	replace
62	[BUG]  [BUGGY]  tokens.add( "-- "  +  value);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(   "--   ");  tokens.add(value);  }    [BUGGY]  tokens.add( "-- "  +  value);  [BUGGY]      [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	tokens.add( "-- "  +  value);	  tokens.add(   "--   ");    	non-compiled	[CE]  	4	None	replace
63	[BUG]  [BUGGY]  tokens.add( "-- ",  value);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(   "--   ");  tokens.add(value);  }    [BUGGY]  tokens.add( "-- ",  value);  [BUGGY]      [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	tokens.add( "-- ",  value);	  tokens.add(   "--   ");    	non-compiled	[CE]  	4	None	replace
64	[BUG]  [BUGGY]  parent!=  null  &&  currentOption  ==  null;  tokens.add( "-- ");  tokens.add(value);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(   "--   ");  tokens.add(value);  }    [BUGGY]  parent!=  null  &&  currentOption  ==  null;  tokens.add( "-- ");  tokens.add(value);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	parent!=  null  &&  currentOption  ==  null;  tokens.add( "-- ");  tokens.add(value);	      if(stopAtNonOption)    {    tokens.add(   "--   ");    tokens.add(value);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	7	None	replace
65	[BUG]  [BUGGY]  this.stopAtNonOption  =  StopAtNonOption.stopAtNonOption;  [CE]  [FE]                AssertionFailedError    [CONTEXT]    {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(   "--   ");  tokens.add(value);  }    [BUGGY]  this.stopAtNonOption  =  StopAtNonOption.stopAtNonOption;  [BUGGY]      [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	this.stopAtNonOption  =  StopAtNonOption.stopAtNonOption;	      	non-compiled	[CE]  	5	None	replace
66	[BUG]  [BUGGY]  parent  ==  null  ||  eatTheRest)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]    {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(   "--   ");  tokens.add(value);  }    [BUGGY]  parent  ==  null  ||  eatTheRest)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	parent  ==  null  ||  eatTheRest)  {  throw  new  IllegalArgumentException( " ");  }	  if(eatTheRest)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	12	None	replace
67	[BUG]  [BUGGY]  parent  ==  null  ||  eatTheRest)  {  throw  new  IllegalArgumentException( " ".equals(value);  }  [CE]  [FE]              AssertionFailedError    [CONTEXT]    {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(   "--   ");  tokens.add(value);  }    [BUGGY]  parent  ==  null  ||  eatTheRest)  {  throw  new  IllegalArgumentException( " ".equals(value);  }  [BUGGY]      [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	parent  ==  null  ||  eatTheRest)  {  throw  new  IllegalArgumentException( " ".equals(value);  }	  if(eatTheRest)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	12	None	replace
68	[BUG]  [BUGGY]  tokens.add( "-- ");  tokens.add(value);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]    {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(   "--   ");  tokens.add(value);  }    [BUGGY]  tokens.add( "-- ");  tokens.add(value);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	tokens.add( "-- ");  tokens.add(value);  }  else  {  throw  new  IllegalStateException( " ");  }	      if(stopAtNonOption)    {    tokens.add(   "--   ");    tokens.add(value);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	9	None	replace
69	[BUG]  [BUGGY]  While(eatTheRest)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]        AssertionFailedError    [CONTEXT]    {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(   "--   ");  tokens.add(value);  }    [BUGGY]  While(eatTheRest)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	While(eatTheRest)  {  throw  new  IllegalStateException( " ");  }	      if(stopAtNonOption)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	6	None	replace
70	[BUG]  [BUGGY]  While(!eatTheRest)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]    {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(   "--   ");  tokens.add(value);  }    [BUGGY]  While(!eatTheRest)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	While(!eatTheRest)  {  throw  new  IllegalStateException( " ");  }	      if(stopAtNonOption)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	6	None	replace
71	[BUG]  [BUGGY]  while(!eatTheRest)  {  tokens.add( "-- ");  tokens.add(getValue());  [CE]  [FE]          AssertionFailedError    [CONTEXT]    {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(   "--   ");  tokens.add(value);  }    [BUGGY]  while(!eatTheRest)  {  tokens.add( "-- ");  tokens.add(getValue());  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	while(!eatTheRest)  {  tokens.add( "-- ");  tokens.add(getValue());	      if(stopAtNonOption)    {    tokens.add(   "--   ");    tokens.add(getValue());    }    	non-compiled	[CE]  	8	None	replace
72	[BUG]  [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  tokens.add( "-- ");  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]    {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(   "--   ");  tokens.add(value);  }    [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  tokens.add( "-- ");  }  [BUGGY]      [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	parent!=  null  &&  stopAtNonOption)  {  tokens.add( "-- ");  }	  if(stopAtNonOption)    {    tokens.add(   "--   ");    }    	non-compiled	[CE]  	3	None	replace
73	[BUG]  [BUGGY]  parent!=  null  &&  stopAtNonOption);  tokens.add( "-- ");  [CE]  [FE]              AssertionFailedError    [CONTEXT]    {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(   "--   ");  tokens.add(value);  }    [BUGGY]  parent!=  null  &&  stopAtNonOption);  tokens.add( "-- ");  [BUGGY]      [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	parent!=  null  &&  stopAtNonOption);  tokens.add( "-- ");	  if(stopAtNonOption)    {    tokens.add(   "--   ");    }    	non-compiled	[CE]  	3	None	replace
74	[BUG]  [BUGGY]  this.stopAtNonOption  =  stopAtNonOption?  stopAtNonOption  :  value;  [CE]  [FE]          AssertionFailedError    [CONTEXT]    {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(   "--   ");  tokens.add(value);  }    [BUGGY]  this.stopAtNonOption  =  stopAtNonOption?  stopAtNonOption  :  value;  [BUGGY]      [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	this.stopAtNonOption  =  stopAtNonOption?  stopAtNonOption  :  value;	  this.stopAtNonOption    =    stopAtNonOption?    stopAtNonOption    :    null;    	non-compiled	[CE]  	11	None	replace
75	[BUG]  [BUGGY]  this.stopAtNonOption  =  stopAtNonOption?  endAtNonOption  :  null;  [CE]  [FE]            AssertionFailedError    [CONTEXT]    {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(   "--   ");  tokens.add(value);  }    [BUGGY]  this.stopAtNonOption  =  stopAtNonOption?  endAtNonOption  :  null;  [BUGGY]      [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	this.stopAtNonOption  =  stopAtNonOption?  endAtNonOption  :  null;	  this.stopAtNonOption    =    stopAtNonOption?    stopAtNonOption    :    null;    	non-compiled	[CE]  	11	None	replace
76	[BUG]  [BUGGY]  parent!=  null  &&  currentOption  ==  null)  {  tokens.add( "-- ");  }  else  {  tokens.add( "-- ");  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]    {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(   "--   ");  tokens.add(value);  }    [BUGGY]  parent!=  null  &&  currentOption  ==  null)  {  tokens.add( "-- ");  }  else  {  tokens.add( "-- ");  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	parent!=  null  &&  currentOption  ==  null)  {  tokens.add( "-- ");  }  else  {  tokens.add( "-- ");  }	      if(stopAtNonOption)    {    tokens.add(   "--   ");    }    else    {    tokens.add(   "--   ");    }    	non-compiled	[CE]  	14	None	replace
77	[BUG]  [BUGGY]  parent!=  null  &&  currentOption  ==  null)  {  tokens.add( "-- ");  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]    {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(   "--   ");  tokens.add(value);  }    [BUGGY]  parent!=  null  &&  currentOption  ==  null)  {  tokens.add( "-- ");  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	parent!=  null  &&  currentOption  ==  null)  {  tokens.add( "-- ");  }	      if(stopAtNonOption)    {    tokens.add(   "--   ");    }    else    {    tokens.add(   "--   ");    }    	non-compiled	[CE]  	14	None	replace
