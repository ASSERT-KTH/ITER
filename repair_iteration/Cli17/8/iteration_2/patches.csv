bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  safeToken(currentOption)  {  tokens.add( "-- ");  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  safeToken(currentOption)  {  tokens.add( "-- ");  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	safeToken(currentOption)  {  tokens.add( "-- ");  }	  safeToken(stopAtNonOption)    {    tokens.add(   "--   ");    }    	non-compiled	[CE]  	42	None	replace
2	[BUG]  [BUGGY]  while(!stopAtNonOption  &&  currentOption!=  null)  {  tokens.add( "-- ");  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  while(!stopAtNonOption  &&  currentOption!=  null)  {  tokens.add( "-- ");  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	while(!stopAtNonOption  &&  currentOption!=  null)  {  tokens.add( "-- ");  }	  While(!stopAtNonOption)    {    tokens.add(   "--   ");    }    	non-compiled	[CE]  	25	None	replace
3	[BUG]  [BUGGY]  While(!stopAtNonOption  &&  currentOption!=  null)  {  tokens.add( "-- ");  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  While(!stopAtNonOption  &&  currentOption!=  null)  {  tokens.add( "-- ");  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	While(!stopAtNonOption  &&  currentOption!=  null)  {  tokens.add( "-- ");  }	  While(!stopAtNonOption)    {    tokens.add(   "--   ");    }    	non-compiled	[CE]  	25	None	replace
4	[BUG]  [BUGGY]  while(!stopAtNonOption  &&  currentOption  ==  null)  {  tokens.add( "-- ");  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  while(!stopAtNonOption  &&  currentOption  ==  null)  {  tokens.add( "-- ");  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	while(!stopAtNonOption  &&  currentOption  ==  null)  {  tokens.add( "-- ");  }	  While(!stopAtNonOption)    {    tokens.add(   "--   ");    }    	non-compiled	[CE]  	25	None	replace
5	[BUG]  [BUGGY]  while(stopAtNonOption  &&  currentOption!=  null)  {  tokens.add( "-- ");  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  while(stopAtNonOption  &&  currentOption!=  null)  {  tokens.add( "-- ");  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	while(stopAtNonOption  &&  currentOption!=  null)  {  tokens.add( "-- ");  }	  While(stopAtNonOption)    {    tokens.add(   "--   ");    }    	non-compiled	[CE]  	23	None	replace
6	[BUG]  [BUGGY]  this.stopAtNonOption  =  true;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  this.stopAtNonOption  =  true;  [BUGGY]        [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	this.stopAtNonOption  =  true;	  this.stopAtNonOption    =    eatTheRest;    	non-compiled	[CE]  	6	None	replace
7	[BUG]  [BUGGY]  this.stopAtNonOption  =  StopAtNonOption;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  this.stopAtNonOption  =  StopAtNonOption;  [BUGGY]        [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	this.stopAtNonOption  =  StopAtNonOption;	  this.stopAtNonOption    =    eatTheRest;    	non-compiled	[CE]  	6	None	replace
8	[BUG]  [BUGGY]  tokens.add( "-- ".equals(currentOption));  [CE]  [FE]            AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  tokens.add( "-- ".equals(currentOption));  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	tokens.add( "-- ".equals(currentOption));	  parent!=    null    &&    currentOption    ==    null;    tokens.add(   "--   ");    tokens.add(value);    	non-compiled	[CE]  	64	None	replace
9	[BUG]  [BUGGY]  tokens.add( "-- "  +  eatTheRest);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  tokens.add( "-- "  +  eatTheRest);  [BUGGY]        [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	tokens.add( "-- "  +  eatTheRest);	  tokens.add(   "--   "    +    value);    	non-compiled	[CE]  	62	None	replace
10	[BUG]  [BUGGY]  tokens.add( "-- "  +  this.stopAtNonOption);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  tokens.add( "-- "  +  this.stopAtNonOption);  [BUGGY]        [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	tokens.add( "-- "  +  this.stopAtNonOption);	  tokens.add(   "--   "    +    value);    	non-compiled	[CE]  	62	None	replace
11	[BUG]  [BUGGY]  tokens.add( "-- "  +  value,  stopAtNonOption);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  tokens.add( "-- "  +  value,  stopAtNonOption);  [BUGGY]        [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	tokens.add( "-- "  +  value,  stopAtNonOption);	  tokens.add(   "--   "    +    value);    	non-compiled	[CE]  	62	None	replace
12	[BUG]  [BUGGY]  tokens.remove(0);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  tokens.remove(0);  [BUGGY]        [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	tokens.remove(0);	  tokens.remove(   "--   ");    	non-compiled	[CE]  	22	None	replace
13	[BUG]  [BUGGY]  tokens.clear();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  tokens.clear();  [BUGGY]        [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	tokens.clear();	  tokens.remove(   "--   ");    	non-compiled	[CE]  	22	None	replace
14	[BUG]  [BUGGY]  this.stopAtNonOption  =  stopAtNonOption?  value  :  stopAtNonOption;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  this.stopAtNonOption  =  stopAtNonOption?  value  :  stopAtNonOption;  [BUGGY]        [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	this.stopAtNonOption  =  stopAtNonOption?  value  :  stopAtNonOption;	  this.stopAtNonOption    =    stopAtNonOption?    stopAtNonOption    :    value;    	non-compiled	[CE]  	74	None	replace
15	[BUG]  [BUGGY]  this.stopAtNonOption  =  stopAtNonOption?  currentOption  :  value;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  this.stopAtNonOption  =  stopAtNonOption?  currentOption  :  value;  [BUGGY]        [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	this.stopAtNonOption  =  stopAtNonOption?  currentOption  :  value;	  this.stopAtNonOption    =    stopAtNonOption?    stopAtNonOption    :    value;    	non-compiled	[CE]  	74	None	replace
16	[BUG]  [BUGGY]  this.stopAtNonOption  =  stopAtNonOption?  null  :  value;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  this.stopAtNonOption  =  stopAtNonOption?  null  :  value;  [BUGGY]        [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	this.stopAtNonOption  =  stopAtNonOption?  null  :  value;	  this.stopAtNonOption    =    stopAtNonOption?    stopAtNonOption    :    value;    	non-compiled	[CE]  	74	None	replace
17	[BUG]  [BUGGY]  parent  ==  null  &&  eatTheRest)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  parent  ==  null  &&  eatTheRest)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	parent  ==  null  &&  eatTheRest)  {  throw  new  IllegalArgumentException( " ");  }	  parent    ==    null    ||    eatTheRest)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	66	None	replace
18	[BUG]  [BUGGY]  tokens  ==  null  ||  eatTheRest)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  tokens  ==  null  ||  eatTheRest)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	tokens  ==  null  ||  eatTheRest)  {  throw  new  IllegalArgumentException( " ");  }	  parent    ==    null    ||    eatTheRest)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	66	None	replace
19	[BUG]  [BUGGY]  if(eatTheRest)  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  if(eatTheRest)  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	if(eatTheRest)  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  tokens.add(   "--   ");    tokens.add(value);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	45	None	replace
20	[BUG]  [BUGGY]  if(eatTheRest)  {  tokens.add( "-- ");  tokens.add(value);  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  if(eatTheRest)  {  tokens.add( "-- ");  tokens.add(value);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	if(eatTheRest)  {  tokens.add( "-- ");  tokens.add(value);  }	  tokens.add(   "--   ");    tokens.add(value);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	45	None	replace
21	[BUG]  [BUGGY]  while(!stopAtNonOption  &&  currentOption!=  null)  {  tokens.add( "-- ");  tokens.add(value);  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  while(!stopAtNonOption  &&  currentOption!=  null)  {  tokens.add( "-- ");  tokens.add(value);  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	while(!stopAtNonOption  &&  currentOption!=  null)  {  tokens.add( "-- ");  tokens.add(value);  }	  while(!stopAtNonOption)    {    tokens.add(   "--   ");    tokens.add(value);    }    	non-compiled	[CE]  	28	None	replace
22	[BUG]  [BUGGY]  while(!stopAtNonOption  &&  value.length()  >  0)  {  tokens.add( "-- ");  tokens.add(value);  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  while(!stopAtNonOption  &&  value.length()  >  0)  {  tokens.add( "-- ");  tokens.add(value);  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	while(!stopAtNonOption  &&  value.length()  >  0)  {  tokens.add( "-- ");  tokens.add(value);  }	  while(!stopAtNonOption)    {    tokens.add(   "--   ");    tokens.add(value);    }    	non-compiled	[CE]  	28	None	replace
23	[BUG]  [BUGGY]  this.stopAtNonOption  =  StopAtNonOption.stopAtNonOption();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  this.stopAtNonOption  =  StopAtNonOption.stopAtNonOption();  [BUGGY]        [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	this.stopAtNonOption  =  StopAtNonOption.stopAtNonOption();	  this.stopAtNonOption    =    StopAtNonOption.stopAtNonOption;    	non-compiled	[CE]  	65	None	replace
24	[BUG]  [BUGGY]  this.stopAtNonOption  =  StopAtNonOption.ERROR;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  this.stopAtNonOption  =  StopAtNonOption.ERROR;  [BUGGY]        [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	this.stopAtNonOption  =  StopAtNonOption.ERROR;	  this.stopAtNonOption    =    StopAtNonOption.stopAtNonOption;    	non-compiled	[CE]  	65	None	replace
25	[BUG]  [BUGGY]  this.stopAtNonOption  =  StopAtNonOption.stopAtNonOption(currentOption);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  this.stopAtNonOption  =  StopAtNonOption.stopAtNonOption(currentOption);  [BUGGY]        [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	this.stopAtNonOption  =  StopAtNonOption.stopAtNonOption(currentOption);	  this.stopAtNonOption    =    StopAtNonOption.stopAtNonOption;    	non-compiled	[CE]  	65	None	replace
26	[BUG]  [BUGGY]  while(stopAtNonOption  &&  currentOption!=  null)  {  tokens.add( "-- ");  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  while(stopAtNonOption  &&  currentOption!=  null)  {  tokens.add( "-- ");  [BUGGY]        [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	while(stopAtNonOption  &&  currentOption!=  null)  {  tokens.add( "-- ");	  While(stopAtNonOption)    {    tokens.add(   "--   ");    	non-compiled	[CE]  	51	None	replace
27	[BUG]  [BUGGY]  While(stopAtNonOption  &&  currentOption!=  null)  {  tokens.add( "-- ");  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  While(stopAtNonOption  &&  currentOption!=  null)  {  tokens.add( "-- ");  [BUGGY]        [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	While(stopAtNonOption  &&  currentOption!=  null)  {  tokens.add( "-- ");	  While(stopAtNonOption)    {    tokens.add(   "--   ");    	non-compiled	[CE]  	51	None	replace
28	[BUG]  [BUGGY]  safeToken(currentOption)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  safeToken(currentOption)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	safeToken(currentOption)  {  throw  new  IllegalArgumentException( " ");  }	  safeToken(stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	3	None	replace
29	[BUG]  [BUGGY]  safeToken(stopAtNonOption)throw  new  IllegalArgumentException( " ");  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  safeToken(stopAtNonOption)throw  new  IllegalArgumentException( " ");  [BUGGY]        [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	safeToken(stopAtNonOption)throw  new  IllegalArgumentException( " ");	  safeToken(stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	3	None	replace
30	[BUG]  [BUGGY]  tokens.add( "-- ",  eatTheRest);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  tokens.add( "-- ",  eatTheRest);  [BUGGY]        [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	tokens.add( "-- ",  eatTheRest);	  tokens.add(   "--   ",    value);    	non-compiled	[CE]  	63	None	replace
31	[BUG]  [BUGGY]  echtsuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  echtsuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	echtsuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti	  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti    	non-compiled	[CE]  	39	None	replace
32	[BUG]  [BUGGY]  dsuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  dsuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	dsuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti	  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti    	non-compiled	[CE]  	39	None	replace
33	[BUG]  [BUGGY]  ffesuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  ffesuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	ffesuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti	  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti    	non-compiled	[CE]  	39	None	replace
34	[BUG]  [BUGGY]  tokens.add( "- ");  tokens.add(getValue());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  tokens.add( "- ");  tokens.add(getValue());  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	tokens.add( "- ");  tokens.add(getValue());	  tokens.add(   "--   ");    tokens.add(getValue());    	non-compiled	[CE]  	31	None	replace
35	[BUG]  [BUGGY]  tokens.remove( "-- ");  tokens.add(getValue());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  tokens.remove( "-- ");  tokens.add(getValue());  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	tokens.remove( "-- ");  tokens.add(getValue());	  tokens.add(   "--   ");    tokens.add(getValue());    	non-compiled	[CE]  	31	None	replace
36	[BUG]  [BUGGY]  this.stopAtNonOption  =  stopAtNonOption?  null  :  stopAtNonOption.toString();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  this.stopAtNonOption  =  stopAtNonOption?  null  :  stopAtNonOption.toString();  [BUGGY]        [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	this.stopAtNonOption  =  stopAtNonOption?  null  :  stopAtNonOption.toString();	  this.stopAtNonOption    =    stopAtNonOption?    null    :    stopAtNonOption;    	non-compiled	[CE]  	11	None	replace
37	[BUG]  [BUGGY]  tokens.add( "- ");  [CE]  [FE]              AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  tokens.add( "- ");  [BUGGY]        [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	tokens.add( "- ");	  While(stopAtNonOption)    {    tokens.add(   "-   ");    }    	non-compiled	[CE]  	37	None	replace
38	[BUG]  [BUGGY]  while(stopAtNonOption  &&  currentOption!=  null)  {  tokens.add( "- ");  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  while(stopAtNonOption  &&  currentOption!=  null)  {  tokens.add( "- ");  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	while(stopAtNonOption  &&  currentOption!=  null)  {  tokens.add( "- ");  }	  While(stopAtNonOption)    {    tokens.add(   "-   ");    }    	non-compiled	[CE]  	37	None	replace
39	[BUG]  [BUGGY]  While(stopAtNonOption  &&  currentOption!=  null)  {  tokens.add( "- ");  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  While(stopAtNonOption  &&  currentOption!=  null)  {  tokens.add( "- ");  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	While(stopAtNonOption  &&  currentOption!=  null)  {  tokens.add( "- ");  }	  While(stopAtNonOption)    {    tokens.add(   "-   ");    }    	non-compiled	[CE]  	37	None	replace
40	[BUG]  [BUGGY]  while(!stopAtNonOption  &&  getValue()!=  null)  {  tokens.add( "-- ");  tokens.add(getValue());  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  while(!stopAtNonOption  &&  getValue()!=  null)  {  tokens.add( "-- ");  tokens.add(getValue());  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	while(!stopAtNonOption  &&  getValue()!=  null)  {  tokens.add( "-- ");  tokens.add(getValue());  }	  while(!stopAtNonOption)    {    tokens.add(   "--   ");    tokens.add(getValue());    }    	non-compiled	[CE]  	34	None	replace
41	[BUG]  [BUGGY]  while(!stopAtNonOption  &&  currentOption!=  null)  {  tokens.add( "-- ");  tokens.add(getValue());  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  while(!stopAtNonOption  &&  currentOption!=  null)  {  tokens.add( "-- ");  tokens.add(getValue());  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	while(!stopAtNonOption  &&  currentOption!=  null)  {  tokens.add( "-- ");  tokens.add(getValue());  }	  while(!stopAtNonOption)    {    tokens.add(   "--   ");    tokens.add(getValue());    }    	non-compiled	[CE]  	34	None	replace
42	[BUG]  [BUGGY]  While(!stopAtNonOption  &&  currentOption!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  While(!stopAtNonOption  &&  currentOption!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	While(!stopAtNonOption  &&  currentOption!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  While(!stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	2	None	replace
43	[BUG]  [BUGGY]  while(!stopAtNonOption  &&  currentOption!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  while(!stopAtNonOption  &&  currentOption!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	while(!stopAtNonOption  &&  currentOption!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  While(!stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
44	[BUG]  [BUGGY]  While(stopAtNonOption)  {  throw  new  IllegalStateException( " "  +  currentOption.getValue());  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  While(stopAtNonOption)  {  throw  new  IllegalStateException( " "  +  currentOption.getValue());  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	While(stopAtNonOption)  {  throw  new  IllegalStateException( " "  +  currentOption.getValue());  }	  While(stopAtNonOption)    {    throw    new    IllegalStateException(   "   ".equals(currentOption.getValue()));    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
45	[BUG]  [BUGGY]  While(!stopAtNonOption)  {  throw  new  IllegalStateException( " ".equals(currentOption.getValue()));  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  While(!stopAtNonOption)  {  throw  new  IllegalStateException( " ".equals(currentOption.getValue()));  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	While(!stopAtNonOption)  {  throw  new  IllegalStateException( " ".equals(currentOption.getValue()));  }	  While(stopAtNonOption)    {    throw    new    IllegalStateException(   "   ".equals(currentOption.getValue()));    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
46	[BUG]  [BUGGY]  While(!stopAtNonOption)  {  throw  new  IllegalStateException( " ".equals(currentOption.getKey()));  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  While(!stopAtNonOption)  {  throw  new  IllegalStateException( " ".equals(currentOption.getKey()));  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	While(!stopAtNonOption)  {  throw  new  IllegalStateException( " ".equals(currentOption.getKey()));  }	  While(stopAtNonOption)    {    throw    new    IllegalStateException(   "   ".equals(currentOption.getValue()));    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
47	[BUG]  [BUGGY]  parent!=  null  &&  currentOption!=  null)  {  tokens.add( "-- ");  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  parent!=  null  &&  currentOption!=  null)  {  tokens.add( "-- ");  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	parent!=  null  &&  currentOption!=  null)  {  tokens.add( "-- ");  }	  parent    ==    null    &&    currentOption!=    null)    {    tokens.add(   "--   ");    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
48	[BUG]  [BUGGY]  if(stopAtNonOption)  {  if(!eatTheRest)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  if(stopAtNonOption)  {  if(!eatTheRest)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	if(stopAtNonOption)  {  if(!eatTheRest)  {  throw  new  IllegalArgumentException( " ");  }	  [Delete]    	non-compiled	[CE]  <identifier>  expected	60	None	replace
49	[BUG]  [BUGGY]  if(stopAtNonOption)  {  if(eatTheRest)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  if(stopAtNonOption)  {  if(eatTheRest)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	if(stopAtNonOption)  {  if(eatTheRest)  {  throw  new  IllegalArgumentException( " ");  }	  [Delete]    	non-compiled	[CE]  <identifier>  expected	60	None	replace
50	[BUG]  [BUGGY]  tokens  ==  null  ||  stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  tokens  ==  null  ||  stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	tokens  ==  null  ||  stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }	  parent    ==    null    ||    stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
51	[BUG]  [BUGGY]  while(stopAtNonOption  &&  currentOption!=  null)  {  tokens.add( "-- ");  tokens.add(getValue());  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  while(stopAtNonOption  &&  currentOption!=  null)  {  tokens.add( "-- ");  tokens.add(getValue());  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	while(stopAtNonOption  &&  currentOption!=  null)  {  tokens.add( "-- ");  tokens.add(getValue());  }	  while(stopAtNonOption)    {    tokens.add(   "--   ");    tokens.add(getValue());    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
52	[BUG]  [BUGGY]  while(stopAtNonOption  &&  getValue()!=  null)  {  tokens.add( "-- ");  tokens.add(getValue());  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  while(stopAtNonOption  &&  getValue()!=  null)  {  tokens.add( "-- ");  tokens.add(getValue());  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	while(stopAtNonOption  &&  getValue()!=  null)  {  tokens.add( "-- ");  tokens.add(getValue());  }	  while(stopAtNonOption)    {    tokens.add(   "--   ");    tokens.add(getValue());    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
53	[BUG]  [BUGGY]  while(!stopAtNonOption)  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  while(!stopAtNonOption)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	while(!stopAtNonOption)  {  throw  new  IllegalStateException( " ");  }	  While(!eatTheRest)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	70	None	replace
54	[BUG]  [BUGGY]  tokens.add(stopAtNonOption);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  tokens.add(stopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	tokens.add(stopAtNonOption);	  parent!=    null    &&    stopAtNonOption)    {    tokens.add(   "--   ");    }    else    {    tokens.add(   "--   ");    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
55	[BUG]  [BUGGY]  tokens.add(stopAtNonOption)&&  stopAtNonOption)  {  tokens.add( "-- ");  }  else  {  tokens.add( "-- ");  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  tokens.add(stopAtNonOption)&&  stopAtNonOption)  {  tokens.add( "-- ");  }  else  {  tokens.add( "-- ");  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	tokens.add(stopAtNonOption)&&  stopAtNonOption)  {  tokens.add( "-- ");  }  else  {  tokens.add( "-- ");  }	  parent!=    null    &&    stopAtNonOption)    {    tokens.add(   "--   ");    }    else    {    tokens.add(   "--   ");    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
56	[BUG]  [BUGGY]  while(!stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(getValue());  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  while(!stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(getValue());  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	while(!stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(getValue());	  while(!eatTheRest)    {    tokens.add(   "--   ");    tokens.add(getValue());    	non-compiled	[CE]  <identifier>  expected	71	None	replace
57	[BUG]  [BUGGY]  while(stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(getValue());  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  while(stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(getValue());  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	while(stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(getValue());	  while(!eatTheRest)    {    tokens.add(   "--   ");    tokens.add(getValue());    	non-compiled	[CE]  <identifier>  expected	71	None	replace
58	[BUG]  [BUGGY]  parent  ==  null  ||  stopAtNonOption)  {  throw  new  IllegalArgumentException( " ".equals(value);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  parent  ==  null  ||  stopAtNonOption)  {  throw  new  IllegalArgumentException( " ".equals(value);  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	parent  ==  null  ||  stopAtNonOption)  {  throw  new  IllegalArgumentException( " ".equals(value);  }	  parent    ==    null    ||    eatTheRest)    {    throw    new    IllegalArgumentException(   "   ".equals(value);    }    	non-compiled	[CE]  <identifier>  expected	67	None	replace
59	[BUG]  [BUGGY]  parent  ==  null  &&  eatTheRest)  {  throw  new  IllegalArgumentException( " ".equals(value);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  parent  ==  null  &&  eatTheRest)  {  throw  new  IllegalArgumentException( " ".equals(value);  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	parent  ==  null  &&  eatTheRest)  {  throw  new  IllegalArgumentException( " ".equals(value);  }	  parent    ==    null    ||    eatTheRest)    {    throw    new    IllegalArgumentException(   "   ".equals(value);    }    	non-compiled	[CE]  <identifier>  expected	67	None	replace
60	[BUG]  [BUGGY]  tokens  ==  null  ||  eatTheRest)  {  throw  new  IllegalArgumentException( " ".equals(value);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  tokens  ==  null  ||  eatTheRest)  {  throw  new  IllegalArgumentException( " ".equals(value);  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	tokens  ==  null  ||  eatTheRest)  {  throw  new  IllegalArgumentException( " ".equals(value);  }	  parent    ==    null    ||    eatTheRest)    {    throw    new    IllegalArgumentException(   "   ".equals(value);    }    	non-compiled	[CE]  <identifier>  expected	67	None	replace
61	[BUG]  [BUGGY]  while(!stopAtNonOption  &&  currentOption!=  null)  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  while(!stopAtNonOption  &&  currentOption!=  null)  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	while(!stopAtNonOption  &&  currentOption!=  null)  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  throw  new  IllegalStateException( " ");  }	  While(!stopAtNonOption)    {    tokens.add(   "--   ");    tokens.add(value);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
62	[BUG]  [BUGGY]  while(!stopAtNonOption  &&  currentOption  ==  null)  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  while(!stopAtNonOption  &&  currentOption  ==  null)  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	while(!stopAtNonOption  &&  currentOption  ==  null)  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  throw  new  IllegalStateException( " ");  }	  While(!stopAtNonOption)    {    tokens.add(   "--   ");    tokens.add(value);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
63	[BUG]  [BUGGY]  this.stopAtNonOption  =  stopAtNonOption  ||  currentOption!=  null;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  this.stopAtNonOption  =  stopAtNonOption  ||  currentOption!=  null;  [BUGGY]        [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	this.stopAtNonOption  =  stopAtNonOption  ||  currentOption!=  null;	  this.stopAtNonOption    =    stopAtNonOption    &&    currentOption!=    null;    	non-compiled	[CE]  <identifier>  expected	50	None	replace
64	[BUG]  [BUGGY]  this.stopAtNonOption  =  currentOption  &&  stopAtNonOption!=  null;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  this.stopAtNonOption  =  currentOption  &&  stopAtNonOption!=  null;  [BUGGY]        [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	this.stopAtNonOption  =  currentOption  &&  stopAtNonOption!=  null;	  this.stopAtNonOption    =    stopAtNonOption    &&    currentOption!=    null;    	non-compiled	[CE]  <identifier>  expected	50	None	replace
65	[BUG]  [BUGGY]  Option  currentOption  =  option.getOption( "stopAtNonOption ",  value);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  Option  currentOption  =  option.getOption( "stopAtNonOption ",  value);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	Option  currentOption  =  option.getOption( "stopAtNonOption ",  value);	  Option    currentOption    =    option.getOption(   "stopAtNonOption   ");    	non-compiled	[CE]  <identifier>  expected	20	None	replace
66	[BUG]  [BUGGY]  While(stopAtNonOption)  {  eatTheRest  =  true;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  While(stopAtNonOption)  {  eatTheRest  =  true;  [BUGGY]        [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	While(stopAtNonOption)  {  eatTheRest  =  true;	  While(stopAtNonOption)    {    eatTheRest    =    false;    	non-compiled	[CE]  <identifier>  expected	13	None	replace
67	[BUG]  [BUGGY]  while(stopAtNonOption)  {  eatTheRest  =  true;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  while(stopAtNonOption)  {  eatTheRest  =  true;  [BUGGY]        [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	while(stopAtNonOption)  {  eatTheRest  =  true;	  While(stopAtNonOption)    {    eatTheRest    =    false;    	non-compiled	[CE]  <identifier>  expected	13	None	replace
68	[BUG]  [BUGGY]  ||  stopAtNonOption)  {  eatTheRest  =  false;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  ||  stopAtNonOption)  {  eatTheRest  =  false;  [BUGGY]        [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	||  stopAtNonOption)  {  eatTheRest  =  false;	  While(stopAtNonOption)    {    eatTheRest    =    false;    	non-compiled	[CE]  <identifier>  expected	13	None	replace
69	[BUG]  [BUGGY]  tokens  =  new  NeighborTokenizer(getValue(),  currentOption,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  tokens  =  new  NeighborTokenizer(getValue(),  currentOption,  stopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	tokens  =  new  NeighborTokenizer(getValue(),  currentOption,  stopAtNonOption);	  NeighborTokenizer    tokens    =    new    NeighborTokenizer(getValue(),    currentOption);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
70	[BUG]  [BUGGY]  NeighborTokenizer  tokens  =  new  NeighborTokenizer(getValue(),  currentOption,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  NeighborTokenizer  tokens  =  new  NeighborTokenizer(getValue(),  currentOption,  stopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	NeighborTokenizer  tokens  =  new  NeighborTokenizer(getValue(),  currentOption,  stopAtNonOption);	  NeighborTokenizer    tokens    =    new    NeighborTokenizer(getValue(),    currentOption);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
71	[BUG]  [BUGGY]  Tokenizer  tokens  =  new  NeighborTokenizer(getValue(),  currentOption);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  Tokenizer  tokens  =  new  NeighborTokenizer(getValue(),  currentOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	Tokenizer  tokens  =  new  NeighborTokenizer(getValue(),  currentOption);	  NeighborTokenizer    tokens    =    new    NeighborTokenizer(getValue(),    currentOption);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
72	[BUG]  [BUGGY]  tokens  =  new  NeighborTokenizer(getValue(),  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  tokens  =  new  NeighborTokenizer(getValue(),  stopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	tokens  =  new  NeighborTokenizer(getValue(),  stopAtNonOption);	  NeighborTokenizer    tokens    =    new    NeighborTokenizer(getValue(),    currentOption);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
73	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption( "stopAtNonOption ");  tokens.add( "-- ");  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption( "stopAtNonOption ");  tokens.add( "-- ");  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	if(stopAtNonOption)  {  Option  currentOption  =  options.getOption( "stopAtNonOption ");  tokens.add( "-- ");  }	  Option    currentOption    =    options.getOption(   "stopAtNonOption   ");    tokens.add(   "--   ");    	non-compiled	[CE]  <identifier>  expected	47	None	replace
74	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption( "stopAtNonOption ");  tokens.add( "-- ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption( "stopAtNonOption ");  tokens.add( "-- ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	if(stopAtNonOption)  {  Option  currentOption  =  options.getOption( "stopAtNonOption ");  tokens.add( "-- ");  }  else  {  throw  new  IllegalArgumentException( " ");  }	  Option    currentOption    =    options.getOption(   "stopAtNonOption   ");    tokens.add(   "--   ");    	non-compiled	[CE]  <identifier>  expected	47	None	replace
75	[BUG]  [BUGGY]  this.stopAtNonOption  =  stopAtNonOption?  null  :  currentOption;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  this.stopAtNonOption  =  stopAtNonOption?  null  :  currentOption;  [BUGGY]        [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	this.stopAtNonOption  =  stopAtNonOption?  null  :  currentOption;	  this.stopAtNonOption    =    stopAtNonOption?    currentOption    :    null;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
76	[BUG]  [BUGGY]  if(eatTheRest)  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  if(eatTheRest)  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	if(eatTheRest)  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  throw  new  IllegalStateException( " ");  }	  tokens.add(   "--   ");    tokens.add(value);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	68	None	replace
77	[BUG]  [BUGGY]  this.stopAtNonOption  =  stopAtNonOption?  null  :  endAtNonOption;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  this.stopAtNonOption  =  stopAtNonOption?  null  :  endAtNonOption;  [BUGGY]        [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	this.stopAtNonOption  =  stopAtNonOption?  null  :  endAtNonOption;	  this.stopAtNonOption    =    stopAtNonOption?    endAtNonOption    :    null;    	non-compiled	[CE]  <identifier>  expected	75	None	replace
78	[BUG]  [BUGGY]  parent!=  null  &&  currentOption!=  null)  {  tokens.add( "-- ");  }  else  {  tokens.add( "-- ");  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  parent!=  null  &&  currentOption!=  null)  {  tokens.add( "-- ");  }  else  {  tokens.add( "-- ");  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	parent!=  null  &&  currentOption!=  null)  {  tokens.add( "-- ");  }  else  {  tokens.add( "-- ");  }	  parent!=    null    &&    currentOption    ==    null)    {    tokens.add(   "--   ");    }    else    {    tokens.add(   "--   ");    }    	non-compiled	[CE]  <identifier>  expected	76	None	replace
79	[BUG]  [BUGGY]  this.stopAtNonOption  =  null;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  this.stopAtNonOption  =  null;  [BUGGY]        [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	this.stopAtNonOption  =  null;	  this.stopAtNonOption    =    currentOption;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
80	[BUG]  [BUGGY]  safeToken(currentOption)  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  safeToken(currentOption)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	safeToken(currentOption)  {  throw  new  IllegalStateException( " ");  }	  safeToken(stopAtNonOption)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	54	None	replace
81	[BUG]  [BUGGY]  safeToken(stopAtNonOption)throw  new  IllegalStateException( " ");  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  safeToken(stopAtNonOption)throw  new  IllegalStateException( " ");  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	safeToken(stopAtNonOption)throw  new  IllegalStateException( " ");	  safeToken(stopAtNonOption)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	54	None	replace
82	[BUG]  [BUGGY]  while(stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  while(stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	while(stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  throw  new  IllegalStateException( " ");  }	  While(stopAtNonOption)    {    tokens.add(   "--   ");    tokens.add(value);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
83	[BUG]  [BUGGY]  while(stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(value);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  while(stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(value);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	while(stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(value);  }	  While(stopAtNonOption)    {    tokens.add(   "--   ");    tokens.add(value);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
84	[BUG]  [BUGGY]  tokens  ==  null  &&  stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  tokens  ==  null  &&  stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	tokens  ==  null  &&  stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }	  parent    ==    null    &&    stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	56	None	replace
85	[BUG]  [BUGGY]  tokens!=  null  &&  stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  tokens!=  null  &&  stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	tokens!=  null  &&  stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }	  parent!=    null    &&    stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
86	[BUG]  [BUGGY]  tokens.add(stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  tokens.add(stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	tokens.add(stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }	  parent!=    null    &&    stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
87	[BUG]  [BUGGY]  while(stopAtNonOption  &&  currentOption!=  null)  {  tokens.add( "-- ");  tokens.add(value);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  while(stopAtNonOption  &&  currentOption!=  null)  {  tokens.add( "-- ");  tokens.add(value);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	while(stopAtNonOption  &&  currentOption!=  null)  {  tokens.add( "-- ");  tokens.add(value);  }	  While(stopAtNonOption)    {    tokens.add(   "--   ");    tokens.add(value);    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
88	[BUG]  [BUGGY]  while(stopAtNonOption  &&  currentOption  ==  null)  {  tokens.add( "-- ");  tokens.add(value);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  while(stopAtNonOption  &&  currentOption  ==  null)  {  tokens.add( "-- ");  tokens.add(value);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	while(stopAtNonOption  &&  currentOption  ==  null)  {  tokens.add( "-- ");  tokens.add(value);  }	  While(stopAtNonOption)    {    tokens.add(   "--   ");    tokens.add(value);    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
89	[BUG]  [BUGGY]  While(stopAtNonOption)  {  if(!eatTheRest)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  While(stopAtNonOption)  {  if(!eatTheRest)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	While(stopAtNonOption)  {  if(!eatTheRest)  {  throw  new  IllegalArgumentException( " ");  }	  While(stopAtNonOption)    {    if(eatTheRest)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
90	[BUG]  [BUGGY]  While(!stopAtNonOption)  {  if(eatTheRest)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  While(!stopAtNonOption)  {  if(eatTheRest)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	While(!stopAtNonOption)  {  if(eatTheRest)  {  throw  new  IllegalArgumentException( " ");  }	  While(stopAtNonOption)    {    if(eatTheRest)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
91	[BUG]  [BUGGY]  While(stopAtNonOption)  {  if(currentOption)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  While(stopAtNonOption)  {  if(currentOption)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	While(stopAtNonOption)  {  if(currentOption)  {  throw  new  IllegalArgumentException( " ");  }	  While(stopAtNonOption)    {    if(eatTheRest)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
92	[BUG]  [BUGGY]  tokens.add( "stopAtNonOption ");  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  tokens.add( "stopAtNonOption ");  [BUGGY]        [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	tokens.add( "stopAtNonOption ");	  Option    currentOption    =    options.getOption(   "stopAtNonOption   ");    tokens.add(currentOption);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
93	[BUG]  [BUGGY]  safeToken(currentOption)  {  tokens.add( "-- ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  safeToken(currentOption)  {  tokens.add( "-- ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	safeToken(currentOption)  {  tokens.add( "-- ");  }  else  {  throw  new  IllegalArgumentException( " ");  }	  safeToken(stopAtNonOption)    {    tokens.add(   "--   ");    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	41	None	replace
94	[BUG]  [BUGGY]  while(stopAtNonOption)  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  while(stopAtNonOption)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	while(stopAtNonOption)  {  throw  new  IllegalStateException( " ");  }	  While(eatTheRest)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	69	None	replace
95	[BUG]  [BUGGY]  tryWhile(stopAtNonOption)  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  tryWhile(stopAtNonOption)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	tryWhile(stopAtNonOption)  {  throw  new  IllegalStateException( " ");  }	  While(eatTheRest)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	69	None	replace
96	[BUG]  [BUGGY]  tokens!=  null  &&  currentOption  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  tokens!=  null  &&  currentOption  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	tokens!=  null  &&  currentOption  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  parent!=    null    &&    currentOption    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
97	[BUG]  [BUGGY]  tokens  ==  null  &&  currentOption  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  tokens  ==  null  &&  currentOption  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	tokens  ==  null  &&  currentOption  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  parent!=    null    &&    currentOption    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
98	[BUG]  [BUGGY]  tokens.add( "-- ");  }  else  if(!stopAtNonOption)  {  tokens.add( "-- ");  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  tokens.add( "-- ");  }  else  if(!stopAtNonOption)  {  tokens.add( "-- ");  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	tokens.add( "-- ");  }  else  if(!stopAtNonOption)  {  tokens.add( "-- ");  }	  tokens.add(   "--   ");    }    else    {    tokens.add(   "--   ");    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
99	[BUG]  [BUGGY]  tokens.add( "-- ");  }  else  if(stopAtNonOption)  {  tokens.add( "-- ");  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  tokens.add( "-- ");  }  else  if(stopAtNonOption)  {  tokens.add( "-- ");  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	tokens.add( "-- ");  }  else  if(stopAtNonOption)  {  tokens.add( "-- ");  }	  tokens.add(   "--   ");    }    else    {    tokens.add(   "--   ");    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
100	[BUG]  [BUGGY]  tokens.add( "-- ".equals(stopAtNonOption));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  tokens.add( "-- ".equals(stopAtNonOption));  [BUGGY]        [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	tokens.add( "-- ".equals(stopAtNonOption));	  parent!=    null    &&    stopAtNonOption);    tokens.add(   "--   ");    	non-compiled	[CE]  <identifier>  expected	73	None	replace
101	[BUG]  [BUGGY]  tokens.add( "-- ".equals(this.stopAtNonOption));  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  tokens.add( "-- ".equals(this.stopAtNonOption));  [BUGGY]        [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	tokens.add( "-- ".equals(this.stopAtNonOption));	  parent!=    null    &&    stopAtNonOption);    tokens.add(   "--   ");    	non-compiled	[CE]  <identifier>  expected	73	None	replace
102	[BUG]  [BUGGY]  tokens!=  null  &&  stopAtNonOption)  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  tokens!=  null  &&  stopAtNonOption)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	tokens!=  null  &&  stopAtNonOption)  {  throw  new  IllegalStateException( " ");  }	  parent!=    null    &&    stopAtNonOption)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	53	None	replace
103	[BUG]  [BUGGY]  tokens.add(stopAtNonOption)  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  tokens.add(stopAtNonOption)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	tokens.add(stopAtNonOption)  {  throw  new  IllegalStateException( " ");  }	  parent!=    null    &&    stopAtNonOption)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	53	None	replace
104	[BUG]  [BUGGY]  While(!stopAtNonOption  &&  currentOption!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  While(!stopAtNonOption  &&  currentOption!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	While(!stopAtNonOption  &&  currentOption!=  null)  {  throw  new  IllegalStateException( " ");  }	  While(!stopAtNonOption)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
105	[BUG]  [BUGGY]  while(!stopAtNonOption  &&  currentOption!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  while(!stopAtNonOption  &&  currentOption!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	while(!stopAtNonOption  &&  currentOption!=  null)  {  throw  new  IllegalStateException( " ");  }	  While(!stopAtNonOption)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
106	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption( "stopAtNonOption ",  value);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  Option  currentOption  =  options.getOption( "stopAtNonOption ",  value);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	Option  currentOption  =  options.getOption( "stopAtNonOption ",  value);	  Option    currentOption    =    options.getOption(   "stopAtNonOption   ");    	non-compiled	[CE]  <identifier>  expected	19	None	replace
107	[BUG]  [BUGGY]  options.getOption( "stopAtNonOption ");  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  options.getOption( "stopAtNonOption ");  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	options.getOption( "stopAtNonOption ");	  Option    currentOption    =    options.getOption(   "stopAtNonOption   ");    	non-compiled	[CE]  <identifier>  expected	19	None	replace
108	[BUG]  [BUGGY]  this.stopAtNonOption  =  stopAtNonOption  ||  currentOption  ==  null;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  this.stopAtNonOption  =  stopAtNonOption  ||  currentOption  ==  null;  [BUGGY]        [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	this.stopAtNonOption  =  stopAtNonOption  ||  currentOption  ==  null;	  this.stopAtNonOption    =    stopAtNonOption    &&    currentOption    ==    null;    	non-compiled	[CE]  <identifier>  expected	55	None	replace
109	[BUG]  [BUGGY]  tokens.add( "-- ");  currentOption  =  stopAtNonOption;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  tokens.add( "-- ");  currentOption  =  stopAtNonOption;  [BUGGY]        [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	tokens.add( "-- ");  currentOption  =  stopAtNonOption;	  While(stopAtNonOption)    {    tokens.add(   "--   ");    currentOption    =    stopAtNonOption;    	non-compiled	[CE]  <identifier>  expected	52	None	replace
110	[BUG]  [BUGGY]  while(stopAtNonOption)  {  tokens.add( "-- ");  currentOption  =  stopAtNonOption;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  while(stopAtNonOption)  {  tokens.add( "-- ");  currentOption  =  stopAtNonOption;  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	while(stopAtNonOption)  {  tokens.add( "-- ");  currentOption  =  stopAtNonOption;  }	  While(stopAtNonOption)    {    tokens.add(   "--   ");    currentOption    =    stopAtNonOption;    	non-compiled	[CE]  <identifier>  expected	52	None	replace
111	[BUG]  [BUGGY]  while(stopAtNonOption)  {  tokens.add( "-- ");  currentOption  =  stopAtNonOption;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  while(stopAtNonOption)  {  tokens.add( "-- ");  currentOption  =  stopAtNonOption;  [BUGGY]        [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	while(stopAtNonOption)  {  tokens.add( "-- ");  currentOption  =  stopAtNonOption;	  While(stopAtNonOption)    {    tokens.add(   "--   ");    currentOption    =    stopAtNonOption;    	non-compiled	[CE]  <identifier>  expected	52	None	replace
112	[BUG]  [BUGGY]  tokens  =  new  NeighborTokenizer(this,  currentOption.getNativeType(UNKNOWN_TYPE));  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  tokens  =  new  NeighborTokenizer(this,  currentOption.getNativeType(UNKNOWN_TYPE));  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	tokens  =  new  NeighborTokenizer(this,  currentOption.getNativeType(UNKNOWN_TYPE));	  NeighborTokenizer    tokens    =    new    NeighborTokenizer(this,    currentOption.getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  <identifier>  expected	46	None	replace
113	[BUG]  [BUGGY]  NeighborTokenizer  tokens  =  new  NeighborTokenizer(this,  currentOption.getNativeType(UNKNOWN_TYPE),  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  NeighborTokenizer  tokens  =  new  NeighborTokenizer(this,  currentOption.getNativeType(UNKNOWN_TYPE),  stopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	NeighborTokenizer  tokens  =  new  NeighborTokenizer(this,  currentOption.getNativeType(UNKNOWN_TYPE),  stopAtNonOption);	  NeighborTokenizer    tokens    =    new    NeighborTokenizer(this,    currentOption.getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  <identifier>  expected	46	None	replace
114	[BUG]  [BUGGY]  tokens  =  new  NeighborTokenizer(this,  currentOption.getNativeType(UNKNOWN_TYPE),  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  tokens  =  new  NeighborTokenizer(this,  currentOption.getNativeType(UNKNOWN_TYPE),  stopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	tokens  =  new  NeighborTokenizer(this,  currentOption.getNativeType(UNKNOWN_TYPE),  stopAtNonOption);	  NeighborTokenizer    tokens    =    new    NeighborTokenizer(this,    currentOption.getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  <identifier>  expected	46	None	replace
115	[BUG]  [BUGGY]  While(stopAtNonOption)  {  if(!eatTheRest)  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  While(stopAtNonOption)  {  if(!eatTheRest)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	While(stopAtNonOption)  {  if(!eatTheRest)  {  throw  new  IllegalStateException( " ");  }	  While(stopAtNonOption)    {    if(eatTheRest)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
116	[BUG]  [BUGGY]  While(!stopAtNonOption)  {  if(eatTheRest)  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  While(!stopAtNonOption)  {  if(eatTheRest)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	While(!stopAtNonOption)  {  if(eatTheRest)  {  throw  new  IllegalStateException( " ");  }	  While(stopAtNonOption)    {    if(eatTheRest)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
117	[BUG]  [BUGGY]  While(stopAtNonOption)  {  if(currentOption)  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  While(stopAtNonOption)  {  if(currentOption)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	While(stopAtNonOption)  {  if(currentOption)  {  throw  new  IllegalStateException( " ");  }	  While(stopAtNonOption)    {    if(eatTheRest)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
118	[BUG]  [BUGGY]  while(stopAtNonOption)  {  tokens.add( "-- ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  while(stopAtNonOption)  {  tokens.add( "-- ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	while(stopAtNonOption)  {  tokens.add( "-- ");  }  else  {  throw  new  IllegalArgumentException( " ");  }	  While(stopAtNonOption)    {    tokens.add(   "--   ");    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	24	None	replace
119	[BUG]  [BUGGY]  NeighborTokenizer  tokens  =  new  NeighborTokenizer(this,  currentOption.getValue(),  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  NeighborTokenizer  tokens  =  new  NeighborTokenizer(this,  currentOption.getValue(),  stopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	NeighborTokenizer  tokens  =  new  NeighborTokenizer(this,  currentOption.getValue(),  stopAtNonOption);	  NeighborTokenizer    tokens    =    new    NeighborTokenizer(this,    currentOption.getValue());    	non-compiled	[CE]  <identifier>  expected	43	None	replace
120	[BUG]  [BUGGY]  tokens  =  new  NeighborTokenizer(this,  currentOption.getValue(),  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  tokens  =  new  NeighborTokenizer(this,  currentOption.getValue(),  stopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	tokens  =  new  NeighborTokenizer(this,  currentOption.getValue(),  stopAtNonOption);	  NeighborTokenizer    tokens    =    new    NeighborTokenizer(this,    currentOption.getValue());    	non-compiled	[CE]  <identifier>  expected	43	None	replace
121	[BUG]  [BUGGY]  NeighborTokenizer  tokens  =  new  NeighborTokenizer(this,  currentOption.getKey());  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  NeighborTokenizer  tokens  =  new  NeighborTokenizer(this,  currentOption.getKey());  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	NeighborTokenizer  tokens  =  new  NeighborTokenizer(this,  currentOption.getKey());	  NeighborTokenizer    tokens    =    new    NeighborTokenizer(this,    currentOption.getValue());    	non-compiled	[CE]  <identifier>  expected	43	None	replace
122	[BUG]  [BUGGY]  NeighborTokenizer  tokens  =  new  NeighborTokenizer(this,  currentOption.getValue(),  true);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  NeighborTokenizer  tokens  =  new  NeighborTokenizer(this,  currentOption.getValue(),  true);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	NeighborTokenizer  tokens  =  new  NeighborTokenizer(this,  currentOption.getValue(),  true);	  NeighborTokenizer    tokens    =    new    NeighborTokenizer(this,    currentOption.getValue());    	non-compiled	[CE]  <identifier>  expected	43	None	replace
123	[BUG]  [BUGGY]  while(!stopAtNonOption  &&  currentOption!=  null)  {  tokens.add( "-- ");  tokens.add(value);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  while(!stopAtNonOption  &&  currentOption!=  null)  {  tokens.add( "-- ");  tokens.add(value);  [BUGGY]        [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	while(!stopAtNonOption  &&  currentOption!=  null)  {  tokens.add( "-- ");  tokens.add(value);	  while(!stopAtNonOption)    {    tokens.add(   "--   ");    tokens.add(value);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
124	[BUG]  [BUGGY]  tokens.add( "--e ");  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  tokens.add( "--e ");  [BUGGY]        [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	tokens.add( "--e ");	  tokens.add(   "--n   ");    	non-compiled	[CE]  <identifier>  expected	21	None	replace
125	[BUG]  [BUGGY]  tokens.add( "-- ");  }  else  if(!stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  tokens.add( "-- ");  }  else  if(!stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	tokens.add( "-- ");  }  else  if(!stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }	  tokens.add(   "--   ");    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	59	None	replace
126	[BUG]  [BUGGY]  tokens.add( "-- ");  }  else  if(stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  tokens.add( "-- ");  }  else  if(stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	tokens.add( "-- ");  }  else  if(stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }	  tokens.add(   "--   ");    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	59	None	replace
127	[BUG]  [BUGGY]  While(stopAtNonOption  &&  currentOption!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  While(stopAtNonOption  &&  currentOption!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	While(stopAtNonOption  &&  currentOption!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  While(stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
128	[BUG]  [BUGGY]  tokens.add(stopAtNonOption)&&  stopAtNonOption)  {  tokens.add( "-- ");  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  tokens.add(stopAtNonOption)&&  stopAtNonOption)  {  tokens.add( "-- ");  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	tokens.add(stopAtNonOption)&&  stopAtNonOption)  {  tokens.add( "-- ");  }	  parent!=    null    &&    stopAtNonOption)    {    tokens.add(   "--   ");    }    	non-compiled	[CE]  <identifier>  expected	72	None	replace
129	[BUG]  [BUGGY]  tokens.add(stopAtNonOption)  {  tokens.add( "-- ");  }  else  {  tokens.add( "-- ");  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  tokens.add(stopAtNonOption)  {  tokens.add( "-- ");  }  else  {  tokens.add( "-- ");  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	tokens.add(stopAtNonOption)  {  tokens.add( "-- ");  }  else  {  tokens.add( "-- ");  }	  parent    ==    null    &&    stopAtNonOption)    {    tokens.add(   "--   ");    }    else    {    tokens.add(   "--   ");    }    	non-compiled	[CE]  <identifier>  expected	49	None	replace
130	[BUG]  [BUGGY]  parent!=  null  &&  eatTheRest)  {  throw  new  IllegalArgumentException( " ".equals(value);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  parent!=  null  &&  eatTheRest)  {  throw  new  IllegalArgumentException( " ".equals(value);  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	parent!=  null  &&  eatTheRest)  {  throw  new  IllegalArgumentException( " ".equals(value);  }	  parent    ==    null    ||    eatTheRest)    {    throw    new    IllegalArgumentException(   "   ".equals(value);    }    	non-compiled	[CE]  <identifier>  expected	67	None	replace
131	[BUG]  [BUGGY]  parent!=  null  &&  currentOption)  {  tokens.add( "-- ");  }  else  {  tokens.add( "-- ");  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  parent!=  null  &&  currentOption)  {  tokens.add( "-- ");  }  else  {  tokens.add( "-- ");  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	parent!=  null  &&  currentOption)  {  tokens.add( "-- ");  }  else  {  tokens.add( "-- ");  }	  parent!=    null    &&    stopAtNonOption)    {    tokens.add(   "--   ");    }    else    {    tokens.add(   "--   ");    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
132	[BUG]  [BUGGY]  parent!=  null  &&  currentOption.stopAtNonOption)  {  tokens.add( "-- ");  }  else  {  tokens.add( "-- ");  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  parent!=  null  &&  currentOption.stopAtNonOption)  {  tokens.add( "-- ");  }  else  {  tokens.add( "-- ");  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	parent!=  null  &&  currentOption.stopAtNonOption)  {  tokens.add( "-- ");  }  else  {  tokens.add( "-- ");  }	  parent!=    null    &&    stopAtNonOption)    {    tokens.add(   "--   ");    }    else    {    tokens.add(   "--   ");    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
133	[BUG]  [BUGGY]  while(!stopAtNonOption)  {  tokens.add( "-- ");  }  else  {  tokens.add( "-- ");  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  while(!stopAtNonOption)  {  tokens.add( "-- ");  }  else  {  tokens.add( "-- ");  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	while(!stopAtNonOption)  {  tokens.add( "-- ");  }  else  {  tokens.add( "-- ");  }	  tokens.add(   "--   ");    }    else    {    tokens.add(   "--   ");    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
134	[BUG]  [BUGGY]  }  else  if(stopAtNonOption)  {  tokens.add( "-- ");  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  }  else  if(stopAtNonOption)  {  tokens.add( "-- ");  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	}  else  if(stopAtNonOption)  {  tokens.add( "-- ");  }	  tokens.add(   "--   ");    }    else    {    tokens.add(   "--   ");    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
135	[BUG]  [BUGGY]  this.stopAtNonOption  =  stopAtNonOption?  stopAtNonOption  :  currentOption;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  this.stopAtNonOption  =  stopAtNonOption?  stopAtNonOption  :  currentOption;  [BUGGY]        [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	this.stopAtNonOption  =  stopAtNonOption?  stopAtNonOption  :  currentOption;	  this.stopAtNonOption    =    stopAtNonOption?    stopAtNonOption    :    value;    	non-compiled	[CE]  <identifier>  expected	74	None	replace
136	[BUG]  [BUGGY]  while(!stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  while(!stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	while(!stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  throw  new  IllegalStateException( " ");  }	  While(!stopAtNonOption)    {    tokens.add(   "--   ");    tokens.add(value);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
137	[BUG]  [BUGGY]  option  =  option.getOption( "stopAtNonOption ");  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  option  =  option.getOption( "stopAtNonOption ");  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	option  =  option.getOption( "stopAtNonOption ");	  Option    currentOption    =    option.getOption(   "stopAtNonOption   ");    	non-compiled	[CE]  <identifier>  expected	20	None	replace
138	[BUG]  [BUGGY]  safeToken(stopAtNonOption)  {  throw  new  IllegalArgumentException( "-- ");  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  safeToken(stopAtNonOption)  {  throw  new  IllegalArgumentException( "-- ");  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	safeToken(stopAtNonOption)  {  throw  new  IllegalArgumentException( "-- ");  }	  safeToken(stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
139	[BUG]  [BUGGY]  While(eatTheRest)  {  tokens.add( "-- ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  While(eatTheRest)  {  tokens.add( "-- ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	While(eatTheRest)  {  tokens.add( "-- ");  }  else  {  throw  new  IllegalArgumentException( " ");  }	  While(stopAtNonOption)    {    tokens.add(   "--   ");    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	24	None	replace
140	[BUG]  [BUGGY]  tokens.add( "--nonOption ");  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  tokens.add( "--nonOption ");  [BUGGY]        [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	tokens.add( "--nonOption ");	  tokens.add(   "--n   ");    	non-compiled	[CE]  <identifier>  expected	21	None	replace
141	[BUG]  [BUGGY]  NeighborTokenizer  tokens  =  new  NeighborTokenizer(this,  currentOption.getValue()  +  1);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  NeighborTokenizer  tokens  =  new  NeighborTokenizer(this,  currentOption.getValue()  +  1);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	NeighborTokenizer  tokens  =  new  NeighborTokenizer(this,  currentOption.getValue()  +  1);	  NeighborTokenizer    tokens    =    new    NeighborTokenizer(this,    currentOption.getValue());    	non-compiled	[CE]  <identifier>  expected	43	None	replace
142	[BUG]  [BUGGY]  parent!=  null  &&  currentOption)  {  tokens.add( "-- ");  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  parent!=  null  &&  currentOption)  {  tokens.add( "-- ");  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	parent!=  null  &&  currentOption)  {  tokens.add( "-- ");  }	  parent!=    null    &&    stopAtNonOption)    {    tokens.add(   "--   ");    }    	non-compiled	[CE]  <identifier>  expected	72	None	replace
143	[BUG]  [BUGGY]  while(stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(value);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  while(stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(value);  [BUGGY]        [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	while(stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(value);	  while(!stopAtNonOption)    {    tokens.add(   "--   ");    tokens.add(value);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
144	[BUG]  [BUGGY]  parent!=  null  &&  eatTheRest)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  parent!=  null  &&  eatTheRest)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	parent!=  null  &&  eatTheRest)  {  throw  new  IllegalArgumentException( " ");  }	  parent    ==    null    ||    eatTheRest)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	66	None	replace
145	[BUG]  [BUGGY]  While(eatTheRest)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  While(eatTheRest)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	While(eatTheRest)  {  throw  new  IllegalArgumentException( " ");  }	  While(stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
146	[BUG]  [BUGGY]  parent!=  null  &&  currentOption)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  parent!=  null  &&  currentOption)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	parent!=  null  &&  currentOption)  {  throw  new  IllegalArgumentException( " ");  }	  parent!=    null    &&    stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
147	[BUG]  [BUGGY]  while(!stopAtNonOption)  {  tokens.add( "-- ");  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  while(!stopAtNonOption)  {  tokens.add( "-- ");  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	while(!stopAtNonOption)  {  tokens.add( "-- ");  }	  While(!stopAtNonOption)    {    tokens.add(   "--   ");    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
148	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption( "stopAtNonOption ");  tokens.add(currentOption);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption( "stopAtNonOption ");  tokens.add(currentOption);  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	if(stopAtNonOption)  {  Option  currentOption  =  options.getOption( "stopAtNonOption ");  tokens.add(currentOption);  }	  Option    currentOption    =    options.getOption(   "stopAtNonOption   ");    tokens.add(currentOption);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
149	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption( "stopAtNonOption ");  tokens.add(currentOption);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption( "stopAtNonOption ");  tokens.add(currentOption);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	if(stopAtNonOption)  {  Option  currentOption  =  options.getOption( "stopAtNonOption ");  tokens.add(currentOption);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  Option    currentOption    =    options.getOption(   "stopAtNonOption   ");    tokens.add(currentOption);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
150	[BUG]  [BUGGY]  tokens.put( "-- ");  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  tokens.put( "-- ");  [BUGGY]        [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	tokens.put( "-- ");	  tokens.remove(   "--   ");    	non-compiled	[CE]  <identifier>  expected	22	None	replace
151	[BUG]  [BUGGY]  else  if(eatTheRest  ==  null)  {  tokens.add( "-- ");  tokens.add(value);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  else  if(eatTheRest  ==  null)  {  tokens.add( "-- ");  tokens.add(value);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	else  if(eatTheRest  ==  null)  {  tokens.add( "-- ");  tokens.add(value);  }	  tokens.add(   "--   ");    tokens.add(value);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
152	[BUG]  [BUGGY]  else  if(eatTheRest!=  null)  {  tokens.add( "-- ");  tokens.add(value);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  else  if(eatTheRest!=  null)  {  tokens.add( "-- ");  tokens.add(value);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	else  if(eatTheRest!=  null)  {  tokens.add( "-- ");  tokens.add(value);  }	  tokens.add(   "--   ");    tokens.add(value);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
153	[BUG]  [BUGGY]  while(stopAtNonOption  &&  currentOption!=  null)  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  while(stopAtNonOption  &&  currentOption!=  null)  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	while(stopAtNonOption  &&  currentOption!=  null)  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  throw  new  IllegalStateException( " ");  }	  While(stopAtNonOption)    {    tokens.add(   "--   ");    tokens.add(value);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
154	[BUG]  [BUGGY]  While(eatTheRest)  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  While(eatTheRest)  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	While(eatTheRest)  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  throw  new  IllegalStateException( " ");  }	  While(stopAtNonOption)    {    tokens.add(   "--   ");    tokens.add(value);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
155	[BUG]  [BUGGY]  moresuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  moresuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	moresuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti	  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti    	non-compiled	[CE]  <identifier>  expected	38	None	replace
156	[BUG]  [BUGGY]  parent!=  null;  tokens.add( "-- ");  tokens.add(value);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  parent!=  null;  tokens.add( "-- ");  tokens.add(value);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	parent!=  null;  tokens.add( "-- ");  tokens.add(value);	  parent!=    null    &&    currentOption    ==    null;    tokens.add(   "--   ");    tokens.add(value);    	non-compiled	[CE]  <identifier>  expected	64	None	replace
157	[BUG]  [BUGGY]  parent!=  null;  tokens.add( "-- ");  tokens.add(currentOption);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  parent!=  null;  tokens.add( "-- ");  tokens.add(currentOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	parent!=  null;  tokens.add( "-- ");  tokens.add(currentOption);	  parent!=    null    &&    currentOption    ==    null;    tokens.add(   "--   ");    tokens.add(value);    	non-compiled	[CE]  <identifier>  expected	64	None	replace
158	[BUG]  [BUGGY]  this.stopAtNonOption  =  StopAtNonOption.STANDARD;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  this.stopAtNonOption  =  StopAtNonOption.STANDARD;  [BUGGY]        [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	this.stopAtNonOption  =  StopAtNonOption.STANDARD;	  this.stopAtNonOption    =    StopAtNonOption.stopAtNonOption;    	non-compiled	[CE]  <identifier>  expected	65	None	replace
159	[BUG]  [BUGGY]  if(eatTheRest  ==  null)  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  if(eatTheRest  ==  null)  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	if(eatTheRest  ==  null)  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  throw  new  IllegalStateException( " ");  }	  tokens.add(   "--   ");    tokens.add(value);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	68	None	replace
160	[BUG]  [BUGGY]  }  else  if(eatTheRest  ==  null)  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  }  else  if(eatTheRest  ==  null)  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	}  else  if(eatTheRest  ==  null)  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  throw  new  IllegalStateException( " ");  }	  tokens.add(   "--   ");    tokens.add(value);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	68	None	replace
161	[BUG]  [BUGGY]  }  else  if(eatTheRest!=  null)  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  }  else  if(eatTheRest!=  null)  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	}  else  if(eatTheRest!=  null)  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  throw  new  IllegalStateException( " ");  }	  tokens.add(   "--   ");    tokens.add(value);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	68	None	replace
162	[BUG]  [BUGGY]  this.stopAtNonOption  =  StopAtNonOption.EMPTY;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  this.stopAtNonOption  =  StopAtNonOption.EMPTY;  [BUGGY]        [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	this.stopAtNonOption  =  StopAtNonOption.EMPTY;	  this.stopAtNonOption    =    eatTheRest;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
163	[BUG]  [BUGGY]  parent!=  null  &&  currentOption)  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  parent!=  null  &&  currentOption)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	parent!=  null  &&  currentOption)  {  throw  new  IllegalStateException( " ");  }	  parent!=    null    &&    stopAtNonOption)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	53	None	replace
164	[BUG]  [BUGGY]  parent  ==  null  &&  stopAtNonOption)  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  parent  ==  null  &&  stopAtNonOption)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	parent  ==  null  &&  stopAtNonOption)  {  throw  new  IllegalStateException( " ");  }	  parent!=    null    &&    stopAtNonOption)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	53	None	replace
165	[BUG]  [BUGGY]  tokens.add( "-- ".getMessage());  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  tokens.add( "-- ".getMessage());  [BUGGY]        [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	tokens.add( "-- ".getMessage());	  parent!=    null    &&    stopAtNonOption);    tokens.add(   "--   ");    	non-compiled	[CE]  <identifier>  expected	73	None	replace
166	[BUG]  [BUGGY]  While(stopAtNonOption)  {  tokens.add( "-- ");  currentOption  =  stopAtNonOption;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  While(stopAtNonOption)  {  tokens.add( "-- ");  currentOption  =  stopAtNonOption;  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	While(stopAtNonOption)  {  tokens.add( "-- ");  currentOption  =  stopAtNonOption;  }	  While(stopAtNonOption)    {    tokens.add(   "--   ");    currentOption    =    stopAtNonOption;    	non-compiled	[CE]  <identifier>  expected	52	None	replace
167	[BUG]  [BUGGY]  tokens.add(getValue());  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  tokens.add(getValue());  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	tokens.add(getValue());	  tokens.add(   "--   ");    tokens.add(getValue());    	non-compiled	[CE]  <identifier>  expected	31	None	replace
168	[BUG]  [BUGGY]  tokens.add('-');  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  tokens.add('-');  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	tokens.add('-');	  tokens.add(   "--   ");    tokens.add(getValue());    	non-compiled	[CE]  <identifier>  expected	31	None	replace
169	[BUG]  [BUGGY]  parent  ==  null  &&  currentOption)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  parent  ==  null  &&  currentOption)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	parent  ==  null  &&  currentOption)  {  throw  new  IllegalArgumentException( " ");  }	  parent    ==    null    &&    stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	56	None	replace
170	[BUG]  [BUGGY]  While(stopAtNonOption)  {  if(eatTheRest  ||  currentOption  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  While(stopAtNonOption)  {  if(eatTheRest  ||  currentOption  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	While(stopAtNonOption)  {  if(eatTheRest  ||  currentOption  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  While(stopAtNonOption)    {    if(eatTheRest)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
171	[BUG]  [BUGGY]  safeToken(stopAtNonOption)  {  if(eatTheRest)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  safeToken(stopAtNonOption)  {  if(eatTheRest)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	safeToken(stopAtNonOption)  {  if(eatTheRest)  {  throw  new  IllegalArgumentException( " ");  }	  While(stopAtNonOption)    {    if(eatTheRest)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
172	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption( "stopAtNonOption ");  tokens.add( "-- ");  }  else  {  tokens.add( "-- ");  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption( "stopAtNonOption ");  tokens.add( "-- ");  }  else  {  tokens.add( "-- ");  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	if(stopAtNonOption)  {  Option  currentOption  =  options.getOption( "stopAtNonOption ");  tokens.add( "-- ");  }  else  {  tokens.add( "-- ");  }	  Option    currentOption    =    options.getOption(   "stopAtNonOption   ");    tokens.add(   "--   ");    	non-compiled	[CE]  <identifier>  expected	47	None	replace
173	[BUG]  [BUGGY]  while(stopAtNonOption)  {  tokens.add( "-- ");  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  while(stopAtNonOption)  {  tokens.add( "-- ");  [BUGGY]        [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	while(stopAtNonOption)  {  tokens.add( "-- ");	  While(stopAtNonOption)    {    tokens.add(   "--   ");    	non-compiled	[CE]  <identifier>  expected	51	None	replace
174	[BUG]  [BUGGY]  tokens.add( "-- ");  }  else  if(eatTheRest  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  tokens.add( "-- ");  }  else  if(eatTheRest  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	tokens.add( "-- ");  }  else  if(eatTheRest  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  tokens.add(   "--   ");    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	59	None	replace
175	[BUG]  [BUGGY]  }  else  if(stopAtNonOption)  {  tokens.add( "-- ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  }  else  if(stopAtNonOption)  {  tokens.add( "-- ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	}  else  if(stopAtNonOption)  {  tokens.add( "-- ");  }  else  {  throw  new  IllegalArgumentException( " ");  }	  tokens.add(   "--   ");    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	59	None	replace
176	[BUG]  [BUGGY]  AssertionFailedError(stopAtNonOption)  {  eatTheRest  =  false;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  AssertionFailedError(stopAtNonOption)  {  eatTheRest  =  false;  [BUGGY]        [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	AssertionFailedError(stopAtNonOption)  {  eatTheRest  =  false;	  While(stopAtNonOption)    {    eatTheRest    =    false;    	non-compiled	[CE]  <identifier>  expected	13	None	replace
177	[BUG]  [BUGGY]  }  else  if(eatTheRest  ==  null)  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  }  else  if(eatTheRest  ==  null)  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	}  else  if(eatTheRest  ==  null)  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  tokens.add(   "--   ");    tokens.add(value);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
178	[BUG]  [BUGGY]  }  else  if(eatTheRest!=  null)  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  }  else  if(eatTheRest!=  null)  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	}  else  if(eatTheRest!=  null)  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  tokens.add(   "--   ");    tokens.add(value);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
179	[BUG]  [BUGGY]  }  else  if(eatTheRest  ==  null)  {  tokens.add( "-- ");  tokens.add(value);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  }  else  if(eatTheRest  ==  null)  {  tokens.add( "-- ");  tokens.add(value);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	}  else  if(eatTheRest  ==  null)  {  tokens.add( "-- ");  tokens.add(value);  }	  tokens.add(   "--   ");    tokens.add(value);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
180	[BUG]  [BUGGY]  while(stopAtNonOption)  {  tokens.add( "-- ");  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  while(stopAtNonOption)  {  tokens.add( "-- ");  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	while(stopAtNonOption)  {  tokens.add( "-- ");  }	  While(stopAtNonOption)    {    tokens.add(   "--   ");    }    	non-compiled	[CE]  <identifier>  expected	23	None	replace
181	[BUG]  [BUGGY]  parent  ==  null  &&  currentOption)  {  tokens.add( "-- ");  }  else  {  tokens.add( "-- ");  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  parent  ==  null  &&  currentOption)  {  tokens.add( "-- ");  }  else  {  tokens.add( "-- ");  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	parent  ==  null  &&  currentOption)  {  tokens.add( "-- ");  }  else  {  tokens.add( "-- ");  }	  parent    ==    null    &&    stopAtNonOption)    {    tokens.add(   "--   ");    }    else    {    tokens.add(   "--   ");    }    	non-compiled	[CE]  <identifier>  expected	49	None	replace
182	[BUG]  [BUGGY]  parent!=  null  &&  currentOption!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  parent!=  null  &&  currentOption!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	parent!=  null  &&  currentOption!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  parent!=    null    &&    currentOption    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
183	[BUG]  [BUGGY]  parent  ==  null  &&  currentOption!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  parent  ==  null  &&  currentOption!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	parent  ==  null  &&  currentOption!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  parent!=    null    &&    currentOption    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
184	[BUG]  [BUGGY]  tokens.add( "-- "  +  getValue());  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  tokens.add( "-- "  +  getValue());  [BUGGY]        [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	tokens.add( "-- "  +  getValue());	  tokens.add(   "--   "    +    value);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
185	[BUG]  [BUGGY]  Tokenizer  tokens  =  new  NeighborTokenizer(this,  currentOption.getNativeType(UNKNOWN_TYPE));  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  Tokenizer  tokens  =  new  NeighborTokenizer(this,  currentOption.getNativeType(UNKNOWN_TYPE));  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	Tokenizer  tokens  =  new  NeighborTokenizer(this,  currentOption.getNativeType(UNKNOWN_TYPE));	  NeighborTokenizer    tokens    =    new    NeighborTokenizer(this,    currentOption.getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  <identifier>  expected	46	None	replace
186	[BUG]  [BUGGY]  NeighborTokenizer  tokens  =  new  NeighborTokenizer(getValue(),  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  NeighborTokenizer  tokens  =  new  NeighborTokenizer(getValue(),  stopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	NeighborTokenizer  tokens  =  new  NeighborTokenizer(getValue(),  stopAtNonOption);	  NeighborTokenizer    tokens    =    new    NeighborTokenizer(getValue(),    currentOption);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
187	[BUG]  [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  tokens.add( "-- ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  tokens.add( "-- ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	parent!=  null  &&  stopAtNonOption)  {  tokens.add( "-- ");  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(stopAtNonOption)    {    tokens.add(   "--   ");    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
188	[BUG]  [BUGGY]  while(eatTheRest)  {  tokens.add( "-- ");  tokens.add(getValue());  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  while(eatTheRest)  {  tokens.add( "-- ");  tokens.add(getValue());  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	while(eatTheRest)  {  tokens.add( "-- ");  tokens.add(getValue());  }	  while(stopAtNonOption)    {    tokens.add(   "--   ");    tokens.add(getValue());    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
189	[BUG]  [BUGGY]  Options  currentOption  =  options.getOption( "stopAtNonOption ");  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  Options  currentOption  =  options.getOption( "stopAtNonOption ");  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	Options  currentOption  =  options.getOption( "stopAtNonOption ");	  Option    currentOption    =    options.getOption(   "stopAtNonOption   ");    	non-compiled	[CE]  <identifier>  expected	19	None	replace
190	[BUG]  [BUGGY]  While(!eatTheRest)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  While(!eatTheRest)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	While(!eatTheRest)  {  throw  new  IllegalArgumentException( " ");  }	  While(!stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
191	[BUG]  [BUGGY]  if(eatTheRest)  {  Option  currentOption  =  options.getOption( "stopAtNonOption ");  tokens.add(currentOption);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  if(eatTheRest)  {  Option  currentOption  =  options.getOption( "stopAtNonOption ");  tokens.add(currentOption);  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	if(eatTheRest)  {  Option  currentOption  =  options.getOption( "stopAtNonOption ");  tokens.add(currentOption);  }	  Option    currentOption    =    options.getOption(   "stopAtNonOption   ");    tokens.add(currentOption);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
192	[BUG]  [BUGGY]  }  else  if(eatTheRest)  {  tokens.add( "-- ");  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  }  else  if(eatTheRest)  {  tokens.add( "-- ");  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	}  else  if(eatTheRest)  {  tokens.add( "-- ");  }	  tokens.add(   "--   ");    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	59	None	replace
193	[BUG]  [BUGGY]  }  else  if(eatTheRest  ==  null)  {  tokens.add( "-- ");  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  }  else  if(eatTheRest  ==  null)  {  tokens.add( "-- ");  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	}  else  if(eatTheRest  ==  null)  {  tokens.add( "-- ");  }	  tokens.add(   "--   ");    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	59	None	replace
194	[BUG]  [BUGGY]  while(stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  while(stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	while(stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }	  While(stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
195	[BUG]  [BUGGY]  }  else  if(eatTheRest)  {  tokens.add( "-- ");  tokens.add(value);  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  }  else  if(eatTheRest)  {  tokens.add( "-- ");  tokens.add(value);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	}  else  if(eatTheRest)  {  tokens.add( "-- ");  tokens.add(value);  }	  tokens.add(   "--   ");    tokens.add(value);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
196	[BUG]  [BUGGY]  while(eatTheRest)  {  tokens.add( "-- ");  tokens.add(value);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  while(eatTheRest)  {  tokens.add( "-- ");  tokens.add(value);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	while(eatTheRest)  {  tokens.add( "-- ");  tokens.add(value);  }	  tokens.add(   "--   ");    tokens.add(value);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
197	[BUG]  [BUGGY]  }  else  if(!eatTheRest)  {  tokens.add( "-- ");  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  }  else  if(!eatTheRest)  {  tokens.add( "-- ");  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	}  else  if(!eatTheRest)  {  tokens.add( "-- ");  }	  tokens.add(   "--   ");    }    else    {    tokens.add(   "--   ");    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
198	[BUG]  [BUGGY]  }  else  if(eatTheRest.equals( " "))  {  tokens.add( "-- ");  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  }  else  if(eatTheRest.equals( " "))  {  tokens.add( "-- ");  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	}  else  if(eatTheRest.equals( " "))  {  tokens.add( "-- ");  }	  tokens.add(   "--   ");    }    else    {    tokens.add(   "--   ");    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
199	[BUG]  [BUGGY]  if(eatTheRest)  {  Option  currentOption  =  options.getOption( "stopAtNonOption ");  tokens.add( "-- ");  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  if(eatTheRest)  {  Option  currentOption  =  options.getOption( "stopAtNonOption ");  tokens.add( "-- ");  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	if(eatTheRest)  {  Option  currentOption  =  options.getOption( "stopAtNonOption ");  tokens.add( "-- ");  }	  Option    currentOption    =    options.getOption(   "stopAtNonOption   ");    tokens.add(   "--   ");    	non-compiled	[CE]  <identifier>  expected	47	None	replace
200	[BUG]  [BUGGY]  if(eatTheRest)  {  Option  currentOption  =  options.getOption( "stopAtNonOption ");  tokens.add( "-- ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  if(eatTheRest)  {  Option  currentOption  =  options.getOption( "stopAtNonOption ");  tokens.add( "-- ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	if(eatTheRest)  {  Option  currentOption  =  options.getOption( "stopAtNonOption ");  tokens.add( "-- ");  }  else  {  throw  new  IllegalArgumentException( " ");  }	  Option    currentOption    =    options.getOption(   "stopAtNonOption   ");    tokens.add(   "--   ");    	non-compiled	[CE]  <identifier>  expected	47	None	replace
201	[BUG]  [BUGGY]  while(!eatTheRest)  {  tokens.add( "-- ");  tokens.add(getValue());  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  while(!eatTheRest)  {  tokens.add( "-- ");  tokens.add(getValue());  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	while(!eatTheRest)  {  tokens.add( "-- ");  tokens.add(getValue());  }	  while(!stopAtNonOption)    {    tokens.add(   "--   ");    tokens.add(getValue());    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
202	[BUG]  [BUGGY]  this.stopAtNonOption  =  stopAtNonOption?  endAtNonOption  :  value;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  this.stopAtNonOption  =  stopAtNonOption?  endAtNonOption  :  value;  [BUGGY]        [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	this.stopAtNonOption  =  stopAtNonOption?  endAtNonOption  :  value;	  this.stopAtNonOption    =    stopAtNonOption?    stopAtNonOption    :    value;    	non-compiled	[CE]  <identifier>  expected	74	None	replace
203	[BUG]  [BUGGY]  parent!=  null  &&  currentOption  ==  null)  {  tokens.add( "-- ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  parent!=  null  &&  currentOption  ==  null)  {  tokens.add( "-- ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	parent!=  null  &&  currentOption  ==  null)  {  tokens.add( "-- ");  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(stopAtNonOption)    {    tokens.add(   "--   ");    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
204	[BUG]  [BUGGY]  tokens.add( "-- "  +  this.eatTheRest);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  tokens.add( "-- "  +  this.eatTheRest);  [BUGGY]        [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	tokens.add( "-- "  +  this.eatTheRest);	  tokens.add(   "--   "    +    value);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
205	[BUG]  [BUGGY]  while(!eatTheRest)  {  tokens.add( "-- ");  tokens.add(value);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  while(!eatTheRest)  {  tokens.add( "-- ");  tokens.add(value);  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	while(!eatTheRest)  {  tokens.add( "-- ");  tokens.add(value);  }	  while(!stopAtNonOption)    {    tokens.add(   "--   ");    tokens.add(value);    }    	non-compiled	[CE]  <identifier>  expected	28	None	replace
206	[BUG]  [BUGGY]  this.stopAtNonOption  =  stopAtNonOption?  value  :  null;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  this.stopAtNonOption  =  stopAtNonOption?  value  :  null;  [BUGGY]        [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	this.stopAtNonOption  =  stopAtNonOption?  value  :  null;	  this.stopAtNonOption    =    stopAtNonOption?    endAtNonOption    :    null;    	non-compiled	[CE]  <identifier>  expected	75	None	replace
207	[BUG]  [BUGGY]  while(!eatTheRest)  {  tokens.add( "-- ");  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  while(!eatTheRest)  {  tokens.add( "-- ");  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	while(!eatTheRest)  {  tokens.add( "-- ");  }	  While(!stopAtNonOption)    {    tokens.add(   "--   ");    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
208	[BUG]  [BUGGY]  While(!eatTheRest)  {  tokens.add( "-- ");  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  While(!eatTheRest)  {  tokens.add( "-- ");  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	While(!eatTheRest)  {  tokens.add( "-- ");  }	  While(!stopAtNonOption)    {    tokens.add(   "--   ");    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
209	[BUG]  [BUGGY]  else  if(eatTheRest)  {  tokens.add( "-- ");  tokens.add(getValue());  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  else  if(eatTheRest)  {  tokens.add( "-- ");  tokens.add(getValue());  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	else  if(eatTheRest)  {  tokens.add( "-- ");  tokens.add(getValue());  }	  tokens.add(   "--   ");    tokens.add(getValue());    	non-compiled	[CE]  <identifier>  expected	31	None	replace
210	[BUG]  [BUGGY]  else  if(eatTheRest.equals( " "))  {  tokens.add( "-- ");  tokens.add(getValue());  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  else  if(eatTheRest.equals( " "))  {  tokens.add( "-- ");  tokens.add(getValue());  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	else  if(eatTheRest.equals( " "))  {  tokens.add( "-- ");  tokens.add(getValue());  }	  tokens.add(   "--   ");    tokens.add(getValue());    	non-compiled	[CE]  <identifier>  expected	31	None	replace
211	[BUG]  [BUGGY]  else  if(eatTheRest.equals( "-- "))  {  tokens.add( "-- ");  tokens.add(getValue());  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  else  if(eatTheRest.equals( "-- "))  {  tokens.add( "-- ");  tokens.add(getValue());  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	else  if(eatTheRest.equals( "-- "))  {  tokens.add( "-- ");  tokens.add(getValue());  }	  tokens.add(   "--   ");    tokens.add(getValue());    	non-compiled	[CE]  <identifier>  expected	31	None	replace
212	[BUG]  [BUGGY]  NeighborTokenizer  tokens  =  new  NeighborTokenizer(this,  currentOption.getOwner());  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  NeighborTokenizer  tokens  =  new  NeighborTokenizer(this,  currentOption.getOwner());  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	NeighborTokenizer  tokens  =  new  NeighborTokenizer(this,  currentOption.getOwner());	  NeighborTokenizer    tokens    =    new    NeighborTokenizer(this,    currentOption.getValue());    	non-compiled	[CE]  <identifier>  expected	43	None	replace
213	[BUG]  [BUGGY]  while(stopAtNonOption)  {  if(eatTheRest)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  while(stopAtNonOption)  {  if(eatTheRest)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	while(stopAtNonOption)  {  if(eatTheRest)  {  throw  new  IllegalArgumentException( " ");  }	  While(stopAtNonOption)    {    if(eatTheRest)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
214	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption( "stopAtNonOption, ");  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  Option  currentOption  =  options.getOption( "stopAtNonOption, ");  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	Option  currentOption  =  options.getOption( "stopAtNonOption, ");	  Option    currentOption    =    options.getOption(   "stopAtNonOption   ");    	non-compiled	[CE]  <identifier>  expected	19	None	replace
215	[BUG]  [BUGGY]  while(!eatTheRest)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  while(!eatTheRest)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	while(!eatTheRest)  {  throw  new  IllegalArgumentException( " ");  }	  While(!stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
216	[BUG]  [BUGGY]  while(!eatTheRest)  {  tokens.add( "-- ");  tokens.add(value);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  while(!eatTheRest)  {  tokens.add( "-- ");  tokens.add(value);  [BUGGY]        [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	while(!eatTheRest)  {  tokens.add( "-- ");  tokens.add(value);	  while(!stopAtNonOption)    {    tokens.add(   "--   ");    tokens.add(value);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
217	[BUG]  [BUGGY]  While(stopAtNonOption)  {  eatTheRest  =  true;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  While(stopAtNonOption)  {  eatTheRest  =  true;  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	While(stopAtNonOption)  {  eatTheRest  =  true;  }	  While(stopAtNonOption)    {    eatTheRest    =    false;    	non-compiled	[CE]  <identifier>  expected	13	None	replace
218	[BUG]  [BUGGY]  this.stopAtNonOption  =  StopAtNonOption.eatTheRest;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  this.stopAtNonOption  =  StopAtNonOption.eatTheRest;  [BUGGY]        [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	this.stopAtNonOption  =  StopAtNonOption.eatTheRest;	  this.stopAtNonOption    =    StopAtNonOption.stopAtNonOption;    	non-compiled	[CE]  <identifier>  expected	65	None	replace
219	[BUG]  [BUGGY]  this.stopAtNonOption  =  StopAtNonOption.stopAtNonOption(eatTheRest);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  this.stopAtNonOption  =  StopAtNonOption.stopAtNonOption(eatTheRest);  [BUGGY]        [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	this.stopAtNonOption  =  StopAtNonOption.stopAtNonOption(eatTheRest);	  this.stopAtNonOption    =    StopAtNonOption.stopAtNonOption;    	non-compiled	[CE]  <identifier>  expected	65	None	replace
220	[BUG]  [BUGGY]  parent!=  null  &&  currentOption.stopAtNonOption)  {  tokens.add( "-- ");  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  parent!=  null  &&  currentOption.stopAtNonOption)  {  tokens.add( "-- ");  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	parent!=  null  &&  currentOption.stopAtNonOption)  {  tokens.add( "-- ");  }	  parent!=    null    &&    stopAtNonOption)    {    tokens.add(   "--   ");    }    	non-compiled	[CE]  <identifier>  expected	72	None	replace
221	[BUG]  [BUGGY]  parent!=  null  &&  currentOption.isSupported())  {  tokens.add( "-- ");  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  parent!=  null  &&  currentOption.isSupported())  {  tokens.add( "-- ");  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	parent!=  null  &&  currentOption.isSupported())  {  tokens.add( "-- ");  }	  parent!=    null    &&    stopAtNonOption)    {    tokens.add(   "--   ");    }    	non-compiled	[CE]  <identifier>  expected	72	None	replace
222	[BUG]  [BUGGY]  tokens.add( "-- ".equals(value));  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  tokens.add( "-- ".equals(value));  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	tokens.add( "-- ".equals(value));	  parent!=    null    &&    currentOption    ==    null;    tokens.add(   "--   ");    tokens.add(value);    	non-compiled	[CE]  <identifier>  expected	64	None	replace
223	[BUG]  [BUGGY]  while(!eatTheRest)  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  while(!eatTheRest)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	while(!eatTheRest)  {  throw  new  IllegalStateException( " ");  }	  While(!stopAtNonOption)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
224	[BUG]  [BUGGY]  NeighborTokenizer  tokens  =  new  NeighborTokenizer(getKey(),  currentOption);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }      [BUGGY]  NeighborTokenizer  tokens  =  new  NeighborTokenizer(getKey(),  currentOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	NeighborTokenizer  tokens  =  new  NeighborTokenizer(getKey(),  currentOption);	  NeighborTokenizer    tokens    =    new    NeighborTokenizer(getValue(),    currentOption);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
