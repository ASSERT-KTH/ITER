bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] process(token.substring(i)); [FE] AssertionFailedError testStopBursting [CONTEXT] if (currentOption.hasArg() && (token.length() != (i + 1))) { tokens.add(token.substring(i + 1)); break; } } else if (stopAtNonOption) { [BUGGY] process(token.substring(i)); [BUGGY] } else { tokens.add(token); break; } } } [CLASS] PosixParser [METHOD] burstToken [RETURN_TYPE] void  String token boolean stopAtNonOption [VARIABLES] Options options List tokens Option currentOption boolean eatTheRest stopAtNonOption String ch token int i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	
2	[BUG] [BUGGY] [FE] AssertionFailedError testStopBursting [CONTEXT] if (currentOption.hasArg() && (token.length() != (i + 1))) { tokens.add(token.substring(i + 1)); break; } } else if (stopAtNonOption) { [BUGGY] [BUGGY] process(token.substring(i)); } else { tokens.add(token); break; } } } [CLASS] PosixParser [METHOD] burstToken [RETURN_TYPE] void  String token boolean stopAtNonOption [VARIABLES] Options options List tokens Option currentOption boolean eatTheRest stopAtNonOption String ch token int i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	add	
3	[BUG] [BUGGY] else if (stopAtNonOption) { [FE] AssertionFailedError testStopBursting [CONTEXT] tokens.add("-" + ch); currentOption = options.getOption(ch); if (currentOption.hasArg() && (token.length() != (i + 1))) { tokens.add(token.substring(i + 1)); break; } } [BUGGY] else if (stopAtNonOption)   { [BUGGY] { process(token.substring(i)); } else { tokens.add(token); break; } } } [CLASS] PosixParser [METHOD] burstToken [RETURN_TYPE] void  String token boolean stopAtNonOption [VARIABLES] Options options List tokens Option currentOption boolean eatTheRest stopAtNonOption String ch token int i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	
4	[BUG] [BUGGY] [FE] AssertionFailedError testStopBursting [CONTEXT] tokens.add("-" + ch); currentOption = options.getOption(ch); if (currentOption.hasArg() && (token.length() != (i + 1))) { tokens.add(token.substring(i + 1)); break; } } [BUGGY] [BUGGY] else if (stopAtNonOption)   { { process(token.substring(i)); } else { tokens.add(token); break; } } } [CLASS] PosixParser [METHOD] burstToken [RETURN_TYPE] void  String token boolean stopAtNonOption [VARIABLES] Options options List tokens Option currentOption boolean eatTheRest stopAtNonOption String ch token int i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	add	
5	[BUG] [BUGGY] while (iter.hasNext()) { [FE] AssertionFailedError testStopBursting [CONTEXT] private void gobble(Iterator iter) { if (eatTheRest) { [BUGGY] while (iter.hasNext())   { [BUGGY] { tokens.add(iter.next()); } } } [CLASS] PosixParser [METHOD] gobble [RETURN_TYPE] void  Iterator iter [VARIABLES] Iterator iter Options options List tokens Option currentOption boolean eatTheRest stopAtNonOption  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	175	176	1	replace	
6	[BUG] [BUGGY] [FE] AssertionFailedError testStopBursting [CONTEXT] private void gobble(Iterator iter) { if (eatTheRest) { [BUGGY] [BUGGY] while (iter.hasNext())   { { tokens.add(iter.next()); } } } [CLASS] PosixParser [METHOD] gobble [RETURN_TYPE] void  Iterator iter [VARIABLES] Iterator iter Options options List tokens Option currentOption boolean eatTheRest stopAtNonOption  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	175	176	1	add	
7	[BUG] [BUGGY] if (currentOption != null && currentOption.hasArg()) { [FE] AssertionFailedError testStopBursting [CONTEXT] private void process(String value) { [BUGGY] if (currentOption != null && currentOption.hasArg())  { [BUGGY] { if (currentOption.hasArg()) { tokens.add(value); currentOption = null; } else if (currentOption.hasArgs()) { tokens.add(value); } [CLASS] PosixParser [METHOD] process [RETURN_TYPE] void  String value [VARIABLES] Options options List tokens Option currentOption boolean eatTheRest stopAtNonOption String value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	
8	[BUG] [BUGGY] [FE] AssertionFailedError testStopBursting [CONTEXT] private void process(String value) { [BUGGY] [BUGGY] if (currentOption != null && currentOption.hasArg())  { { if (currentOption.hasArg()) { tokens.add(value); currentOption = null; } else if (currentOption.hasArgs()) { tokens.add(value); } [CLASS] PosixParser [METHOD] process [RETURN_TYPE] void  String value [VARIABLES] Options options List tokens Option currentOption boolean eatTheRest stopAtNonOption String value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	add	
9	[BUG] [BUGGY] eatTheRest = true; [FE] AssertionFailedError testStopBursting [CONTEXT] tokens.add(value); currentOption = null; } else if (currentOption.hasArgs()) { tokens.add(value); } } else { [BUGGY] eatTheRest = true; [BUGGY] tokens.add("--"); tokens.add(value); } } [CLASS] PosixParser [METHOD] process [RETURN_TYPE] void  String value [VARIABLES] Options options List tokens Option currentOption boolean eatTheRest stopAtNonOption String value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	
10	[BUG] [BUGGY] [FE] AssertionFailedError testStopBursting [CONTEXT] tokens.add(value); currentOption = null; } else if (currentOption.hasArgs()) { tokens.add(value); } } else { [BUGGY] [BUGGY] eatTheRest = true; tokens.add("--"); tokens.add(value); } } [CLASS] PosixParser [METHOD] process [RETURN_TYPE] void  String value [VARIABLES] Options options List tokens Option currentOption boolean eatTheRest stopAtNonOption String value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	add	
11	[BUG] [BUGGY] tokens.add("--"); [FE] AssertionFailedError testStopBursting [CONTEXT] currentOption = null; } else if (currentOption.hasArgs()) { tokens.add(value); } } else { eatTheRest = true; [BUGGY] tokens.add("--"); [BUGGY] tokens.add(value); } } [CLASS] PosixParser [METHOD] process [RETURN_TYPE] void  String value [VARIABLES] Options options List tokens Option currentOption boolean eatTheRest stopAtNonOption String value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	
12	[BUG] [BUGGY] [FE] AssertionFailedError testStopBursting [CONTEXT] currentOption = null; } else if (currentOption.hasArgs()) { tokens.add(value); } } else { eatTheRest = true; [BUGGY] [BUGGY] tokens.add("--"); tokens.add(value); } } [CLASS] PosixParser [METHOD] process [RETURN_TYPE] void  String value [VARIABLES] Options options List tokens Option currentOption boolean eatTheRest stopAtNonOption String value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	add	
13	[BUG] [BUGGY] tokens.add(value); [FE] AssertionFailedError testStopBursting [CONTEXT] } else if (currentOption.hasArgs()) { tokens.add(value); } } else { eatTheRest = true; tokens.add("--"); [BUGGY] tokens.add(value); [BUGGY] } } [CLASS] PosixParser [METHOD] process [RETURN_TYPE] void  String value [VARIABLES] Options options List tokens Option currentOption boolean eatTheRest stopAtNonOption String value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	215	215	1	replace	
14	[BUG] [BUGGY] [FE] AssertionFailedError testStopBursting [CONTEXT] } else if (currentOption.hasArgs()) { tokens.add(value); } } else { eatTheRest = true; tokens.add("--"); [BUGGY] [BUGGY] tokens.add(value); } } [CLASS] PosixParser [METHOD] process [RETURN_TYPE] void  String value [VARIABLES] Options options List tokens Option currentOption boolean eatTheRest stopAtNonOption String value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	215	215	1	add	
15	[BUG] [BUGGY] } [FE] AssertionFailedError testStopBursting [CONTEXT] { tokens.add(value); } } else { eatTheRest = true; tokens.add("--"); tokens.add(value); } [BUGGY] } [BUGGY]  [CLASS] PosixParser [METHOD] process [RETURN_TYPE] void  String value [VARIABLES] Options options List tokens Option currentOption boolean eatTheRest stopAtNonOption String value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	
16	[BUG] [BUGGY] [FE] AssertionFailedError testStopBursting [CONTEXT] { tokens.add(value); } } else { eatTheRest = true; tokens.add("--"); tokens.add(value); } [BUGGY] [BUGGY] } [CLASS] PosixParser [METHOD] process [RETURN_TYPE] void  String value [VARIABLES] Options options List tokens Option currentOption boolean eatTheRest stopAtNonOption String value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	add	
17	[BUG] [BUGGY] burstToken(token, stopAtNonOption); [FE] AssertionFailedError testStopBursting [CONTEXT] else if (options.hasOption(token)) { tokens.add(token); }  else { [BUGGY] burstToken(token, stopAtNonOption); [BUGGY] } [CLASS] PosixParser [METHOD] flatten [RETURN_TYPE] String[]  Options options String[] arguments boolean stopAtNonOption [VARIABLES] Options options boolean eatTheRest stopAtNonOption Iterator iter List tokens Option currentOption String[] arguments String token int tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	
18	[BUG] [BUGGY] [FE] AssertionFailedError testStopBursting [CONTEXT] else if (options.hasOption(token)) { tokens.add(token); }  else { [BUGGY] [BUGGY] burstToken(token, stopAtNonOption); } [CLASS] PosixParser [METHOD] flatten [RETURN_TYPE] String[]  Options options String[] arguments boolean stopAtNonOption [VARIABLES] Options options boolean eatTheRest stopAtNonOption Iterator iter List tokens Option currentOption String[] arguments String token int tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	add	
19	[BUG] [BUGGY] for (int i = 1; i < token.length(); i++) { [FE] AssertionFailedError testStopBursting [CONTEXT] { [BUGGY] for (int i = 1; i < token.length(); i++)  { [BUGGY] { String ch = String.valueOf(token.charAt(i)); if (options.hasOption(ch)) { tokens.add("-" + ch); currentOption = options.getOption(ch); if (currentOption.hasArg() && (token.length() != (i + 1))) { [CLASS] PosixParser [METHOD] burstToken [RETURN_TYPE] void  String token boolean stopAtNonOption [VARIABLES] Options options List tokens Option currentOption boolean eatTheRest stopAtNonOption String ch token int i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	
20	[BUG] [BUGGY] [FE] AssertionFailedError testStopBursting [CONTEXT] { [BUGGY] [BUGGY] for (int i = 1; i < token.length(); i++)  { { String ch = String.valueOf(token.charAt(i)); if (options.hasOption(ch)) { tokens.add("-" + ch); currentOption = options.getOption(ch); if (currentOption.hasArg() && (token.length() != (i + 1))) { [CLASS] PosixParser [METHOD] burstToken [RETURN_TYPE] void  String token boolean stopAtNonOption [VARIABLES] Options options List tokens Option currentOption boolean eatTheRest stopAtNonOption String ch token int i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	add	
