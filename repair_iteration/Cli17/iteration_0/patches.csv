bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number
this_action1	[BUG]  [BUGGY]    tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  [CE]  'else'  without  'if'  [CONTEXT]  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  [BUGGY]    tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  [BUGGY]  else  if  (stopAtNonOption)    {  {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	    tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);		non-compiled	[CE]  'else'  without  'if'	4	None	add
2	[BUG]  [BUGGY]    tokens.add( "- "  +  ch);  [CE]  'else'  without  'if'  [CONTEXT]  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  [BUGGY]    tokens.add( "- "  +  ch);  [BUGGY]  else  if  (stopAtNonOption)    {  {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	    tokens.add( "- "  +  ch);		non-compiled	[CE]  'else'  without  'if'	4	None	add
3	[BUG]  [BUGGY]    tokens.add(token.substring(i  +  1));  currentOption  =  options.getOption(ch);  [CE]  'else'  without  'if'  [CONTEXT]  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  [BUGGY]    tokens.add(token.substring(i  +  1));  currentOption  =  options.getOption(ch);  [BUGGY]  else  if  (stopAtNonOption)    {  {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	    tokens.add(token.substring(i  +  1));  currentOption  =  options.getOption(ch);		non-compiled	[CE]  'else'  without  'if'	4	None	add
4	[BUG]  [BUGGY]    tokens.add(token);  currentOption  =  options.getOption(ch);  [CE]  'else'  without  'if'  [CONTEXT]  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  [BUGGY]    tokens.add(token);  currentOption  =  options.getOption(ch);  [BUGGY]  else  if  (stopAtNonOption)    {  {  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	300	301	1	replace	    tokens.add(token);  currentOption  =  options.getOption(ch);		non-compiled	[CE]  'else'  without  'if'	4	None	add
12	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testStopBursting  [CONTEXT]  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add( "-- ");  [BUGGY]    tokens.add( "-- ");  [BUGGY]  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	215	215	1	add	    tokens.add( "-- ");		compilable	  [FE]  AssertionFailedError  testStopBursting	14	1
13	[BUG]  [BUGGY]    tokens.add( "-- ");  [FE]  AssertionFailedError  testStopBursting  [CONTEXT]  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add( "-- ");  [BUGGY]    tokens.add( "-- ");  [BUGGY]  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	215	215	1	replace	    tokens.add( "-- ");		compilable	  [FE]  AssertionFailedError  testStopBursting	14	1	add
14	[BUG]  [BUGGY]    tokens.add(currentOption.getLeastSupertype( "- "));  [CE]  cannot  find  symbol  [CONTEXT]  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add( "-- ");  [BUGGY]    tokens.add(currentOption.getLeastSupertype( "- "));  [BUGGY]  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	215	215	1	replace	    tokens.add(currentOption.getLeastSupertype( "- "));		non-compiled	[CE]  cannot  find  symbol	14	None	add
15	[BUG]  [BUGGY]    tokens.add(currentOption.getLeastSupertype( "-- "));  [CE]  cannot  find  symbol  [CONTEXT]  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add( "-- ");  [BUGGY]    tokens.add(currentOption.getLeastSupertype( "-- "));  [BUGGY]  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	215	215	1	replace	    tokens.add(currentOption.getLeastSupertype( "-- "));		non-compiled	[CE]  cannot  find  symbol	14	None	add
21	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testStopBursting  [CONTEXT]  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [BUGGY]    tokens.add(token);  [BUGGY]  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	add	    tokens.add(token);		compilable	  [FE]  AssertionFailedError  testStopBursting	2	1
22	[BUG]  [BUGGY]    tokens.add(token);  [FE]  AssertionFailedError  testStopBursting  [CONTEXT]  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [BUGGY]    tokens.add(token);  [BUGGY]  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	    tokens.add(token);		compilable	  [FE]  AssertionFailedError  testStopBursting	2	1	add
22	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testStopBursting  [CONTEXT]  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [BUGGY]    tokens.add(token);  currentOption  =  options.getOption(ch);  [BUGGY]  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	add	    tokens.add(token);  currentOption  =  options.getOption(ch);		compilable	  [FE]  AssertionFailedError  testStopBursting	2	1
23	[BUG]  [BUGGY]    tokens.add(token);  currentOption  =  options.getOption(ch);  [FE]  AssertionFailedError  testStopBursting  [CONTEXT]  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [BUGGY]    tokens.add(token);  currentOption  =  options.getOption(ch);  [BUGGY]  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	    tokens.add(token);  currentOption  =  options.getOption(ch);		compilable	  [FE]  AssertionFailedError  testStopBursting	2	1	add
23	[BUG]  [BUGGY]    tokens.add(token);  currentOption.setLength(0);  [CE]  cannot  find  symbol  [CONTEXT]  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [BUGGY]    tokens.add(token);  currentOption.setLength(0);  [BUGGY]  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	    tokens.add(token);  currentOption.setLength(0);		non-compiled	[CE]  cannot  find  symbol	2	None	add
24	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testStopBursting  [CONTEXT]  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [BUGGY]    tokens.add(token);  stopAtNonOption  =  true;  [BUGGY]  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	add	    tokens.add(token);  stopAtNonOption  =  true;		compilable	  [FE]  AssertionFailedError  testStopBursting	2	1
25	[BUG]  [BUGGY]    tokens.add(token);  stopAtNonOption  =  true;  [FE]  AssertionFailedError  testStopBursting  [CONTEXT]  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [BUGGY]    tokens.add(token);  stopAtNonOption  =  true;  [BUGGY]  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	    tokens.add(token);  stopAtNonOption  =  true;		compilable	  [FE]  AssertionFailedError  testStopBursting	2	1	add
25	[BUG]  [BUGGY]    tokens.add(token);  currentOption  =  Options.getOption(ch);  [CE]  non-static  method  getOption(String)  cannot  be  referenced  from  a  static  context  [CONTEXT]  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [BUGGY]    tokens.add(token);  currentOption  =  Options.getOption(ch);  [BUGGY]  process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	    tokens.add(token);  currentOption  =  Options.getOption(ch);		non-compiled	[CE]  non-static  method  getOption(String)  cannot  be  referenced  from  a  static  context	2	None	add
31	[BUG]  [BUGGY]    tokens.add( "- "  +  ch);  [CE]  cannot  find  symbol  ch  [CONTEXT]  {  [BUGGY]    tokens.add( "- "  +  ch);  [BUGGY]  for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	    tokens.add( "- "  +  ch);		non-compiled	[CE]  cannot  find  symbol  ch	20	None	add
32	[BUG]  [BUGGY]    tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  [CE]  cannot  find  symbol  ch  [CONTEXT]  {  [BUGGY]    tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  [BUGGY]  for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	    tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);		non-compiled	[CE]  cannot  find  symbol  ch	20	None	add
33	[BUG]  [BUGGY]    tokens.clear();  tokens.add( "- "  +  ch);  [CE]  cannot  find  symbol  ch  [CONTEXT]  {  [BUGGY]    tokens.clear();  tokens.add( "- "  +  ch);  [BUGGY]  for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	    tokens.clear();  tokens.add( "- "  +  ch);		non-compiled	[CE]  cannot  find  symbol  ch	20	None	add
34	[BUG]  [BUGGY]    tokens.add( "- "  +  ch);  tokens.add(token.substring(0,  stopAtNonOption));  [CE]  cannot  find  symbol  ch  [CONTEXT]  {  [BUGGY]    tokens.add( "- "  +  ch);  tokens.add(token.substring(0,  stopAtNonOption));  [BUGGY]  for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	    tokens.add( "- "  +  ch);  tokens.add(token.substring(0,  stopAtNonOption));		non-compiled	[CE]  cannot  find  symbol  ch	20	None	add
35	[BUG]  [BUGGY]    tokens.add( "- "  +  ch);  currentOption  =  options.getOption(token);  [CE]  cannot  find  symbol  ch  [CONTEXT]  {  [BUGGY]    tokens.add( "- "  +  ch);  currentOption  =  options.getOption(token);  [BUGGY]  for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	    tokens.add( "- "  +  ch);  currentOption  =  options.getOption(token);		non-compiled	[CE]  cannot  find  symbol  ch	20	None	add
43	[BUG]  [BUGGY]  tokens.add(currentOption.getLocalMillis());  [CE]  cannot  find  symbol  [CONTEXT]  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add( "-- ");  [BUGGY]  tokens.add(currentOption.getLocalMillis());  [BUGGY]  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	215	215	1	replace	tokens.add(currentOption.getLocalMillis());	tokens.add(value);  	non-compiled	[CE]  cannot  find  symbol	13	None	replace
52	[BUG]  [BUGGY]  while(iter.next())  {  [CE]  incompatible  types  [CONTEXT]  private  void  gobble(Iterator  iter)  {  if  (eatTheRest)  {  [BUGGY]  while(iter.next())  {  [BUGGY]  {  tokens.add(iter.next());  }  }  }  [CLASS]  PosixParser  [METHOD]  gobble  [RETURN_TYPE]  void  Iterator  iter  [VARIABLES]  Iterator  iter  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	175	176	1	replace	while(iter.next())  {	while  (iter.hasNext())  {  	non-compiled	[CE]  incompatible  types	5	None	replace
54	[BUG]  [BUGGY]  while(iter.hasNext()  &&  stopAtNonOption!=  iter.next())  {  [CE]  cannot  find  symbol  stopAtNonOption  [CONTEXT]  private  void  gobble(Iterator  iter)  {  if  (eatTheRest)  {  [BUGGY]  while(iter.hasNext()  &&  stopAtNonOption!=  iter.next())  {  [BUGGY]  {  tokens.add(iter.next());  }  }  }  [CLASS]  PosixParser  [METHOD]  gobble  [RETURN_TYPE]  void  Iterator  iter  [VARIABLES]  Iterator  iter  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	175	176	1	replace	while(iter.hasNext()  &&  stopAtNonOption!=  iter.next())  {	while  (iter.hasNext())  {  	non-compiled	[CE]  cannot  find  symbol  stopAtNonOption	5	None	replace
55	[BUG]  [BUGGY]    [CE]  class,  interface,  or  enum  expected  [CONTEXT]  private  void  gobble(Iterator  iter)  {  if  (eatTheRest)  {  [BUGGY]    [BUGGY]  {  tokens.add(iter.next());  }  }  }  [CLASS]  PosixParser  [METHOD]  gobble  [RETURN_TYPE]  void  Iterator  iter  [VARIABLES]  Iterator  iter  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	175	176	1	replace	  	while  (iter.hasNext())  {  	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
61	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testStopBursting  [CONTEXT]  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add( "-- ");  tokens.add(value);  }  [BUGGY]    tokens.add( "-- ");  [BUGGY]  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	add	    tokens.add( "-- ");		compilable	  [FE]  AssertionFailedError  testStopBursting	16	1
62	[BUG]  [BUGGY]    tokens.add( "-- ");  [FE]  AssertionFailedError  testStopBursting  [CONTEXT]  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add( "-- ");  tokens.add(value);  }  [BUGGY]    tokens.add( "-- ");  [BUGGY]  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	    tokens.add( "-- ");		compilable	  [FE]  AssertionFailedError  testStopBursting	16	1	add
63	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testStopBursting  [CONTEXT]  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add( "-- ");  tokens.add(value);  }  [BUGGY]    tokens.add( "-- ");  currentOption  =  options.getOption(value);  [BUGGY]  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	add	    tokens.add( "-- ");  currentOption  =  options.getOption(value);		compilable	  [FE]  AssertionFailedError  testStopBursting	16	1
64	[BUG]  [BUGGY]    tokens.add( "-- ");  currentOption  =  options.getOption(value);  [FE]  AssertionFailedError  testStopBursting  [CONTEXT]  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;  tokens.add( "-- ");  tokens.add(value);  }  [BUGGY]    tokens.add( "-- ");  currentOption  =  options.getOption(value);  [BUGGY]  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	217	217	1	replace	    tokens.add( "-- ");  currentOption  =  options.getOption(value);		compilable	  [FE]  AssertionFailedError  testStopBursting	16	1	add
71	[BUG]  [BUGGY]    tokens.add(value);  currentOption  =  options.getOption(currentOption);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [CONTEXT]  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  [BUGGY]    tokens.add(value);  currentOption  =  options.getOption(currentOption);  [BUGGY]  eatTheRest  =  true;  tokens.add( "-- ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	    tokens.add(value);  currentOption  =  options.getOption(currentOption);		non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	10	None	add
72	[BUG]  [BUGGY]    tokens.add( "- ");  currentOption  =  options.getOption(currentOption);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [CONTEXT]  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  [BUGGY]    tokens.add( "- ");  currentOption  =  options.getOption(currentOption);  [BUGGY]  eatTheRest  =  true;  tokens.add( "-- ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	    tokens.add( "- ");  currentOption  =  options.getOption(currentOption);		non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	10	None	add
