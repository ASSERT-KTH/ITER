bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(stopAtNonOption)  {  for(Iterator  iter  =  arguments.iterator();  iter.hasNext();)  {  tokens.add(iter.next());  }  [CE]  <identifier>  expected  [FE]    AssertionFailedError  [CONTEXT]  {  process(token);  }  else  {  tokens.add(token);  }  }  gobble(iter);  [BUGGY]  if(stopAtNonOption)  {  for(Iterator  iter  =  arguments.iterator();  iter.hasNext();)  {  tokens.add(iter.next());  }  [BUGGY]    [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	161	161	1	replace	if(stopAtNonOption)  {  for(Iterator  iter  =  arguments.iterator();  iter.hasNext();)  {  tokens.add(iter.next());  }	}  	non-compiled	[CE]  <identifier>  expected	69	None	replace
2	[BUG]  [BUGGY]  if(stopAtNonOption)  {  for(Iterator  iter  =  options.iterator();  iter.hasNext();)  {  tokens.add(iter.next());  }  [CE]  <identifier>  expected  [FE]      AssertionFailedError  [CONTEXT]  {  process(token);  }  else  {  tokens.add(token);  }  }  gobble(iter);  [BUGGY]  if(stopAtNonOption)  {  for(Iterator  iter  =  options.iterator();  iter.hasNext();)  {  tokens.add(iter.next());  }  [BUGGY]    [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	161	161	1	replace	if(stopAtNonOption)  {  for(Iterator  iter  =  options.iterator();  iter.hasNext();)  {  tokens.add(iter.next());  }	}  	non-compiled	[CE]  <identifier>  expected	69	None	replace
3	[BUG]  [BUGGY]  tokens.add(token);  [CE]  <identifier>  expected  [FE]        AssertionFailedError  [CONTEXT]  {  process(token);  }  else  {  tokens.add(token);  }  }  gobble(iter);  [BUGGY]  tokens.add(token);  [BUGGY]    [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	161	161	1	replace	tokens.add(token);	}  	non-compiled	[CE]  <identifier>  expected	69	None	replace
4	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError  [CONTEXT]  {  process(token);  }  else  {  tokens.add(token);  }  }  gobble(iter);  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	161	161	1	replace	if(stopAtNonOption)  {  tokens.add(token);  }  else  {  throw  new  IllegalArgumentException( " ");  }	}  	non-compiled	[CE]  <identifier>  expected	69	None	replace
5	[BUG]  [BUGGY]    [CE]  <identifier>  expected  [FE]            AssertionFailedError  [CONTEXT]  {  process(token);  }  else  {  tokens.add(token);  }  }  gobble(iter);  [BUGGY]    [BUGGY]    [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	161	161	1	replace	  	}  	non-compiled	[CE]  <identifier>  expected	69	None	replace
6	[BUG]  [BUGGY]    if(stopAtNonOption)  {  for(Iterator  iter  =  arguments.iterator();  iter.hasNext();)  {  tokens.add(iter.next());  continue;  }  [CE]  <identifier>  expected  [FE]    AssertionFailedError  [CONTEXT]  {  process(token);  }  else  {  tokens.add(token);  }  }  gobble(iter);  [BUGGY]    if(stopAtNonOption)  {  for(Iterator  iter  =  arguments.iterator();  iter.hasNext();)  {  tokens.add(iter.next());  continue;  }  [BUGGY]  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	161	161	1	replace	    if(stopAtNonOption)  {  for(Iterator  iter  =  arguments.iterator();  iter.hasNext();)  {  tokens.add(iter.next());  continue;  }		non-compiled	[CE]  <identifier>  expected	70	None	add
7	[BUG]  [BUGGY]  return(tokenLength  >  0)?  options.get(tokenLength  -  1):  null;  [CE]  <identifier>  expected  [FE]    AssertionFailedError  [CONTEXT]  {  process(token);  }  else  {  tokens.add(token);  }  }  gobble(iter);  [BUGGY]  return(tokenLength  >  0)?  options.get(tokenLength  -  1):  null;  [BUGGY]    [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	161	161	1	replace	return(tokenLength  >  0)?  options.get(tokenLength  -  1):  null;	}  	non-compiled	[CE]  <identifier>  expected	69	None	replace
8	[BUG]  [BUGGY]  return  options.toArray(new  String[tokenLength]);  [CE]  <identifier>  expected  [FE]      AssertionFailedError  [CONTEXT]  {  process(token);  }  else  {  tokens.add(token);  }  }  gobble(iter);  [BUGGY]  return  options.toArray(new  String[tokenLength]);  [BUGGY]    [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	161	161	1	replace	return  options.toArray(new  String[tokenLength]);	}  	non-compiled	[CE]  <identifier>  expected	69	None	replace
9	[BUG]  [BUGGY]  return  stopAtNonOption?  options.toArray(arguments):  null;  [CE]  <identifier>  expected  [FE]        AssertionFailedError  [CONTEXT]  {  process(token);  }  else  {  tokens.add(token);  }  }  gobble(iter);  [BUGGY]  return  stopAtNonOption?  options.toArray(arguments):  null;  [BUGGY]    [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	161	161	1	replace	return  stopAtNonOption?  options.toArray(arguments):  null;	}  	non-compiled	[CE]  <identifier>  expected	69	None	replace
10	[BUG]  [BUGGY]    if(stopAtNonOption)  {  tokens  =  new  String[tokenLength];  System.arraycopy(arguments,  0,  tokens,  0,  tokenLength);  }  [CE]  <identifier>  expected  [FE]    AssertionFailedError  [CONTEXT]  {  process(token);  }  else  {  tokens.add(token);  }  }  gobble(iter);  [BUGGY]    if(stopAtNonOption)  {  tokens  =  new  String[tokenLength];  System.arraycopy(arguments,  0,  tokens,  0,  tokenLength);  }  [BUGGY]  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	161	161	1	replace	    if(stopAtNonOption)  {  tokens  =  new  String[tokenLength];  System.arraycopy(arguments,  0,  tokens,  0,  tokenLength);  }		non-compiled	[CE]  <identifier>  expected	70	None	add
11	[BUG]  [BUGGY]    if(stopAtNonOption)  {  tokens  =  new  String[tokenLength];  for(int  i  =  0,  len  =  arguments.length;  i  <  len;  i++)  {  options[i]  =  options[i];  }  [CE]  <identifier>  expected  [FE]      AssertionFailedError  [CONTEXT]  {  process(token);  }  else  {  tokens.add(token);  }  }  gobble(iter);  [BUGGY]    if(stopAtNonOption)  {  tokens  =  new  String[tokenLength];  for(int  i  =  0,  len  =  arguments.length;  i  <  len;  i++)  {  options[i]  =  options[i];  }  [BUGGY]  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	161	161	1	replace	    if(stopAtNonOption)  {  tokens  =  new  String[tokenLength];  for(int  i  =  0,  len  =  arguments.length;  i  <  len;  i++)  {  options[i]  =  options[i];  }		non-compiled	[CE]  <identifier>  expected	70	None	add
12	[BUG]  [BUGGY]    if(stopAtNonOption)  {  tokens  =  new  String[tokenLength];  for(int  i  =  0,  len  =  arguments.length;  i  <  len;  i++)  {  tokens[i]  =  null;  }  [CE]  <identifier>  expected  [FE]        AssertionFailedError  [CONTEXT]  {  process(token);  }  else  {  tokens.add(token);  }  }  gobble(iter);  [BUGGY]    if(stopAtNonOption)  {  tokens  =  new  String[tokenLength];  for(int  i  =  0,  len  =  arguments.length;  i  <  len;  i++)  {  tokens[i]  =  null;  }  [BUGGY]  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	161	161	1	replace	    if(stopAtNonOption)  {  tokens  =  new  String[tokenLength];  for(int  i  =  0,  len  =  arguments.length;  i  <  len;  i++)  {  tokens[i]  =  null;  }		non-compiled	[CE]  <identifier>  expected	70	None	add
13	[BUG]  [BUGGY]    if(stopAtNonOption)  {  tokens  =  new  String[tokenLength];  for(int  i  =  0,  len  =  arguments.length;  i  <  len;  i++)  {  tokens[i]  =  options[i];  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError  [CONTEXT]  {  process(token);  }  else  {  tokens.add(token);  }  }  gobble(iter);  [BUGGY]    if(stopAtNonOption)  {  tokens  =  new  String[tokenLength];  for(int  i  =  0,  len  =  arguments.length;  i  <  len;  i++)  {  tokens[i]  =  options[i];  }  [BUGGY]  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	161	161	1	replace	    if(stopAtNonOption)  {  tokens  =  new  String[tokenLength];  for(int  i  =  0,  len  =  arguments.length;  i  <  len;  i++)  {  tokens[i]  =  options[i];  }		non-compiled	[CE]  <identifier>  expected	70	None	add
14	[BUG]  [BUGGY]    tokens.add(token);  currentOption  =  options.getOption(tokenLength);  [CE]  <identifier>  expected  [FE]    AssertionFailedError  [CONTEXT]  {  process(token);  }  else  {  tokens.add(token);  }  }  gobble(iter);  [BUGGY]    tokens.add(token);  currentOption  =  options.getOption(tokenLength);  [BUGGY]  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	161	161	1	replace	    tokens.add(token);  currentOption  =  options.getOption(tokenLength);		non-compiled	[CE]  <identifier>  expected	70	None	add
15	[BUG]  [BUGGY]    iter.remove();  [CE]  <identifier>  expected  [FE]      AssertionFailedError  [CONTEXT]  {  process(token);  }  else  {  tokens.add(token);  }  }  gobble(iter);  [BUGGY]    iter.remove();  [BUGGY]  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	161	161	1	replace	    iter.remove();		non-compiled	[CE]  <identifier>  expected	70	None	add
16	[BUG]  [BUGGY]    iter.remove();  tokens.add(arguments[tokenLength]);  [CE]  <identifier>  expected  [FE]        AssertionFailedError  [CONTEXT]  {  process(token);  }  else  {  tokens.add(token);  }  }  gobble(iter);  [BUGGY]    iter.remove();  tokens.add(arguments[tokenLength]);  [BUGGY]  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	161	161	1	replace	    iter.remove();  tokens.add(arguments[tokenLength]);		non-compiled	[CE]  <identifier>  expected	70	None	add
17	[BUG]  [BUGGY]    iter.remove();  tokens.add(arguments[0].toString());  [CE]  <identifier>  expected  [FE]          AssertionFailedError  [CONTEXT]  {  process(token);  }  else  {  tokens.add(token);  }  }  gobble(iter);  [BUGGY]    iter.remove();  tokens.add(arguments[0].toString());  [BUGGY]  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	161	161	1	replace	    iter.remove();  tokens.add(arguments[0].toString());		non-compiled	[CE]  <identifier>  expected	70	None	add
18	[BUG]  [BUGGY]  return(tokenLength  >  0)?  options.get(tokenLength  -  1):  arguments[0];  [CE]  <identifier>  expected  [FE]    AssertionFailedError  [CONTEXT]  {  process(token);  }  else  {  tokens.add(token);  }  }  gobble(iter);  [BUGGY]  return(tokenLength  >  0)?  options.get(tokenLength  -  1):  arguments[0];  [BUGGY]    [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	161	161	1	replace	return(tokenLength  >  0)?  options.get(tokenLength  -  1):  arguments[0];	}  	non-compiled	[CE]  <identifier>  expected	69	None	replace
19	[BUG]  [BUGGY]  return(tokenLength  >  0)?  options.get(tokenLength  -  1): " ";  [CE]  <identifier>  expected  [FE]      AssertionFailedError  [CONTEXT]  {  process(token);  }  else  {  tokens.add(token);  }  }  gobble(iter);  [BUGGY]  return(tokenLength  >  0)?  options.get(tokenLength  -  1): " ";  [BUGGY]    [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	161	161	1	replace	return(tokenLength  >  0)?  options.get(tokenLength  -  1): " ";	}  	non-compiled	[CE]  <identifier>  expected	69	None	replace
