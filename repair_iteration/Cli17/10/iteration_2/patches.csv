bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(token.substring(i  +  1),  token.length());  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      [BUGGY]  aughtExceptionHandler.handleMissingName(token.substring(i  +  1),  token.length());  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	aughtExceptionHandler.handleMissingName(token.substring(i  +  1),  token.length());	  aughtExceptionHandler.handleMissingName(token.substring(i    +    1));    	non-compiled	[CE]  <identifier>  expected	58	None	replace
2	[BUG]  [BUGGY]  if(stopAtNonOption)  {  aughtExceptionHandler.handleMissingName(token.substring(i  +  1));  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      [BUGGY]  if(stopAtNonOption)  {  aughtExceptionHandler.handleMissingName(token.substring(i  +  1));  }  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	if(stopAtNonOption)  {  aughtExceptionHandler.handleMissingName(token.substring(i  +  1));  }	  aughtExceptionHandler.handleMissingName(token.substring(i    +    1));    	non-compiled	[CE]  <identifier>  expected	58	None	replace
3	[BUG]  [BUGGY]  While(stopAtNonOption  &&  currentOption!=  null)  {  tokens.add( "- "  +  ch);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      [BUGGY]  While(stopAtNonOption  &&  currentOption!=  null)  {  tokens.add( "- "  +  ch);  }  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	While(stopAtNonOption  &&  currentOption!=  null)  {  tokens.add( "- "  +  ch);  }	  While(stopAtNonOption)    {    tokens.add(   "-   "    +    ch);    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
4	[BUG]  [BUGGY]  TokenBuffer  token  =  new  TokenBuffer(token.length();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      [BUGGY]  TokenBuffer  token  =  new  TokenBuffer(token.length();  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	TokenBuffer  token  =  new  TokenBuffer(token.length();	  TokenBuffer    token    =    new    TokenBuffer(token.length()    -    2);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
5	[BUG]  [BUGGY]  Option  options  =  options.getOption(ch,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      [BUGGY]  Option  options  =  options.getOption(ch,  stopAtNonOption);  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	Option  options  =  options.getOption(ch,  stopAtNonOption);	  Option    options    =    options.getOption(ch);    	non-compiled	[CE]  <identifier>  expected	46	None	replace
6	[BUG]  [BUGGY]  Option  options  =  currentOption.getOption(ch);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      [BUGGY]  Option  options  =  currentOption.getOption(ch);  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	Option  options  =  currentOption.getOption(ch);	  Option    options    =    options.getOption(ch);    	non-compiled	[CE]  <identifier>  expected	46	None	replace
7	[BUG]  [BUGGY]  options  =  options.getOption(ch);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      [BUGGY]  options  =  options.getOption(ch);  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	options  =  options.getOption(ch);	  Option    options    =    options.getOption(ch);    	non-compiled	[CE]  <identifier>  expected	46	None	replace
8	[BUG]  [BUGGY]  acceptSideEffects(stopAtNonOption))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      [BUGGY]  acceptSideEffects(stopAtNonOption))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	acceptSideEffects(stopAtNonOption))  {  throw  new  IllegalArgumentException( " ");  }	  allowSideEffects(stopAtNonOption))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	65	None	replace
9	[BUG]  [BUGGY]  allowSideEffects(stopAtNonOption,  tokens))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      [BUGGY]  allowSideEffects(stopAtNonOption,  tokens))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	allowSideEffects(stopAtNonOption,  tokens))  {  throw  new  IllegalArgumentException( " ");  }	  allowSideEffects(stopAtNonOption))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	65	None	replace
10	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(ch);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(ch);  }  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(ch);  }	  Option    currentOption    =    options.getOption(ch);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
11	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(ch);  }  else  {  tokens.add( "- "  +  ch);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(ch);  }  else  {  tokens.add( "- "  +  ch);  }  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(ch);  }  else  {  tokens.add( "- "  +  ch);  }	  Option    currentOption    =    options.getOption(ch);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
12	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(ch);  tokens.add( "- "  +  ch);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(ch);  tokens.add( "- "  +  ch);  }  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(ch);  tokens.add( "- "  +  ch);  }	  Option    currentOption    =    options.getOption(ch);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
13	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.length()  -  1));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      [BUGGY]  tokens.add(token.substring(0,  token.length()  -  1));  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	tokens.add(token.substring(0,  token.length()  -  1));	  tokens.add(token.substring(1));    	non-compiled	[CE]  <identifier>  expected	12	None	replace
14	[BUG]  [BUGGY]  tokens.add(token.substring(2));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      [BUGGY]  tokens.add(token.substring(2));  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	tokens.add(token.substring(2));	  tokens.add(token.substring(1));    	non-compiled	[CE]  <identifier>  expected	12	None	replace
15	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.length()));  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      [BUGGY]  tokens.add(token.substring(0,  token.length()));  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	tokens.add(token.substring(0,  token.length()));	  tokens.add(token.substring(1));    	non-compiled	[CE]  <identifier>  expected	12	None	replace
16	[BUG]  [BUGGY]  Token  token  =  new  Token(token.substring(0,  token.length()));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      [BUGGY]  Token  token  =  new  Token(token.substring(0,  token.length()));  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	Token  token  =  new  Token(token.substring(0,  token.length()));	  Token    token    =    new    Token(token.substring(0,    token.length()    -    1));    	non-compiled	[CE]  <identifier>  expected	18	None	replace
17	[BUG]  [BUGGY]  Token  token  =  new  Token(token.substring(0,  token.length()  +  1));  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      [BUGGY]  Token  token  =  new  Token(token.substring(0,  token.length()  +  1));  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	Token  token  =  new  Token(token.substring(0,  token.length()  +  1));	  Token    token    =    new    Token(token.substring(0,    token.length()    -    1));    	non-compiled	[CE]  <identifier>  expected	18	None	replace
18	[BUG]  [BUGGY]  Token  token  =  new  Token(token.substring(0,  token.length()  1));  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {      [BUGGY]  Token  token  =  new  Token(token.substring(0,  token.length()  1));  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	Token  token  =  new  Token(token.substring(0,  token.length()  1));	  Token    token    =    new    Token(token.substring(0,    token.length()    -    1));    	non-compiled	[CE]  <identifier>  expected	18	None	replace
19	[BUG]  [BUGGY]  acceptSideEffects(stopAtNonOption))  throw  new  IllegalArgumentException( " ");  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      {      [BUGGY]  acceptSideEffects(stopAtNonOption))  throw  new  IllegalArgumentException( " ");  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	acceptSideEffects(stopAtNonOption))  throw  new  IllegalArgumentException( " ");	  allowSideEffects(stopAtNonOption))    throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	68	None	replace
20	[BUG]  [BUGGY]  enableSideEffects(stopAtNonOption))  throw  new  IllegalArgumentException( " ");  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      {      [BUGGY]  enableSideEffects(stopAtNonOption))  throw  new  IllegalArgumentException( " ");  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	enableSideEffects(stopAtNonOption))  throw  new  IllegalArgumentException( " ");	  allowSideEffects(stopAtNonOption))    throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	68	None	replace
21	[BUG]  [BUGGY]  AssertionFailedToken  stopAtNonOption  =  stopAtNonOption?  tokens.get(token.substring(i  +  1))  :  null;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {      [BUGGY]  AssertionFailedToken  stopAtNonOption  =  stopAtNonOption?  tokens.get(token.substring(i  +  1))  :  null;  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	AssertionFailedToken  stopAtNonOption  =  stopAtNonOption?  tokens.get(token.substring(i  +  1))  :  null;	  AssertionFailedToken    stopAtNonOption    =    stopAtNonOption?    tokens.add(token.substring(i    +    1))    :    null;    	non-compiled	[CE]  <identifier>  expected	48	None	replace
22	[BUG]  [BUGGY]  AssertionFailedToken  stopAtNonOption  =  stopAtNonOption?  tokens.contains(token.substring(i  +  1))  :  null;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      [BUGGY]  AssertionFailedToken  stopAtNonOption  =  stopAtNonOption?  tokens.contains(token.substring(i  +  1))  :  null;  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	AssertionFailedToken  stopAtNonOption  =  stopAtNonOption?  tokens.contains(token.substring(i  +  1))  :  null;	  AssertionFailedToken    stopAtNonOption    =    stopAtNonOption?    tokens.add(token.substring(i    +    1))    :    null;    	non-compiled	[CE]  <identifier>  expected	48	None	replace
23	[BUG]  [BUGGY]  AssertionFailedToken  stopAtNonOption  =  stopAtNonOption?  tokens.remove(token.substring(i  +  1))  :  null;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      [BUGGY]  AssertionFailedToken  stopAtNonOption  =  stopAtNonOption?  tokens.remove(token.substring(i  +  1))  :  null;  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	AssertionFailedToken  stopAtNonOption  =  stopAtNonOption?  tokens.remove(token.substring(i  +  1))  :  null;	  AssertionFailedToken    stopAtNonOption    =    stopAtNonOption?    tokens.add(token.substring(i    +    1))    :    null;    	non-compiled	[CE]  <identifier>  expected	48	None	replace
24	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- "  +  i);  currentOption  =  options.getOption(ch);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- "  +  i);  currentOption  =  options.getOption(ch);  }  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	if(stopAtNonOption)  {  tokens.add( "- "  +  i);  currentOption  =  options.getOption(ch);  }	  tokens.add(   "-   "    +    i);    currentOption    =    options.getOption(ch);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
25	[BUG]  [BUGGY]  tokens.add( "- ");  currentOption  =  options.getOption(ch);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      [BUGGY]  tokens.add( "- ");  currentOption  =  options.getOption(ch);  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	tokens.add( "- ");  currentOption  =  options.getOption(ch);	  tokens.add(   "-   "    +    i);    currentOption    =    options.getOption(ch);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
26	[BUG]  [BUGGY]  AssertionFailedToken  stopAtNonOption  =  token;  tokens.add(token.substring(1));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      [BUGGY]  AssertionFailedToken  stopAtNonOption  =  token;  tokens.add(token.substring(1));  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	AssertionFailedToken  stopAtNonOption  =  token;  tokens.add(token.substring(1));	  AssertionFailedToken    stopAtNonOption    =    stopAtNonOption;    tokens.add(token.substring(1));    	non-compiled	[CE]  <identifier>  expected	42	None	replace
27	[BUG]  [BUGGY]  AssertionFailedToken  stopAtNonOption  =  eatTheRest;  tokens.add(token.substring(1));  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      [BUGGY]  AssertionFailedToken  stopAtNonOption  =  eatTheRest;  tokens.add(token.substring(1));  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	AssertionFailedToken  stopAtNonOption  =  eatTheRest;  tokens.add(token.substring(1));	  AssertionFailedToken    stopAtNonOption    =    stopAtNonOption;    tokens.add(token.substring(1));    	non-compiled	[CE]  <identifier>  expected	42	None	replace
28	[BUG]  [BUGGY]  AssertionFailedToken  stopAtNonOption  =  new  AssertionFailedToken(token.substring(1));  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {      [BUGGY]  AssertionFailedToken  stopAtNonOption  =  new  AssertionFailedToken(token.substring(1));  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	AssertionFailedToken  stopAtNonOption  =  new  AssertionFailedToken(token.substring(1));	  AssertionFailedToken    stopAtNonOption    =    stopAtNonOption;    tokens.add(token.substring(1));    	non-compiled	[CE]  <identifier>  expected	42	None	replace
29	[BUG]  [BUGGY]  AssertionFailedToken  stopAtNonOption  =  new  AssertionFailedToken(token.substring(1));  tokens.add(stopAtNonOption);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      {      [BUGGY]  AssertionFailedToken  stopAtNonOption  =  new  AssertionFailedToken(token.substring(1));  tokens.add(stopAtNonOption);  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	AssertionFailedToken  stopAtNonOption  =  new  AssertionFailedToken(token.substring(1));  tokens.add(stopAtNonOption);	  AssertionFailedToken    stopAtNonOption    =    stopAtNonOption;    tokens.add(token.substring(1));    	non-compiled	[CE]  <identifier>  expected	42	None	replace
30	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  ember    tokens.add(   "-   "    +    ch);    	non-compiled	[CE]  <identifier>  expected	55	None	replace
31	[BUG]  [BUGGY]  While(stopAtNonOption  &&  token.length()  ==  1)  {  tokens.add(token.substring(1));  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {      [BUGGY]  While(stopAtNonOption  &&  token.length()  ==  1)  {  tokens.add(token.substring(1));  }  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	While(stopAtNonOption  &&  token.length()  ==  1)  {  tokens.add(token.substring(1));  }	  While(stopAtNonOption    &&    token.length()    >    1)    {    tokens.add(token.substring(1));    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
32	[BUG]  [BUGGY]  While(stopAtNonOption  &&  token.length()  >  1)  {  tokens.add(token.substring(0,  token.length()  -  1));  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      {      [BUGGY]  While(stopAtNonOption  &&  token.length()  >  1)  {  tokens.add(token.substring(0,  token.length()  -  1));  }  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	While(stopAtNonOption  &&  token.length()  >  1)  {  tokens.add(token.substring(0,  token.length()  -  1));  }	  While(stopAtNonOption    &&    token.length()    >    1)    {    tokens.add(token.substring(1));    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
33	[BUG]  [BUGGY]  AssertionFailedToken(token,  eatTheRest)  {  tokens.add(token.substring(1));  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      [BUGGY]  AssertionFailedToken(token,  eatTheRest)  {  tokens.add(token.substring(1));  }  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	AssertionFailedToken(token,  eatTheRest)  {  tokens.add(token.substring(1));  }	  AssertionFailedToken(token,    stopAtNonOption)    {    tokens.add(token.substring(1));    }    	non-compiled	[CE]  <identifier>  expected	60	None	replace
34	[BUG]  [BUGGY]  AssertionFailedToken(token,  stopAtNonOption)  {  tokens.add(token.substring(0,  stopAtNonOption));  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      [BUGGY]  AssertionFailedToken(token,  stopAtNonOption)  {  tokens.add(token.substring(0,  stopAtNonOption));  }  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	AssertionFailedToken(token,  stopAtNonOption)  {  tokens.add(token.substring(0,  stopAtNonOption));  }	  AssertionFailedToken(token,    stopAtNonOption)    {    tokens.add(token.substring(1));    }    	non-compiled	[CE]  <identifier>  expected	60	None	replace
35	[BUG]  [BUGGY]  AssertionFailedToken(token,  currentOption)  {  tokens.add(token.substring(1));  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      [BUGGY]  AssertionFailedToken(token,  currentOption)  {  tokens.add(token.substring(1));  }  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	AssertionFailedToken(token,  currentOption)  {  tokens.add(token.substring(1));  }	  AssertionFailedToken(token,    stopAtNonOption)    {    tokens.add(token.substring(1));    }    	non-compiled	[CE]  <identifier>  expected	60	None	replace
36	[BUG]  [BUGGY]  AssertionFailedToken(token,  stopAtNonOption)  {  tokens.add( "- "  +  token.substring(1));  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {      [BUGGY]  AssertionFailedToken(token,  stopAtNonOption)  {  tokens.add( "- "  +  token.substring(1));  }  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	AssertionFailedToken(token,  stopAtNonOption)  {  tokens.add( "- "  +  token.substring(1));  }	  AssertionFailedToken(token,    stopAtNonOption)    {    tokens.add(token.substring(1));    }    	non-compiled	[CE]  <identifier>  expected	60	None	replace
37	[BUG]  [BUGGY]  tokens.add( "- "  +  Token.name(token));  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {      [BUGGY]  tokens.add( "- "  +  Token.name(token));  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	tokens.add( "- "  +  Token.name(token));	  tokens.add(   "-   "    +    Token.name(ch));    	non-compiled	[CE]  <identifier>  expected	63	None	replace
38	[BUG]  [BUGGY]  tokens.add( "- "  +  Token.name(token.charAt(0)));  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      [BUGGY]  tokens.add( "- "  +  Token.name(token.charAt(0)));  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	tokens.add( "- "  +  Token.name(token.charAt(0)));	  tokens.add(   "-   "    +    Token.name(ch));    	non-compiled	[CE]  <identifier>  expected	63	None	replace
39	[BUG]  [BUGGY]  AssertionFailedToken(stopAtNonOption)  {  tokens.add(token.substring(1));  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      [BUGGY]  AssertionFailedToken(stopAtNonOption)  {  tokens.add(token.substring(1));  }  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	AssertionFailedToken(stopAtNonOption)  {  tokens.add(token.substring(1));  }	  While(stopAtNonOption)    {    tokens.add(token.substring(1));    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
40	[BUG]  [BUGGY]  While(stopAtNonOption)  {  tokens.add( "- "  +  token.substring(1));  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      [BUGGY]  While(stopAtNonOption)  {  tokens.add( "- "  +  token.substring(1));  }  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	While(stopAtNonOption)  {  tokens.add( "- "  +  token.substring(1));  }	  While(stopAtNonOption)    {    tokens.add(token.substring(1));    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
41	[BUG]  [BUGGY]  AssertionFailedToken(stopAtNonOption)  {  tokens.add(token.substring(2));  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {      [BUGGY]  AssertionFailedToken(stopAtNonOption)  {  tokens.add(token.substring(2));  }  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	AssertionFailedToken(stopAtNonOption)  {  tokens.add(token.substring(2));  }	  While(stopAtNonOption)    {    tokens.add(token.substring(1));    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
42	[BUG]  [BUGGY]  AssertionFailedToken  stopAtNonOption  =  stopAtNonOption?  tokens.substring(0,  startAtNonOption):  token;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      [BUGGY]  AssertionFailedToken  stopAtNonOption  =  stopAtNonOption?  tokens.substring(0,  startAtNonOption):  token;  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	AssertionFailedToken  stopAtNonOption  =  stopAtNonOption?  tokens.substring(0,  startAtNonOption):  token;	  AssertionFailedToken    stopAtNonOption    =    stopAtNonOption?    tokens.substring(0,    stopAtNonOption):    token;    	non-compiled	[CE]  <identifier>  expected	43	None	replace
43	[BUG]  [BUGGY]  AssertionFailedToken  stopAtNonOption  =  stopAtNonOption?  tokens.substring(0,  endAtNonOption):  token;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {      [BUGGY]  AssertionFailedToken  stopAtNonOption  =  stopAtNonOption?  tokens.substring(0,  endAtNonOption):  token;  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	AssertionFailedToken  stopAtNonOption  =  stopAtNonOption?  tokens.substring(0,  endAtNonOption):  token;	  AssertionFailedToken    stopAtNonOption    =    stopAtNonOption?    tokens.substring(0,    stopAtNonOption):    token;    	non-compiled	[CE]  <identifier>  expected	43	None	replace
44	[BUG]  [BUGGY]  For(int  i  =  1;  i  <  tokens.length();  i++)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      [BUGGY]  For(int  i  =  1;  i  <  tokens.length();  i++)  {  [BUGGY]      {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	For(int  i  =  1;  i  <  tokens.length();  i++)  {	  For(int    i    =    0;    i    <    tokens.length();    i++)    {    	non-compiled	[CE]  <identifier>  expected	37	None	replace
45	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  tokens.length()  -  1;  i++)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      [BUGGY]  For(int  i  =  0;  i  <  tokens.length()  -  1;  i++)  {  [BUGGY]      {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	For(int  i  =  0;  i  <  tokens.length()  -  1;  i++)  {	  For(int    i    =    0;    i    <    tokens.length();    i++)    {    	non-compiled	[CE]  <identifier>  expected	37	None	replace
46	[BUG]  [BUGGY]  options.add( "- "  +  token);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      [BUGGY]  options.add( "- "  +  token);  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	options.add( "- "  +  token);	  options.add(   "-   "    +    ch);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
47	[BUG]  [BUGGY]  TokenBuffer  token  =  new  TokenBuffer(Token.EMPTY);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      [BUGGY]  TokenBuffer  token  =  new  TokenBuffer(Token.EMPTY);  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	TokenBuffer  token  =  new  TokenBuffer(Token.EMPTY);	  TokenBuffer    token    =    new    TokenBuffer(Token.length());    	non-compiled	[CE]  <identifier>  expected	16	None	replace
48	[BUG]  [BUGGY]  acceptSideEffects(stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {      [BUGGY]  acceptSideEffects(stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	acceptSideEffects(stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }	  allowSideEffects(stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	67	None	replace
49	[BUG]  [BUGGY]  allowSideEffects(stopAtNonOption,  tokens)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      {      [BUGGY]  allowSideEffects(stopAtNonOption,  tokens)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	allowSideEffects(stopAtNonOption,  tokens)  {  throw  new  IllegalArgumentException( " ");  }	  allowSideEffects(stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	67	None	replace
50	[BUG]  [BUGGY]  tokens.add( "- "  +  ch,  currentOption);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {      [BUGGY]  tokens.add( "- "  +  ch,  currentOption);  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	tokens.add( "- "  +  ch,  currentOption);	  tokens.add(   "-   "    +    ch,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
51	[BUG]  [BUGGY]  AssertionFailedToken(stopAtNonOption)  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      [BUGGY]  AssertionFailedToken(stopAtNonOption)  {  tokens.add(token);  }  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	AssertionFailedToken(stopAtNonOption)  {  tokens.add(token);  }	  While(stopAtNonOption)    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
52	[BUG]  [BUGGY]  AssertionFailedToken(stopAtNonOption)  {  tokens.add( "- "  +  token);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      [BUGGY]  AssertionFailedToken(stopAtNonOption)  {  tokens.add( "- "  +  token);  }  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	AssertionFailedToken(stopAtNonOption)  {  tokens.add( "- "  +  token);  }	  While(stopAtNonOption)    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
53	[BUG]  [BUGGY]  While(stopAtNonOption  &&  token.length()  ==  0)  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      [BUGGY]  While(stopAtNonOption  &&  token.length()  ==  0)  {  tokens.add(token);  }  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	While(stopAtNonOption  &&  token.length()  ==  0)  {  tokens.add(token);  }	  While(stopAtNonOption    &&    token.length()    >    0)    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
54	[BUG]  [BUGGY]  AssertionFailedToken(stopAtNonOption,  tokens.length()  >  0)  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {      [BUGGY]  AssertionFailedToken(stopAtNonOption,  tokens.length()  >  0)  {  tokens.add(token);  }  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	AssertionFailedToken(stopAtNonOption,  tokens.length()  >  0)  {  tokens.add(token);  }	  While(stopAtNonOption    &&    token.length()    >    0)    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
55	[BUG]  [BUGGY]  While(stopAtNonOption  &&  token.length()  >  0)  {  tokens.add( "- "  +  token);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      {      [BUGGY]  While(stopAtNonOption  &&  token.length()  >  0)  {  tokens.add( "- "  +  token);  }  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	While(stopAtNonOption  &&  token.length()  >  0)  {  tokens.add( "- "  +  token);  }	  While(stopAtNonOption    &&    token.length()    >    0)    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
56	[BUG]  [BUGGY]  Token  token  =  new  Token(token.substring(0,  2));  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      [BUGGY]  Token  token  =  new  Token(token.substring(0,  2));  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	Token  token  =  new  Token(token.substring(0,  2));	  Token    token    =    new    Token(token.substring(1));    	non-compiled	[CE]  <identifier>  expected	19	None	replace
57	[BUG]  [BUGGY]  Token  token  =  new  Token(token.substring(0,  1));  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {      [BUGGY]  Token  token  =  new  Token(token.substring(0,  1));  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	Token  token  =  new  Token(token.substring(0,  1));	  Token    token    =    new    Token(token.substring(1));    	non-compiled	[CE]  <identifier>  expected	19	None	replace
58	[BUG]  [BUGGY]  Token  token  =  new  Token(token.substring(2));  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      {      [BUGGY]  Token  token  =  new  Token(token.substring(2));  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	Token  token  =  new  Token(token.substring(2));	  Token    token    =    new    Token(token.substring(1));    	non-compiled	[CE]  <identifier>  expected	19	None	replace
59	[BUG]  [BUGGY]  Token  token  =  new  Token(token.substring(1),  token.length());  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      {      [BUGGY]  Token  token  =  new  Token(token.substring(1),  token.length());  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	Token  token  =  new  Token(token.substring(1),  token.length());	  Token    token    =    new    Token(token.substring(1));    	non-compiled	[CE]  <identifier>  expected	19	None	replace
60	[BUG]  [BUGGY]  tokens.add( "- "  +  i  +  1);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {      [BUGGY]  tokens.add( "- "  +  i  +  1);  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	tokens.add( "- "  +  i  +  1);	  tokens.add(   "-   "    +    i);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
61	[BUG]  [BUGGY]  tokens.add( "-n "  +  i);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      [BUGGY]  tokens.add( "-n "  +  i);  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	tokens.add( "-n "  +  i);	  tokens.add(   "-   "    +    i);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
62	[BUG]  [BUGGY]  AssertionFailedToken(stopAtNonOption)  {  tokens.add(token.substring(i,  stopAtNonOption));  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      [BUGGY]  AssertionFailedToken(stopAtNonOption)  {  tokens.add(token.substring(i,  stopAtNonOption));  }  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	AssertionFailedToken(stopAtNonOption)  {  tokens.add(token.substring(i,  stopAtNonOption));  }	  While(stopAtNonOption)    {    tokens.add(token.substring(i,    stopAtNonOption));    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
63	[BUG]  [BUGGY]  While(stopAtNonOption  &&  currentOption!=  null)  {  tokens.add(token.substring(i,  stopAtNonOption));  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      [BUGGY]  While(stopAtNonOption  &&  currentOption!=  null)  {  tokens.add(token.substring(i,  stopAtNonOption));  }  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	While(stopAtNonOption  &&  currentOption!=  null)  {  tokens.add(token.substring(i,  stopAtNonOption));  }	  While(stopAtNonOption)    {    tokens.add(token.substring(i,    stopAtNonOption));    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
64	[BUG]  [BUGGY]  While(stopAtNonOption)  {  tokens.add(token.substring(0,  stopAtNonOption));  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {      [BUGGY]  While(stopAtNonOption)  {  tokens.add(token.substring(0,  stopAtNonOption));  }  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	While(stopAtNonOption)  {  tokens.add(token.substring(0,  stopAtNonOption));  }	  While(stopAtNonOption)    {    tokens.add(token.substring(i,    stopAtNonOption));    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
65	[BUG]  [BUGGY]  AssertionFailedToken(stopAtNonOption)  {  tokens.add(token.substring(0,  stopAtNonOption));  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      {      [BUGGY]  AssertionFailedToken(stopAtNonOption)  {  tokens.add(token.substring(0,  stopAtNonOption));  }  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	AssertionFailedToken(stopAtNonOption)  {  tokens.add(token.substring(0,  stopAtNonOption));  }	  While(stopAtNonOption)    {    tokens.add(token.substring(i,    stopAtNonOption));    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
66	[BUG]  [BUGGY]  tors.add( "- "  +  token);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      [BUGGY]  tors.add( "- "  +  token);  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	tors.add( "- "  +  token);	  tors.add(   "-   "    +    ch);    	non-compiled	[CE]  <identifier>  expected	54	None	replace
67	[BUG]  [BUGGY]  tors.add( "- "  +  i);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      [BUGGY]  tors.add( "- "  +  i);  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	tors.add( "- "  +  i);	  tors.add(   "-   "    +    ch);    	non-compiled	[CE]  <identifier>  expected	54	None	replace
68	[BUG]  [BUGGY]  AssertionFailedToken(stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      [BUGGY]  AssertionFailedToken(stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	AssertionFailedToken(stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }	  While(!stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
69	[BUG]  [BUGGY]  While(!stopAtNonOption  &&  tokens.contains(token.charAt(0)))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {      [BUGGY]  While(!stopAtNonOption  &&  tokens.contains(token.charAt(0)))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	While(!stopAtNonOption  &&  tokens.contains(token.charAt(0)))  {  throw  new  IllegalArgumentException( " ");  }	  While(!stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
70	[BUG]  [BUGGY]  options.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      [BUGGY]  options.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	options.add( "- "  +  ch);  currentOption  =  options.getOption(ch);	  if(stopAtNonOption)    {    tokens.add(   "-   "    +    ch);    currentOption    =    options.getOption(ch);    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
71	[BUG]  [BUGGY]  While(!stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      [BUGGY]  While(!stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  }  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	While(!stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  }	  if(stopAtNonOption)    {    tokens.add(   "-   "    +    ch);    currentOption    =    options.getOption(ch);    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
72	[BUG]  [BUGGY]  While(!stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {      [BUGGY]  While(!stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	While(!stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);	  if(stopAtNonOption)    {    tokens.add(   "-   "    +    ch);    currentOption    =    options.getOption(ch);    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
73	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  tokens.length();  i++)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      [BUGGY]  for(int  i  =  1;  i  <  tokens.length();  i++)  {  [BUGGY]      {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	for(int  i  =  1;  i  <  tokens.length();  i++)  {	  for(int    i    =    0;    i    <    tokens.length();    i++)    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
74	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  tokens.length()  -  1;  i++)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      [BUGGY]  for(int  i  =  0;  i  <  tokens.length()  -  1;  i++)  {  [BUGGY]      {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	for(int  i  =  0;  i  <  tokens.length()  -  1;  i++)  {	  for(int    i    =    0;    i    <    tokens.length();    i++)    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
75	[BUG]  [BUGGY]  Token  token  =  new  Token(token.charAt(0),  token.length()  -  1);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      [BUGGY]  Token  token  =  new  Token(token.charAt(0),  token.length()  -  1);  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	Token  token  =  new  Token(token.charAt(0),  token.length()  -  1);	  Token    token    =    new    Token(token.charAt(0),    token.length());    	non-compiled	[CE]  <identifier>  expected	17	None	replace
76	[BUG]  [BUGGY]  Token  token  =  new  Token(token.charAt(0),  token.length()  +  1);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      [BUGGY]  Token  token  =  new  Token(token.charAt(0),  token.length()  +  1);  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	Token  token  =  new  Token(token.charAt(0),  token.length()  +  1);	  Token    token    =    new    Token(token.charAt(0),    token.length());    	non-compiled	[CE]  <identifier>  expected	17	None	replace
77	[BUG]  [BUGGY]  AssertionFailedToken  token  =  new  AssertionFailedToken(token.charAt(0),  token.length());  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      [BUGGY]  AssertionFailedToken  token  =  new  AssertionFailedToken(token.charAt(0),  token.length());  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	AssertionFailedToken  token  =  new  AssertionFailedToken(token.charAt(0),  token.length());	  Token    token    =    new    Token(token.charAt(0),    token.length());    	non-compiled	[CE]  <identifier>  expected	17	None	replace
78	[BUG]  [BUGGY]  if(stopAtNonOption)  {  aughtExceptionHandler.handleMissingName(token,  stopAtNonOption);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      [BUGGY]  if(stopAtNonOption)  {  aughtExceptionHandler.handleMissingName(token,  stopAtNonOption);  }  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	if(stopAtNonOption)  {  aughtExceptionHandler.handleMissingName(token,  stopAtNonOption);  }	  aughtExceptionHandler.handleMissingName(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
79	[BUG]  [BUGGY]  if(stopAtNonOption)  {  aughtExceptionHandler.handleMissingName(token,  stopAtNonOption);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      [BUGGY]  if(stopAtNonOption)  {  aughtExceptionHandler.handleMissingName(token,  stopAtNonOption);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	if(stopAtNonOption)  {  aughtExceptionHandler.handleMissingName(token,  stopAtNonOption);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  aughtExceptionHandler.handleMissingName(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
80	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(token,  currentOption);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      [BUGGY]  aughtExceptionHandler.handleMissingName(token,  currentOption);  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	aughtExceptionHandler.handleMissingName(token,  currentOption);	  aughtExceptionHandler.handleMissingName(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
81	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(token,  stopAtNonOption,  options);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {      [BUGGY]  aughtExceptionHandler.handleMissingName(token,  stopAtNonOption,  options);  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	aughtExceptionHandler.handleMissingName(token,  stopAtNonOption,  options);	  aughtExceptionHandler.handleMissingName(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
82	[BUG]  [BUGGY]  AssertionFailedToken  stopAtNonOption  =  token;  tokens.add(token.substring(i  +  1));  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      [BUGGY]  AssertionFailedToken  stopAtNonOption  =  token;  tokens.add(token.substring(i  +  1));  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	AssertionFailedToken  stopAtNonOption  =  token;  tokens.add(token.substring(i  +  1));	  AssertionFailedToken    stopAtNonOption    =    stopAtNonOption;    tokens.add(token.substring(i    +    1));    	non-compiled	[CE]  <identifier>  expected	49	None	replace
83	[BUG]  [BUGGY]  AssertionFailedToken  stopAtNonOption  =  new  AssertionFailedToken(token.substring(i  +  1));  tokens.add(token.substring(i  +  1));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      [BUGGY]  AssertionFailedToken  stopAtNonOption  =  new  AssertionFailedToken(token.substring(i  +  1));  tokens.add(token.substring(i  +  1));  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	AssertionFailedToken  stopAtNonOption  =  new  AssertionFailedToken(token.substring(i  +  1));  tokens.add(token.substring(i  +  1));	  AssertionFailedToken    stopAtNonOption    =    stopAtNonOption;    tokens.add(token.substring(i    +    1));    	non-compiled	[CE]  <identifier>  expected	49	None	replace
84	[BUG]  [BUGGY]  AssertionFailedToken  stopAtNonOption  =  new  AssertionFailedToken(token.substring(i  +  1));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      [BUGGY]  AssertionFailedToken  stopAtNonOption  =  new  AssertionFailedToken(token.substring(i  +  1));  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	AssertionFailedToken  stopAtNonOption  =  new  AssertionFailedToken(token.substring(i  +  1));	  AssertionFailedToken    stopAtNonOption    =    stopAtNonOption;    tokens.add(token.substring(i    +    1));    	non-compiled	[CE]  <identifier>  expected	49	None	replace
85	[BUG]  [BUGGY]  AssertionFailedToken  stopAtNonOption  =  token;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      [BUGGY]  AssertionFailedToken  stopAtNonOption  =  token;  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	AssertionFailedToken  stopAtNonOption  =  token;	  AssertionFailedToken    stopAtNonOption    =    stopAtNonOption;    tokens.add(token.substring(i    +    1));    	non-compiled	[CE]  <identifier>  expected	49	None	replace
86	[BUG]  [BUGGY]  AssertionFailedToken(stopAtNonOption)  {  tokens.add( "- ");  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      [BUGGY]  AssertionFailedToken(stopAtNonOption)  {  tokens.add( "- ");  }  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	AssertionFailedToken(stopAtNonOption)  {  tokens.add( "- ");  }	  While(stopAtNonOption)    {    tokens.add(   "-   ");    }    	non-compiled	[CE]  <identifier>  expected	40	None	replace
87	[BUG]  [BUGGY]  AssertionFailedToken(stopAtNonOption)  {  tokens.add( "- "  +  ch);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      [BUGGY]  AssertionFailedToken(stopAtNonOption)  {  tokens.add( "- "  +  ch);  }  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	AssertionFailedToken(stopAtNonOption)  {  tokens.add( "- "  +  ch);  }	  While(stopAtNonOption)    {    tokens.add(   "-   ");    }    	non-compiled	[CE]  <identifier>  expected	40	None	replace
88	[BUG]  [BUGGY]  Joiner.on( "- ").join(token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      [BUGGY]  Joiner.on( "- ").join(token,  stopAtNonOption);  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	Joiner.on( "- ").join(token,  stopAtNonOption);	  Joiner.on(   "-   ").join(token);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
89	[BUG]  [BUGGY]  Joiner.on( "- ").join(token.charAt(0));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      [BUGGY]  Joiner.on( "- ").join(token.charAt(0));  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	Joiner.on( "- ").join(token.charAt(0));	  Joiner.on(   "-   ").join(token);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
90	[BUG]  [BUGGY]  Joiner.on( "- ").addToken(token);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      [BUGGY]  Joiner.on( "- ").addToken(token);  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	Joiner.on( "- ").addToken(token);	  Joiner.on(   "-   ").join(token);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
91	[BUG]  [BUGGY]  While(stopAtNonOption  &&  token.charAt(0)!=  '-')  {  tokens.add(token.substring(i  +  1));  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      [BUGGY]  While(stopAtNonOption  &&  token.charAt(0)!=  '-')  {  tokens.add(token.substring(i  +  1));  }  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	While(stopAtNonOption  &&  token.charAt(0)!=  '-')  {  tokens.add(token.substring(i  +  1));  }	  While(stopAtNonOption)    {    tokens.add(token.substring(i    +    1));    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
92	[BUG]  [BUGGY]  While(stopAtNonOption)  {  tokens.add( "- "  +  token.substring(i  +  1));  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      [BUGGY]  While(stopAtNonOption)  {  tokens.add( "- "  +  token.substring(i  +  1));  }  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	While(stopAtNonOption)  {  tokens.add( "- "  +  token.substring(i  +  1));  }	  While(stopAtNonOption)    {    tokens.add(token.substring(i    +    1));    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
93	[BUG]  [BUGGY]  While(stopAtNonOption  &&  currentOption!=  null)  {  tokens.add( "- "  +  ch);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      {      [BUGGY]  While(stopAtNonOption  &&  currentOption!=  null)  {  tokens.add( "- "  +  ch);  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	While(stopAtNonOption  &&  currentOption!=  null)  {  tokens.add( "- "  +  ch);	  While(stopAtNonOption)    {    tokens.add(   "-   "    +    ch);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
94	[BUG]  [BUGGY]  For(int  i  =  1;  i  <  tokens.size();  i++)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {      [BUGGY]  For(int  i  =  1;  i  <  tokens.size();  i++)  {  [BUGGY]      {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	For(int  i  =  1;  i  <  tokens.size();  i++)  {	  For(int    i    =    0;    i    <    tokens.size();    i++)    {    	non-compiled	[CE]  <identifier>  expected	51	None	replace
95	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  tokens.size()  +  1;  i++)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      [BUGGY]  For(int  i  =  0;  i  <  tokens.size()  +  1;  i++)  {  [BUGGY]      {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	For(int  i  =  0;  i  <  tokens.size()  +  1;  i++)  {	  For(int    i    =    0;    i    <    tokens.size();    i++)    {    	non-compiled	[CE]  <identifier>  expected	51	None	replace
96	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  options.size();  i++)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      [BUGGY]  For(int  i  =  0;  i  <  options.size();  i++)  {  [BUGGY]      {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	For(int  i  =  0;  i  <  options.size();  i++)  {	  For(int    i    =    0;    i    <    tokens.size();    i++)    {    	non-compiled	[CE]  <identifier>  expected	51	None	replace
97	[BUG]  [BUGGY]  AssertionFailedToken(stopAtNonOption)  {  tokens.add( "- "  +  ch);  continue;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {      [BUGGY]  AssertionFailedToken(stopAtNonOption)  {  tokens.add( "- "  +  ch);  continue;  }  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	AssertionFailedToken(stopAtNonOption)  {  tokens.add( "- "  +  ch);  continue;  }	  While(stopAtNonOption)    {    tokens.add(   "-   "    +    ch);    continue;    }    	non-compiled	[CE]  <identifier>  expected	28	None	replace
98	[BUG]  [BUGGY]  While(stopAtNonOption  &&  currentOption!=  null)  {  tokens.add( "- "  +  ch);  continue;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      {      [BUGGY]  While(stopAtNonOption  &&  currentOption!=  null)  {  tokens.add( "- "  +  ch);  continue;  }  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	While(stopAtNonOption  &&  currentOption!=  null)  {  tokens.add( "- "  +  ch);  continue;  }	  While(stopAtNonOption)    {    tokens.add(   "-   "    +    ch);    continue;    }    	non-compiled	[CE]  <identifier>  expected	28	None	replace
99	[BUG]  [BUGGY]  AssertionFailedToken  stopAtNonOption  =  eatTheRest;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      [BUGGY]  AssertionFailedToken  stopAtNonOption  =  eatTheRest;  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	AssertionFailedToken  stopAtNonOption  =  eatTheRest;	  AssertionFailedToken    stopAtNonOption    =    stopAtNonOption;    	non-compiled	[CE]  <identifier>  expected	41	None	replace
100	[BUG]  [BUGGY]  AssertionFailedToken  stopAtNonOption  =  new  AssertionFailedToken(token);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      [BUGGY]  AssertionFailedToken  stopAtNonOption  =  new  AssertionFailedToken(token);  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	AssertionFailedToken  stopAtNonOption  =  new  AssertionFailedToken(token);	  AssertionFailedToken    stopAtNonOption    =    stopAtNonOption;    	non-compiled	[CE]  <identifier>  expected	41	None	replace
101	[BUG]  [BUGGY]  AssertionFailedToken  stopAtNonOption  =  new  AssertionFailedToken(token.charAt(0));  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      [BUGGY]  AssertionFailedToken  stopAtNonOption  =  new  AssertionFailedToken(token.charAt(0));  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	AssertionFailedToken  stopAtNonOption  =  new  AssertionFailedToken(token.charAt(0));	  AssertionFailedToken    stopAtNonOption    =    stopAtNonOption;    	non-compiled	[CE]  <identifier>  expected	41	None	replace
102	[BUG]  [BUGGY]  tokens.add( "- "  +  i);  continue;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      [BUGGY]  tokens.add( "- "  +  i);  continue;  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	tokens.add( "- "  +  i);  continue;	  tokens.add(   "-   "    +    ch);    continue;    	non-compiled	[CE]  <identifier>  expected	27	None	replace
103	[BUG]  [BUGGY]  AssertionFailedToken(token,  eatTheRest)  {  tokens.add(token.substring(2));  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      [BUGGY]  AssertionFailedToken(token,  eatTheRest)  {  tokens.add(token.substring(2));  }  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	AssertionFailedToken(token,  eatTheRest)  {  tokens.add(token.substring(2));  }	  AssertionFailedToken(token,    stopAtNonOption)    {    tokens.add(token.substring(2));    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
104	[BUG]  [BUGGY]  AssertionFailedToken(token,  currentOption)  {  tokens.add(token.substring(2));  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      [BUGGY]  AssertionFailedToken(token,  currentOption)  {  tokens.add(token.substring(2));  }  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	AssertionFailedToken(token,  currentOption)  {  tokens.add(token.substring(2));  }	  AssertionFailedToken(token,    stopAtNonOption)    {    tokens.add(token.substring(2));    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
105	[BUG]  [BUGGY]  ters.add(token.substring(i  +  1),  token.length());  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      [BUGGY]  ters.add(token.substring(i  +  1),  token.length());  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	ters.add(token.substring(i  +  1),  token.length());	  ters.add(token.substring(i    +    1));    	non-compiled	[CE]  <identifier>  expected	5	None	replace
106	[BUG]  [BUGGY]  ters.add(token.substring(i,  token.length()  +  1));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      [BUGGY]  ters.add(token.substring(i,  token.length()  +  1));  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	ters.add(token.substring(i,  token.length()  +  1));	  ters.add(token.substring(i    +    1));    	non-compiled	[CE]  <identifier>  expected	5	None	replace
107	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  tokens.size();  i++)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {      [BUGGY]  for(int  i  =  1;  i  <  tokens.size();  i++)  {  [BUGGY]      {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	for(int  i  =  1;  i  <  tokens.size();  i++)  {	  for(int    i    =    0;    i    <    tokens.size();    i++)    {    	non-compiled	[CE]  <identifier>  expected	56	None	replace
108	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  tokens.size()  +  1;  i++)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      [BUGGY]  for(int  i  =  0;  i  <  tokens.size()  +  1;  i++)  {  [BUGGY]      {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	for(int  i  =  0;  i  <  tokens.size()  +  1;  i++)  {	  for(int    i    =    0;    i    <    tokens.size();    i++)    {    	non-compiled	[CE]  <identifier>  expected	56	None	replace
109	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  tokens.size();  i  +=  2)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      [BUGGY]  for(int  i  =  0;  i  <  tokens.size();  i  +=  2)  {  [BUGGY]      {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	for(int  i  =  0;  i  <  tokens.size();  i  +=  2)  {	  for(int    i    =    0;    i    <    tokens.size();    i++)    {    	non-compiled	[CE]  <identifier>  expected	56	None	replace
110	[BUG]  [BUGGY]  While(stopAtNonOption  &&  tokens.size()  >  1)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      [BUGGY]  While(stopAtNonOption  &&  tokens.size()  >  1)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	While(stopAtNonOption  &&  tokens.size()  >  1)  {  throw  new  IllegalArgumentException( " ");  }	  While(stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
111	[BUG]  [BUGGY]  While(stopAtNonOption  &&  token.length()  >  1)  {  tokens.add( "- "  +  token);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      [BUGGY]  While(stopAtNonOption  &&  token.length()  >  1)  {  tokens.add( "- "  +  token);  }  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	While(stopAtNonOption  &&  token.length()  >  1)  {  tokens.add( "- "  +  token);  }	  While(stopAtNonOption)    {    tokens.add(   "-   "    +    token);    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
112	[BUG]  [BUGGY]  tokens.add( "- ");  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {      [BUGGY]  tokens.add( "- ");  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	tokens.add( "- ");	  While(stopAtNonOption)    {    tokens.add(   "-   ");    	non-compiled	[CE]  <identifier>  expected	32	None	replace
113	[BUG]  [BUGGY]  While(stopAtNonOption  &&  currentOption!=  null)  {  tokens.add( "- ");  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      {      [BUGGY]  While(stopAtNonOption  &&  currentOption!=  null)  {  tokens.add( "- ");  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	While(stopAtNonOption  &&  currentOption!=  null)  {  tokens.add( "- ");	  While(stopAtNonOption)    {    tokens.add(   "-   ");    	non-compiled	[CE]  <identifier>  expected	32	None	replace
114	[BUG]  [BUGGY]  Option  option  =  options.getOption(ch,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      [BUGGY]  Option  option  =  options.getOption(ch,  stopAtNonOption);  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	Option  option  =  options.getOption(ch,  stopAtNonOption);	  Option    option    =    options.getOption(ch);    	non-compiled	[CE]  <identifier>  expected	45	None	replace
115	[BUG]  [BUGGY]  Option  option  =  options.getOption(ch  +  1);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      [BUGGY]  Option  option  =  options.getOption(ch  +  1);  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	Option  option  =  options.getOption(ch  +  1);	  Option    option    =    options.getOption(ch);    	non-compiled	[CE]  <identifier>  expected	45	None	replace
116	[BUG]  [BUGGY]  Option  option  =  options.getOption(ch,  token);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      [BUGGY]  Option  option  =  options.getOption(ch,  token);  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	Option  option  =  options.getOption(ch,  token);	  Option    option    =    options.getOption(ch);    	non-compiled	[CE]  <identifier>  expected	45	None	replace
117	[BUG]  [BUGGY]  acceptSideEffects( "stopAtNonOption "))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      [BUGGY]  acceptSideEffects( "stopAtNonOption "))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	acceptSideEffects( "stopAtNonOption "))  {  throw  new  IllegalArgumentException( " ");  }	  allowSideEffects(   "stopAtNonOption   "))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	66	None	replace
118	[BUG]  [BUGGY]  ||  stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {      [BUGGY]  ||  stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	||  stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }	  allowSideEffects(   "stopAtNonOption   "))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	66	None	replace
119	[BUG]  [BUGGY]  if(stopAtNonOption)  {  aughtExceptionHandler.handleMoreGuaranteed();  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      [BUGGY]  if(stopAtNonOption)  {  aughtExceptionHandler.handleMoreGuaranteed();  }  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	if(stopAtNonOption)  {  aughtExceptionHandler.handleMoreGuaranteed();  }	  aughtExceptionHandler.handleMoreGuaranteed();    	non-compiled	[CE]  <identifier>  expected	52	None	replace
120	[BUG]  [BUGGY]  aughtExceptionHandler.handleMoreGuaranteed(token);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      [BUGGY]  aughtExceptionHandler.handleMoreGuaranteed(token);  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	aughtExceptionHandler.handleMoreGuaranteed(token);	  aughtExceptionHandler.handleMoreGuaranteed();    	non-compiled	[CE]  <identifier>  expected	52	None	replace
121	[BUG]  [BUGGY]  Token  token  =  new  Token(token.charAt(0),  currentOption);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      [BUGGY]  Token  token  =  new  Token(token.charAt(0),  currentOption);  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	Token  token  =  new  Token(token.charAt(0),  currentOption);	  Token    token    =    new    Token(token.charAt(0),    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	50	None	replace
122	[BUG]  [BUGGY]  Token  token  =  new  Token(token.charAt(0),  eatTheRest);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      [BUGGY]  Token  token  =  new  Token(token.charAt(0),  eatTheRest);  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	Token  token  =  new  Token(token.charAt(0),  eatTheRest);	  Token    token    =    new    Token(token.charAt(0),    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	50	None	replace
123	[BUG]  [BUGGY]  Token  token  =  new  Token(token.charAt(0),  0);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      [BUGGY]  Token  token  =  new  Token(token.charAt(0),  0);  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	Token  token  =  new  Token(token.charAt(0),  0);	  Token    token    =    new    Token(token.charAt(0),    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	50	None	replace
124	[BUG]  [BUGGY]  Token  token  =  new  Token(token.charAt(0),  endAtNonOption);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {      [BUGGY]  Token  token  =  new  Token(token.charAt(0),  endAtNonOption);  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	Token  token  =  new  Token(token.charAt(0),  endAtNonOption);	  Token    token    =    new    Token(token.charAt(0),    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	50	None	replace
125	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tries.add(token.substring(i  +  1));  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {      [BUGGY]  if(stopAtNonOption)  {  tries.add(token.substring(i  +  1));  }  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	if(stopAtNonOption)  {  tries.add(token.substring(i  +  1));  }	  tries.add(token.substring(i    +    1));    	non-compiled	[CE]  <identifier>  expected	57	None	replace
126	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  tries.add(token.substring(i  +  1));  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      [BUGGY]  if(!stopAtNonOption)  {  tries.add(token.substring(i  +  1));  }  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	if(!stopAtNonOption)  {  tries.add(token.substring(i  +  1));  }	  tries.add(token.substring(i    +    1));    	non-compiled	[CE]  <identifier>  expected	57	None	replace
127	[BUG]  [BUGGY]  if(stopAtNonOption)tries.add(token.substring(i  +  1));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      [BUGGY]  if(stopAtNonOption)tries.add(token.substring(i  +  1));  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	if(stopAtNonOption)tries.add(token.substring(i  +  1));	  tries.add(token.substring(i    +    1));    	non-compiled	[CE]  <identifier>  expected	57	None	replace
128	[BUG]  [BUGGY]  For(int  i  =  1;  i  <  token.length();  i++)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {      [BUGGY]  For(int  i  =  1;  i  <  token.length();  i++)  {  [BUGGY]      {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	For(int  i  =  1;  i  <  token.length();  i++)  {	  For(int    i    =    0;    i    <    token.length()    -    1;    i++)    {    	non-compiled	[CE]  <identifier>  expected	36	None	replace
129	[BUG]  [BUGGY]  AssertionFailedToken(token,  eatTheRest);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      [BUGGY]  AssertionFailedToken(token,  eatTheRest);  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	AssertionFailedToken(token,  eatTheRest);	  AssertionFailedToken(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
130	[BUG]  [BUGGY]  AssertionFailedToken(token,  currentOption);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {      [BUGGY]  AssertionFailedToken(token,  currentOption);  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	AssertionFailedToken(token,  currentOption);	  AssertionFailedToken(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
131	[BUG]  [BUGGY]  AssertionFailedToken(token,  stopAtNonOption,  eatTheRest);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      {      [BUGGY]  AssertionFailedToken(token,  stopAtNonOption,  eatTheRest);  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	AssertionFailedToken(token,  stopAtNonOption,  eatTheRest);	  AssertionFailedToken(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
132	[BUG]  [BUGGY]  AssertionFailedToken(token,  stopAtNonOption,  tokens);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      {      [BUGGY]  AssertionFailedToken(token,  stopAtNonOption,  tokens);  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	AssertionFailedToken(token,  stopAtNonOption,  tokens);	  AssertionFailedToken(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
133	[BUG]  [BUGGY]  tokens.add( "- "  +  token);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      [BUGGY]  tokens.add( "- "  +  token);  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	tokens.add( "- "  +  token);	  tokens.add(token);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
134	[BUG]  [BUGGY]  tokens.add( ": "  +  token);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      [BUGGY]  tokens.add( ": "  +  token);  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	tokens.add( ": "  +  token);	  tokens.add(token);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
135	[BUG]  [BUGGY]  tokens.add(token.charAt(0));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      [BUGGY]  tokens.add(token.charAt(0));  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	tokens.add(token.charAt(0));	  tokens.add(token);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
136	[BUG]  [BUGGY]  While(stopAtNonOption)  {  tokens.add( "- "  +  token.substring(2));  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      [BUGGY]  While(stopAtNonOption)  {  tokens.add( "- "  +  token.substring(2));  }  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	While(stopAtNonOption)  {  tokens.add( "- "  +  token.substring(2));  }	  While(stopAtNonOption)    {    tokens.add(token.substring(2));    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
137	[BUG]  [BUGGY]  tokens.add(token.substring(0,  i  +  1));  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {      [BUGGY]  tokens.add(token.substring(0,  i  +  1));  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	tokens.add(token.substring(0,  i  +  1));	  tokens.add(token.substring(i    +    1));    	non-compiled	[CE]  <identifier>  expected	3	None	replace
138	[BUG]  [BUGGY]  tokens.add(token.substring(i  +  1),  token.length());  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      [BUGGY]  tokens.add(token.substring(i  +  1),  token.length());  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	tokens.add(token.substring(i  +  1),  token.length());	  tokens.add(token.substring(i    +    1));    	non-compiled	[CE]  <identifier>  expected	3	None	replace
139	[BUG]  [BUGGY]  tokens.add( "- "  +  token.substring(i  +  1));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      [BUGGY]  tokens.add( "- "  +  token.substring(i  +  1));  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	tokens.add( "- "  +  token.substring(i  +  1));	  tokens.add(token.substring(i    +    1));    	non-compiled	[CE]  <identifier>  expected	3	None	replace
140	[BUG]  [BUGGY]  options.add( "- "  +  token);  continue;  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      {      [BUGGY]  options.add( "- "  +  token);  continue;  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	options.add( "- "  +  token);  continue;	  options.add(   "-   "    +    ch);    continue;    	non-compiled	[CE]  <identifier>  expected	29	None	replace
141	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  options.size();  i++)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {      [BUGGY]  for(int  i  =  0;  i  <  options.size();  i++)  {  [BUGGY]      {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	for(int  i  =  0;  i  <  options.size();  i++)  {	  for(int    i    =    0;    i    <    tokens.size();    i++)    {    	non-compiled	[CE]  <identifier>  expected	56	None	replace
142	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.tokens.size();  i++)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      [BUGGY]  for(int  i  =  0;  i  <  this.tokens.size();  i++)  {  [BUGGY]      {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	for(int  i  =  0;  i  <  this.tokens.size();  i++)  {	  for(int    i    =    0;    i    <    tokens.size();    i++)    {    	non-compiled	[CE]  <identifier>  expected	56	None	replace
143	[BUG]  [BUGGY]  AssertionFailedToken  stopAtNonOption  =  null;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      [BUGGY]  AssertionFailedToken  stopAtNonOption  =  null;  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	AssertionFailedToken  stopAtNonOption  =  null;	  AssertionFailedToken    stopAtNonOption    =    stopAtNonOption;    	non-compiled	[CE]  <identifier>  expected	41	None	replace
144	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  tokens.length()  +  1;  i++)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      [BUGGY]  For(int  i  =  0;  i  <  tokens.length()  +  1;  i++)  {  [BUGGY]      {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	For(int  i  =  0;  i  <  tokens.length()  +  1;  i++)  {	  For(int    i    =    0;    i    <    tokens.length();    i++)    {    	non-compiled	[CE]  <identifier>  expected	37	None	replace
145	[BUG]  [BUGGY]  AssertionFailedToken(stopAtNonOption)  {  tokens.add( "- "  +  ch);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      {      [BUGGY]  AssertionFailedToken(stopAtNonOption)  {  tokens.add( "- "  +  ch);  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	AssertionFailedToken(stopAtNonOption)  {  tokens.add( "- "  +  ch);	  While(stopAtNonOption)    {    tokens.add(   "-   "    +    ch);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
146	[BUG]  [BUGGY]  while(stopAtNonOption  &&  currentOption!=  null)  {  tokens.add( "- "  +  ch);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      {      [BUGGY]  while(stopAtNonOption  &&  currentOption!=  null)  {  tokens.add( "- "  +  ch);  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	while(stopAtNonOption  &&  currentOption!=  null)  {  tokens.add( "- "  +  ch);	  While(stopAtNonOption)    {    tokens.add(   "-   "    +    ch);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
147	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  this.tokens.size();  i++)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {      [BUGGY]  For(int  i  =  0;  i  <  this.tokens.size();  i++)  {  [BUGGY]      {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	For(int  i  =  0;  i  <  this.tokens.size();  i++)  {	  For(int    i    =    0;    i    <    tokens.size();    i++)    {    	non-compiled	[CE]  <identifier>  expected	51	None	replace
148	[BUG]  [BUGGY]  AssertionFailedToken(token,  stopAtNonOption)  {  tokens.add( "- "  +  token.substring(2));  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      [BUGGY]  AssertionFailedToken(token,  stopAtNonOption)  {  tokens.add( "- "  +  token.substring(2));  }  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	AssertionFailedToken(token,  stopAtNonOption)  {  tokens.add( "- "  +  token.substring(2));  }	  AssertionFailedToken(token,    stopAtNonOption)    {    tokens.add(token.substring(2));    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
149	[BUG]  [BUGGY]  AssertionFailedToken  stopAtNonOption  =  eatTheRest;  tokens.add(token.substring(i  +  1));  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      [BUGGY]  AssertionFailedToken  stopAtNonOption  =  eatTheRest;  tokens.add(token.substring(i  +  1));  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	AssertionFailedToken  stopAtNonOption  =  eatTheRest;  tokens.add(token.substring(i  +  1));	  AssertionFailedToken    stopAtNonOption    =    stopAtNonOption;    tokens.add(token.substring(i    +    1));    	non-compiled	[CE]  <identifier>  expected	49	None	replace
150	[BUG]  [BUGGY]  AssertionFailedToken  stopAtNonOption  =  null;  tokens.add(token.substring(i  +  1));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      [BUGGY]  AssertionFailedToken  stopAtNonOption  =  null;  tokens.add(token.substring(i  +  1));  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	AssertionFailedToken  stopAtNonOption  =  null;  tokens.add(token.substring(i  +  1));	  AssertionFailedToken    stopAtNonOption    =    stopAtNonOption;    tokens.add(token.substring(i    +    1));    	non-compiled	[CE]  <identifier>  expected	49	None	replace
151	[BUG]  [BUGGY]  Integer  token  =  new  TokenBuffer(token.length());  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {      [BUGGY]  Integer  token  =  new  TokenBuffer(token.length());  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	Integer  token  =  new  TokenBuffer(token.length());	  TokenBuffer    token    =    new    TokenBuffer(token.length()    +    2);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
152	[BUG]  [BUGGY]  tokens.add( "-null "  +  ch);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      [BUGGY]  tokens.add( "-null "  +  ch);  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	tokens.add( "-null "  +  ch);	  tokens.add(   "-n   "    +    ch);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
153	[BUG]  [BUGGY]  tokens.add( "-none "  +  ch);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      [BUGGY]  tokens.add( "-none "  +  ch);  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	tokens.add( "-none "  +  ch);	  tokens.add(   "-n   "    +    ch);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
154	[BUG]  [BUGGY]  tokens.add( "-non-option "  +  ch);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      [BUGGY]  tokens.add( "-non-option "  +  ch);  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	tokens.add( "-non-option "  +  ch);	  tokens.add(   "-n   "    +    ch);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
155	[BUG]  [BUGGY]  if(stopAtNonOption)  {  aughtExceptionHandler.handleMoreGuaranteed();  }  else  {  tokens.add( "- "  +  ch);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      [BUGGY]  if(stopAtNonOption)  {  aughtExceptionHandler.handleMoreGuaranteed();  }  else  {  tokens.add( "- "  +  ch);  }  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	if(stopAtNonOption)  {  aughtExceptionHandler.handleMoreGuaranteed();  }  else  {  tokens.add( "- "  +  ch);  }	  aughtExceptionHandler.handleMoreGuaranteed();    	non-compiled	[CE]  <identifier>  expected	52	None	replace
156	[BUG]  [BUGGY]  AssertionFailedToken  stopAtNonOption  =  stopAtNonOption?  tokens.add(token.charAt(i  +  1)):  null;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {      [BUGGY]  AssertionFailedToken  stopAtNonOption  =  stopAtNonOption?  tokens.add(token.charAt(i  +  1)):  null;  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	AssertionFailedToken  stopAtNonOption  =  stopAtNonOption?  tokens.add(token.charAt(i  +  1)):  null;	  AssertionFailedToken    stopAtNonOption    =    stopAtNonOption?    tokens.add(token.substring(i    +    1))    :    null;    	non-compiled	[CE]  <identifier>  expected	48	None	replace
157	[BUG]  [BUGGY]  AssertionFailedToken  stopAtNonOption  =  stopAtNonOption?  tokens.add(token.substring(i  +  1),  token.length()):  null;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      [BUGGY]  AssertionFailedToken  stopAtNonOption  =  stopAtNonOption?  tokens.add(token.substring(i  +  1),  token.length()):  null;  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	AssertionFailedToken  stopAtNonOption  =  stopAtNonOption?  tokens.add(token.substring(i  +  1),  token.length()):  null;	  AssertionFailedToken    stopAtNonOption    =    stopAtNonOption?    tokens.add(token.substring(i    +    1))    :    null;    	non-compiled	[CE]  <identifier>  expected	48	None	replace
158	[BUG]  [BUGGY]  AssertionFailedToken  stopAtNonOption  =  null;  tokens.add(token.substring(1));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      [BUGGY]  AssertionFailedToken  stopAtNonOption  =  null;  tokens.add(token.substring(1));  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	AssertionFailedToken  stopAtNonOption  =  null;  tokens.add(token.substring(1));	  AssertionFailedToken    stopAtNonOption    =    stopAtNonOption;    tokens.add(token.substring(1));    	non-compiled	[CE]  <identifier>  expected	42	None	replace
159	[BUG]  [BUGGY]  AssertionFailedToken  stopAtNonOption  =  new  AssertionFailedToken(token.length()  -  1);  tokens.add(token.substring(1));  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      [BUGGY]  AssertionFailedToken  stopAtNonOption  =  new  AssertionFailedToken(token.length()  -  1);  tokens.add(token.substring(1));  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	AssertionFailedToken  stopAtNonOption  =  new  AssertionFailedToken(token.length()  -  1);  tokens.add(token.substring(1));	  AssertionFailedToken    stopAtNonOption    =    stopAtNonOption;    tokens.add(token.substring(1));    	non-compiled	[CE]  <identifier>  expected	42	None	replace
160	[BUG]  [BUGGY]  TokenBuffer  token  =  new  TokenBuffer(t.length());  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      [BUGGY]  TokenBuffer  token  =  new  TokenBuffer(t.length());  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	TokenBuffer  token  =  new  TokenBuffer(t.length());	  TokenBuffer    token    =    new    TokenBuffer(token.length()    -    2);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
161	[BUG]  [BUGGY]  Token  token  =  new  Token(token.charAt(0),  token.charAt(0));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      [BUGGY]  Token  token  =  new  Token(token.charAt(0),  token.charAt(0));  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	Token  token  =  new  Token(token.charAt(0),  token.charAt(0));	  Token    token    =    new    Token(token.charAt(0),    token.length());    	non-compiled	[CE]  <identifier>  expected	17	None	replace
162	[BUG]  [BUGGY]  AssertionFailedToken  stopAtNonOption  =  stopAtNonOption?  tokens.substring(0,  stopAtNonOption):  Token.EMPTY;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      [BUGGY]  AssertionFailedToken  stopAtNonOption  =  stopAtNonOption?  tokens.substring(0,  stopAtNonOption):  Token.EMPTY;  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	AssertionFailedToken  stopAtNonOption  =  stopAtNonOption?  tokens.substring(0,  stopAtNonOption):  Token.EMPTY;	  AssertionFailedToken    stopAtNonOption    =    stopAtNonOption?    tokens.substring(0,    stopAtNonOption):    token;    	non-compiled	[CE]  <identifier>  expected	43	None	replace
163	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(token,  stopAtNonOption,  eatTheRest);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      [BUGGY]  aughtExceptionHandler.handleMissingName(token,  stopAtNonOption,  eatTheRest);  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	aughtExceptionHandler.handleMissingName(token,  stopAtNonOption,  eatTheRest);	  aughtExceptionHandler.handleMissingName(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
164	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(ch,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      [BUGGY]  Option  currentOption  =  options.getOption(ch,  stopAtNonOption);  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	Option  currentOption  =  options.getOption(ch,  stopAtNonOption);	  Option    currentOption    =    options.getOption(ch);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
165	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(ch);  if(currentOption!=  null)  {  tokens.add( "- "  +  ch);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(ch);  if(currentOption!=  null)  {  tokens.add( "- "  +  ch);  }  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(ch);  if(currentOption!=  null)  {  tokens.add( "- "  +  ch);  }	  Option    currentOption    =    options.getOption(ch);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
166	[BUG]  [BUGGY]  allowSideEffects(stopAtNonOption)  {  tokens.add( "- "  +  ch);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {      [BUGGY]  allowSideEffects(stopAtNonOption)  {  tokens.add( "- "  +  ch);  }  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	allowSideEffects(stopAtNonOption)  {  tokens.add( "- "  +  ch);  }	  allowSideEffects(stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	67	None	replace
167	[BUG]  [BUGGY]  tokens.add( "n "  +  ch);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      [BUGGY]  tokens.add( "n "  +  ch);  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	tokens.add( "n "  +  ch);	  tokens.add(token);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
168	[BUG]  [BUGGY]  tokens.add( ": "  +  ch);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      [BUGGY]  tokens.add( ": "  +  ch);  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	tokens.add( ": "  +  ch);	  tokens.add(token);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
169	[BUG]  [BUGGY]  AssertionFailedToken(stopAtNonOption)  {  tokens.add(token.substring(i  +  1));  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      [BUGGY]  AssertionFailedToken(stopAtNonOption)  {  tokens.add(token.substring(i  +  1));  }  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	AssertionFailedToken(stopAtNonOption)  {  tokens.add(token.substring(i  +  1));  }	  While(stopAtNonOption)    {    tokens.add(token.substring(i    +    1));    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
170	[BUG]  [BUGGY]  While(stopAtNonOption  &&  token.length()!=  1)  {  tokens.add(token.substring(1));  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {      [BUGGY]  While(stopAtNonOption  &&  token.length()!=  1)  {  tokens.add(token.substring(1));  }  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	While(stopAtNonOption  &&  token.length()!=  1)  {  tokens.add(token.substring(1));  }	  While(stopAtNonOption    &&    token.length()    >    1)    {    tokens.add(token.substring(1));    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
171	[BUG]  [BUGGY]  tokens.add( "- "  +  Token.name(ch),  stopAtNonOption);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {      [BUGGY]  tokens.add( "- "  +  Token.name(ch),  stopAtNonOption);  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	tokens.add( "- "  +  Token.name(ch),  stopAtNonOption);	  tokens.add(   "-   "    +    Token.name(ch));    	non-compiled	[CE]  <identifier>  expected	63	None	replace
172	[BUG]  [BUGGY]  While(stopAtNonOption  &&  token.length()!=  0)  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      [BUGGY]  While(stopAtNonOption  &&  token.length()!=  0)  {  tokens.add(token);  }  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	While(stopAtNonOption  &&  token.length()!=  0)  {  tokens.add(token);  }	  While(stopAtNonOption    &&    token.length()    >    0)    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
173	[BUG]  [BUGGY]  While(stopAtNonOption  &&  currentOption!=  null)  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      [BUGGY]  While(stopAtNonOption  &&  currentOption!=  null)  {  tokens.add(token);  }  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	While(stopAtNonOption  &&  currentOption!=  null)  {  tokens.add(token);  }	  While(stopAtNonOption)    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
174	[BUG]  [BUGGY]  Option  option  =  options.getOption(ch  -  1);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      [BUGGY]  Option  option  =  options.getOption(ch  -  1);  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	Option  option  =  options.getOption(ch  -  1);	  Option    option    =    options.getOption(ch);    	non-compiled	[CE]  <identifier>  expected	45	None	replace
175	[BUG]  [BUGGY]  tokens.add(token.substring(0,  1));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      [BUGGY]  tokens.add(token.substring(0,  1));  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	tokens.add(token.substring(0,  1));	  tokens.add(token.substring(1));    	non-compiled	[CE]  <identifier>  expected	12	None	replace
176	[BUG]  [BUGGY]  Option  options  =  options.getOption(ch  -  1);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      [BUGGY]  Option  options  =  options.getOption(ch  -  1);  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	Option  options  =  options.getOption(ch  -  1);	  Option    options    =    options.getOption(ch);    	non-compiled	[CE]  <identifier>  expected	46	None	replace
177	[BUG]  [BUGGY]  if(stopAtNonOption  ||  tokens.contains( "- "))  {  tokens.add( "- "  +  ch);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      [BUGGY]  if(stopAtNonOption  ||  tokens.contains( "- "))  {  tokens.add( "- "  +  ch);  }  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	if(stopAtNonOption  ||  tokens.contains( "- "))  {  tokens.add( "- "  +  ch);  }	  ember    tokens.add(   "-   "    +    ch);    	non-compiled	[CE]  <identifier>  expected	55	None	replace
178	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  }  else  {  tokens.add( "- "  +  ch);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  }  else  {  tokens.add( "- "  +  ch);  }  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  }  else  {  tokens.add( "- "  +  ch);  }	  ember    tokens.add(   "-   "    +    ch);    	non-compiled	[CE]  <identifier>  expected	55	None	replace
179	[BUG]  [BUGGY]  AssertionFailedToken(token,  stopAtNonOption,  options);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      [BUGGY]  AssertionFailedToken(token,  stopAtNonOption,  options);  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	AssertionFailedToken(token,  stopAtNonOption,  options);	  AssertionFailedToken(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
180	[BUG]  [BUGGY]  tokens.add( "-n "  +  ch,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {      [BUGGY]  tokens.add( "-n "  +  ch,  stopAtNonOption);  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	tokens.add( "-n "  +  ch,  stopAtNonOption);	  tokens.add(   "-   "    +    ch,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
181	[BUG]  [BUGGY]  tokens.add( "- "  +  ch,  StopAtNonOption.eatTheRest);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      [BUGGY]  tokens.add( "- "  +  ch,  StopAtNonOption.eatTheRest);  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	tokens.add( "- "  +  ch,  StopAtNonOption.eatTheRest);	  tokens.add(   "-   "    +    ch,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
182	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  tokens.length()  +  1;  i++)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      [BUGGY]  for(int  i  =  0;  i  <  tokens.length()  +  1;  i++)  {  [BUGGY]      {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	for(int  i  =  0;  i  <  tokens.length()  +  1;  i++)  {	  for(int    i    =    0;    i    <    tokens.length();    i++)    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
183	[BUG]  [BUGGY]  AssertionFailedToken(stopAtNonOption)  {  tokens.add( "- ");  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {      [BUGGY]  AssertionFailedToken(stopAtNonOption)  {  tokens.add( "- ");  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	AssertionFailedToken(stopAtNonOption)  {  tokens.add( "- ");	  While(stopAtNonOption)    {    tokens.add(   "-   ");    	non-compiled	[CE]  <identifier>  expected	32	None	replace
184	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tries.add(token.substring(i  +  1));  }  else  {  tokens.add( "- "  +  token.substring(1));  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {      [BUGGY]  if(stopAtNonOption)  {  tries.add(token.substring(i  +  1));  }  else  {  tokens.add( "- "  +  token.substring(1));  }  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	if(stopAtNonOption)  {  tries.add(token.substring(i  +  1));  }  else  {  tokens.add( "- "  +  token.substring(1));  }	  tries.add(token.substring(i    +    1));    	non-compiled	[CE]  <identifier>  expected	57	None	replace
185	[BUG]  [BUGGY]  kens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      [BUGGY]  kens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	kens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);	  if(stopAtNonOption)    {    tokens.add(   "-   "    +    ch);    currentOption    =    options.getOption(ch);    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
186	[BUG]  [BUGGY]  tokens.add(token.charAt(i  +  1));  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {      [BUGGY]  tokens.add(token.charAt(i  +  1));  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	tokens.add(token.charAt(i  +  1));	  tokens.add(token.substring(i    +    1));    	non-compiled	[CE]  <identifier>  expected	3	None	replace
187	[BUG]  [BUGGY]  tokens.add( "- "  +  Token.valueOf(ch));  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {      [BUGGY]  tokens.add( "- "  +  Token.valueOf(ch));  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	tokens.add( "- "  +  Token.valueOf(ch));	  tokens.add(   "-   "    +    Token.name(ch));    	non-compiled	[CE]  <identifier>  expected	63	None	replace
188	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  token.size();  i++)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {      [BUGGY]  for(int  i  =  0;  i  <  token.size();  i++)  {  [BUGGY]      {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	for(int  i  =  0;  i  <  token.size();  i++)  {	  for(int    i    =    0;    i    <    tokens.size();    i++)    {    	non-compiled	[CE]  <identifier>  expected	56	None	replace
189	[BUG]  [BUGGY]  if(stopAtNonOption)  {  aughtExceptionHandler.handleMoreGuaranteed();  }  else  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      [BUGGY]  if(stopAtNonOption)  {  aughtExceptionHandler.handleMoreGuaranteed();  }  else  {  tokens.add(token);  }  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	if(stopAtNonOption)  {  aughtExceptionHandler.handleMoreGuaranteed();  }  else  {  tokens.add(token);  }	  aughtExceptionHandler.handleMoreGuaranteed();    	non-compiled	[CE]  <identifier>  expected	52	None	replace
190	[BUG]  [BUGGY]  AssertionFailedToken(token)  {  tokens.add( "- "  +  ch);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      [BUGGY]  AssertionFailedToken(token)  {  tokens.add( "- "  +  ch);  }  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	AssertionFailedToken(token)  {  tokens.add( "- "  +  ch);  }	  While(stopAtNonOption)    {    tokens.add(   "-   "    +    ch);    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
191	[BUG]  [BUGGY]  while(stopAtNonOption)  {  tokens.add( "- "  +  ch);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      {      [BUGGY]  while(stopAtNonOption)  {  tokens.add( "- "  +  ch);  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	while(stopAtNonOption)  {  tokens.add( "- "  +  ch);	  While(stopAtNonOption)    {    tokens.add(   "-   "    +    ch);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
192	[BUG]  [BUGGY]  AssertionFailedToken(token)  {  tokens.add( "- "  +  ch);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      {      [BUGGY]  AssertionFailedToken(token)  {  tokens.add( "- "  +  ch);  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	AssertionFailedToken(token)  {  tokens.add( "- "  +  ch);	  While(stopAtNonOption)    {    tokens.add(   "-   "    +    ch);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
193	[BUG]  [BUGGY]  AssertionFailedToken(token)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      [BUGGY]  AssertionFailedToken(token)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	AssertionFailedToken(token)  {  throw  new  IllegalArgumentException( " ");  }	  allowSideEffects(stopAtNonOption))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	65	None	replace
194	[BUG]  [BUGGY]  AssertionFailedToken(token,  currentOption)  {  tokens.add(token.substring(0,  stopAtNonOption));  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      [BUGGY]  AssertionFailedToken(token,  currentOption)  {  tokens.add(token.substring(0,  stopAtNonOption));  }  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	AssertionFailedToken(token,  currentOption)  {  tokens.add(token.substring(0,  stopAtNonOption));  }	  AssertionFailedToken(token,    stopAtNonOption)    {    tokens.add(token.substring(2));    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
195	[BUG]  [BUGGY]  AssertionFailedToken(token,  stopAtNonOption)  {  tokens.add(token.substring(1,  stopAtNonOption));  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      [BUGGY]  AssertionFailedToken(token,  stopAtNonOption)  {  tokens.add(token.substring(1,  stopAtNonOption));  }  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	AssertionFailedToken(token,  stopAtNonOption)  {  tokens.add(token.substring(1,  stopAtNonOption));  }	  AssertionFailedToken(token,    stopAtNonOption)    {    tokens.add(token.substring(2));    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
196	[BUG]  [BUGGY]  while(stopAtNonOption)  {  tokens.add(token.substring(0,  stopAtNonOption));  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      [BUGGY]  while(stopAtNonOption)  {  tokens.add(token.substring(0,  stopAtNonOption));  }  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	while(stopAtNonOption)  {  tokens.add(token.substring(0,  stopAtNonOption));  }	  While(stopAtNonOption)    {    tokens.add(token.substring(2));    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
197	[BUG]  [BUGGY]  AssertionFailedToken(token,  stopAtNonOption)  {  tokens.add(token.substring(i,  stopAtNonOption));  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      [BUGGY]  AssertionFailedToken(token,  stopAtNonOption)  {  tokens.add(token.substring(i,  stopAtNonOption));  }  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	AssertionFailedToken(token,  stopAtNonOption)  {  tokens.add(token.substring(i,  stopAtNonOption));  }	  While(stopAtNonOption)    {    tokens.add(token.substring(i,    stopAtNonOption));    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
198	[BUG]  [BUGGY]  TokenBuffer  token  =  new  TokenBuffer(Token.length()  +  1);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      [BUGGY]  TokenBuffer  token  =  new  TokenBuffer(Token.length()  +  1);  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	TokenBuffer  token  =  new  TokenBuffer(Token.length()  +  1);	  TokenBuffer    token    =    new    TokenBuffer(Token.length());    	non-compiled	[CE]  <identifier>  expected	16	None	replace
199	[BUG]  [BUGGY]  while(stopAtNonOption)  {  tokens.add( "- "  +  ch);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      [BUGGY]  while(stopAtNonOption)  {  tokens.add( "- "  +  ch);  }  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	while(stopAtNonOption)  {  tokens.add( "- "  +  ch);  }	  While(stopAtNonOption)    {    tokens.add(   "-   "    +    token);    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
200	[BUG]  [BUGGY]  AssertionFailedToken(token,  stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {      [BUGGY]  AssertionFailedToken(token,  stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	AssertionFailedToken(token,  stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }	  allowSideEffects(stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	67	None	replace
201	[BUG]  [BUGGY]  accept( "stopAtNonOption "))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      [BUGGY]  accept( "stopAtNonOption "))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	accept( "stopAtNonOption "))  {  throw  new  IllegalArgumentException( " ");  }	  allowSideEffects(   "stopAtNonOption   "))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	66	None	replace
202	[BUG]  [BUGGY]  AssertionFailedToken  stopAtNonOption  =  getTheRest();  tokens.add(token.substring(i  +  1));  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      [BUGGY]  AssertionFailedToken  stopAtNonOption  =  getTheRest();  tokens.add(token.substring(i  +  1));  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	AssertionFailedToken  stopAtNonOption  =  getTheRest();  tokens.add(token.substring(i  +  1));	  AssertionFailedToken    stopAtNonOption    =    stopAtNonOption;    tokens.add(token.substring(i    +    1));    	non-compiled	[CE]  <identifier>  expected	49	None	replace
203	[BUG]  [BUGGY]  While(stopAtNonOption  &&  token.length()  >  1)  {  tokens.add(token.substring(0,  stopAtNonOption));  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {      [BUGGY]  While(stopAtNonOption  &&  token.length()  >  1)  {  tokens.add(token.substring(0,  stopAtNonOption));  }  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	While(stopAtNonOption  &&  token.length()  >  1)  {  tokens.add(token.substring(0,  stopAtNonOption));  }	  While(stopAtNonOption    &&    token.length()    >    1)    {    tokens.add(token.substring(1));    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
204	[BUG]  [BUGGY]  AssertionFailedToken  stopAtNonOption  =  new  AssertionFailedToken(token.length());  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      [BUGGY]  AssertionFailedToken  stopAtNonOption  =  new  AssertionFailedToken(token.length());  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	AssertionFailedToken  stopAtNonOption  =  new  AssertionFailedToken(token.length());	  AssertionFailedToken    stopAtNonOption    =    stopAtNonOption;    tokens.add(token.substring(1));    	non-compiled	[CE]  <identifier>  expected	42	None	replace
205	[BUG]  [BUGGY]  tokens.add( "-- "  +  ch);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      [BUGGY]  tokens.add( "-- "  +  ch);  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	tokens.add( "-- "  +  ch);	  tokens.add(   "-n   "    +    ch);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
206	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(token.substring(i  +  1),  token);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      [BUGGY]  aughtExceptionHandler.handleMissingName(token.substring(i  +  1),  token);  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	aughtExceptionHandler.handleMissingName(token.substring(i  +  1),  token);	  aughtExceptionHandler.handleMissingName(token.substring(i    +    1));    	non-compiled	[CE]  <identifier>  expected	58	None	replace
207	[BUG]  [BUGGY]  tokens.add(token.substring(i,  i  +  1));  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {      [BUGGY]  tokens.add(token.substring(i,  i  +  1));  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	tokens.add(token.substring(i,  i  +  1));	  tokens.add(token.substring(i    +    1));    	non-compiled	[CE]  <identifier>  expected	3	None	replace
208	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  tokens.add( "- "  +  ch);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      [BUGGY]  if(!stopAtNonOption)  {  tokens.add( "- "  +  ch);  }  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	if(!stopAtNonOption)  {  tokens.add( "- "  +  ch);  }	  ember    tokens.add(   "-   "    +    ch);    	non-compiled	[CE]  <identifier>  expected	55	None	replace
209	[BUG]  [BUGGY]  Token  token  =  new  Token(token.substring(0,  1);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      [BUGGY]  Token  token  =  new  Token(token.substring(0,  1);  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	Token  token  =  new  Token(token.substring(0,  1);	  Token    token    =    new    Token(token.substring(1));    	non-compiled	[CE]  <identifier>  expected	19	None	replace
210	[BUG]  [BUGGY]  while(stopAtNonOption)  {  tokens.add( "- "  +  ch);  continue;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {      [BUGGY]  while(stopAtNonOption)  {  tokens.add( "- "  +  ch);  continue;  }  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	while(stopAtNonOption)  {  tokens.add( "- "  +  ch);  continue;  }	  While(stopAtNonOption)    {    tokens.add(   "-   "    +    ch);    continue;    }    	non-compiled	[CE]  <identifier>  expected	28	None	replace
211	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(ch);  if(!stopAtNonOption)  {  tokens.add( "- "  +  ch);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(ch);  if(!stopAtNonOption)  {  tokens.add( "- "  +  ch);  }  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(ch);  if(!stopAtNonOption)  {  tokens.add( "- "  +  ch);  }	  Option    currentOption    =    options.getOption(ch);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
212	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(ch);  if(currentOption.hasArg())  {  tokens.add( "- "  +  ch);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(ch);  if(currentOption.hasArg())  {  tokens.add( "- "  +  ch);  }  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(ch);  if(currentOption.hasArg())  {  tokens.add( "- "  +  ch);  }	  Option    currentOption    =    options.getOption(ch);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
213	[BUG]  [BUGGY]  while(stopAtNonOption)  {  tokens.add(token.substring(i  +  1));  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      [BUGGY]  while(stopAtNonOption)  {  tokens.add(token.substring(i  +  1));  }  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	while(stopAtNonOption)  {  tokens.add(token.substring(i  +  1));  }	  While(stopAtNonOption)    {    tokens.add(token.substring(i    +    1));    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
214	[BUG]  [BUGGY]  tokens.add( "- "  +  ch,  stoppingAtNonOption);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {      [BUGGY]  tokens.add( "- "  +  ch,  stoppingAtNonOption);  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	tokens.add( "- "  +  ch,  stoppingAtNonOption);	  tokens.add(   "-   "    +    ch,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
215	[BUG]  [BUGGY]  tokens.add( "- "  +  ch,  StopAtNonOption);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      [BUGGY]  tokens.add( "- "  +  ch,  StopAtNonOption);  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	tokens.add( "- "  +  ch,  StopAtNonOption);	  tokens.add(   "-   "    +    ch,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
216	[BUG]  [BUGGY]  AssertionFailedToken  stopAtNonOption  =  stopAtNonOption?  token.substring(0,  stopAtNonOption):  token;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      [BUGGY]  AssertionFailedToken  stopAtNonOption  =  stopAtNonOption?  token.substring(0,  stopAtNonOption):  token;  [BUGGY]      for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	284	285	1	replace	AssertionFailedToken  stopAtNonOption  =  stopAtNonOption?  token.substring(0,  stopAtNonOption):  token;	  AssertionFailedToken    stopAtNonOption    =    stopAtNonOption?    tokens.substring(0,    stopAtNonOption):    token;    	non-compiled	[CE]  <identifier>  expected	43	None	replace
