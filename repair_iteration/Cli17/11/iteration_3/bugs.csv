bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  String  ch  =  token.substring(i  +  1,  token.length()  -  1).trim();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {      [BUGGY]  String  ch  =  token.substring(i  +  1,  token.length()  -  1).trim();  [BUGGY]      String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	286	286	1	replace	String  ch  =  token.substring(i  +  1,  token.length()  -  1).trim();	  String    ch    =    token.substring(i    +    1,    token.length()).trim();    	non-compiled	[CE]  <identifier>  expected	15	None	replace
2	[BUG]  [BUGGY]  String  ch  =  token.substring(i  +  1,  token.length()  -  2).trim();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {      [BUGGY]  String  ch  =  token.substring(i  +  1,  token.length()  -  2).trim();  [BUGGY]      String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	286	286	1	replace	String  ch  =  token.substring(i  +  1,  token.length()  -  2).trim();	  String    ch    =    token.substring(i    +    1,    token.length()).trim();    	non-compiled	[CE]  <identifier>  expected	15	None	replace
3	[BUG]  [BUGGY]  String  ch  =  token.substring(i  +  1,  token.length()  -).trim();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {      [BUGGY]  String  ch  =  token.substring(i  +  1,  token.length()  -).trim();  [BUGGY]      String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	286	286	1	replace	String  ch  =  token.substring(i  +  1,  token.length()  -).trim();	  String    ch    =    token.substring(i    +    1,    token.length()).trim();    	non-compiled	[CE]  <identifier>  expected	15	None	replace
4	[BUG]  [BUGGY]  tokens.add(token.substring(i,  i  +  1));  continue;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {      [BUGGY]  tokens.add(token.substring(i,  i  +  1));  continue;  [BUGGY]      String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	286	286	1	replace	tokens.add(token.substring(i,  i  +  1));  continue;	  tokens.add(token.substring(i,    i));    continue;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
5	[BUG]  [BUGGY]  ch  =  token.substring(i  +  1,  token.length());  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {      [BUGGY]  ch  =  token.substring(i  +  1,  token.length());  [BUGGY]        if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	286	286	1	replace	ch  =  token.substring(i  +  1,  token.length());	  String    ch    =    token.substring(i    +    1,    token.length()    -    2);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
6	[BUG]  [BUGGY]  String  ch  =  token.charAt(0);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {      [BUGGY]  String  ch  =  token.charAt(0);  [BUGGY]        if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	286	286	1	replace	String  ch  =  token.charAt(0);	  char    ch    =    token.charAt(0);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
7	[BUG]  [BUGGY]  tokens.add(token.substring(i,  0));  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {      [BUGGY]  tokens.add(token.substring(i,  0));  [BUGGY]      String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	286	286	1	replace	tokens.add(token.substring(i,  0));	  tokens.add(token.substring(i,    i));    	non-compiled	[CE]  <identifier>  expected	17	None	replace
8	[BUG]  [BUGGY]  tokens.add( "- "  +  token.substring(i  +  1));  continue;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {      [BUGGY]  tokens.add( "- "  +  token.substring(i  +  1));  continue;  [BUGGY]      String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	286	286	1	replace	tokens.add( "- "  +  token.substring(i  +  1));  continue;	  tokens.add(token.substring(i    +    1));    continue;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
9	[BUG]  [BUGGY]  String  ch  =  token.substring(0,  token.length());  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {      [BUGGY]  String  ch  =  token.substring(0,  token.length());  [BUGGY]        if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	286	286	1	replace	String  ch  =  token.substring(0,  token.length());	  String    ch    =    token.substring(i    +    1,    token.length()    -    3);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
10	[BUG]  [BUGGY]  String  ch  =  token.charAt(i  +  1)+  1;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {      [BUGGY]  String  ch  =  token.charAt(i  +  1)+  1;  [BUGGY]        if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	286	286	1	replace	String  ch  =  token.charAt(i  +  1)+  1;	  String    ch    =    String.valueOf(token.charAt(i    +    1)+    1);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
11	[BUG]  [BUGGY]  char  ch  =  token.charAt(i  +  1)+  1;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {      [BUGGY]  char  ch  =  token.charAt(i  +  1)+  1;  [BUGGY]        if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	286	286	1	replace	char  ch  =  token.charAt(i  +  1)+  1;	  String    ch    =    String.valueOf(token.charAt(i    +    1)+    1);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
12	[BUG]  [BUGGY]  String  ch  =  String.valueOf(token.charAt(i  +  1)+  2);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {      [BUGGY]  String  ch  =  String.valueOf(token.charAt(i  +  1)+  2);  [BUGGY]        if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	286	286	1	replace	String  ch  =  String.valueOf(token.charAt(i  +  1)+  2);	  String    ch    =    String.valueOf(token.charAt(i    +    1)+    1);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
13	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(i  +  1);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {      [BUGGY]  Option  currentOption  =  options.getOption(i  +  1);  [BUGGY]        if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	286	286	1	replace	Option  currentOption  =  options.getOption(i  +  1);	  Option    currentOption    =    options.getOption(i);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
14	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(i);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {      [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(i);  }  [BUGGY]        if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	286	286	1	replace	if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(i);  }	  Option    currentOption    =    options.getOption(i);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
15	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(i  -  1);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {      [BUGGY]  Option  currentOption  =  options.getOption(i  -  1);  [BUGGY]        if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	286	286	1	replace	Option  currentOption  =  options.getOption(i  -  1);	  Option    currentOption    =    options.getOption(i);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
16	[BUG]  [BUGGY]  String  ch  =  token.substring(0,  i  +  1);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {      [BUGGY]  String  ch  =  token.substring(0,  i  +  1);  [BUGGY]      String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	286	286	1	replace	String  ch  =  token.substring(0,  i  +  1);	  String    ch    =    token.substring(0,    i);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
17	[BUG]  [BUGGY]  String  ch  =  token.substring(i,  i);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {      [BUGGY]  String  ch  =  token.substring(i,  i);  [BUGGY]      String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	286	286	1	replace	String  ch  =  token.substring(i,  i);	  String    ch    =    token.substring(0,    i);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
18	[BUG]  [BUGGY]  String  ch  =  token.substring(0,  i  +  2);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {      [BUGGY]  String  ch  =  token.substring(0,  i  +  2);  [BUGGY]      String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	286	286	1	replace	String  ch  =  token.substring(0,  i  +  2);	  String    ch    =    token.substring(0,    i);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
19	[BUG]  [BUGGY]  String  ch  =  token.substring(i  +  1,  i  +  2);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {      [BUGGY]  String  ch  =  token.substring(i  +  1,  i  +  2);  [BUGGY]        if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	286	286	1	replace	String  ch  =  token.substring(i  +  1,  i  +  2);	  String    ch    =    token.substring(i    +    1,    i);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
20	[BUG]  [BUGGY]  tokens.add(token.substring(0,  i  +  1));  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {      [BUGGY]  tokens.add(token.substring(0,  i  +  1));  [BUGGY]      String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	286	286	1	replace	tokens.add(token.substring(0,  i  +  1));	  tokens.add(token.substring(0,    i));    	non-compiled	[CE]  <identifier>  expected	29	None	replace
21	[BUG]  [BUGGY]  ch  =  token.substring(i  +  1);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {      [BUGGY]  ch  =  token.substring(i  +  1);  [BUGGY]      String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	286	286	1	replace	ch  =  token.substring(i  +  1);	  ch    =    token.charAt(0);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
22	[BUG]  [BUGGY]  char  ch  =  token.charAt(i).trim();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {      [BUGGY]  char  ch  =  token.charAt(i).trim();  [BUGGY]      String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	286	286	1	replace	char  ch  =  token.charAt(i).trim();	  String    ch    =    token.charAt(i).trim();    	non-compiled	[CE]  <identifier>  expected	27	None	replace
23	[BUG]  [BUGGY]  String  ch  =  token.charAt(i).toLowerCase();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {      [BUGGY]  String  ch  =  token.charAt(i).toLowerCase();  [BUGGY]      String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	286	286	1	replace	String  ch  =  token.charAt(i).toLowerCase();	  String    ch    =    token.charAt(i).trim();    	non-compiled	[CE]  <identifier>  expected	27	None	replace
24	[BUG]  [BUGGY]  String  ch  =  token.substring(i  +  1,  token.length(),  currentOption);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {      [BUGGY]  String  ch  =  token.substring(i  +  1,  token.length(),  currentOption);  [BUGGY]        if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	286	286	1	replace	String  ch  =  token.substring(i  +  1,  token.length(),  currentOption);	  String    ch    =    token.substring(i    +    1,    token.length(),    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
25	[BUG]  [BUGGY]  String  ch  =  token.substring(i  +  1,  token.length()  -  1,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {      [BUGGY]  String  ch  =  token.substring(i  +  1,  token.length()  -  1,  stopAtNonOption);  [BUGGY]        if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	286	286	1	replace	String  ch  =  token.substring(i  +  1,  token.length()  -  1,  stopAtNonOption);	  String    ch    =    token.substring(i    +    1,    token.length(),    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
26	[BUG]  [BUGGY]  String  ch  =  token.substring(i  +  1,  token.length(),  currentOption.eatTheRest);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {      [BUGGY]  String  ch  =  token.substring(i  +  1,  token.length(),  currentOption.eatTheRest);  [BUGGY]        if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	286	286	1	replace	String  ch  =  token.substring(i  +  1,  token.length(),  currentOption.eatTheRest);	  String    ch    =    token.substring(i    +    1,    token.length(),    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
27	[BUG]  [BUGGY]  String  ch  =  token.substring(i  +  1,  token.length(),  currentOption.getArg());  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {      [BUGGY]  String  ch  =  token.substring(i  +  1,  token.length(),  currentOption.getArg());  [BUGGY]        if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	286	286	1	replace	String  ch  =  token.substring(i  +  1,  token.length(),  currentOption.getArg());	  String    ch    =    token.substring(i    +    1,    token.length(),    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
28	[BUG]  [BUGGY]  ch  =  token.charAt(i)+  2;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {      [BUGGY]  ch  =  token.charAt(i)+  2;  [BUGGY]      String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	286	286	1	replace	ch  =  token.charAt(i)+  2;	  ch    =    token.charAt(i)+    1;    	non-compiled	[CE]  <identifier>  expected	14	None	replace
29	[BUG]  [BUGGY]  ch  =  token.charAt(i)+  3;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {      [BUGGY]  ch  =  token.charAt(i)+  3;  [BUGGY]      String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	286	286	1	replace	ch  =  token.charAt(i)+  3;	  ch    =    token.charAt(i)+    1;    	non-compiled	[CE]  <identifier>  expected	14	None	replace
30	[BUG]  [BUGGY]  ch  =  token.charAt(i)+  4;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {      [BUGGY]  ch  =  token.charAt(i)+  4;  [BUGGY]      String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	286	286	1	replace	ch  =  token.charAt(i)+  4;	  ch    =    token.charAt(i)+    1;    	non-compiled	[CE]  <identifier>  expected	14	None	replace
31	[BUG]  [BUGGY]  tokens.add( "- "  +  token.substring(i,  i  +  1));  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {      [BUGGY]  tokens.add( "- "  +  token.substring(i,  i  +  1));  [BUGGY]      String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	286	286	1	replace	tokens.add( "- "  +  token.substring(i,  i  +  1));	  tokens.add(   "-   "    +    token.substring(i    +    1));    	non-compiled	[CE]  <identifier>  expected	19	None	replace
32	[BUG]  [BUGGY]  tokens.add( "- "  +  token.substring(i  +  1));  return;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {      [BUGGY]  tokens.add( "- "  +  token.substring(i  +  1));  return;  [BUGGY]      String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	286	286	1	replace	tokens.add( "- "  +  token.substring(i  +  1));  return;	  tokens.add(token.substring(i    +    1));    return;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
33	[BUG]  [BUGGY]  ch  =  token.charAt(i  +  2);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {      [BUGGY]  ch  =  token.charAt(i  +  2);  [BUGGY]      String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	286	286	1	replace	ch  =  token.charAt(i  +  2);	  ch    =    token.charAt(i    +    1);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
34	[BUG]  [BUGGY]  String  ch  =  token.substring(0,  token.length()  -  1);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {      [BUGGY]  String  ch  =  token.substring(0,  token.length()  -  1);  [BUGGY]        if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	286	286	1	replace	String  ch  =  token.substring(0,  token.length()  -  1);	  String    ch    =    token.substring(i    +    1,    token.length()    -    1);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
35	[BUG]  [BUGGY]  String  ch  =  token.substring(i,  token.length()  -  1);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {      [BUGGY]  String  ch  =  token.substring(i,  token.length()  -  1);  [BUGGY]        if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	286	286	1	replace	String  ch  =  token.substring(i,  token.length()  -  1);	  String    ch    =    token.substring(i    +    1,    token.length()    -    1);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
36	[BUG]  [BUGGY]  String  ch  =  token.substring(i  +  2  +  1);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {      [BUGGY]  String  ch  =  token.substring(i  +  2  +  1);  [BUGGY]        if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	286	286	1	replace	String  ch  =  token.substring(i  +  2  +  1);	  String    ch    =    token.substring(i    +    2);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
37	[BUG]  [BUGGY]  String  ch  =  token.substring(i  +  3);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {      [BUGGY]  String  ch  =  token.substring(i  +  3);  [BUGGY]        if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	286	286	1	replace	String  ch  =  token.substring(i  +  3);	  String    ch    =    token.substring(i    +    2);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
38	[BUG]  [BUGGY]  String  ch  =  token.charAt(i)+  1;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {      [BUGGY]  String  ch  =  token.charAt(i)+  1;  [BUGGY]        if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	286	286	1	replace	String  ch  =  token.charAt(i)+  1;	  char    ch    =    token.charAt(i)+    1;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
39	[BUG]  [BUGGY]  char  ch  =  token.charAt(i)+  2;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {      [BUGGY]  char  ch  =  token.charAt(i)+  2;  [BUGGY]        if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	286	286	1	replace	char  ch  =  token.charAt(i)+  2;	  char    ch    =    token.charAt(i)+    1;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
40	[BUG]  [BUGGY]  char  ch  =  token.charAt(i)/  1;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {      [BUGGY]  char  ch  =  token.charAt(i)/  1;  [BUGGY]        if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	286	286	1	replace	char  ch  =  token.charAt(i)/  1;	  char    ch    =    token.charAt(i)+    1;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
41	[BUG]  [BUGGY]  String  ch  =  token.substring(i  +  1,  i  +  3);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {      [BUGGY]  String  ch  =  token.substring(i  +  1,  i  +  3);  [BUGGY]        if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	286	286	1	replace	String  ch  =  token.substring(i  +  1,  i  +  3);	  String    ch    =    token.substring(i    +    1,    i    +    1);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
42	[BUG]  [BUGGY]  char  ch  =  token.charAt(i  +  2);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {      [BUGGY]  char  ch  =  token.charAt(i  +  2);  [BUGGY]        if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	286	286	1	replace	char  ch  =  token.charAt(i  +  2);	  char    ch    =    token.charAt(i    +    1);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
43	[BUG]  [BUGGY]  tokens.add(token.substring(i,  i  +  1));  return;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {      [BUGGY]  tokens.add(token.substring(i,  i  +  1));  return;  [BUGGY]      String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	286	286	1	replace	tokens.add(token.substring(i,  i  +  1));  return;	  tokens.add(token.substring(i,    i));    return;    	non-compiled	[CE]  <identifier>  expected	11	None	replace
44	[BUG]  [BUGGY]  String  ch  =  token.substring(i  +  1,  token.length(),  options.getOption(i));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {      [BUGGY]  String  ch  =  token.substring(i  +  1,  token.length(),  options.getOption(i));  [BUGGY]        if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	286	286	1	replace	String  ch  =  token.substring(i  +  1,  token.length(),  options.getOption(i));	  String    ch    =    token.substring(i    +    1,    token.length(),    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
45	[BUG]  [BUGGY]  String  ch  =  token.substring(i  +  1).toLowerCase();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {      [BUGGY]  String  ch  =  token.substring(i  +  1).toLowerCase();  [BUGGY]      String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	286	286	1	replace	String  ch  =  token.substring(i  +  1).toLowerCase();	  String    ch    =    token.substring(i    +    1).trim();    	non-compiled	[CE]  <identifier>  expected	16	None	replace
46	[BUG]  [BUGGY]  tokens.add( "- "  +  token.substring(i,  i));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {      [BUGGY]  tokens.add( "- "  +  token.substring(i,  i));  [BUGGY]      String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	286	286	1	replace	tokens.add( "- "  +  token.substring(i,  i));	  tokens.add(   "-   "    +    token.substring(i));    	non-compiled	[CE]  <identifier>  expected	18	None	replace
47	[BUG]  [BUGGY]  ch  =  token.charAt(i  +  3);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {      [BUGGY]  ch  =  token.charAt(i  +  3);  [BUGGY]      String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	286	286	1	replace	ch  =  token.charAt(i  +  3);	  ch    =    token.charAt(i    +    1);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
48	[BUG]  [BUGGY]  char  ch  =  token.charAt(i)+  3;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {      [BUGGY]  char  ch  =  token.charAt(i)+  3;  [BUGGY]        if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	286	286	1	replace	char  ch  =  token.charAt(i)+  3;	  char    ch    =    token.charAt(i)+    1;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
49	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(i,  token);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {      [BUGGY]  Option  currentOption  =  options.getOption(i,  token);  [BUGGY]        if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	286	286	1	replace	Option  currentOption  =  options.getOption(i,  token);	  Option    currentOption    =    options.getOption(i);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
50	[BUG]  [BUGGY]  String  ch  =  token.charAt(i  +  1,  token.length()).trim();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {      [BUGGY]  String  ch  =  token.charAt(i  +  1,  token.length()).trim();  [BUGGY]      String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	286	286	1	replace	String  ch  =  token.charAt(i  +  1,  token.length()).trim();	  String    ch    =    token.substring(i    +    1,    token.length()).trim();    	non-compiled	[CE]  <identifier>  expected	15	None	replace
51	[BUG]  [BUGGY]  String  ch  =  token.substring(i  +  1,  token.length()  -  128).trim();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {      [BUGGY]  String  ch  =  token.substring(i  +  1,  token.length()  -  128).trim();  [BUGGY]      String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	286	286	1	replace	String  ch  =  token.substring(i  +  1,  token.length()  -  128).trim();	  String    ch    =    token.substring(i    +    1,    token.length()).trim();    	non-compiled	[CE]  <identifier>  expected	15	None	replace
52	[BUG]  [BUGGY]  ch  =  token.charAt(i  +  11);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {      [BUGGY]  ch  =  token.charAt(i  +  11);  [BUGGY]      String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	286	286	1	replace	ch  =  token.charAt(i  +  11);	  ch    =    token.charAt(i    +    1);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
53	[BUG]  [BUGGY]  String  ch  =  token.substring(i  +  1,  1);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {      [BUGGY]  String  ch  =  token.substring(i  +  1,  1);  [BUGGY]        if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	286	286	1	replace	String  ch  =  token.substring(i  +  1,  1);	  String    ch    =    token.substring(i    +    1,    i);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
54	[BUG]  [BUGGY]  String  ch  =  String.valueOf(token.charAt(i  +  1)/  1);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {      [BUGGY]  String  ch  =  String.valueOf(token.charAt(i  +  1)/  1);  [BUGGY]        if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	286	286	1	replace	String  ch  =  String.valueOf(token.charAt(i  +  1)/  1);	  String    ch    =    String.valueOf(token.charAt(i    +    1)+    1);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
55	[BUG]  [BUGGY]  tokens.add(token.substring(i,  1));  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {      [BUGGY]  tokens.add(token.substring(i,  1));  [BUGGY]      String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	286	286	1	replace	tokens.add(token.substring(i,  1));	  tokens.add(token.substring(i,    i));    	non-compiled	[CE]  <identifier>  expected	17	None	replace
56	[BUG]  [BUGGY]  String  ch  =  token.charAt(i).substring(1);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {      [BUGGY]  String  ch  =  token.charAt(i).substring(1);  [BUGGY]      String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	286	286	1	replace	String  ch  =  token.charAt(i).substring(1);	  String    ch    =    token.charAt(i).trim();    	non-compiled	[CE]  <identifier>  expected	27	None	replace
57	[BUG]  [BUGGY]  tokens.add(token.charAt(i  +  1));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {      [BUGGY]  tokens.add(token.charAt(i  +  1));  [BUGGY]      String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	286	286	1	replace	tokens.add(token.charAt(i  +  1));	  tokens.add(token.substring(i    +    1));    return;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
58	[BUG]  [BUGGY]  String  ch  =  token.substring(i  +  1,  token.length(),  stopAtNonOption)+  1;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {      [BUGGY]  String  ch  =  token.substring(i  +  1,  token.length(),  stopAtNonOption)+  1;  [BUGGY]        if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	286	286	1	replace	String  ch  =  token.substring(i  +  1,  token.length(),  stopAtNonOption)+  1;	  String    ch    =    token.substring(i    +    1,    token.length(),    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
59	[BUG]  [BUGGY]  ch  =  token.charAt(i)/  1;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {      [BUGGY]  ch  =  token.charAt(i)/  1;  [BUGGY]      String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	286	286	1	replace	ch  =  token.charAt(i)/  1;	  ch    =    token.charAt(i)+    1;    	non-compiled	[CE]  <identifier>  expected	14	None	replace
60	[BUG]  [BUGGY]  String  ch  =  token.substring(i  +  11).trim();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {      [BUGGY]  String  ch  =  token.substring(i  +  11).trim();  [BUGGY]      String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	286	286	1	replace	String  ch  =  token.substring(i  +  11).trim();	  String    ch    =    token.substring(i    +    1).trim();    	non-compiled	[CE]  <identifier>  expected	16	None	replace
