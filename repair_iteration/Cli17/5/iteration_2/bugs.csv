bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  tokens.add( "-- ");  tokens.add(currentOption);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {    [BUGGY]  tokens.add( "-- ");  tokens.add(currentOption);  [BUGGY]    tokens.add(   "--   ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	tokens.add( "-- ");  tokens.add(currentOption);	  if(stopAtNonOption)    {    eatTheRest    =    true;    }    else    {    tokens.add(   "--   ");    tokens.add(currentOption);    }    	non-compiled	[CE]  	8	None	replace
2	[BUG]  [BUGGY]  While(!stopAtNonOption)  {  eatTheRest  =  true;  }  [CE]  [FE]              AssertionFailedError    [CONTEXT]    tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {    [BUGGY]  While(!stopAtNonOption)  {  eatTheRest  =  true;  }  [BUGGY]    tokens.add(   "--   ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	While(!stopAtNonOption)  {  eatTheRest  =  true;  }	  if(stopAtNonOption)    {    eatTheRest    =    true;    }    else    {    tokens.add(   "--   ");    tokens.add(currentOption);    }    	non-compiled	[CE]  	8	None	replace
3	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add( "-- ");  eatTheRest  =  true;  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]    tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {    [BUGGY]  if(stopAtNonOption)  {  tokens.add( "-- ");  eatTheRest  =  true;  }  [BUGGY]    eatTheRest  =  true;  tokens.add(   "--   ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	if(stopAtNonOption)  {  tokens.add( "-- ");  eatTheRest  =  true;  }	      tokens.add(   "--   ");    eatTheRest    =    true;    	non-compiled	[CE]  	12	None	replace
4	[BUG]  [BUGGY]  tokens.add( "-- ");  eatTheRest  =  false;  [CE]  [FE]              AssertionFailedError    [CONTEXT]    tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {    [BUGGY]  tokens.add( "-- ");  eatTheRest  =  false;  [BUGGY]    eatTheRest  =  true;  tokens.add(   "--   ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	tokens.add( "-- ");  eatTheRest  =  false;	      tokens.add(   "--   ");    eatTheRest    =    true;    	non-compiled	[CE]  	12	None	replace
5	[BUG]  [BUGGY]  tokens.add( "-- ");  currentOption  =  new  Option();  [CE]  [FE]        AssertionFailedError    [CONTEXT]    tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {    [BUGGY]  tokens.add( "-- ");  currentOption  =  new  Option();  [BUGGY]    eatTheRest  =  true;  tokens.add(   "--   ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	tokens.add( "-- ");  currentOption  =  new  Option();	      tokens.add(   "--   ");    currentOption    =    null;    	non-compiled	[CE]  	10	None	replace
6	[BUG]  [BUGGY]  tokens.add( "-- ");  currentOption  =  new  ArrayList();  [CE]  [FE]          AssertionFailedError    [CONTEXT]    tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {    [BUGGY]  tokens.add( "-- ");  currentOption  =  new  ArrayList();  [BUGGY]    eatTheRest  =  true;  tokens.add(   "--   ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	tokens.add( "-- ");  currentOption  =  new  ArrayList();	      tokens.add(   "--   ");    currentOption    =    null;    	non-compiled	[CE]  	10	None	replace
7	[BUG]  [BUGGY]  ||  stopAtNonOption)  {  eatTheRest  =  true;  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]    tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {    [BUGGY]  ||  stopAtNonOption)  {  eatTheRest  =  true;  }  [BUGGY]    tokens.add(   "--   ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	||  stopAtNonOption)  {  eatTheRest  =  true;  }	  if(stopAtNonOption)    {    eatTheRest    =    true;    }    	non-compiled	[CE]  	7	None	replace
8	[BUG]  [BUGGY]  While(stopAtNonOption)  {  eatTheRest  =  false;  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]    tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {    [BUGGY]  While(stopAtNonOption)  {  eatTheRest  =  false;  }  [BUGGY]    tokens.add(   "--   ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	While(stopAtNonOption)  {  eatTheRest  =  false;  }	  if(stopAtNonOption)    {    eatTheRest    =    true;    }    	non-compiled	[CE]  	7	None	replace
9	[BUG]  [BUGGY]  tokens.add( "- "  +  currentOption.getName());  [CE]  [FE]          AssertionFailedError    [CONTEXT]    tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {    [BUGGY]  tokens.add( "- "  +  currentOption.getName());  [BUGGY]    eatTheRest  =  true;  tokens.add(   "--   ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	tokens.add( "- "  +  currentOption.getName());	      tokens.add(   "-   ");    	non-compiled	[CE]  	2	None	replace
10	[BUG]  [BUGGY]  tokens.add( "- ");  currentOption  =  new  Option();  [CE]  [FE]                AssertionFailedError    [CONTEXT]    tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {    [BUGGY]  tokens.add( "- ");  currentOption  =  new  Option();  [BUGGY]    eatTheRest  =  true;  tokens.add(   "--   ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	tokens.add( "- ");  currentOption  =  new  Option();	      tokens.add(   "-   ");    currentOption    =    null;    	non-compiled	[CE]  	5	None	replace
11	[BUG]  [BUGGY]  tokens.add( "-- ");  tokens.add(value);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {    [BUGGY]  tokens.add( "-- ");  tokens.add(value);  [BUGGY]    eatTheRest  =  true;  tokens.add(   "--   ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	tokens.add( "-- ");  tokens.add(value);	      if(stopAtNonOption)    {    tokens.add(   "--   ");    tokens.add(value);    }    	non-compiled	[CE]  	1	None	replace
12	[BUG]  [BUGGY]  While(currentOption.hasArgs())  {  tokens.add( "-- ");  tokens.add(value);  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]    tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {    [BUGGY]  While(currentOption.hasArgs())  {  tokens.add( "-- ");  tokens.add(value);  }  [BUGGY]    eatTheRest  =  true;  tokens.add(   "--   ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	While(currentOption.hasArgs())  {  tokens.add( "-- ");  tokens.add(value);  }	      if(stopAtNonOption)    {    tokens.add(   "--   ");    tokens.add(value);    }    	non-compiled	[CE]  	1	None	replace
13	[BUG]  [BUGGY]  While(currentOption.hasArgs())  {  tokens.add( "-- ");  tokens.add(value);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {    [BUGGY]  While(currentOption.hasArgs())  {  tokens.add( "-- ");  tokens.add(value);  [BUGGY]    eatTheRest  =  true;  tokens.add(   "--   ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	While(currentOption.hasArgs())  {  tokens.add( "-- ");  tokens.add(value);	      if(stopAtNonOption)    {    tokens.add(   "--   ");    tokens.add(value);    }    	non-compiled	[CE]  	1	None	replace
14	[BUG]  [BUGGY]  While(currentOption.hasArg())  {  tokens.add( "-- ");  tokens.add(value);  }  [CE]  [FE]              AssertionFailedError    [CONTEXT]    tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {    [BUGGY]  While(currentOption.hasArg())  {  tokens.add( "-- ");  tokens.add(value);  }  [BUGGY]    eatTheRest  =  true;  tokens.add(   "--   ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	While(currentOption.hasArg())  {  tokens.add( "-- ");  tokens.add(value);  }	      if(stopAtNonOption)    {    tokens.add(   "--   ");    tokens.add(value);    }    	non-compiled	[CE]  	1	None	replace
15	[BUG]  [BUGGY]  tokens.add( "- ");  tokens.add(value);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {    [BUGGY]  tokens.add( "- ");  tokens.add(value);  [BUGGY]    eatTheRest  =  true;  tokens.add(   "--   ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	tokens.add( "- ");  tokens.add(value);	      if(stopAtNonOption)    {    tokens.add(   "-   ");    tokens.add(value);    }    	non-compiled	[CE]  	4	None	replace
16	[BUG]  [BUGGY]  While(currentOption.hasArgs())  {  tokens.add( "- ");  tokens.add(value);  }  [CE]  [FE]                AssertionFailedError    [CONTEXT]    tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {    [BUGGY]  While(currentOption.hasArgs())  {  tokens.add( "- ");  tokens.add(value);  }  [BUGGY]    eatTheRest  =  true;  tokens.add(   "--   ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	While(currentOption.hasArgs())  {  tokens.add( "- ");  tokens.add(value);  }	      if(stopAtNonOption)    {    tokens.add(   "-   ");    tokens.add(value);    }    	non-compiled	[CE]  	4	None	replace
17	[BUG]  [BUGGY]  While(currentOption.hasArg())  {  tokens.add( "- ");  tokens.add(value);  }  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {    [BUGGY]  While(currentOption.hasArg())  {  tokens.add( "- ");  tokens.add(value);  }  [BUGGY]    eatTheRest  =  true;  tokens.add(   "--   ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	While(currentOption.hasArg())  {  tokens.add( "- ");  tokens.add(value);  }	      if(stopAtNonOption)    {    tokens.add(   "-   ");    tokens.add(value);    }    	non-compiled	[CE]  	4	None	replace
18	[BUG]  [BUGGY]  if(stopAtNonOption)  {  eatTheRest  =  false;  }  [CE]  [FE]        AssertionFailedError    [CONTEXT]    tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {    [BUGGY]  if(stopAtNonOption)  {  eatTheRest  =  false;  }  [BUGGY]    tokens.add(   "--   ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	if(stopAtNonOption)  {  eatTheRest  =  false;  }	  eatTheRest    =    false;    	non-compiled	[CE]  	6	None	replace
19	[BUG]  [BUGGY]  if(stopAtNonOption)  {  eatTheRest  =  false;  }  else  {  tokens.add( "-- ");  tokens.add(value);  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]    tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {    [BUGGY]  if(stopAtNonOption)  {  eatTheRest  =  false;  }  else  {  tokens.add( "-- ");  tokens.add(value);  }  [BUGGY]    tokens.add(   "--   ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	if(stopAtNonOption)  {  eatTheRest  =  false;  }  else  {  tokens.add( "-- ");  tokens.add(value);  }	  eatTheRest    =    false;    	non-compiled	[CE]  	6	None	replace
20	[BUG]  [BUGGY]  if(stopAtNonOption)  {  eatTheRest  =  false;  }  else  {  tokens.add( "-- ");  tokens.add(currentOption);  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]    tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {    [BUGGY]  if(stopAtNonOption)  {  eatTheRest  =  false;  }  else  {  tokens.add( "-- ");  tokens.add(currentOption);  }  [BUGGY]    tokens.add(   "--   ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	if(stopAtNonOption)  {  eatTheRest  =  false;  }  else  {  tokens.add( "-- ");  tokens.add(currentOption);  }	  eatTheRest    =    false;    	non-compiled	[CE]  	6	None	replace
21	[BUG]  [BUGGY]  While(currentOption.hasArgs())  {  if(stopAtNonOption)  {  eatTheRest  =  true;  }  [CE]  [FE]              AssertionFailedError    [CONTEXT]    tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {    [BUGGY]  While(currentOption.hasArgs())  {  if(stopAtNonOption)  {  eatTheRest  =  true;  }  [BUGGY]    tokens.add(   "--   ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	While(currentOption.hasArgs())  {  if(stopAtNonOption)  {  eatTheRest  =  true;  }	  if(stopAtNonOption)    {    eatTheRest    =    true;    }    else    {    tokens.add(   "--   ");    tokens.add(value);    }    	non-compiled	[CE]  	9	None	replace
22	[BUG]  [BUGGY]  While(currentOption.hasArgs())  {  if(stopAtNonOption)  {  eatTheRest  =  false;  }  [CE]  [FE]                AssertionFailedError    [CONTEXT]    tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {    [BUGGY]  While(currentOption.hasArgs())  {  if(stopAtNonOption)  {  eatTheRest  =  false;  }  [BUGGY]    tokens.add(   "--   ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	While(currentOption.hasArgs())  {  if(stopAtNonOption)  {  eatTheRest  =  false;  }	  if(stopAtNonOption)    {    eatTheRest    =    true;    }    else    {    tokens.add(   "--   ");    tokens.add(value);    }    	non-compiled	[CE]  	9	None	replace
23	[BUG]  [BUGGY]  While(stopAtNonOption)  {  tokens.add( "-- ");  currentOption  =  null;  }  [CE]  [FE]        AssertionFailedError    [CONTEXT]    tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {    [BUGGY]  While(stopAtNonOption)  {  tokens.add( "-- ");  currentOption  =  null;  }  [BUGGY]    tokens.add(   "--   ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	While(stopAtNonOption)  {  tokens.add( "-- ");  currentOption  =  null;  }	  if(stopAtNonOption)    {    eatTheRest    =    true;    }    else    {    tokens.add(   "--   ");    currentOption    =    null;    }    	non-compiled	[CE]  	13	None	replace
24	[BUG]  [BUGGY]  tokens.add(currentOption);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {    [BUGGY]  tokens.add(currentOption);  [BUGGY]    eatTheRest  =  true;  tokens.add(   "--   ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	tokens.add(currentOption);	      tokens.add(value);    	non-compiled	[CE]  	11	None	replace
25	[BUG]  [BUGGY]  tokens.add('-');  [CE]  [FE]            AssertionFailedError    [CONTEXT]    tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {    [BUGGY]  tokens.add('-');  [BUGGY]    eatTheRest  =  true;  tokens.add(   "--   ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	tokens.add('-');	      tokens.add(value);    	non-compiled	[CE]  	11	None	replace
26	[BUG]  [BUGGY]  tokens.add('-');  currentOption  =  null;  [CE]  [FE]        AssertionFailedError    [CONTEXT]    tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {    [BUGGY]  tokens.add('-');  currentOption  =  null;  [BUGGY]    eatTheRest  =  true;  tokens.add(   "--   ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	tokens.add('-');  currentOption  =  null;	      tokens.add(value);    currentOption    =    null;    	non-compiled	[CE]  	14	None	replace
27	[BUG]  [BUGGY]  tokens.add( "-- "  +  currentOption.getName());  [CE]  [FE]            AssertionFailedError    [CONTEXT]    tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {    [BUGGY]  tokens.add( "-- "  +  currentOption.getName());  [BUGGY]    eatTheRest  =  true;  tokens.add(   "--   ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	tokens.add( "-- "  +  currentOption.getName());	      tokens.add(   "--   ");    	non-compiled	[CE]  	3	None	replace
28	[BUG]  [BUGGY]  tokens.add( "--n ");  [CE]  [FE]              AssertionFailedError    [CONTEXT]    tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {    [BUGGY]  tokens.add( "--n ");  [BUGGY]    eatTheRest  =  true;  tokens.add(   "--   ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	tokens.add( "--n ");	      tokens.add(   "--   ");    	non-compiled	[CE]  	3	None	replace
29	[BUG]  [BUGGY]  kens.add( "-- ");  tokens.add(value);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {    [BUGGY]  kens.add( "-- ");  tokens.add(value);  [BUGGY]    eatTheRest  =  true;  tokens.add(   "--   ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	kens.add( "-- ");  tokens.add(value);	      if(stopAtNonOption)    {    tokens.add(   "--   ");    tokens.add(value);    }    	non-compiled	[CE]  	1	None	replace
30	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption( "stopAtNonOption ");  [CE]  [FE]          AssertionFailedError    [CONTEXT]    tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {    [BUGGY]  Option  currentOption  =  options.getOption( "stopAtNonOption ");  [BUGGY]    eatTheRest  =  true;  tokens.add(   "--   ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	Option  currentOption  =  options.getOption( "stopAtNonOption ");	      if(stopAtNonOption)    {    tokens.add(   "--   ");    tokens.add(value);    }    	non-compiled	[CE]  	1	None	replace
31	[BUG]  [BUGGY]  tokens.add( "-- ",  currentOption);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {    [BUGGY]  tokens.add( "-- ",  currentOption);  [BUGGY]    eatTheRest  =  true;  tokens.add(   "--   ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	tokens.add( "-- ",  currentOption);	      tokens.add(   "--   ");    	non-compiled	[CE]  	3	None	replace
32	[BUG]  [BUGGY]  tokens.add( "-- "  +  value);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {    [BUGGY]  tokens.add( "-- "  +  value);  [BUGGY]    eatTheRest  =  true;  tokens.add(   "--   ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	tokens.add( "-- "  +  value);	      tokens.add(   "--   ");    	non-compiled	[CE]  	3	None	replace
33	[BUG]  [BUGGY]  parent  ==  stopAtNonOption)  {  eatTheRest  =  true;  }  else  {  tokens.add( "-- ");  tokens.add(value);  }  [CE]  [FE]              AssertionFailedError    [CONTEXT]    tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {    [BUGGY]  parent  ==  stopAtNonOption)  {  eatTheRest  =  true;  }  else  {  tokens.add( "-- ");  tokens.add(value);  }  [BUGGY]    tokens.add(   "--   ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	parent  ==  stopAtNonOption)  {  eatTheRest  =  true;  }  else  {  tokens.add( "-- ");  tokens.add(value);  }	  if(stopAtNonOption)    {    eatTheRest    =    true;    }    else    {    tokens.add(   "--   ");    tokens.add(value);    }    	non-compiled	[CE]  	9	None	replace
34	[BUG]  [BUGGY]  parent  ==  stopAtNonOption)  {  eatTheRest  =  true;  }  else  {  tokens.add( ".-- ");  tokens.add(value);  }  [CE]  [FE]                AssertionFailedError    [CONTEXT]    tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {    [BUGGY]  parent  ==  stopAtNonOption)  {  eatTheRest  =  true;  }  else  {  tokens.add( ".-- ");  tokens.add(value);  }  [BUGGY]    tokens.add(   "--   ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	parent  ==  stopAtNonOption)  {  eatTheRest  =  true;  }  else  {  tokens.add( ".-- ");  tokens.add(value);  }	  if(stopAtNonOption)    {    eatTheRest    =    true;    }    else    {    tokens.add(   "--   ");    tokens.add(value);    }    	non-compiled	[CE]  	9	None	replace
35	[BUG]  [BUGGY]  parent  ==  stopAtNonOption)  {  eatTheRest  =  true;  }  else  {  tokens.add( "--   ");  currentOption  =  null;  }  [CE]  [FE]        AssertionFailedError    [CONTEXT]    tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {    [BUGGY]  parent  ==  stopAtNonOption)  {  eatTheRest  =  true;  }  else  {  tokens.add( "--   ");  currentOption  =  null;  }  [BUGGY]    tokens.add(   "--   ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	parent  ==  stopAtNonOption)  {  eatTheRest  =  true;  }  else  {  tokens.add( "--   ");  currentOption  =  null;  }	  if(stopAtNonOption)    {    eatTheRest    =    true;    }    else    {    tokens.add(   "--   ");    currentOption    =    null;    }    	non-compiled	[CE]  	13	None	replace
36	[BUG]  [BUGGY]  tokens.add( "- ",  currentOption);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {    [BUGGY]  tokens.add( "- ",  currentOption);  [BUGGY]    eatTheRest  =  true;  tokens.add(   "--   ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	tokens.add( "- ",  currentOption);	      tokens.add(   "-   ");    	non-compiled	[CE]  	2	None	replace
37	[BUG]  [BUGGY]  kens.add( "- ");  tokens.add(value);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {    [BUGGY]  kens.add( "- ");  tokens.add(value);  [BUGGY]    eatTheRest  =  true;  tokens.add(   "--   ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	kens.add( "- ");  tokens.add(value);	      if(stopAtNonOption)    {    tokens.add(   "-   ");    tokens.add(value);    }    	non-compiled	[CE]  	4	None	replace
38	[BUG]  [BUGGY]  tokens.add( "-- ");  currentOption  =  this;  [CE]  [FE]        AssertionFailedError    [CONTEXT]    tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {    [BUGGY]  tokens.add( "-- ");  currentOption  =  this;  [BUGGY]    eatTheRest  =  true;  tokens.add(   "--   ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	tokens.add( "-- ");  currentOption  =  this;	      tokens.add(   "--   ");    currentOption    =    null;    	non-compiled	[CE]  	10	None	replace
39	[BUG]  [BUGGY]  While(stopAtNonOption)  {  tokens.add( "-- ");  eatTheRest  =  true;  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]    tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {    [BUGGY]  While(stopAtNonOption)  {  tokens.add( "-- ");  eatTheRest  =  true;  }  [BUGGY]    tokens.add(   "--   ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	While(stopAtNonOption)  {  tokens.add( "-- ");  eatTheRest  =  true;  }	  if(stopAtNonOption)    {    eatTheRest    =    true;    }    	non-compiled	[CE]  	7	None	replace
40	[BUG]  [BUGGY]  eattheRest  =  true;  [CE]  [FE]        AssertionFailedError    [CONTEXT]    tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {    [BUGGY]  eattheRest  =  true;  [BUGGY]    tokens.add(   "--   ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	eattheRest  =  true;	  eatTheRest    =    false;    	non-compiled	[CE]  	6	None	replace
41	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [CE]  [FE]          AssertionFailedError    [CONTEXT]    tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {    [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [BUGGY]    tokens.add(   "--   ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti	  if(stopAtNonOption)    {    eatTheRest    =    true;    }    	non-compiled	[CE]  	7	None	replace
42	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  =  true;  [CE]  [FE]            AssertionFailedError    [CONTEXT]    tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {    [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  =  true;  [BUGGY]    tokens.add(   "--   ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  =  true;	  if(stopAtNonOption)    {    eatTheRest    =    true;    }    	non-compiled	[CE]  	7	None	replace
43	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [CE]  [FE]              AssertionFailedError    [CONTEXT]    tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {    [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [BUGGY]    tokens.add(   "--   ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti	  if(stopAtNonOption)    {    eatTheRest    =    true;    }    	non-compiled	[CE]  	7	None	replace
44	[BUG]  [BUGGY]  [Delete]  [CE]  [FE]              AssertionFailedError    [CONTEXT]    tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {    [BUGGY]  [Delete]  [BUGGY]    tokens.add(   "--   ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	[Delete]	  if(stopAtNonOption)    {    eatTheRest    =    true;    }    else    {    tokens.add(   "--   ");    tokens.add(value);    }    	non-compiled	[CE]  	9	None	replace
45	[BUG]  [BUGGY]  tokens.add( "-- ".equals(value));  [CE]  [FE]                AssertionFailedError    [CONTEXT]    tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {    [BUGGY]  tokens.add( "-- ".equals(value));  [BUGGY]    tokens.add(   "--   ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	tokens.add( "-- ".equals(value));	  if(stopAtNonOption)    {    eatTheRest    =    true;    }    else    {    tokens.add(   "--   ");    tokens.add(value);    }    	non-compiled	[CE]  	9	None	replace
46	[BUG]  [BUGGY]  tokens.add( "- ".);  tokens.add(value);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {    [BUGGY]  tokens.add( "- ".);  tokens.add(value);  [BUGGY]    eatTheRest  =  true;  tokens.add(   "--   ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	tokens.add( "- ".);  tokens.add(value);	      if(stopAtNonOption)    {    tokens.add(   "-   ");    tokens.add(value);    }    	non-compiled	[CE]  	4	None	replace
47	[BUG]  [BUGGY]  tokens.add( "- ");  currentOption  =  this;  [CE]  [FE]                AssertionFailedError    [CONTEXT]    tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {    [BUGGY]  tokens.add( "- ");  currentOption  =  this;  [BUGGY]    eatTheRest  =  true;  tokens.add(   "--   ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	tokens.add( "- ");  currentOption  =  this;	      tokens.add(   "-   ");    currentOption    =    null;    	non-compiled	[CE]  	5	None	replace
48	[BUG]  [BUGGY]  tokens.add( "-- ");  if(stopAtNonOption)  {  eatTheRest  =  true;  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]    tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {    [BUGGY]  tokens.add( "-- ");  if(stopAtNonOption)  {  eatTheRest  =  true;  }  [BUGGY]    eatTheRest  =  true;  tokens.add(   "--   ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	tokens.add( "-- ");  if(stopAtNonOption)  {  eatTheRest  =  true;  }	      tokens.add(   "--   ");    eatTheRest    =    true;    	non-compiled	[CE]  	12	None	replace
49	[BUG]  [BUGGY]  tokens.add( "-- ");  if(stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]              AssertionFailedError    [CONTEXT]    tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {    [BUGGY]  tokens.add( "-- ");  if(stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    eatTheRest  =  true;  tokens.add(   "--   ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	tokens.add( "-- ");  if(stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }	      tokens.add(   "--   ");    eatTheRest    =    true;    	non-compiled	[CE]  	12	None	replace
50	[BUG]  [BUGGY]  tokens.add( "- ",  currentOption.hasArg());  [CE]  [FE]          AssertionFailedError    [CONTEXT]    tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {    [BUGGY]  tokens.add( "- ",  currentOption.hasArg());  [BUGGY]    eatTheRest  =  true;  tokens.add(   "--   ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	tokens.add( "- ",  currentOption.hasArg());	      tokens.add(   "-   ");    	non-compiled	[CE]  	2	None	replace
51	[BUG]  [BUGGY]  tokens.add( "-- ".equals(currentOption.getName()));  [CE]  [FE]            AssertionFailedError    [CONTEXT]    tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {    [BUGGY]  tokens.add( "-- ".equals(currentOption.getName()));  [BUGGY]    tokens.add(   "--   ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	tokens.add( "-- ".equals(currentOption.getName()));	  if(stopAtNonOption)    {    eatTheRest    =    true;    }    else    {    tokens.add(   "--   ");    tokens.add(currentOption);    }    	non-compiled	[CE]  	8	None	replace
