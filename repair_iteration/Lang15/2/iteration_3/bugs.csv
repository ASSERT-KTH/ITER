bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(parameterizedOwnerType),  parameters);  [CE]  cannot  find  symbol  parameters  [FE]        NullPointerException      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(parameterizedOwnerType),  parameters);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(parameterizedOwnerType),  parameters);	  typeVarAssigns    =    getTypeArguments(cls,    getRawType(parameterizedOwnerType),    toClass);    	non-compiled	[CE]  cannot  find  symbol  parameters	59	None	replace
2	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  parametersType,  getRawType(parameterizedOwnerType),  toClass);  [CE]  cannot  find  symbol  parametersType  [FE]          NullPointerException      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  parametersType,  getRawType(parameterizedOwnerType),  toClass);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(cls,  parametersType,  getRawType(parameterizedOwnerType),  toClass);	  typeVarAssigns    =    getTypeArguments(cls,    getRawType(parameterizedOwnerType),    toClass);    	non-compiled	[CE]  cannot  find  symbol  parametersType	59	None	replace
3	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(cls),  toClass);  [CE]  no  suitable  method  found  for  getRawType(Class<CAP#1>)  [FE]            NullPointerException      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(cls),  toClass);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(cls),  toClass);	  typeVarAssigns    =    getTypeArguments(cls,    getRawType(parameterizedOwnerType),    toClass);    	non-compiled	[CE]  no  suitable  method  found  for  getRawType(Class<CAP#1>)	59	None	replace
4	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns    =    getTypeArguments(cls,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	add	typeVarAssigns        =        getTypeArguments(cls,        getRawType(parameterizedOwnerType),        subtypeVarAssigns);        typeVarAssigns    =    getTypeArguments(cls,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  	compilable	  [FE]  AssertionError  	22	2	add
5	[BUG]  [BUGGY]  typeVarAssigns    =    getTypeArguments(cls,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns    =    getTypeArguments(cls,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns        =        getTypeArguments(cls,        getRawType(parameterizedOwnerType),        subtypeVarAssigns);        typeVarAssigns    =    getTypeArguments(cls,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  	compilable	  [FE]  AssertionError  	22	2	add
6	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns    =    getTypeArguments(cls,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	add	typeVarAssigns        =        getTypeArguments(cls,        getRawType(parameterizedOwnerType),        subtypeVarAssigns);        typeVarAssigns    =    getTypeArguments(cls,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  	compilable	  [FE]  AssertionError  	22	2	add
7	[BUG]  [BUGGY]  typeVarAssigns    =    getTypeArguments(cls,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns    =    getTypeArguments(cls,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns        =        getTypeArguments(cls,        getRawType(parameterizedOwnerType),        subtypeVarAssigns);        typeVarAssigns    =    getTypeArguments(cls,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  	compilable	  [FE]  AssertionError  	22	2	add
8	[BUG]  [BUGGY]  typeVarAssigns    =    getTypeArguments(cls,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarA  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns    =    getTypeArguments(cls,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarA  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns        =        getTypeArguments(cls,        getRawType(parameterizedOwnerType),        subtypeVarAssigns);        typeVarAssigns    =    getTypeArguments(cls,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarA	  	non-compiled	[CE]  ')'  expected	22	None	add
9	[BUG]  [BUGGY]  typeVarAssigns    =    getTypeArguments(cls,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeV  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns    =    getTypeArguments(cls,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeV  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns        =        getTypeArguments(cls,        getRawType(parameterizedOwnerType),        subtypeVarAssigns);        typeVarAssigns    =    getTypeArguments(cls,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeV	  	non-compiled	[CE]  ')'  expected	22	None	add
10	[BUG]  [BUGGY]  typeVarAssigns    =    getTypeArguments(cls,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns    =    getTypeArguments(cls,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns        =        getTypeArguments(cls,        getRawType(parameterizedOwnerType),        subtypeVarAssigns);        typeVarAssigns    =    getTypeArguments(cls,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns	  	non-compiled	[CE]  ')'  expected	22	None	add
11	[BUG]  [BUGGY]  Type[]  types  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  incompatible  types  [FE]              NullPointerException      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Type[]  types  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  types  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  typeVarAssigns    =    getTypeArguments(cls,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    Type[]    types    =    getTypeArguments(cls,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  incompatible  types	26	None	replace
12	[BUG]  [BUGGY]  Type[]  types  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  toClass);  [CE]  no  suitable  method  found  for  getTypeArguments(Class<CAP#1>,Class<CAP#2>,Class<CAP#3>)  [FE]                NullPointerException      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Type[]  types  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  toClass);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  types  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  toClass);	  typeVarAssigns    =    getTypeArguments(cls,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    Type[]    types    =    getTypeArguments(cls,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  no  suitable  method  found  for  getTypeArguments(Class<CAP#1>,Class<CAP#2>,Class<CAP#3>)	26	None	replace
13	[BUG]  [BUGGY]  Type[]  types  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  typeParams);  [CE]  cannot  find  symbol  typeParams  [FE]                  NullPointerException      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Type[]  types  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  typeParams);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  types  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  typeParams);	  typeVarAssigns    =    getTypeArguments(cls,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    Type[]    types    =    getTypeArguments(cls,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol  typeParams	26	None	replace
14	[BUG]  [BUGGY]  Type[]  types  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  typeVarAssigns);  [CE]  incompatible  types  [FE]                    NullPointerException      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Type[]  types  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  typeVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  types  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  typeVarAssigns);	  typeVarAssigns    =    getTypeArguments(cls,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    Type[]    types    =    getTypeArguments(cls,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  incompatible  types	26	None	replace
15	[BUG]  [BUGGY]  Class  <?>[]  subtypeVarAssigns  =  parameterizedType.getConstructorParameters();  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Class  <?>[]  subtypeVarAssigns  =  parameterizedType.getConstructorParameters();  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Class  <?>[]  subtypeVarAssigns  =  parameterizedType.getConstructorParameters();	  Class    <?>[]    subtypeVarAssigns    =    parameterizedType.getConstructorArguments();    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	37	None	replace
16	[BUG]  [BUGGY]  Type[]  subtypeParams  =  toClass.getConstructorParameters(parameterizedType);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Type[]  subtypeParams  =  toClass.getConstructorParameters(parameterizedType);  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeParams  =  toClass.getConstructorParameters(parameterizedType);	  Type[]    subtypeParams    =    parameterizedType.getConstructorParameters(toClass);    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
17	[BUG]  [BUGGY]  Type[]  subtypeParams  =  parameterizedType.getConstructorParameters(toClass,  toClass);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Type[]  subtypeParams  =  parameterizedType.getConstructorParameters(toClass,  toClass);  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeParams  =  parameterizedType.getConstructorParameters(toClass,  toClass);	  Type[]    subtypeParams    =    parameterizedType.getConstructorParameters(toClass);    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
18	[BUG]  [BUGGY]  Type[]  toClassParams  =  parameterizedType.getConstructorParameters(toClass);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Type[]  toClassParams  =  parameterizedType.getConstructorParameters(toClass);  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  toClassParams  =  parameterizedType.getConstructorParameters(toClass);	  Type[]    subtypeParams    =    parameterizedType.getConstructorParameters(toClass);    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
19	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  parametersizedType.getParameterizedTypeArguments();  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Type[]  subtypeVarAssigns  =  parametersizedType.getParameterizedTypeArguments();  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeVarAssigns  =  parametersizedType.getParameterizedTypeArguments();	  Type[]    subtypeVarAssigns    =    parameterizedOwnerType.getParameterizedTypeArguments();    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	50	None	replace
20	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  typeVarAssigns);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]        NullPointerException      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  typeVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  typeVarAssigns);	  typeVarAssigns    =    getTypeArguments(cls,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    Type[]    subtypeVarAssigns    =    getTypeArguments(cls,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	67	None	replace
21	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  toClass);  Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  no  suitable  method  found  for  getTypeArguments(Class<CAP#1>,Class<CAP#2>,Class<CAP#3>)  [FE]          NullPointerException      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  toClass);  Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  toClass);  Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  typeVarAssigns    =    getTypeArguments(cls,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    Type[]    subtypeVarAssigns    =    getTypeArguments(cls,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  no  suitable  method  found  for  getTypeArguments(Class<CAP#1>,Class<CAP#2>,Class<CAP#3>)	67	None	replace
22	[BUG]  [BUGGY]  Type[]  subtypeParams  =  cls.getActualTypeParameters();  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Type[]  subtypeParams  =  cls.getActualTypeParameters();  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeParams  =  cls.getActualTypeParameters();	  Type[]    subtypeParams    =    toClass.getActualTypeParameters();    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
23	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  parameterizedOwnerType,  getRawType(ownerType),  subtypeVarAssigns);  [CE]  no  suitable  method  found  for  getRawType(Type)  [FE]        AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  parameterizedOwnerType,  getRawType(ownerType),  subtypeVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(cls,  parameterizedOwnerType,  getRawType(ownerType),  subtypeVarAssigns);	  typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(ownerType),    subtypeVarAssigns);    	non-compiled	[CE]  no  suitable  method  found  for  getRawType(Type)	53	None	replace
24	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  toClass,  getRawType(ownerType),  subtypeVarAssigns);  [CE]  no  suitable  method  found  for  getRawType(Type)  [FE]          AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  toClass,  getRawType(ownerType),  subtypeVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  toClass,  getRawType(ownerType),  subtypeVarAssigns);	  typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(ownerType),    subtypeVarAssigns);    	non-compiled	[CE]  no  suitable  method  found  for  getRawType(Type)	53	None	replace
25	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(ownerType),  toClass,  subtypeVarAssigns);  [CE]  no  suitable  method  found  for  getRawType(Type)  [FE]            AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(ownerType),  toClass,  subtypeVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(ownerType),  toClass,  subtypeVarAssigns);	  typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(ownerType),    subtypeVarAssigns);    	non-compiled	[CE]  no  suitable  method  found  for  getRawType(Type)	53	None	replace
26	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(ownerType,  parameterizedOwnerType,  subtypeVarAssigns);  [CE]  no  suitable  method  found  for  getTypeArguments(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(ownerType,  parameterizedOwnerType,  subtypeVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(ownerType,  parameterizedOwnerType,  subtypeVarAssigns);	  typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(ownerType),    subtypeVarAssigns);    	non-compiled	[CE]  no  suitable  method  found  for  getTypeArguments(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	53	None	replace
27	[BUG]  [BUGGY]  Type[]  typeArgs  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  incompatible  types  [FE]          AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Type[]  typeArgs  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  typeArgs  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  typeVarAssigns    =    getTypeArguments(ownerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    Type[]    typeArgs    =    getTypeArguments(ownerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  incompatible  types	63	None	replace
28	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  toClass);  Type[]  typeArgs  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  no  suitable  method  found  for  getTypeArguments(Type,Class<CAP#1>,Class<CAP#2>)  [FE]            AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  toClass);  Type[]  typeArgs  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  toClass);  Type[]  typeArgs  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  typeVarAssigns    =    getTypeArguments(ownerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    Type[]    typeArgs    =    getTypeArguments(ownerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  no  suitable  method  found  for  getTypeArguments(Type,Class<CAP#1>,Class<CAP#2>)	63	None	replace
29	[BUG]  [BUGGY]  Type[]  subtypeParams  =  parameterizedOwnerType.getAssignments();  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Type[]  subtypeParams  =  parameterizedOwnerType.getAssignments();  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeParams  =  parameterizedOwnerType.getAssignments();	  Type[]    subtypeParams    =    parametersizedType.getAssignments();    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
30	[BUG]  [BUGGY]  Type[]  subtypeParams  =  parametersType.getAssignments();  [CE]  cannot  find  symbol  parametersType  [FE]                    AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Type[]  subtypeParams  =  parametersType.getAssignments();  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeParams  =  parametersType.getAssignments();	  Type[]    subtypeParams    =    parametersizedType.getAssignments();    	non-compiled	[CE]  cannot  find  symbol  parametersType	66	None	replace
31	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns    =    getTypeArguments(ownerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	add	typeVarAssigns        =        getTypeArguments(ownerType,        getRawType(parameterizedOwnerType),        subtypeVarAssigns);        typeVarAssigns    =    getTypeArguments(ownerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  	compilable	  [FE]  AssertionError  	43	2	add
32	[BUG]  [BUGGY]  typeVarAssigns    =    getTypeArguments(ownerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns    =    getTypeArguments(ownerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns        =        getTypeArguments(ownerType,        getRawType(parameterizedOwnerType),        subtypeVarAssigns);        typeVarAssigns    =    getTypeArguments(ownerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  	compilable	  [FE]  AssertionError  	43	2	add
33	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns    =    getTypeArguments(ownerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	add	typeVarAssigns        =        getTypeArguments(ownerType,        getRawType(parameterizedOwnerType),        subtypeVarAssigns);        typeVarAssigns    =    getTypeArguments(ownerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  	compilable	  [FE]  AssertionError  	43	2	add
34	[BUG]  [BUGGY]  typeVarAssigns    =    getTypeArguments(ownerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns    =    getTypeArguments(ownerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns        =        getTypeArguments(ownerType,        getRawType(parameterizedOwnerType),        subtypeVarAssigns);        typeVarAssigns    =    getTypeArguments(ownerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  	compilable	  [FE]  AssertionError  	43	2	add
35	[BUG]  [BUGGY]  typeVarAssigns    =    getTypeArguments(ownerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  Type[]  typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  variable  typeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]        AssertionError    [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns    =    getTypeArguments(ownerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  Type[]  typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns        =        getTypeArguments(ownerType,        getRawType(parameterizedOwnerType),        subtypeVarAssigns);        typeVarAssigns    =    getTypeArguments(ownerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    Type[]  typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  	non-compiled	[CE]  variable  typeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	43	None	add
36	[BUG]  [BUGGY]  typeVarAssigns    =    getTypeArguments(ownerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarA  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns    =    getTypeArguments(ownerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarA  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns        =        getTypeArguments(ownerType,        getRawType(parameterizedOwnerType),        subtypeVarAssigns);        typeVarAssigns    =    getTypeArguments(ownerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarA	  	non-compiled	[CE]  ')'  expected	43	None	add
37	[BUG]  [BUGGY]  typeVarAssigns    =    getTypeArguments(ownerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns    =    getTypeArguments(ownerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns        =        getTypeArguments(ownerType,        getRawType(parameterizedOwnerType),        subtypeVarAssigns);        typeVarAssigns    =    getTypeArguments(ownerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns	  	non-compiled	[CE]  ')'  expected	43	None	add
38	[BUG]  [BUGGY]  Type[]  typeParams  =  parameterizedType.getActualTypeParameters();  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Type[]  typeParams  =  parameterizedType.getActualTypeParameters();  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  typeParams  =  parameterizedType.getActualTypeParameters();	  Type[]    subtypeParams    =    parametersizedType.getActualTypeParameters();    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
39	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]        AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  typeVarAssigns    =    getTypeArguments(ownerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    Type[]    subtypeVarAssigns    =    getTypeArguments(ownerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	85	None	replace
40	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  typeVarAssigns);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]          AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  typeVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  typeVarAssigns);	  typeVarAssigns    =    getTypeArguments(ownerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    Type[]    subtypeVarAssigns    =    getTypeArguments(ownerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	85	None	replace
41	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  toClass);  Type[]  subtypeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  no  suitable  method  found  for  getTypeArguments(Type,Class<CAP#1>,Class<CAP#2>)  [FE]            AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  toClass);  Type[]  subtypeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  toClass);  Type[]  subtypeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  typeVarAssigns    =    getTypeArguments(ownerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    Type[]    subtypeVarAssigns    =    getTypeArguments(ownerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  no  suitable  method  found  for  getTypeArguments(Type,Class<CAP#1>,Class<CAP#2>)	85	None	replace
42	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  parametersizedType.getRawTypeParameters();  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                    AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Type[]  subtypeVarAssigns  =  parametersizedType.getRawTypeParameters();  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeVarAssigns  =  parametersizedType.getRawTypeParameters();	  Type[]    subtypeVarAssigns    =    parameterizedType.getRawTypeParameters();    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	39	None	replace
43	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(parameterizedOwnerType),  parametersizedOwnerType);  [CE]  cannot  find  symbol  parametersizedOwnerType  [FE]              AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(parameterizedOwnerType),  parametersizedOwnerType);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(parameterizedOwnerType),  parametersizedOwnerType);	  typeVarAssigns    =    getTypeArguments(cls,    parametersizedOwnerType,    getRawType(parameterizedOwnerType),    toClass);    	non-compiled	[CE]  cannot  find  symbol  parametersizedOwnerType	14	None	replace
44	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  ownerType,  getRawType(parameterizedOwnerType),  toClass);  [CE]  no  suitable  method  found  for  getTypeArguments(Class<CAP#1>,Type,Class<CAP#2>,Class<CAP#3>)  [FE]                AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  ownerType,  getRawType(parameterizedOwnerType),  toClass);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(cls,  ownerType,  getRawType(parameterizedOwnerType),  toClass);	  typeVarAssigns    =    getTypeArguments(cls,    parametersizedOwnerType,    getRawType(parameterizedOwnerType),    toClass);    	non-compiled	[CE]  no  suitable  method  found  for  getTypeArguments(Class<CAP#1>,Type,Class<CAP#2>,Class<CAP#3>)	14	None	replace
45	[BUG]  [BUGGY]  Type[]  typeParams  =  getTypeParameters(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  cannot  find  symbol  [FE]        NullPointerException      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Type[]  typeParams  =  getTypeParameters(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  typeParams  =  getTypeParameters(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  typeVarAssigns    =    getTypeArguments(cls,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    Type[]    typeParams    =    getTypeParameters(cls,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
46	[BUG]  [BUGGY]  Type[]  typeVarAssigns  =  getTypeParameters(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  variable  typeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]          NullPointerException      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Type[]  typeVarAssigns  =  getTypeParameters(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  typeVarAssigns  =  getTypeParameters(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  typeVarAssigns    =    getTypeArguments(cls,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    Type[]    typeParams    =    getTypeParameters(cls,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  variable  typeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	87	None	replace
47	[BUG]  [BUGGY]  Type[]  typeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  variable  typeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]            NullPointerException      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Type[]  typeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  typeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  typeVarAssigns    =    getTypeArguments(cls,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    Type[]    typeParams    =    getTypeParameters(cls,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  variable  typeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	87	None	replace
48	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  no  suitable  method  found  for  getTypeArguments(Class<CAP#1>,Type,Class<CAP#2>,Map<TypeVariable<?>,Type>)  [FE]          NullPointerException      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(cls,  ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  typeVarAssigns    =    getTypeArguments(cls,    parametersType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  no  suitable  method  found  for  getTypeArguments(Class<CAP#1>,Type,Class<CAP#2>,Map<TypeVariable<?>,Type>)	52	None	replace
49	[BUG]  [BUGGY]  Type[]  typeParams  =  parameterizedType.getAssignedTypeParameters();  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Type[]  typeParams  =  parameterizedType.getAssignedTypeParameters();  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  typeParams  =  parameterizedType.getAssignedTypeParameters();	  Type[]    subtypeParams    =    parametersType.getAssignedTypeParameters();    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
50	[BUG]  [BUGGY]  Type[]  subtypeParams  =  cls.getAssignments();  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Type[]  subtypeParams  =  cls.getAssignments();  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeParams  =  cls.getAssignments();	  Type[]    subtypeParams    =    toClass.getAssignments();    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
51	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(parameterizedOwnerType),  subtypeVarAssigns,  ownerType);  [CE]  no  suitable  method  found  for  getTypeArguments(Class<CAP#1>,Class<CAP#2>,Class<CAP#3>,Map<TypeVariable<?>,Type>,Type)  [FE]              AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(parameterizedOwnerType),  subtypeVarAssigns,  ownerType);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(parameterizedOwnerType),  subtypeVarAssigns,  ownerType);	  typeVarAssigns    =    getTypeArguments(cls,    toClass,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  no  suitable  method  found  for  getTypeArguments(Class<CAP#1>,Class<CAP#2>,Class<CAP#3>,Map<TypeVariable<?>,Type>,Type)	27	None	replace
52	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(parameterizedOwnerType),  typeParams);  [CE]  cannot  find  symbol  typeParams  [FE]                AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(parameterizedOwnerType),  typeParams);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(parameterizedOwnerType),  typeParams);	  typeVarAssigns    =    getTypeArguments(cls,    toClass,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol  typeParams	27	None	replace
53	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(parameterizedOwnerType),  subtypeVarAssigns,  i);  [CE]  cannot  find  symbol  i  [FE]                  AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(parameterizedOwnerType),  subtypeVarAssigns,  i);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(parameterizedOwnerType),  subtypeVarAssigns,  i);	  typeVarAssigns    =    getTypeArguments(cls,    toClass,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol  i	27	None	replace
54	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(ownerType,  getOwnerType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(ownerType,  getOwnerType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(ownerType,  getOwnerType(parameterizedOwnerType),  subtypeVarAssigns);	  typeVarAssigns    =    getTypeArguments(ownerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    typeVarAssigns    =    getTypeArguments(ownerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
55	[BUG]  [BUGGY]  Type[]  subtypeParams  =  ownerType.getSubTypeParameters();  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Type[]  subtypeParams  =  ownerType.getSubTypeParameters();  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeParams  =  ownerType.getSubTypeParameters();	  Type[]    subtypeParams    =    parametersizedOwnerType.getSubTypeParameters();    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
56	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  parameterizedType.getActualTypeParameters(toClass,  toClass);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Type[]  subtypeVarAssigns  =  parameterizedType.getActualTypeParameters(toClass,  toClass);  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeVarAssigns  =  parameterizedType.getActualTypeParameters(toClass,  toClass);	  Type[]    subtypeVarAssigns    =    parameterizedType.getActualTypeParameters(toClass);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	84	None	replace
57	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  parameterizedType.getActualTypeParameters(toClass,  ownerType);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                    AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Type[]  subtypeVarAssigns  =  parameterizedType.getActualTypeParameters(toClass,  ownerType);  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeVarAssigns  =  parameterizedType.getActualTypeParameters(toClass,  ownerType);	  Type[]    subtypeVarAssigns    =    parameterizedType.getActualTypeParameters(toClass);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	84	None	replace
58	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  parameterizedType.getActualTypeParameters(cls);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                      AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Type[]  subtypeVarAssigns  =  parameterizedType.getActualTypeParameters(cls);  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeVarAssigns  =  parameterizedType.getActualTypeParameters(cls);	  Type[]    subtypeVarAssigns    =    parameterizedType.getActualTypeParameters(toClass);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	84	None	replace
59	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  parameterizedType.getActualTypeParameters(toClass,  cls);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                        AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Type[]  subtypeVarAssigns  =  parameterizedType.getActualTypeParameters(toClass,  cls);  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeVarAssigns  =  parameterizedType.getActualTypeParameters(toClass,  cls);	  Type[]    subtypeVarAssigns    =    parameterizedType.getActualTypeParameters(toClass);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	84	None	replace
60	[BUG]  [BUGGY]  Type[]  subtypeParams  =  toClass.getSubTypeParameters();  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Type[]  subtypeParams  =  toClass.getSubTypeParameters();  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeParams  =  toClass.getSubTypeParameters();	  Type[]    subtypeParams    =    parametersizedType.getSubTypeParameters();    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
61	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(toClass),  subtypeVarAssigns);  [CE]  no  suitable  method  found  for  getRawType(Class<CAP#1>)  [FE]                      AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(toClass),  subtypeVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(toClass),  subtypeVarAssigns);	  typeVarAssigns    =    getTypeArguments(cls,    parametersType,    getRawType(toClass),    subtypeVarAssigns);    	non-compiled	[CE]  no  suitable  method  found  for  getRawType(Class<CAP#1>)	21	None	replace
62	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(toClass),  typeVarAssigns);  [CE]  no  suitable  method  found  for  getRawType(Class<CAP#1>)  [FE]                        AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(toClass),  typeVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(toClass),  typeVarAssigns);	  typeVarAssigns    =    getTypeArguments(cls,    parametersType,    getRawType(toClass),    subtypeVarAssigns);    	non-compiled	[CE]  no  suitable  method  found  for  getRawType(Class<CAP#1>)	21	None	replace
63	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(toClass),  parameterizedType);  [CE]  no  suitable  method  found  for  getRawType(Class<CAP#1>)  [FE]                          AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(toClass),  parameterizedType);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(toClass),  parameterizedType);	  typeVarAssigns    =    getTypeArguments(cls,    parametersType,    getRawType(toClass),    subtypeVarAssigns);    	non-compiled	[CE]  no  suitable  method  found  for  getRawType(Class<CAP#1>)	21	None	replace
64	[BUG]  [BUGGY]  Class  <?>[]  subtypeVarAssigns  =  parameterizedType.getActualTypeVariables();  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]            AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Class  <?>[]  subtypeVarAssigns  =  parameterizedType.getActualTypeVariables();  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Class  <?>[]  subtypeVarAssigns  =  parameterizedType.getActualTypeVariables();	  Class    <?>[]    subtypeVarAssigns    =    parameterizedType.getSubtypeVariables();    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	77	None	replace
65	[BUG]  [BUGGY]  Class  <?>[]  subtypeVarAssigns  =  parameterizedType.getRawTypeVariables();  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Class  <?>[]  subtypeVarAssigns  =  parameterizedType.getRawTypeVariables();  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Class  <?>[]  subtypeVarAssigns  =  parameterizedType.getRawTypeVariables();	  Class    <?>[]    subtypeVarAssigns    =    parameterizedType.getSubtypeVariables();    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	77	None	replace
66	[BUG]  [BUGGY]  Class  <?>[]  subtypeVarAssigns  =  parameterizedType.getReturnTypeVariables();  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Class  <?>[]  subtypeVarAssigns  =  parameterizedType.getReturnTypeVariables();  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Class  <?>[]  subtypeVarAssigns  =  parameterizedType.getReturnTypeVariables();	  Class    <?>[]    subtypeVarAssigns    =    parameterizedType.getSubtypeVariables();    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	77	None	replace
67	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  parameterizedOwnerType,  getRawType(toClass),  subtypeVarAssigns,  ownerType);  [CE]  no  suitable  method  found  for  getRawType(Class<CAP#1>)  [FE]                    AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  parameterizedOwnerType,  getRawType(toClass),  subtypeVarAssigns,  ownerType);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(cls,  parameterizedOwnerType,  getRawType(toClass),  subtypeVarAssigns,  ownerType);	  typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(toClass),    subtypeVarAssigns,    ownerType);    	non-compiled	[CE]  no  suitable  method  found  for  getRawType(Class<CAP#1>)	74	None	replace
68	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(toClass),  subtypeVarAssigns,  ownerType);  [CE]  no  suitable  method  found  for  getRawType(Class<CAP#1>)  [FE]                      AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(toClass),  subtypeVarAssigns,  ownerType);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(toClass),  subtypeVarAssigns,  ownerType);	  typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(toClass),    subtypeVarAssigns,    ownerType);    	non-compiled	[CE]  no  suitable  method  found  for  getRawType(Class<CAP#1>)	74	None	replace
69	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(toClass,  getRawType(parameterizedOwnerType),  subtypeVarAssigns,  ownerType);  [CE]  no  suitable  method  found  for  getTypeArguments(Class<CAP#1>,Class<CAP#2>,Map<TypeVariable<?>,Type>,Type)  [FE]                        AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(toClass,  getRawType(parameterizedOwnerType),  subtypeVarAssigns,  ownerType);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(toClass,  getRawType(parameterizedOwnerType),  subtypeVarAssigns,  ownerType);	  typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(toClass),    subtypeVarAssigns,    ownerType);    	non-compiled	[CE]  no  suitable  method  found  for  getTypeArguments(Class<CAP#1>,Class<CAP#2>,Map<TypeVariable<?>,Type>,Type)	74	None	replace
70	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  parametersType,  getRawType(toClass),  subtypeVarAssigns,  ownerType);  [CE]  cannot  find  symbol  parametersType  [FE]                          AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  parametersType,  getRawType(toClass),  subtypeVarAssigns,  ownerType);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(cls,  parametersType,  getRawType(toClass),  subtypeVarAssigns,  ownerType);	  typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(toClass),    subtypeVarAssigns,    ownerType);    	non-compiled	[CE]  cannot  find  symbol  parametersType	74	None	replace
71	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  parameterizedOwnerType,  getRawType(toClass),  subtypeVarAssigns,  parameters);  [CE]  no  suitable  method  found  for  getRawType(Class<CAP#1>)  [FE]                  AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  parameterizedOwnerType,  getRawType(toClass),  subtypeVarAssigns,  parameters);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(cls,  parameterizedOwnerType,  getRawType(toClass),  subtypeVarAssigns,  parameters);	  typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(toClass),    subtypeVarAssigns,    parameters);    	non-compiled	[CE]  no  suitable  method  found  for  getRawType(Class<CAP#1>)	90	None	replace
72	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(toClass),  subtypeVarAssigns,  parameters);  [CE]  no  suitable  method  found  for  getRawType(Class<CAP#1>)  [FE]                    AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(toClass),  subtypeVarAssigns,  parameters);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(toClass),  subtypeVarAssigns,  parameters);	  typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(toClass),    subtypeVarAssigns,    parameters);    	non-compiled	[CE]  no  suitable  method  found  for  getRawType(Class<CAP#1>)	90	None	replace
73	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(toClass,  getRawType(parameterizedOwnerType),  subtypeVarAssigns,  parameters);  [CE]  cannot  find  symbol  parameters  [FE]                      AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(toClass,  getRawType(parameterizedOwnerType),  subtypeVarAssigns,  parameters);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(toClass,  getRawType(parameterizedOwnerType),  subtypeVarAssigns,  parameters);	  typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(toClass),    subtypeVarAssigns,    parameters);    	non-compiled	[CE]  cannot  find  symbol  parameters	90	None	replace
74	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(toClass),  toClass,  subtypeVarAssigns,  parameters);  [CE]  no  suitable  method  found  for  getRawType(Class<CAP#1>)  [FE]                        AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(toClass),  toClass,  subtypeVarAssigns,  parameters);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(toClass),  toClass,  subtypeVarAssigns,  parameters);	  typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(toClass),    subtypeVarAssigns,    parameters);    	non-compiled	[CE]  no  suitable  method  found  for  getRawType(Class<CAP#1>)	90	None	replace
75	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(parameterizedOwnerType),  parameterizedType);  [CE]  no  suitable  method  found  for  getTypeArguments(Class<CAP#1>,Class<CAP#2>,Class<CAP#3>,ParameterizedType)  [FE]            AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(parameterizedOwnerType),  parameterizedType);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(parameterizedOwnerType),  parameterizedType);	  typeVarAssigns    =    getTypeArguments(cls,    toClass,    getRawType(parameterizedOwnerType),    parameterizedOwnerType);    	non-compiled	[CE]  no  suitable  method  found  for  getTypeArguments(Class<CAP#1>,Class<CAP#2>,Class<CAP#3>,ParameterizedType)	75	None	replace
76	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  parameterizedOwnerType,  getRawType(toClass),  parameterizedOwnerType);  [CE]  no  suitable  method  found  for  getRawType(Class<CAP#1>)  [FE]              AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  parameterizedOwnerType,  getRawType(toClass),  parameterizedOwnerType);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(cls,  parameterizedOwnerType,  getRawType(toClass),  parameterizedOwnerType);	  typeVarAssigns    =    getTypeArguments(cls,    toClass,    getRawType(parameterizedOwnerType),    parameterizedOwnerType);    	non-compiled	[CE]  no  suitable  method  found  for  getRawType(Class<CAP#1>)	75	None	replace
77	[BUG]  [BUGGY]  Type[]  typeParams  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  incompatible  types  [FE]          NullPointerException      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Type[]  typeParams  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  typeParams  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  typeVarAssigns    =    getTypeArguments(cls,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    Type[]    typeParams    =    getTypeArguments(cls,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  incompatible  types	24	None	replace
78	[BUG]  [BUGGY]  Type[]  typeParams  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  toClass);  [CE]  no  suitable  method  found  for  getTypeArguments(Class<CAP#1>,Class<CAP#2>,Class<CAP#3>)  [FE]            NullPointerException      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Type[]  typeParams  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  toClass);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  typeParams  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  toClass);	  typeVarAssigns    =    getTypeArguments(cls,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    Type[]    typeParams    =    getTypeArguments(cls,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  no  suitable  method  found  for  getTypeArguments(Class<CAP#1>,Class<CAP#2>,Class<CAP#3>)	24	None	replace
79	[BUG]  [BUGGY]  Type[]  typeParams  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  typeVarAssigns);  [CE]  incompatible  types  [FE]              NullPointerException      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Type[]  typeParams  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  typeVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  typeParams  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  typeVarAssigns);	  typeVarAssigns    =    getTypeArguments(cls,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    Type[]    typeParams    =    getTypeArguments(cls,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  incompatible  types	24	None	replace
80	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(toClass,  toClass,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  no  suitable  method  found  for  getTypeArguments(Class<CAP#1>,Class<CAP#2>,Class<CAP#3>,Map<TypeVariable<?>,Type>)  [FE]    NullPointerException    [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(toClass,  toClass,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(toClass,  toClass,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  typeVarAssigns    =    getTypeArguments(toClass,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  no  suitable  method  found  for  getTypeArguments(Class<CAP#1>,Class<CAP#2>,Class<CAP#3>,Map<TypeVariable<?>,Type>)	19	None	replace
81	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(toClass,  getOwnerType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  cannot  find  symbol  [FE]      NullPointerException    [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(toClass,  getOwnerType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(toClass,  getOwnerType(parameterizedOwnerType),  subtypeVarAssigns);	  typeVarAssigns    =    getTypeArguments(toClass,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
82	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(toClass,  parameterizedOwnerType,  subtypeVarAssigns);  [CE]  no  suitable  method  found  for  getTypeArguments(Class<CAP#1>,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]        NullPointerException    [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(toClass,  parameterizedOwnerType,  subtypeVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(toClass,  parameterizedOwnerType,  subtypeVarAssigns);	  typeVarAssigns    =    getTypeArguments(toClass,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  no  suitable  method  found  for  getTypeArguments(Class<CAP#1>,ParameterizedType,Map<TypeVariable<?>,Type>)	19	None	replace
83	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(toClass),  parameterizedOwnerType,  subtypeVarAssigns);  [CE]  no  suitable  method  found  for  getRawType(Class<CAP#1>)  [FE]                    AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(toClass),  parameterizedOwnerType,  subtypeVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(toClass),  parameterizedOwnerType,  subtypeVarAssigns);	  typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    toClass,    getRawType(toClass),    subtypeVarAssigns);    	non-compiled	[CE]  no  suitable  method  found  for  getRawType(Class<CAP#1>)	20	None	replace
84	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(toClass),  parameters,  subtypeVarAssigns);  [CE]  no  suitable  method  found  for  getRawType(Class<CAP#1>)  [FE]                      AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(toClass),  parameters,  subtypeVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(toClass),  parameters,  subtypeVarAssigns);	  typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    toClass,    getRawType(toClass),    subtypeVarAssigns);    	non-compiled	[CE]  no  suitable  method  found  for  getRawType(Class<CAP#1>)	20	None	replace
85	[BUG]  [BUGGY]  Type[]  types  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  incompatible  types  [FE]              AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Type[]  types  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  types  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  typeVarAssigns    =    getTypeArguments(ownerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    Type[]    types    =    getTypeArguments(ownerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  incompatible  types	47	None	replace
86	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  toClass);  Type[]  types  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  no  suitable  method  found  for  getTypeArguments(Type,Class<CAP#1>,Class<CAP#2>)  [FE]                AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  toClass);  Type[]  types  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  toClass);  Type[]  types  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  typeVarAssigns    =    getTypeArguments(ownerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    Type[]    types    =    getTypeArguments(ownerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  no  suitable  method  found  for  getTypeArguments(Type,Class<CAP#1>,Class<CAP#2>)	47	None	replace
87	[BUG]  [BUGGY]  Type[]  types  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  typeParams);  [CE]  cannot  find  symbol  typeParams  [FE]                  AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Type[]  types  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  typeParams);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  types  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  typeParams);	  typeVarAssigns    =    getTypeArguments(ownerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    Type[]    types    =    getTypeArguments(ownerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol  typeParams	47	None	replace
88	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(toClass,  parameterizedOwnerType,  getRawType(parameterizedOwnerType),  parameterizedOwnerType);  [CE]  no  suitable  method  found  for  getTypeArguments(Class<CAP#1>,ParameterizedType,Class<CAP#2>,ParameterizedType)  [FE]            AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(toClass,  parameterizedOwnerType,  getRawType(parameterizedOwnerType),  parameterizedOwnerType);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(toClass,  parameterizedOwnerType,  getRawType(parameterizedOwnerType),  parameterizedOwnerType);	  typeVarAssigns    =    getTypeArguments(cls,    parameterizedOwnerType,    getRawType(parameterizedOwnerType),    toClass);    	non-compiled	[CE]  no  suitable  method  found  for  getTypeArguments(Class<CAP#1>,ParameterizedType,Class<CAP#2>,ParameterizedType)	13	None	replace
89	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(parameterizedOwnerType),  parameterizedOwnerType);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(parameterizedOwnerType),  parameterizedOwnerType);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(parameterizedOwnerType),  parameterizedOwnerType);	  typeVarAssigns    =    getTypeArguments(cls,    parameterizedOwnerType,    getRawType(parameterizedOwnerType),    toClass);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	13	None	replace
90	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  parameterizedOwnerType,  getRawType(cls),  toClass);  [CE]  no  suitable  method  found  for  getRawType(Class<CAP#1>)  [FE]                AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  parameterizedOwnerType,  getRawType(cls),  toClass);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  parameterizedOwnerType,  getRawType(cls),  toClass);	  typeVarAssigns    =    getTypeArguments(cls,    parameterizedOwnerType,    getRawType(parameterizedOwnerType),    toClass);    	non-compiled	[CE]  no  suitable  method  found  for  getRawType(Class<CAP#1>)	13	None	replace
91	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  toClass,  subtypeVarAssigns);  [CE]  no  suitable  method  found  for  getTypeArguments(ParameterizedType,Class<CAP#1>,Class<CAP#2>,Map<TypeVariable<?>,Type>)  [FE]            AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  toClass,  subtypeVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  toClass,  subtypeVarAssigns);	  typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    toClass,    typeParams);    	non-compiled	[CE]  no  suitable  method  found  for  getTypeArguments(ParameterizedType,Class<CAP#1>,Class<CAP#2>,Map<TypeVariable<?>,Type>)	88	None	replace
92	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  toClass,  typeVarAssigns);  [CE]  no  suitable  method  found  for  getTypeArguments(Class<CAP#1>,Class<CAP#2>,Class<CAP#3>,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  toClass,  typeVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  toClass,  typeVarAssigns);	  typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    toClass,    typeParams);    	non-compiled	[CE]  no  suitable  method  found  for  getTypeArguments(Class<CAP#1>,Class<CAP#2>,Class<CAP#3>,Map<TypeVariable<?>,Type>)	88	None	replace
93	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(toClass),  parameterizedOwnerType,  typeParameters);  [CE]  no  suitable  method  found  for  getRawType(Class<CAP#1>)  [FE]                AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(toClass),  parameterizedOwnerType,  typeParameters);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(toClass),  parameterizedOwnerType,  typeParameters);	  typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    toClass,    typeParams);    	non-compiled	[CE]  no  suitable  method  found  for  getRawType(Class<CAP#1>)	88	None	replace
94	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(typeVarAssigns),  toClass,  parameterizedOwnerType);  [CE]  no  suitable  method  found  for  getRawType(Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(typeVarAssigns),  toClass,  parameterizedOwnerType);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(typeVarAssigns),  toClass,  parameterizedOwnerType);	  typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    toClass,    typeParams);    	non-compiled	[CE]  no  suitable  method  found  for  getRawType(Map<TypeVariable<?>,Type>)	88	None	replace
95	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  parameterizedType.getActualTypeVariables();  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Type[]  subtypeVarAssigns  =  parameterizedType.getActualTypeVariables();  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeVarAssigns  =  parameterizedType.getActualTypeVariables();	  Type[]    subtypeVarAssigns    =    parameterizedType.getSubtypeVariables();    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	61	None	replace
96	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  parameterizedType.getRawTypeVariables();  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Type[]  subtypeVarAssigns  =  parameterizedType.getRawTypeVariables();  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeVarAssigns  =  parameterizedType.getRawTypeVariables();	  Type[]    subtypeVarAssigns    =    parameterizedType.getSubtypeVariables();    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	61	None	replace
97	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  parameterizedOwnerType,  getRawType(parameterizedOwnerType),  toClass,  subtypeVarAssigns);  [CE]  no  suitable  method  found  for  getTypeArguments(Class<CAP#1>,ParameterizedType,Class<CAP#2>,Class<CAP#3>,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  parameterizedOwnerType,  getRawType(parameterizedOwnerType),  toClass,  subtypeVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(cls,  parameterizedOwnerType,  getRawType(parameterizedOwnerType),  toClass,  subtypeVarAssigns);	  typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    cls,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  no  suitable  method  found  for  getTypeArguments(Class<CAP#1>,ParameterizedType,Class<CAP#2>,Class<CAP#3>,Map<TypeVariable<?>,Type>)	82	None	replace
98	[BUG]  [BUGGY]  Type[]  subtypeParams  =  cls.getConstructorParameters();  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Type[]  subtypeParams  =  cls.getConstructorParameters();  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeParams  =  cls.getConstructorParameters();	  Type[]    subtypeParams    =    toClass.getConstructorParameters();    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
99	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    NullPointerException    [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(toClass,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeVarAssigns  =  getTypeArguments(toClass,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	add	typeVarAssigns    =    getTypeArguments(toClass,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    typeVarAssigns  =  getTypeArguments(toClass,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  	compilable	  [FE]  AssertionError  	18	2	add
100	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(toClass,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeVarAssigns  =  getTypeArguments(toClass,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [FE]  AssertionError  [FE]    NullPointerException    [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(toClass,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeVarAssigns  =  getTypeArguments(toClass,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns    =    getTypeArguments(toClass,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    typeVarAssigns  =  getTypeArguments(toClass,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  	compilable	  [FE]  AssertionError  	18	2	add
101	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(toClass,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  Type[]  typeParams  =  getTypeArguments(toClass,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  incompatible  types  [FE]      NullPointerException    [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(toClass,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  Type[]  typeParams  =  getTypeArguments(toClass,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns    =    getTypeArguments(toClass,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    Type[]  typeParams  =  getTypeArguments(toClass,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  	non-compiled	[CE]  incompatible  types	18	None	add
102	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(toClass,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  Type[]  typeArgs  =  getTypeArguments(toClass,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  incompatible  types  [FE]        NullPointerException    [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(toClass,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  Type[]  typeArgs  =  getTypeArguments(toClass,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns    =    getTypeArguments(toClass,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    Type[]  typeArgs  =  getTypeArguments(toClass,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  	non-compiled	[CE]  incompatible  types	18	None	add
103	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(toClass,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  Type[]  types  =  getTypeArguments(toClass,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  incompatible  types  [FE]          NullPointerException    [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(toClass,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  Type[]  types  =  getTypeArguments(toClass,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns    =    getTypeArguments(toClass,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    Type[]  types  =  getTypeArguments(toClass,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  	non-compiled	[CE]  incompatible  types	18	None	add
104	[BUG]  [BUGGY]  Type[]  subtypeParams  =  cls.getAssignedTypeParameters();  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Type[]  subtypeParams  =  cls.getAssignedTypeParameters();  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeParams  =  cls.getAssignedTypeParameters();	  Type[]    subtypeParams    =    toClass.getAssignedTypeParameters();    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
105	[BUG]  [BUGGY]  Class  <?>[]  subtypeVarAssigns  =  parameterizedType.getReturnTypeArguments();  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]            AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Class  <?>[]  subtypeVarAssigns  =  parameterizedType.getReturnTypeArguments();  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Class  <?>[]  subtypeVarAssigns  =  parameterizedType.getReturnTypeArguments();	  Class    <?>[]    subtypeVarAssigns    =    parameterizedType.getParameterizedTypeArguments();    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	34	None	replace
106	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(toClass),  parameterizedOwnerType);  [CE]  no  suitable  method  found  for  getRawType(Class<CAP#1>)  [FE]                  AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(toClass),  parameterizedOwnerType);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(toClass),  parameterizedOwnerType);	  typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(toClass),    parameterizedOwnerType);    	non-compiled	[CE]  no  suitable  method  found  for  getRawType(Class<CAP#1>)	16	None	replace
107	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(toClass,  getRawType(parameterizedOwnerType),  parameterizedOwnerType);  [CE]  no  suitable  method  found  for  getTypeArguments(Class<CAP#1>,Class<CAP#2>,ParameterizedType)  [FE]                    AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(toClass,  getRawType(parameterizedOwnerType),  parameterizedOwnerType);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(toClass,  getRawType(parameterizedOwnerType),  parameterizedOwnerType);	  typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(toClass),    parameterizedOwnerType);    	non-compiled	[CE]  no  suitable  method  found  for  getTypeArguments(Class<CAP#1>,Class<CAP#2>,ParameterizedType)	16	None	replace
108	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(parameterizedOwnerType),  parameterizedType);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]        NullPointerException      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(parameterizedOwnerType),  parameterizedType);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(parameterizedOwnerType),  parameterizedType);	  Type[]    subtypeVarAssigns    =    getTypeArguments(cls,    getRawType(parameterizedOwnerType),    toClass);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	83	None	replace
109	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(parameterizedOwnerType),  typeParams);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]          NullPointerException      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(parameterizedOwnerType),  typeParams);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(parameterizedOwnerType),  typeParams);	  Type[]    subtypeVarAssigns    =    getTypeArguments(cls,    getRawType(parameterizedOwnerType),    toClass);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	83	None	replace
110	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  toClass,  typeParams);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]            NullPointerException      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  toClass,  typeParams);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  toClass,  typeParams);	  Type[]    subtypeVarAssigns    =    getTypeArguments(cls,    getRawType(parameterizedOwnerType),    toClass);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	83	None	replace
111	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  parameterizedOwnerType,  toClass);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]              NullPointerException      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  parameterizedOwnerType,  toClass);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  parameterizedOwnerType,  toClass);	  Type[]    subtypeVarAssigns    =    getTypeArguments(cls,    getRawType(parameterizedOwnerType),    toClass);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	83	None	replace
112	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(parameterizedOwnerType),  subtypeVarAssigns,  parameterizedOwnerType);  [CE]  no  suitable  method  found  for  getTypeArguments(Class<CAP#1>,Class<CAP#2>,Class<CAP#3>,Map<TypeVariable<?>,Type>,ParameterizedType)  [FE]                  AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(parameterizedOwnerType),  subtypeVarAssigns,  parameterizedOwnerType);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(parameterizedOwnerType),  subtypeVarAssigns,  parameterizedOwnerType);	  typeVarAssigns    =    getTypeArguments(cls,    toClass,    getRawType(parameterizedOwnerType),    parameterizedOwnerType,    subtypeVarAssigns);    	non-compiled	[CE]  no  suitable  method  found  for  getTypeArguments(Class<CAP#1>,Class<CAP#2>,Class<CAP#3>,Map<TypeVariable<?>,Type>,ParameterizedType)	29	None	replace
113	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(parameterizedOwnerType),  parameterizedOwnerType,  typeParams);  [CE]  cannot  find  symbol  typeParams  [FE]                    AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(parameterizedOwnerType),  parameterizedOwnerType,  typeParams);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(parameterizedOwnerType),  parameterizedOwnerType,  typeParams);	  typeVarAssigns    =    getTypeArguments(cls,    toClass,    getRawType(parameterizedOwnerType),    parameterizedOwnerType,    subtypeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol  typeParams	29	None	replace
114	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(parameterizedOwnerType),  parametersType,  subtypeVarAssigns);  [CE]  cannot  find  symbol  parametersType  [FE]                      AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(parameterizedOwnerType),  parametersType,  subtypeVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(parameterizedOwnerType),  parametersType,  subtypeVarAssigns);	  typeVarAssigns    =    getTypeArguments(cls,    toClass,    getRawType(parameterizedOwnerType),    parameterizedOwnerType,    subtypeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol  parametersType	29	None	replace
115	[BUG]  [BUGGY]  Type[]  subtypeParams  =  parameterizedOwnerType.getConstructorParameters();  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Type[]  subtypeParams  =  parameterizedOwnerType.getConstructorParameters();  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeParams  =  parameterizedOwnerType.getConstructorParameters();	  Type[]    subtypeParams    =    parametersizedType.getConstructorParameters();    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
116	[BUG]  [BUGGY]  Type[]  subtypeParams  =  toClass.getSubtypeParams();  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Type[]  subtypeParams  =  toClass.getSubtypeParams();  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeParams  =  toClass.getSubtypeParams();	  Type[]    subtypeParams    =    parameterizedType.getSubtypeParams();    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
117	[BUG]  [BUGGY]  Type[]  subtypeParams  =  parametersizedType.getSubtypeParams();  [CE]  cannot  find  symbol  parametersizedType  [FE]                    AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Type[]  subtypeParams  =  parametersizedType.getSubtypeParams();  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeParams  =  parametersizedType.getSubtypeParams();	  Type[]    subtypeParams    =    parameterizedType.getSubtypeParams();    	non-compiled	[CE]  cannot  find  symbol  parametersizedType	80	None	replace
118	[BUG]  [BUGGY]  Type[]  subtypeParams  =  parametersType.getSubtypeParams();  [CE]  cannot  find  symbol  parametersType  [FE]                      AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Type[]  subtypeParams  =  parametersType.getSubtypeParams();  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeParams  =  parametersType.getSubtypeParams();	  Type[]    subtypeParams    =    parameterizedType.getSubtypeParams();    	non-compiled	[CE]  cannot  find  symbol  parametersType	80	None	replace
119	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  parameterizedOwnerType,  getRawType(parameterizedOwnerType),  parameterizedOwnerType);  [CE]  no  suitable  method  found  for  getTypeArguments(Class<CAP#1>,ParameterizedType,Class<CAP#2>,ParameterizedType)  [FE]                AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  parameterizedOwnerType,  getRawType(parameterizedOwnerType),  parameterizedOwnerType);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(cls,  parameterizedOwnerType,  getRawType(parameterizedOwnerType),  parameterizedOwnerType);	  typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    toClass,    getRawType(parameterizedOwnerType),    parameterizedOwnerType);    	non-compiled	[CE]  no  suitable  method  found  for  getTypeArguments(Class<CAP#1>,ParameterizedType,Class<CAP#2>,ParameterizedType)	15	None	replace
120	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  toClass,  getRawType(parameterizedOwnerType),  typeParams);  [CE]  cannot  find  symbol  typeParams  [FE]                  AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  toClass,  getRawType(parameterizedOwnerType),  typeParams);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  toClass,  getRawType(parameterizedOwnerType),  typeParams);	  typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    toClass,    getRawType(parameterizedOwnerType),    parameterizedOwnerType);    	non-compiled	[CE]  cannot  find  symbol  typeParams	15	None	replace
121	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  parameterizedType.getActualTypeVarAssigns();  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                      AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Type[]  subtypeVarAssigns  =  parameterizedType.getActualTypeVarAssigns();  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeVarAssigns  =  parameterizedType.getActualTypeVarAssigns();	  Type[]    subtypeVarAssigns    =    parameterizedType.getSubtypeVarAssigns();    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	40	None	replace
122	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  parameterizedType.getRawTypeVarAssigns();  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                        AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Type[]  subtypeVarAssigns  =  parameterizedType.getRawTypeVarAssigns();  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeVarAssigns  =  parameterizedType.getRawTypeVarAssigns();	  Type[]    subtypeVarAssigns    =    parameterizedType.getSubtypeVarAssigns();    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	40	None	replace
123	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  parameterizedType.getSubtypeVarAssigns(toClass);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                          AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Type[]  subtypeVarAssigns  =  parameterizedType.getSubtypeVarAssigns(toClass);  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeVarAssigns  =  parameterizedType.getSubtypeVarAssigns(toClass);	  Type[]    subtypeVarAssigns    =    parameterizedType.getSubtypeVarAssigns();    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	40	None	replace
124	[BUG]  [BUGGY]  Type[]  typeArgs  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  incompatible  types  [FE]          NullPointerException      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Type[]  typeArgs  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  typeArgs  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  typeVarAssigns    =    getTypeArguments(cls,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    Type[]    typeArgs    =    getTypeArguments(cls,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  incompatible  types	68	None	replace
125	[BUG]  [BUGGY]  Type[]  typeArgs  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  toClass);  [CE]  no  suitable  method  found  for  getTypeArguments(Class<CAP#1>,Class<CAP#2>,Class<CAP#3>)  [FE]            NullPointerException      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Type[]  typeArgs  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  toClass);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  typeArgs  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  toClass);	  typeVarAssigns    =    getTypeArguments(cls,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    Type[]    typeArgs    =    getTypeArguments(cls,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  no  suitable  method  found  for  getTypeArguments(Class<CAP#1>,Class<CAP#2>,Class<CAP#3>)	68	None	replace
126	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  toClass);  Type[]  typeArgs  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  no  suitable  method  found  for  getTypeArguments(Class<CAP#1>,Class<CAP#2>,Class<CAP#3>)  [FE]              NullPointerException      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  toClass);  Type[]  typeArgs  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  toClass);  Type[]  typeArgs  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  typeVarAssigns    =    getTypeArguments(cls,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    Type[]    typeArgs    =    getTypeArguments(cls,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  no  suitable  method  found  for  getTypeArguments(Class<CAP#1>,Class<CAP#2>,Class<CAP#3>)	68	None	replace
127	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  parameterizedOwnerType,  getRawType(toClass),  subtypeVarAssigns,  parametersType);  [CE]  no  suitable  method  found  for  getRawType(Class<CAP#1>)  [FE]                  AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  parameterizedOwnerType,  getRawType(toClass),  subtypeVarAssigns,  parametersType);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(cls,  parameterizedOwnerType,  getRawType(toClass),  subtypeVarAssigns,  parametersType);	  typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(toClass),    subtypeVarAssigns,    parametersType);    	non-compiled	[CE]  no  suitable  method  found  for  getRawType(Class<CAP#1>)	73	None	replace
128	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(toClass),  subtypeVarAssigns,  parametersType);  [CE]  no  suitable  method  found  for  getRawType(Class<CAP#1>)  [FE]                    AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(toClass),  subtypeVarAssigns,  parametersType);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(toClass),  subtypeVarAssigns,  parametersType);	  typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(toClass),    subtypeVarAssigns,    parametersType);    	non-compiled	[CE]  no  suitable  method  found  for  getRawType(Class<CAP#1>)	73	None	replace
129	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(toClass,  getRawType(parameterizedOwnerType),  subtypeVarAssigns,  parametersType);  [CE]  cannot  find  symbol  parametersType  [FE]                      AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(toClass,  getRawType(parameterizedOwnerType),  subtypeVarAssigns,  parametersType);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(toClass,  getRawType(parameterizedOwnerType),  subtypeVarAssigns,  parametersType);	  typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(toClass),    subtypeVarAssigns,    parametersType);    	non-compiled	[CE]  cannot  find  symbol  parametersType	73	None	replace
130	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  parametersType,  getRawType(toClass),  subtypeVarAssigns,  parameterizedType);  [CE]  cannot  find  symbol  parametersType  [FE]                        AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  parametersType,  getRawType(toClass),  subtypeVarAssigns,  parameterizedType);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(cls,  parametersType,  getRawType(toClass),  subtypeVarAssigns,  parameterizedType);	  typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(toClass),    subtypeVarAssigns,    parametersType);    	non-compiled	[CE]  cannot  find  symbol  parametersType	73	None	replace
131	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  toClass,  getRawType(ownerType),  parameterizedOwnerType,  subtypeVarAssigns);  [CE]  no  suitable  method  found  for  getRawType(Type)  [FE]                    AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  toClass,  getRawType(ownerType),  parameterizedOwnerType,  subtypeVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  toClass,  getRawType(ownerType),  parameterizedOwnerType,  subtypeVarAssigns);	  typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    toClass,    getRawType(parameterizedOwnerType),    subtypeVarAssigns,    ownerType);    	non-compiled	[CE]  no  suitable  method  found  for  getRawType(Type)	30	None	replace
132	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  toClass,  getRawType(ownerType),  subtypeVarAssigns,  parameterizedOwnerType);  [CE]  no  suitable  method  found  for  getRawType(Type)  [FE]                      AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  toClass,  getRawType(ownerType),  subtypeVarAssigns,  parameterizedOwnerType);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  toClass,  getRawType(ownerType),  subtypeVarAssigns,  parameterizedOwnerType);	  typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    toClass,    getRawType(parameterizedOwnerType),    subtypeVarAssigns,    ownerType);    	non-compiled	[CE]  no  suitable  method  found  for  getRawType(Type)	30	None	replace
133	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns,  ownerType);  [CE]  no  suitable  method  found  for  getTypeArguments(Class<CAP#1>,ParameterizedType,Class<CAP#2>,Map<TypeVariable<?>,Type>,Type)  [FE]                        AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns,  ownerType);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(cls,  parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns,  ownerType);	  typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    toClass,    getRawType(parameterizedOwnerType),    subtypeVarAssigns,    ownerType);    	non-compiled	[CE]  no  suitable  method  found  for  getTypeArguments(Class<CAP#1>,ParameterizedType,Class<CAP#2>,Map<TypeVariable<?>,Type>,Type)	30	None	replace
134	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(toClass,  parameterizedOwnerType,  getRawType(cls),  parameterizedOwnerType);  [CE]  no  suitable  method  found  for  getRawType(Class<CAP#1>)  [FE]                AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(toClass,  parameterizedOwnerType,  getRawType(cls),  parameterizedOwnerType);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(toClass,  parameterizedOwnerType,  getRawType(cls),  parameterizedOwnerType);	  typeVarAssigns    =    getTypeArguments(cls,    parameterizedOwnerType,    getRawType(toClass),    subtypeVarAssigns);    	non-compiled	[CE]  no  suitable  method  found  for  getRawType(Class<CAP#1>)	17	None	replace
135	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  toClass,  parameterizedOwnerType,  getRawType(toClass),  subtypeVarAssigns);  [CE]  no  suitable  method  found  for  getRawType(Class<CAP#1>)  [FE]                  AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  toClass,  parameterizedOwnerType,  getRawType(toClass),  subtypeVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(cls,  toClass,  parameterizedOwnerType,  getRawType(toClass),  subtypeVarAssigns);	  typeVarAssigns    =    getTypeArguments(cls,    parameterizedOwnerType,    getRawType(toClass),    subtypeVarAssigns);    	non-compiled	[CE]  no  suitable  method  found  for  getRawType(Class<CAP#1>)	17	None	replace
136	[BUG]  [BUGGY]  Type  ownerType  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  variable  ownerType  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]        AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Type  ownerType  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type  ownerType  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  typeVarAssigns    =    getTypeArguments(ownerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    Type    ownerType    =    getTypeArguments(ownerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  variable  ownerType  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	62	None	replace
137	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(typeParams,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  Type  ownerType  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  cannot  find  symbol  typeParams  [FE]          AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(typeParams,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  Type  ownerType  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(typeParams,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  Type  ownerType  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  typeVarAssigns    =    getTypeArguments(ownerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    Type    ownerType    =    getTypeArguments(ownerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol  typeParams	62	None	replace
138	[BUG]  [BUGGY]  Type  ownerType  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  variable  ownerType  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]            AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Type  ownerType  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type  ownerType  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  typeVarAssigns    =    getTypeArguments(ownerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    Type    ownerType    =    getTypeArguments(ownerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  variable  ownerType  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	62	None	replace
139	[BUG]  [BUGGY]  Type[]  subtypeParams  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  incompatible  types  [FE]            NullPointerException      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Type[]  subtypeParams  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeParams  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  typeVarAssigns    =    getTypeArguments(cls,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    Type[]    subtypeParams    =    getTypeArguments(cls,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  incompatible  types	25	None	replace
140	[BUG]  [BUGGY]  Type[]  subtypeParams  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  typeVarAssigns);  [CE]  incompatible  types  [FE]              NullPointerException      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Type[]  subtypeParams  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  typeVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeParams  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  typeVarAssigns);	  typeVarAssigns    =    getTypeArguments(cls,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    Type[]    subtypeParams    =    getTypeArguments(cls,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  incompatible  types	25	None	replace
141	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  toClass);  Type[]  subtypeParams  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  no  suitable  method  found  for  getTypeArguments(Class<CAP#1>,Class<CAP#2>,Class<CAP#3>)  [FE]                NullPointerException      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  toClass);  Type[]  subtypeParams  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  toClass);  Type[]  subtypeParams  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  typeVarAssigns    =    getTypeArguments(cls,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    Type[]    subtypeParams    =    getTypeArguments(cls,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  no  suitable  method  found  for  getTypeArguments(Class<CAP#1>,Class<CAP#2>,Class<CAP#3>)	25	None	replace
142	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  parameterizedOwnerType,  getRawType(toClass),  subtypeVarAssigns,  parameterizedType);  [CE]  no  suitable  method  found  for  getRawType(Class<CAP#1>)  [FE]                AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  parameterizedOwnerType,  getRawType(toClass),  subtypeVarAssigns,  parameterizedType);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(cls,  parameterizedOwnerType,  getRawType(toClass),  subtypeVarAssigns,  parameterizedType);	  typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(toClass),    subtypeVarAssigns,    parameterizedType);    	non-compiled	[CE]  no  suitable  method  found  for  getRawType(Class<CAP#1>)	72	None	replace
143	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(toClass),  subtypeVarAssigns,  parameterizedType);  [CE]  no  suitable  method  found  for  getRawType(Class<CAP#1>)  [FE]                  AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(toClass),  subtypeVarAssigns,  parameterizedType);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(toClass),  subtypeVarAssigns,  parameterizedType);	  typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(toClass),    subtypeVarAssigns,    parameterizedType);    	non-compiled	[CE]  no  suitable  method  found  for  getRawType(Class<CAP#1>)	72	None	replace
144	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(toClass,  getRawType(parameterizedOwnerType),  subtypeVarAssigns,  parameterizedType);  [CE]  no  suitable  method  found  for  getTypeArguments(Class<CAP#1>,Class<CAP#2>,Map<TypeVariable<?>,Type>,ParameterizedType)  [FE]                    AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(toClass,  getRawType(parameterizedOwnerType),  subtypeVarAssigns,  parameterizedType);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(toClass,  getRawType(parameterizedOwnerType),  subtypeVarAssigns,  parameterizedType);	  typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(toClass),    subtypeVarAssigns,    parameterizedType);    	non-compiled	[CE]  no  suitable  method  found  for  getTypeArguments(Class<CAP#1>,Class<CAP#2>,Map<TypeVariable<?>,Type>,ParameterizedType)	72	None	replace
145	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  toClass,  getRawType(parameterizedOwnerType),  subtypeVarAssigns,  parameterizedType);  [CE]  no  suitable  method  found  for  getTypeArguments(ParameterizedType,Class<CAP#1>,Class<CAP#2>,Map<TypeVariable<?>,Type>,ParameterizedType)  [FE]                      AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  toClass,  getRawType(parameterizedOwnerType),  subtypeVarAssigns,  parameterizedType);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  toClass,  getRawType(parameterizedOwnerType),  subtypeVarAssigns,  parameterizedType);	  typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(toClass),    subtypeVarAssigns,    parameterizedType);    	non-compiled	[CE]  no  suitable  method  found  for  getTypeArguments(ParameterizedType,Class<CAP#1>,Class<CAP#2>,Map<TypeVariable<?>,Type>,ParameterizedType)	72	None	replace
146	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  toClass,  parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  no  suitable  method  found  for  getTypeArguments(Class<CAP#1>,Class<CAP#2>,ParameterizedType,Class<CAP#3>,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  toClass,  parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(cls,  toClass,  parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  typeVarAssigns    =    getTypeArguments(cls,    parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  no  suitable  method  found  for  getTypeArguments(Class<CAP#1>,Class<CAP#2>,ParameterizedType,Class<CAP#3>,Map<TypeVariable<?>,Type>)	28	None	replace
147	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  toClass,  parametersizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  cannot  find  symbol  parametersizedOwnerType  [FE]                  AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  toClass,  parametersizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(cls,  toClass,  parametersizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  typeVarAssigns    =    getTypeArguments(cls,    parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol  parametersizedOwnerType	28	None	replace
148	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  toClass,  parametersType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  cannot  find  symbol  parametersType  [FE]                    AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  toClass,  parametersType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(cls,  toClass,  parametersType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  typeVarAssigns    =    getTypeArguments(cls,    parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol  parametersType	28	None	replace
149	[BUG]  [BUGGY]  Type[]  typeParams  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  incompatible  types  [FE]            AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Type[]  typeParams  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  typeParams  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  typeVarAssigns    =    getTypeArguments(ownerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    Type[]    typeParams    =    getTypeArguments(ownerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  incompatible  types	46	None	replace
150	[BUG]  [BUGGY]  Type[]  typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  variable  typeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Type[]  typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  typeVarAssigns    =    getTypeArguments(ownerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    Type[]    typeParams    =    getTypeArguments(ownerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  variable  typeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	46	None	replace
151	[BUG]  [BUGGY]  Class  <?>[]  subtypeVarAssigns  =  parameterizedType.getActualTypeVarAssigns();  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Class  <?>[]  subtypeVarAssigns  =  parameterizedType.getActualTypeVarAssigns();  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Class  <?>[]  subtypeVarAssigns  =  parameterizedType.getActualTypeVarAssigns();	  Class    <?>[]    subtypeVarAssigns    =    parameterizedType.getSubtypeVarAssigns();    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	78	None	replace
152	[BUG]  [BUGGY]  Class  <?>[]  subtypeVarAssigns  =  parameterizedType.getRawTypeVarAssigns();  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Class  <?>[]  subtypeVarAssigns  =  parameterizedType.getRawTypeVarAssigns();  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Class  <?>[]  subtypeVarAssigns  =  parameterizedType.getRawTypeVarAssigns();	  Class    <?>[]    subtypeVarAssigns    =    parameterizedType.getSubtypeVarAssigns();    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	78	None	replace
153	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  toClass,  parameterizedOwnerType,  subtypeVarAssigns);  [CE]  no  suitable  method  found  for  getTypeArguments(Class<CAP#1>,Class<CAP#2>,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]        NullPointerException      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  toClass,  parameterizedOwnerType,  subtypeVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(cls,  toClass,  parameterizedOwnerType,  subtypeVarAssigns);	  typeVarAssigns    =    getTypeArguments(cls,    parameterizedOwnerType,    subtypeVarAssigns);    	non-compiled	[CE]  no  suitable  method  found  for  getTypeArguments(Class<CAP#1>,Class<CAP#2>,ParameterizedType,Map<TypeVariable<?>,Type>)	51	None	replace
154	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  toClass,  parameterizedOwnerType,  subtypeVarAssigns);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]          NullPointerException      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  toClass,  parameterizedOwnerType,  subtypeVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  toClass,  parameterizedOwnerType,  subtypeVarAssigns);	  typeVarAssigns    =    getTypeArguments(cls,    parameterizedOwnerType,    subtypeVarAssigns);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	51	None	replace
155	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]            NullPointerException      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  cls,  subtypeVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	add	typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  cls,  subtypeVarAssigns);	  typeVarAssigns    =    getTypeArguments(cls,    parameterizedOwnerType,    subtypeVarAssigns);    	compilable	  [FE]  NullPointerException  	51	2	replace
156	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  cls,  subtypeVarAssigns);  [FE]  NullPointerException  [FE]            NullPointerException      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  cls,  subtypeVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  cls,  subtypeVarAssigns);	  typeVarAssigns    =    getTypeArguments(cls,    parameterizedOwnerType,    subtypeVarAssigns);    	compilable	  [FE]  NullPointerException  	51	2	replace
157	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  parameterizedOwnerType,  getRawType(toClass),  toClass,  subtypeVarAssigns);  [CE]  no  suitable  method  found  for  getRawType(Class<CAP#1>)  [FE]                AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  parameterizedOwnerType,  getRawType(toClass),  toClass,  subtypeVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(cls,  parameterizedOwnerType,  getRawType(toClass),  toClass,  subtypeVarAssigns);	  typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(toClass),    toClass,    subtypeVarAssigns);    	non-compiled	[CE]  no  suitable  method  found  for  getRawType(Class<CAP#1>)	89	None	replace
158	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  parametersType,  getRawType(toClass),  toClass,  subtypeVarAssigns);  [CE]  cannot  find  symbol  parametersType  [FE]                  AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  parametersType,  getRawType(toClass),  toClass,  subtypeVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(cls,  parametersType,  getRawType(toClass),  toClass,  subtypeVarAssigns);	  typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(toClass),    toClass,    subtypeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol  parametersType	89	None	replace
159	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  typeParams);  [CE]  cannot  find  symbol  typeParams  [FE]    AssertionError    [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  typeParams);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  typeParams);	  typeVarAssigns    =    getTypeArguments(cls,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    typeVarAssigns    =    getTypeArguments(cls,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol  typeParams	23	None	replace
160	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeParameters(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeParameters(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeParameters(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  typeVarAssigns    =    getTypeArguments(cls,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    typeVarAssigns    =    getTypeArguments(cls,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
161	[BUG]  [BUGGY]  Type[]  subtypeParams  =  toClass.getDeclaredTypeParameters();  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Type[]  subtypeParams  =  toClass.getDeclaredTypeParameters();  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeParams  =  toClass.getDeclaredTypeParameters();	  Type[]    subtypeParams    =    parameterizedType.getDeclaredTypeParameters();    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
162	[BUG]  [BUGGY]  Type[]  subtypeParams  =  parametersType.getDeclaredTypeParameters();  [CE]  cannot  find  symbol  parametersType  [FE]                        AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Type[]  subtypeParams  =  parametersType.getDeclaredTypeParameters();  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeParams  =  parametersType.getDeclaredTypeParameters();	  Type[]    subtypeParams    =    parameterizedType.getDeclaredTypeParameters();    	non-compiled	[CE]  cannot  find  symbol  parametersType	3	None	replace
163	[BUG]  [BUGGY]  Type[]  subtypeParams  =  parameterizedOwnerType.getDeclaredTypeParameters();  [CE]  cannot  find  symbol  [FE]                          AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Type[]  subtypeParams  =  parameterizedOwnerType.getDeclaredTypeParameters();  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeParams  =  parameterizedOwnerType.getDeclaredTypeParameters();	  Type[]    subtypeParams    =    parameterizedType.getDeclaredTypeParameters();    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
164	[BUG]  [BUGGY]  Type[]  subtypeParams  =  parameterizedOwnerType.getAssignedTypeParameters();  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Type[]  subtypeParams  =  parameterizedOwnerType.getAssignedTypeParameters();  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeParams  =  parameterizedOwnerType.getAssignedTypeParameters();	  Type[]    subtypeParams    =    parametersizedType.getAssignedTypeParameters();    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
165	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(parameterizedOwnerType),  ownerType);  [CE]  no  suitable  method  found  for  getTypeArguments(Class<CAP#1>,Class<CAP#2>,Class<CAP#3>,Type)  [FE]          AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(parameterizedOwnerType),  ownerType);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(parameterizedOwnerType),  ownerType);	  typeVarAssigns    =    getTypeArguments(ownerType,    getRawType(parameterizedOwnerType),    toClass);    	non-compiled	[CE]  no  suitable  method  found  for  getTypeArguments(Class<CAP#1>,Class<CAP#2>,Class<CAP#3>,Type)	54	None	replace
166	[BUG]  [BUGGY]  Type[]  subtypeParams  =  parametersType.getSubtypeParameters();  [CE]  cannot  find  symbol  parametersType  [FE]                  AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Type[]  subtypeParams  =  parametersType.getSubtypeParameters();  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeParams  =  parametersType.getSubtypeParameters();	  Type[]    subtypeParams    =    parameterizedType.getSubtypeParameters();    	non-compiled	[CE]  cannot  find  symbol  parametersType	1	None	replace
167	[BUG]  [BUGGY]  Type[]  subtypeParams  =  toClass.getSubtypeParameters();  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Type[]  subtypeParams  =  toClass.getSubtypeParameters();  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeParams  =  toClass.getSubtypeParameters();	  Type[]    subtypeParams    =    parameterizedType.getSubtypeParameters();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
168	[BUG]  [BUGGY]  Type[]  subtypeParams  =  parameterizedOwnerType.getSubtypeParameters();  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Type[]  subtypeParams  =  parameterizedOwnerType.getSubtypeParameters();  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeParams  =  parameterizedOwnerType.getSubtypeParameters();	  Type[]    subtypeParams    =    parameterizedType.getSubtypeParameters();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
169	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  parameterizedType.getReturnTypeParameters(toClass);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                      AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Type[]  subtypeVarAssigns  =  parameterizedType.getReturnTypeParameters(toClass);  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeVarAssigns  =  parameterizedType.getReturnTypeParameters(toClass);	  Type[]    subtypeVarAssigns    =    parameterizedType.getReturnTypeParameters();    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	5	None	replace
170	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(toClass),  subtypeVarAssigns);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]        AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(toClass),  subtypeVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(toClass),  subtypeVarAssigns);	  Type[]    subtypeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	86	None	replace
171	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(toClass),  parameterizedOwnerType);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]          AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(toClass),  parameterizedOwnerType);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(toClass),  parameterizedOwnerType);	  Type[]    subtypeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	86	None	replace
172	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  toClass,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]            AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  toClass,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  toClass,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  Type[]    subtypeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	86	None	replace
173	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  typeVarAssigns);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  typeVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  typeVarAssigns);	  Type[]    subtypeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	86	None	replace
174	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  parameterizedType.getActualParameters();  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                    AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Type[]  subtypeVarAssigns  =  parameterizedType.getActualParameters();  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeVarAssigns  =  parameterizedType.getActualParameters();	  Type[]    subtypeVarAssigns    =    parameterizedType.getConstructorParameters();    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	4	None	replace
175	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  toClass,  subtypeVarAssigns);  [CE]  no  suitable  method  found  for  getTypeArguments(Class<CAP#1>,Class<CAP#2>,Class<CAP#3>,Map<TypeVariable<?>,Type>)  [FE]        NullPointerException      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  toClass,  subtypeVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  toClass,  subtypeVarAssigns);	  typeVarAssigns    =    getTypeArguments(cls,    getRawType(parameterizedOwnerType),    toClass);    	non-compiled	[CE]  no  suitable  method  found  for  getTypeArguments(Class<CAP#1>,Class<CAP#2>,Class<CAP#3>,Map<TypeVariable<?>,Type>)	59	None	replace
176	[BUG]  [BUGGY]  Type[]  subtypeVars  =  parameterizedType.getConstructorParameters();  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Type[]  subtypeVars  =  parameterizedType.getConstructorParameters();  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeVars  =  parameterizedType.getConstructorParameters();	  Type[]    subtypeParams    =    parametersType.getConstructorParameters();    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
177	[BUG]  [BUGGY]  Type[]  subTypeParams  =  parameterizedType.getSubTypeParameters();  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Type[]  subTypeParams  =  parameterizedType.getSubTypeParameters();  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subTypeParams  =  parameterizedType.getSubTypeParameters();	  Type[]    subtypeParams    =    parametersizedType.getSubTypeParameters();    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
178	[BUG]  [BUGGY]  Type  ownerType  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  toClass);  [CE]  variable  ownerType  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]    AssertionError    [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Type  ownerType  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  toClass);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type  ownerType  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  toClass);	  typeVarAssigns    =    getTypeArguments(ownerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    typeVarAssigns    =    getTypeArguments(ownerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  variable  ownerType  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	44	None	replace
179	[BUG]  [BUGGY]  Type[]  subtypeVars  =  parameterizedType.getActualTypeParameters();  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Type[]  subtypeVars  =  parameterizedType.getActualTypeParameters();  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeVars  =  parameterizedType.getActualTypeParameters();	  Type[]    subtypeParams    =    parametersType.getActualTypeParameters();    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
180	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(toClass),  parametersType,  subtypeVarAssigns);  [CE]  no  suitable  method  found  for  getRawType(Class<CAP#1>)  [FE]                  AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(toClass),  parametersType,  subtypeVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(toClass),  parametersType,  subtypeVarAssigns);	  typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(toClass),    subtypeVarAssigns,    parametersType);    	non-compiled	[CE]  no  suitable  method  found  for  getRawType(Class<CAP#1>)	73	None	replace
181	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  parameterizedType.getOwnerTypeArguments();  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]            AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Type[]  subtypeVarAssigns  =  parameterizedType.getOwnerTypeArguments();  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeVarAssigns  =  parameterizedType.getOwnerTypeArguments();	  Type[]    subtypeVarAssigns    =    parameterizedType.getSubtypeArguments();    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	6	None	replace
182	[BUG]  [BUGGY]  Type[]  typeParams  =  parameterizedType.getConstructorParameters();  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Type[]  typeParams  =  parameterizedType.getConstructorParameters();  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  typeParams  =  parameterizedType.getConstructorParameters();	  Type[]    subtypeParams    =    parametersizedType.getConstructorParameters();    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
183	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  Type[]  types  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  Type[]  types  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  Type[]  types  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns	  typeVarAssigns    =    getTypeArguments(ownerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    Type[]    types    =    getTypeArguments(ownerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  ')'  expected	47	None	replace
184	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  toClass,  getRawType(parameterizedOwnerType),  parameterizedType);  [CE]  no  suitable  method  found  for  getTypeArguments(ParameterizedType,Class<CAP#1>,Class<CAP#2>,ParameterizedType)  [FE]                AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  toClass,  getRawType(parameterizedOwnerType),  parameterizedType);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  toClass,  getRawType(parameterizedOwnerType),  parameterizedType);	  typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    toClass,    getRawType(parameterizedOwnerType),    parameterizedOwnerType);    	non-compiled	[CE]  no  suitable  method  found  for  getTypeArguments(ParameterizedType,Class<CAP#1>,Class<CAP#2>,ParameterizedType)	15	None	replace
185	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  parameterizedOwnerType,  toClass,  subtypeVarAssigns);  [CE]  no  suitable  method  found  for  getTypeArguments(Class<CAP#1>,ParameterizedType,Class<CAP#2>,Map<TypeVariable<?>,Type>)  [FE]        NullPointerException      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  parameterizedOwnerType,  toClass,  subtypeVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(cls,  parameterizedOwnerType,  toClass,  subtypeVarAssigns);	  typeVarAssigns    =    getTypeArguments(cls,    parameterizedOwnerType,    subtypeVarAssigns);    	non-compiled	[CE]  no  suitable  method  found  for  getTypeArguments(Class<CAP#1>,ParameterizedType,Class<CAP#2>,Map<TypeVariable<?>,Type>)	51	None	replace
186	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  toClass,  parameterizedType);  [CE]  no  suitable  method  found  for  getTypeArguments(Class<CAP#1>,Class<CAP#2>,Class<CAP#3>,ParameterizedType)  [FE]            AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  toClass,  parameterizedType);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  toClass,  parameterizedType);	  typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    toClass,    typeParams);    	non-compiled	[CE]  no  suitable  method  found  for  getTypeArguments(Class<CAP#1>,Class<CAP#2>,Class<CAP#3>,ParameterizedType)	88	None	replace
187	[BUG]  [BUGGY]  Class  <?>[]  subtypeVarAssigns  =  parameterizedOwnerType.getParameterizedTypeArguments();  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]            AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Class  <?>[]  subtypeVarAssigns  =  parameterizedOwnerType.getParameterizedTypeArguments();  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Class  <?>[]  subtypeVarAssigns  =  parameterizedOwnerType.getParameterizedTypeArguments();	  Class    <?>[]    subtypeVarAssigns    =    parameterizedType.getParameterizedTypeArguments();    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	34	None	replace
188	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  parametersizedOwnerType.getActualTypeArguments();  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Type[]  subtypeVarAssigns  =  parametersizedOwnerType.getActualTypeArguments();  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeVarAssigns  =  parametersizedOwnerType.getActualTypeArguments();	  Type[]    subtypeVarAssigns    =    parameterizedOwnerType.getParameterizedTypeArguments();    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	50	None	replace
189	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  parametersizedType.getActualTypeArguments();  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Type[]  subtypeVarAssigns  =  parametersizedType.getActualTypeArguments();  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeVarAssigns  =  parametersizedType.getActualTypeArguments();	  Type[]    subtypeVarAssigns    =    parameterizedOwnerType.getParameterizedTypeArguments();    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	50	None	replace
190	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(toClass),  parameters,  subtypeVarAssigns);  [CE]  no  suitable  method  found  for  getRawType(Class<CAP#1>)  [FE]                  AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(toClass),  parameters,  subtypeVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(toClass),  parameters,  subtypeVarAssigns);	  typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(toClass),    subtypeVarAssigns,    parameters);    	non-compiled	[CE]  no  suitable  method  found  for  getRawType(Class<CAP#1>)	90	None	replace
191	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(toClass),  parameterizedType,  subtypeVarAssigns);  [CE]  no  suitable  method  found  for  getRawType(Class<CAP#1>)  [FE]                    AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(toClass),  parameterizedType,  subtypeVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(toClass),  parameterizedType,  subtypeVarAssigns);	  typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(toClass),    subtypeVarAssigns,    parameters);    	non-compiled	[CE]  no  suitable  method  found  for  getRawType(Class<CAP#1>)	90	None	replace
192	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(toClass,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  Type[]  subtypeVarAssigns  =  getTypeArguments(toClass,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]    NullPointerException    [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(toClass,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  Type[]  subtypeVarAssigns  =  getTypeArguments(toClass,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns    =    getTypeArguments(toClass,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    Type[]  subtypeVarAssigns  =  getTypeArguments(toClass,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	18	None	add
193	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(toClass,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  Type  toClass  =  getTypeArguments(toClass,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  variable  toClass  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]      NullPointerException    [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(toClass,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  Type  toClass  =  getTypeArguments(toClass,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns    =    getTypeArguments(toClass,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    Type  toClass  =  getTypeArguments(toClass,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  	non-compiled	[CE]  variable  toClass  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	18	None	add
194	[BUG]  [BUGGY]  Type[]  typeParams  =  parameterizedType.getAssignments();  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Type[]  typeParams  =  parameterizedType.getAssignments();  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  typeParams  =  parameterizedType.getAssignments();	  Type[]    subtypeParams    =    parametersizedType.getAssignments();    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
195	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  parametersizedType.getActualTypeParameters();  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                    AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Type[]  subtypeVarAssigns  =  parametersizedType.getActualTypeParameters();  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeVarAssigns  =  parametersizedType.getActualTypeParameters();	  Type[]    subtypeVarAssigns    =    parametersizedType.getOwnerTypeParameters();    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	58	None	replace
196	[BUG]  [BUGGY]  typeVarAssigns    =    getTypeArguments(cls,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  Type[]  typeParams  =  getTypeParameters(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns    =    getTypeArguments(cls,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  Type[]  typeParams  =  getTypeParameters(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns        =        getTypeArguments(cls,        getRawType(parameterizedOwnerType),        subtypeVarAssigns);        typeVarAssigns    =    getTypeArguments(cls,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    Type[]  typeParams  =  getTypeParameters(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  	non-compiled	[CE]  cannot  find  symbol	22	None	add
197	[BUG]  [BUGGY]  typeVarAssigns    =    getTypeArguments(cls,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]      AssertionError    [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns    =    getTypeArguments(cls,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns        =        getTypeArguments(cls,        getRawType(parameterizedOwnerType),        subtypeVarAssigns);        typeVarAssigns    =    getTypeArguments(cls,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	22	None	add
198	[BUG]  [BUGGY]  typeVarAssigns    =    getTypeArguments(cls,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]        AssertionError    [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns    =    getTypeArguments(cls,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns        =        getTypeArguments(cls,        getRawType(parameterizedOwnerType),        subtypeVarAssigns);        typeVarAssigns    =    getTypeArguments(cls,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	22	None	add
199	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  parametersizedType.getRawTypeArguments();  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]            AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Type[]  subtypeVarAssigns  =  parametersizedType.getRawTypeArguments();  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeVarAssigns  =  parametersizedType.getRawTypeArguments();	  Type[]    subtypeVarAssigns    =    parameterizedType.getRawTypeArguments();    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	60	None	replace
200	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(parameterizedOwnerType),  parameterizedVarAssigns);  [CE]  cannot  find  symbol  parameterizedVarAssigns  [FE]                AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(parameterizedOwnerType),  parameterizedVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(parameterizedOwnerType),  parameterizedVarAssigns);	  typeVarAssigns    =    getTypeArguments(cls,    parameterizedOwnerType,    getRawType(toClass),    subtypeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol  parameterizedVarAssigns	17	None	replace
201	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(toClass,  parameterizedOwnerType,  getRawType(toClass),  parameterizedOwnerType);  [CE]  no  suitable  method  found  for  getRawType(Class<CAP#1>)  [FE]                  AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(toClass,  parameterizedOwnerType,  getRawType(toClass),  parameterizedOwnerType);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(toClass,  parameterizedOwnerType,  getRawType(toClass),  parameterizedOwnerType);	  typeVarAssigns    =    getTypeArguments(cls,    parameterizedOwnerType,    getRawType(toClass),    subtypeVarAssigns);    	non-compiled	[CE]  no  suitable  method  found  for  getRawType(Class<CAP#1>)	17	None	replace
202	[BUG]  [BUGGY]  Type[]  subtypeParams  =  parameters.getConstructorParameters();  [CE]  cannot  find  symbol  parameters  [FE]                AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Type[]  subtypeParams  =  parameters.getConstructorParameters();  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeParams  =  parameters.getConstructorParameters();	  Type[]    subtypeParams    =    ownerType.getConstructorParameters();    	non-compiled	[CE]  cannot  find  symbol  parameters	57	None	replace
203	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(parameterizedOwnerType),  parameterizedOwnerType,  typeVarAssigns);  [CE]  no  suitable  method  found  for  getTypeArguments(Class<CAP#1>,Class<CAP#2>,Class<CAP#3>,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(parameterizedOwnerType),  parameterizedOwnerType,  typeVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(parameterizedOwnerType),  parameterizedOwnerType,  typeVarAssigns);	  typeVarAssigns    =    getTypeArguments(cls,    toClass,    getRawType(parameterizedOwnerType),    parameterizedOwnerType,    subtypeVarAssigns);    	non-compiled	[CE]  no  suitable  method  found  for  getTypeArguments(Class<CAP#1>,Class<CAP#2>,Class<CAP#3>,ParameterizedType,Map<TypeVariable<?>,Type>)	29	None	replace
204	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(ownerType),  subtypeVarAssigns,  toClass);  [CE]  no  suitable  method  found  for  getRawType(Type)  [FE]        AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(ownerType),  subtypeVarAssigns,  toClass);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(ownerType),  subtypeVarAssigns,  toClass);	  typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(ownerType),    subtypeVarAssigns);    	non-compiled	[CE]  no  suitable  method  found  for  getRawType(Type)	53	None	replace
205	[BUG]  [BUGGY]  Type[]  subtypeParams  =  parametersizedType.getConstructorParameters(toClass);  [CE]  cannot  find  symbol  parametersizedType  [FE]            AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Type[]  subtypeParams  =  parametersizedType.getConstructorParameters(toClass);  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeParams  =  parametersizedType.getConstructorParameters(toClass);	  Type[]    subtypeParams    =    parameterizedType.getConstructorParameters(toClass);    	non-compiled	[CE]  cannot  find  symbol  parametersizedType	79	None	replace
206	[BUG]  [BUGGY]  Type[]  typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  variable  typeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]        NullPointerException      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Type[]  typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  typeVarAssigns    =    getTypeArguments(cls,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    Type[]    typeParams    =    getTypeParameters(cls,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  variable  typeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	87	None	replace
207	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  getOwnerType(parameterizedOwnerType),  toClass);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]        NullPointerException      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  getOwnerType(parameterizedOwnerType),  toClass);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  getOwnerType(parameterizedOwnerType),  toClass);	  Type[]    subtypeVarAssigns    =    getTypeArguments(cls,    getRawType(parameterizedOwnerType),    toClass);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	83	None	replace
208	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  toClass,  typeVarAssigns);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]          NullPointerException      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  toClass,  typeVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  toClass,  typeVarAssigns);	  Type[]    subtypeVarAssigns    =    getTypeArguments(cls,    getRawType(parameterizedOwnerType),    toClass);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	83	None	replace
209	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  parameterizedType.getActualTypeParameters(toClass,  typeVarAssigns);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Type[]  subtypeVarAssigns  =  parameterizedType.getActualTypeParameters(toClass,  typeVarAssigns);  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeVarAssigns  =  parameterizedType.getActualTypeParameters(toClass,  typeVarAssigns);	  Type[]    subtypeVarAssigns    =    parameterizedType.getActualTypeParameters(toClass);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	84	None	replace
210	[BUG]  [BUGGY]  Type[]  typeArgs  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  incompatible  types  [FE]          AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Type[]  typeArgs  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  typeArgs  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  typeVarAssigns    =    getTypeArguments(ownerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    Type[]    typeArgs    =    getTypeArguments(ownerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  incompatible  types	63	None	replace
211	[BUG]  [BUGGY]  Type[]  typeParams  =  getTypeArguments(cls,  getOwnerType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  cannot  find  symbol  [FE]          NullPointerException      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Type[]  typeParams  =  getTypeArguments(cls,  getOwnerType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  typeParams  =  getTypeArguments(cls,  getOwnerType(parameterizedOwnerType),  subtypeVarAssigns);	  typeVarAssigns    =    getTypeArguments(cls,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    Type[]    typeParams    =    getTypeArguments(cls,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
212	[BUG]  [BUGGY]  Type[]  types  =  getTypeArguments(cls,  getOwnerType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  cannot  find  symbol  [FE]              NullPointerException      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Type[]  types  =  getTypeArguments(cls,  getOwnerType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  types  =  getTypeArguments(cls,  getOwnerType(parameterizedOwnerType),  subtypeVarAssigns);	  typeVarAssigns    =    getTypeArguments(cls,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    Type[]    types    =    getTypeArguments(cls,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
213	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(typeArgs,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  cannot  find  symbol  typeArgs  [FE]        AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(typeArgs,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(typeArgs,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  typeVarAssigns    =    getTypeArguments(typeParams,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol  typeArgs	71	None	replace
214	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(parameterizedOwnerType),  subtypeVarAssigns,  parameterizedType);  [CE]  no  suitable  method  found  for  getTypeArguments(Class<CAP#1>,Class<CAP#2>,Class<CAP#3>,Map<TypeVariable<?>,Type>,ParameterizedType)  [FE]              AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(parameterizedOwnerType),  subtypeVarAssigns,  parameterizedType);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(parameterizedOwnerType),  subtypeVarAssigns,  parameterizedType);	  typeVarAssigns    =    getTypeArguments(cls,    toClass,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  no  suitable  method  found  for  getTypeArguments(Class<CAP#1>,Class<CAP#2>,Class<CAP#3>,Map<TypeVariable<?>,Type>,ParameterizedType)	27	None	replace
215	[BUG]  [BUGGY]  Type[]  subtypeParams  =  parametersizedType.getSubtypeParameters();  [CE]  cannot  find  symbol  parametersizedType  [FE]                  AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Type[]  subtypeParams  =  parametersizedType.getSubtypeParameters();  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeParams  =  parametersizedType.getSubtypeParameters();	  Type[]    subtypeParams    =    parameterizedType.getSubtypeParameters();    	non-compiled	[CE]  cannot  find  symbol  parametersizedType	1	None	replace
216	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  parametersOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  cannot  find  symbol  parametersOwnerType  [FE]              AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  parametersOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(cls,  parametersOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    cls,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol  parametersOwnerType	82	None	replace
217	[BUG]  [BUGGY]  Type[]  subtypeParams  =  parameters.getAssignedTypeParameters();  [CE]  cannot  find  symbol  parameters  [FE]                AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Type[]  subtypeParams  =  parameters.getAssignedTypeParameters();  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeParams  =  parameters.getAssignedTypeParameters();	  Type[]    subtypeParams    =    toClass.getAssignedTypeParameters();    	non-compiled	[CE]  cannot  find  symbol  parameters	41	None	replace
218	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]        NullPointerException      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  typeVarAssigns    =    getTypeArguments(cls,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    Type[]    subtypeVarAssigns    =    getTypeArguments(cls,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	67	None	replace
219	[BUG]  [BUGGY]  Type[]  subtypeParams  =  getTypeArguments(cls,  getOwnerType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  cannot  find  symbol  [FE]            NullPointerException      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Type[]  subtypeParams  =  getTypeArguments(cls,  getOwnerType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeParams  =  getTypeArguments(cls,  getOwnerType(parameterizedOwnerType),  subtypeVarAssigns);	  typeVarAssigns    =    getTypeArguments(cls,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    Type[]    subtypeParams    =    getTypeArguments(cls,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
220	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  toClass);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]        AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  toClass);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  toClass);	  Type[]    subtypeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	86	None	replace
221	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(ownerType),  toClass);  [CE]  no  suitable  method  found  for  getRawType(Type)  [FE]          AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(ownerType),  toClass);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(ownerType),  toClass);	  typeVarAssigns    =    getTypeArguments(ownerType,    getRawType(parameterizedOwnerType),    toClass);    	non-compiled	[CE]  no  suitable  method  found  for  getRawType(Type)	54	None	replace
222	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(toClass),  toClass,  subtypeVarAssigns,  parametersType);  [CE]  no  suitable  method  found  for  getRawType(Class<CAP#1>)  [FE]                AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(toClass),  toClass,  subtypeVarAssigns,  parametersType);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(toClass),  toClass,  subtypeVarAssigns,  parametersType);	  typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(toClass),    toClass,    subtypeVarAssigns);    	non-compiled	[CE]  no  suitable  method  found  for  getRawType(Class<CAP#1>)	89	None	replace
223	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(toClass),  toClass,  subtypeVarAssigns,  parameterizedType);  [CE]  no  suitable  method  found  for  getRawType(Class<CAP#1>)  [FE]                  AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(toClass),  toClass,  subtypeVarAssigns,  parameterizedType);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(toClass),  toClass,  subtypeVarAssigns,  parameterizedType);	  typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(toClass),    toClass,    subtypeVarAssigns);    	non-compiled	[CE]  no  suitable  method  found  for  getRawType(Class<CAP#1>)	89	None	replace
224	[BUG]  [BUGGY]  Type[]  typeArgs  =  getTypeArguments(cls,  getOwnerType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  cannot  find  symbol  [FE]          NullPointerException      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Type[]  typeArgs  =  getTypeArguments(cls,  getOwnerType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  typeArgs  =  getTypeArguments(cls,  getOwnerType(parameterizedOwnerType),  subtypeVarAssigns);	  typeVarAssigns    =    getTypeArguments(cls,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    Type[]    typeArgs    =    getTypeArguments(cls,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
225	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  getOwnerType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  getOwnerType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(cls,  getOwnerType(parameterizedOwnerType),  subtypeVarAssigns);	  typeVarAssigns    =    getTypeArguments(cls,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    typeVarAssigns    =    getTypeArguments(cls,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
226	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  getOwnerType(),  subtypeVarAssigns);  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  getOwnerType(),  subtypeVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(cls,  getOwnerType(),  subtypeVarAssigns);	  typeVarAssigns    =    getTypeArguments(cls,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    typeVarAssigns    =    getTypeArguments(cls,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
227	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  toClass,  parameterizedOwnerType,  getRawType(parameterizedOwnerType),  parameterizedType);  [CE]  no  suitable  method  found  for  getTypeArguments(Class<CAP#1>,Class<CAP#2>,ParameterizedType,Class<CAP#3>,ParameterizedType)  [FE]            AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  toClass,  parameterizedOwnerType,  getRawType(parameterizedOwnerType),  parameterizedType);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(cls,  toClass,  parameterizedOwnerType,  getRawType(parameterizedOwnerType),  parameterizedType);	  typeVarAssigns    =    getTypeArguments(cls,    toClass,    getRawType(parameterizedOwnerType),    parameterizedOwnerType);    	non-compiled	[CE]  no  suitable  method  found  for  getTypeArguments(Class<CAP#1>,Class<CAP#2>,ParameterizedType,Class<CAP#3>,ParameterizedType)	75	None	replace
228	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(toClass),  toClass,  parameterizedType);  [CE]  no  suitable  method  found  for  getRawType(Class<CAP#1>)  [FE]                  AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(toClass),  toClass,  parameterizedType);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(toClass),  toClass,  parameterizedType);	  typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(toClass),    parameterizedOwnerType);    	non-compiled	[CE]  no  suitable  method  found  for  getRawType(Class<CAP#1>)	16	None	replace
229	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  cls,  getRawType(toClass),  subtypeVarAssigns);  [CE]  no  suitable  method  found  for  getRawType(Class<CAP#1>)  [FE]                    AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  cls,  getRawType(toClass),  subtypeVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  cls,  getRawType(toClass),  subtypeVarAssigns);	  typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    toClass,    getRawType(toClass),    subtypeVarAssigns);    	non-compiled	[CE]  no  suitable  method  found  for  getRawType(Class<CAP#1>)	20	None	replace
230	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  toClass,  getRawType(toClass),  subtypeVarAssigns,  ownerType);  [CE]  no  suitable  method  found  for  getRawType(Class<CAP#1>)  [FE]                      AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  toClass,  getRawType(toClass),  subtypeVarAssigns,  ownerType);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  toClass,  getRawType(toClass),  subtypeVarAssigns,  ownerType);	  typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    toClass,    getRawType(toClass),    subtypeVarAssigns);    	non-compiled	[CE]  no  suitable  method  found  for  getRawType(Class<CAP#1>)	20	None	replace
231	[BUG]  [BUGGY]  Type[]  subtypeParams  =  parametersizedType.getDeclaredTypeParameters();  [CE]  cannot  find  symbol  parametersizedType  [FE]                      AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Type[]  subtypeParams  =  parametersizedType.getDeclaredTypeParameters();  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeParams  =  parametersizedType.getDeclaredTypeParameters();	  Type[]    subtypeParams    =    parameterizedType.getDeclaredTypeParameters();    	non-compiled	[CE]  cannot  find  symbol  parametersizedType	3	None	replace
232	[BUG]  [BUGGY]  typeVarAssigns    =    getTypeArguments(ownerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  Type  ownerType  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  variable  ownerType  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]    AssertionError    [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns    =    getTypeArguments(ownerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  Type  ownerType  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns        =        getTypeArguments(ownerType,        getRawType(parameterizedOwnerType),        subtypeVarAssigns);        typeVarAssigns    =    getTypeArguments(ownerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    Type  ownerType  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  	non-compiled	[CE]  variable  ownerType  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	43	None	add
233	[BUG]  [BUGGY]  typeVarAssigns    =    getTypeArguments(ownerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  Type[]  typeParams  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  incompatible  types  [FE]      AssertionError    [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns    =    getTypeArguments(ownerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  Type[]  typeParams  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns        =        getTypeArguments(ownerType,        getRawType(parameterizedOwnerType),        subtypeVarAssigns);        typeVarAssigns    =    getTypeArguments(ownerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    Type[]  typeParams  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  	non-compiled	[CE]  incompatible  types	43	None	add
234	[BUG]  [BUGGY]  typeVarAssigns    =    getTypeArguments(ownerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  Type  ownerType  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  variable  ownerType  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]        AssertionError    [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns    =    getTypeArguments(ownerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  Type  ownerType  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns        =        getTypeArguments(ownerType,        getRawType(parameterizedOwnerType),        subtypeVarAssigns);        typeVarAssigns    =    getTypeArguments(ownerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    Type  ownerType  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  	non-compiled	[CE]  variable  ownerType  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	43	None	add
235	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  toClass,  getRawType(parameterizedOwnerType),  typeArgs);  [CE]  cannot  find  symbol  typeArgs  [FE]                AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  toClass,  getRawType(parameterizedOwnerType),  typeArgs);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  toClass,  getRawType(parameterizedOwnerType),  typeArgs);	  typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    toClass,    getRawType(parameterizedOwnerType),    parameterizedOwnerType);    	non-compiled	[CE]  cannot  find  symbol  typeArgs	15	None	replace
236	[BUG]  [BUGGY]  Type[]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  variable  typeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]            AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Type[]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  typeVarAssigns    =    getTypeArguments(ownerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    Type[]    typeParams    =    getTypeArguments(ownerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  variable  typeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	46	None	replace
237	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  parameterizedType.getParameterizedTypeVarAssigns();  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                      AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Type[]  subtypeVarAssigns  =  parameterizedType.getParameterizedTypeVarAssigns();  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeVarAssigns  =  parameterizedType.getParameterizedTypeVarAssigns();	  Type[]    subtypeVarAssigns    =    parameterizedType.getSubtypeVarAssigns();    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	40	None	replace
238	[BUG]  [BUGGY]  Type[]  typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  toClass);  [CE]  variable  typeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]        NullPointerException      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Type[]  typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  toClass);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  toClass);	  Type[]    subtypeVarAssigns    =    getTypeArguments(cls,    getRawType(parameterizedOwnerType),    toClass);    	non-compiled	[CE]  variable  typeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	83	None	replace
239	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  parameterizedType.getActualParameterTypeArguments();  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]            AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Type[]  subtypeVarAssigns  =  parameterizedType.getActualParameterTypeArguments();  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeVarAssigns  =  parameterizedType.getActualParameterTypeArguments();	  Type[]    subtypeVarAssigns    =    parameterizedType.getSubtypeArguments();    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	6	None	replace
240	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  parameterizedType.getActualSubtypeArguments();  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Type[]  subtypeVarAssigns  =  parameterizedType.getActualSubtypeArguments();  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeVarAssigns  =  parameterizedType.getActualSubtypeArguments();	  Type[]    subtypeVarAssigns    =    parameterizedType.getSubtypeArguments();    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	6	None	replace
241	[BUG]  [BUGGY]  Type[]  subtypeParams  =  typeParameterizedType.getAssignedTypeParameters();  [CE]  cannot  find  symbol  typeParameterizedType  [FE]                  AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Type[]  subtypeParams  =  typeParameterizedType.getAssignedTypeParameters();  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeParams  =  typeParameterizedType.getAssignedTypeParameters();	  Type[]    subtypeParams    =    parametersType.getAssignedTypeParameters();    	non-compiled	[CE]  cannot  find  symbol  typeParameterizedType	42	None	replace
242	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(toClass,  getRawType(parameterizedOwnerType),  ownerType);  [CE]  no  suitable  method  found  for  getTypeArguments(Class<CAP#1>,Class<CAP#2>,Type)  [FE]          AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(toClass,  getRawType(parameterizedOwnerType),  ownerType);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(toClass,  getRawType(parameterizedOwnerType),  ownerType);	  typeVarAssigns    =    getTypeArguments(ownerType,    getRawType(parameterizedOwnerType),    toClass);    	non-compiled	[CE]  no  suitable  method  found  for  getTypeArguments(Class<CAP#1>,Class<CAP#2>,Type)	54	None	replace
243	[BUG]  [BUGGY]  Class  <?>[]  subtypeVarAssigns  =  parameterizedType.getActualParameterizedTypeArguments();  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]            AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Class  <?>[]  subtypeVarAssigns  =  parameterizedType.getActualParameterizedTypeArguments();  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Class  <?>[]  subtypeVarAssigns  =  parameterizedType.getActualParameterizedTypeArguments();	  Class    <?>[]    subtypeVarAssigns    =    parameterizedType.getParameterizedTypeArguments();    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	34	None	replace
244	[BUG]  [BUGGY]  Class  <?>[]  subtypeVarAssigns  =  parametersizedType.getParameterizedTypeArguments();  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Class  <?>[]  subtypeVarAssigns  =  parametersizedType.getParameterizedTypeArguments();  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Class  <?>[]  subtypeVarAssigns  =  parametersizedType.getParameterizedTypeArguments();	  Class    <?>[]    subtypeVarAssigns    =    parameterizedType.getParameterizedTypeArguments();    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	34	None	replace
245	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  typeVarAssigns    =    getTypeArguments(cls,    parameterizedOwnerType,    getRawType(toClass),    subtypeVarAssigns);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	17	None	replace
246	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  toClass,  getRawType(toClass),  typeVarAssigns);  [CE]  no  suitable  method  found  for  getRawType(Class<CAP#1>)  [FE]                  AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  toClass,  getRawType(toClass),  typeVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  toClass,  getRawType(toClass),  typeVarAssigns);	  typeVarAssigns    =    getTypeArguments(cls,    parameterizedOwnerType,    getRawType(toClass),    subtypeVarAssigns);    	non-compiled	[CE]  no  suitable  method  found  for  getRawType(Class<CAP#1>)	17	None	replace
247	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(toClass),  toClass,  subtypeVarAssigns,  ownerType);  [CE]  no  suitable  method  found  for  getRawType(Class<CAP#1>)  [FE]                AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(toClass),  toClass,  subtypeVarAssigns,  ownerType);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(toClass),  toClass,  subtypeVarAssigns,  ownerType);	  typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(toClass),    toClass,    subtypeVarAssigns);    	non-compiled	[CE]  no  suitable  method  found  for  getRawType(Class<CAP#1>)	89	None	replace
248	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  getRawType(toClass),  toClass,  subtypeVarAssigns);  [CE]  no  suitable  method  found  for  getRawType(Class<CAP#1>)  [FE]                  AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  getRawType(toClass),  toClass,  subtypeVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(cls,  getRawType(toClass),  toClass,  subtypeVarAssigns);	  typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(toClass),    toClass,    subtypeVarAssigns);    	non-compiled	[CE]  no  suitable  method  found  for  getRawType(Class<CAP#1>)	89	None	replace
249	[BUG]  [BUGGY]  Type[]  subtypeParams  =  parameterizedType.getSubtypeParameters(toClass);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Type[]  subtypeParams  =  parameterizedType.getSubtypeParameters(toClass);  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeParams  =  parameterizedType.getSubtypeParameters(toClass);	  Type[]    subtypeParams    =    parameterizedType.getSubtypeParameters();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
250	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  parameterizedType,  getRawType(toClass),  subtypeVarAssigns);  [CE]  no  suitable  method  found  for  getRawType(Class<CAP#1>)  [FE]                      AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  parameterizedType,  getRawType(toClass),  subtypeVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(cls,  parameterizedType,  getRawType(toClass),  subtypeVarAssigns);	  typeVarAssigns    =    getTypeArguments(cls,    parametersType,    getRawType(toClass),    subtypeVarAssigns);    	non-compiled	[CE]  no  suitable  method  found  for  getRawType(Class<CAP#1>)	21	None	replace
251	[BUG]  [BUGGY]  Class  <?>[]  subtypeVarAssigns  =  parameterizedType.getActualSubtypeVarAssigns();  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Class  <?>[]  subtypeVarAssigns  =  parameterizedType.getActualSubtypeVarAssigns();  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Class  <?>[]  subtypeVarAssigns  =  parameterizedType.getActualSubtypeVarAssigns();	  Class    <?>[]    subtypeVarAssigns    =    parameterizedType.getSubtypeVarAssigns();    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	78	None	replace
252	[BUG]  [BUGGY]  Type[]  typeVarAssigns  =  getTypeParameters(cls,  getRawType(parameterizedOwnerType),  toClass);  [CE]  variable  typeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]        NullPointerException      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Type[]  typeVarAssigns  =  getTypeParameters(cls,  getRawType(parameterizedOwnerType),  toClass);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  typeVarAssigns  =  getTypeParameters(cls,  getRawType(parameterizedOwnerType),  toClass);	  typeVarAssigns    =    getTypeArguments(cls,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    Type[]    typeParams    =    getTypeParameters(cls,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  variable  typeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	87	None	replace
253	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(toClass),  toClass,  typeVarAssigns);  [CE]  no  suitable  method  found  for  getRawType(Class<CAP#1>)  [FE]                  AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(toClass),  toClass,  typeVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(toClass),  toClass,  typeVarAssigns);	  typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(toClass),    parameterizedOwnerType);    	non-compiled	[CE]  no  suitable  method  found  for  getRawType(Class<CAP#1>)	16	None	replace
254	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(toClass,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]        AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(toClass,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(toClass,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  typeVarAssigns    =    getTypeArguments(typeParams,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	71	None	replace
255	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]    AssertionError    [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeVarAssigns  =  getTypeParameters(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  typeVarAssigns    =    getTypeArguments(ownerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    typeVarAssigns    =    getTypeArguments(ownerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	44	None	replace
256	[BUG]  [BUGGY]  if(typeVarAssigns!=  null)  {  typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  if(typeVarAssigns!=  null)  {  typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	if(typeVarAssigns!=  null)  {  typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),	  typeVarAssigns    =    getTypeArguments(ownerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    typeVarAssigns    =    getTypeArguments(ownerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
257	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(parameterizedOwnerType),  parametersizedType);  [CE]  cannot  find  symbol  parametersizedType  [FE]            AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(parameterizedOwnerType),  parametersizedType);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(parameterizedOwnerType),  parametersizedType);	  typeVarAssigns    =    getTypeArguments(cls,    toClass,    getRawType(parameterizedOwnerType),    parameterizedOwnerType);    	non-compiled	[CE]  cannot  find  symbol  parametersizedType	75	None	replace
258	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(toClass),  subtypeVarAssigns,  parameterizedType,  ownerType);  [CE]  no  suitable  method  found  for  getRawType(Class<CAP#1>)  [FE]                AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(toClass),  subtypeVarAssigns,  parameterizedType,  ownerType);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(toClass),  subtypeVarAssigns,  parameterizedType,  ownerType);	  typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(toClass),    subtypeVarAssigns,    parameterizedType);    	non-compiled	[CE]  no  suitable  method  found  for  getRawType(Class<CAP#1>)	72	None	replace
259	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(toClass),  subtypeVarAssigns,  parameterizedType,  toClass);  [CE]  no  suitable  method  found  for  getRawType(Class<CAP#1>)  [FE]                  AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(toClass),  subtypeVarAssigns,  parameterizedType,  toClass);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(toClass),  subtypeVarAssigns,  parameterizedType,  toClass);	  typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(toClass),    subtypeVarAssigns,    parameterizedType);    	non-compiled	[CE]  no  suitable  method  found  for  getRawType(Class<CAP#1>)	72	None	replace
260	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(toClass),  subtypeVarAssigns,  parametersizedType);  [CE]  no  suitable  method  found  for  getRawType(Class<CAP#1>)  [FE]                    AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(toClass),  subtypeVarAssigns,  parametersizedType);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(toClass),  subtypeVarAssigns,  parametersizedType);	  typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(toClass),    subtypeVarAssigns,    parameterizedType);    	non-compiled	[CE]  no  suitable  method  found  for  getRawType(Class<CAP#1>)	72	None	replace
261	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  parameterizedType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  no  suitable  method  found  for  getTypeArguments(Class<CAP#1>,ParameterizedType,Class<CAP#2>,Map<TypeVariable<?>,Type>)  [FE]          NullPointerException      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  parameterizedType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(cls,  parameterizedType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  typeVarAssigns    =    getTypeArguments(cls,    parametersType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  no  suitable  method  found  for  getTypeArguments(Class<CAP#1>,ParameterizedType,Class<CAP#2>,Map<TypeVariable<?>,Type>)	52	None	replace
262	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  new  TypeVariable  <?>());  [CE]  unexpected  type  [FE]    AssertionError    [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  new  TypeVariable  <?>());  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  new  TypeVariable  <?>());	  typeVarAssigns    =    getTypeArguments(cls,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    typeVarAssigns    =    getTypeArguments(cls,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  unexpected  type	23	None	replace
263	[BUG]  [BUGGY]  Class  <?>[]  subtypeVarAssigns  =  parameterizedType.getActualParameterTypes();  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Class  <?>[]  subtypeVarAssigns  =  parameterizedType.getActualParameterTypes();  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Class  <?>[]  subtypeVarAssigns  =  parameterizedType.getActualParameterTypes();	  Class    <?>[]    subtypeVarAssigns    =    parameterizedType.getConstructorArguments();    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	37	None	replace
264	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(parameterizedOwnerType),  parameterizedType,  subtypeVarAssigns);  [CE]  no  suitable  method  found  for  getTypeArguments(Class<CAP#1>,Class<CAP#2>,Class<CAP#3>,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(parameterizedOwnerType),  parameterizedType,  subtypeVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(parameterizedOwnerType),  parameterizedType,  subtypeVarAssigns);	  typeVarAssigns    =    getTypeArguments(cls,    toClass,    getRawType(parameterizedOwnerType),    parameterizedOwnerType,    subtypeVarAssigns);    	non-compiled	[CE]  no  suitable  method  found  for  getTypeArguments(Class<CAP#1>,Class<CAP#2>,Class<CAP#3>,ParameterizedType,Map<TypeVariable<?>,Type>)	29	None	replace
265	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(parameterizedOwnerType),  parameterizedType,  subtypeVarAssigns,  ownerType);  [CE]  no  suitable  method  found  for  getTypeArguments(Class<CAP#1>,Class<CAP#2>,Class<CAP#3>,ParameterizedType,Map<TypeVariable<?>,Type>,Type)  [FE]                    AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(parameterizedOwnerType),  parameterizedType,  subtypeVarAssigns,  ownerType);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(parameterizedOwnerType),  parameterizedType,  subtypeVarAssigns,  ownerType);	  typeVarAssigns    =    getTypeArguments(cls,    toClass,    getRawType(parameterizedOwnerType),    parameterizedOwnerType,    subtypeVarAssigns);    	non-compiled	[CE]  no  suitable  method  found  for  getTypeArguments(Class<CAP#1>,Class<CAP#2>,Class<CAP#3>,ParameterizedType,Map<TypeVariable<?>,Type>,Type)	29	None	replace
266	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns,  ownerType);  [CE]  no  suitable  method  found  for  getTypeArguments(ParameterizedType,Class<CAP#1>,Class<CAP#2>,Map<TypeVariable<?>,Type>,Type)  [FE]                    AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns,  ownerType);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns,  ownerType);	  typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    toClass,    getRawType(parameterizedOwnerType),    subtypeVarAssigns,    ownerType);    	non-compiled	[CE]  no  suitable  method  found  for  getTypeArguments(ParameterizedType,Class<CAP#1>,Class<CAP#2>,Map<TypeVariable<?>,Type>,Type)	30	None	replace
267	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  parametersizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  cannot  find  symbol  parametersizedOwnerType  [FE]              AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  parametersizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(cls,  parametersizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    cls,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol  parametersizedOwnerType	82	None	replace
268	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  cls,  toClass,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  no  suitable  method  found  for  getTypeArguments(ParameterizedType,Class<CAP#1>,Class<CAP#2>,Class<CAP#3>,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  cls,  toClass,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  cls,  toClass,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    cls,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  no  suitable  method  found  for  getTypeArguments(ParameterizedType,Class<CAP#1>,Class<CAP#2>,Class<CAP#3>,Map<TypeVariable<?>,Type>)	82	None	replace
269	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(toClass),  subtypeVarAssigns,  parametersType,  ownerType);  [CE]  no  suitable  method  found  for  getRawType(Class<CAP#1>)  [FE]                  AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(toClass),  subtypeVarAssigns,  parametersType,  ownerType);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(toClass),  subtypeVarAssigns,  parametersType,  ownerType);	  typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(toClass),    subtypeVarAssigns,    parametersType);    	non-compiled	[CE]  no  suitable  method  found  for  getRawType(Class<CAP#1>)	73	None	replace
270	[BUG]  [BUGGY]  Class  <?>[]  subtypeVarAssigns  =  parameterizedType.getActualSubtypeVariables();  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]            AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Class  <?>[]  subtypeVarAssigns  =  parameterizedType.getActualSubtypeVariables();  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Class  <?>[]  subtypeVarAssigns  =  parameterizedType.getActualSubtypeVariables();	  Class    <?>[]    subtypeVarAssigns    =    parameterizedType.getSubtypeVariables();    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	77	None	replace
271	[BUG]  [BUGGY]  Type[]  subtypeParams  =  parameterizedType.getSubtypeParams(toClass);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Type[]  subtypeParams  =  parameterizedType.getSubtypeParams(toClass);  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeParams  =  parameterizedType.getSubtypeParams(toClass);	  Type[]    subtypeParams    =    parameterizedType.getSubtypeParams();    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
272	[BUG]  [BUGGY]  Type[]  subtypeParams  =  parameterizedType.getSubTypeParameters(toClass);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Type[]  subtypeParams  =  parameterizedType.getSubTypeParameters(toClass);  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeParams  =  parameterizedType.getSubTypeParameters(toClass);	  Type[]    subtypeParams    =    parameterizedType.getSubTypeParameters();    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
273	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  parameterizedType,  getRawType(parameterizedOwnerType),  toClass);  [CE]  no  suitable  method  found  for  getTypeArguments(Class<CAP#1>,ParameterizedType,Class<CAP#2>,Class<CAP#3>)  [FE]              AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  parameterizedType,  getRawType(parameterizedOwnerType),  toClass);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(cls,  parameterizedType,  getRawType(parameterizedOwnerType),  toClass);	  typeVarAssigns    =    getTypeArguments(cls,    parametersizedOwnerType,    getRawType(parameterizedOwnerType),    toClass);    	non-compiled	[CE]  no  suitable  method  found  for  getTypeArguments(Class<CAP#1>,ParameterizedType,Class<CAP#2>,Class<CAP#3>)	14	None	replace
274	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  parameterizedType.getSubtypeVariables(toClass);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Type[]  subtypeVarAssigns  =  parameterizedType.getSubtypeVariables(toClass);  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeVarAssigns  =  parameterizedType.getSubtypeVariables(toClass);	  Type[]    subtypeVarAssigns    =    parameterizedType.getSubtypeVariables();    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	61	None	replace
275	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  parameterizedType.getActualParameterizedTypeArguments();  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Type[]  subtypeVarAssigns  =  parameterizedType.getActualParameterizedTypeArguments();  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeVarAssigns  =  parameterizedType.getActualParameterizedTypeArguments();	  Type[]    subtypeVarAssigns    =    parameterizedType.getParameterizedTypeArguments();    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	7	None	replace
276	[BUG]  [BUGGY]  Type[]  types  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  incompatible  types  [FE]              AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Type[]  types  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  types  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  typeVarAssigns    =    getTypeArguments(ownerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    Type[]    types    =    getTypeArguments(ownerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  incompatible  types	47	None	replace
277	[BUG]  [BUGGY]  Type[]  subtypeParams  =  parameterizedType.getDeclaredTypeParameters(toClass);  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Type[]  subtypeParams  =  parameterizedType.getDeclaredTypeParameters(toClass);  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeParams  =  parameterizedType.getDeclaredTypeParameters(toClass);	  Type[]    subtypeParams    =    parameterizedType.getDeclaredTypeParameters();    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
278	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(toClass,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  Type[]  typeParams  =  getTypeParameters(toClass,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  cannot  find  symbol  [FE]    NullPointerException    [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(toClass,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  Type[]  typeParams  =  getTypeParameters(toClass,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns    =    getTypeArguments(toClass,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    Type[]  typeParams  =  getTypeParameters(toClass,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  	non-compiled	[CE]  cannot  find  symbol	18	None	add
279	[BUG]  [BUGGY]  typeVarAssigns    =    getTypeArguments(cls,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  Type[]  subtypeVarAssigns  =  getTypeParameters(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]    AssertionError    [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns    =    getTypeArguments(cls,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  Type[]  subtypeVarAssigns  =  getTypeParameters(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns        =        getTypeArguments(cls,        getRawType(parameterizedOwnerType),        subtypeVarAssigns);        typeVarAssigns    =    getTypeArguments(cls,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    Type[]  subtypeVarAssigns  =  getTypeParameters(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	22	None	add
280	[BUG]  [BUGGY]  typeVarAssigns    =    getTypeArguments(cls,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  Type[]  subtypeVarAssigns  =  getTypeParameters(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]      AssertionError    [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns    =    getTypeArguments(cls,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  Type[]  subtypeVarAssigns  =  getTypeParameters(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns        =        getTypeArguments(cls,        getRawType(parameterizedOwnerType),        subtypeVarAssigns);        typeVarAssigns    =    getTypeArguments(cls,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    Type[]  subtypeVarAssigns  =  getTypeParameters(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	22	None	add
281	[BUG]  [BUGGY]  Class  <?>[]  subtypeVarAssigns  =  parameterizedType.getActualSubtypeArguments();  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Class  <?>[]  subtypeVarAssigns  =  parameterizedType.getActualSubtypeArguments();  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Class  <?>[]  subtypeVarAssigns  =  parameterizedType.getActualSubtypeArguments();	  Class    <?>[]    subtypeVarAssigns    =    parameterizedType.getSubtypeArguments();    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	36	None	replace
282	[BUG]  [BUGGY]  Class  <?>[]  subtypeVarAssigns  =  parameterizedType.getActualParameterTypeArguments();  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Class  <?>[]  subtypeVarAssigns  =  parameterizedType.getActualParameterTypeArguments();  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Class  <?>[]  subtypeVarAssigns  =  parameterizedType.getActualParameterTypeArguments();	  Class    <?>[]    subtypeVarAssigns    =    parameterizedType.getSubtypeArguments();    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	36	None	replace
283	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(toClass),  subtypeVarAssigns,  ownerType,  toClass);  [CE]  no  suitable  method  found  for  getRawType(Class<CAP#1>)  [FE]                    AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(toClass),  subtypeVarAssigns,  ownerType,  toClass);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(toClass),  subtypeVarAssigns,  ownerType,  toClass);	  typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(toClass),    subtypeVarAssigns,    ownerType);    	non-compiled	[CE]  no  suitable  method  found  for  getRawType(Class<CAP#1>)	74	None	replace
284	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(toClass),  ownerType,  subtypeVarAssigns);  [CE]  no  suitable  method  found  for  getRawType(Class<CAP#1>)  [FE]                      AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(toClass),  ownerType,  subtypeVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(toClass),  ownerType,  subtypeVarAssigns);	  typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(toClass),    subtypeVarAssigns,    ownerType);    	non-compiled	[CE]  no  suitable  method  found  for  getRawType(Class<CAP#1>)	74	None	replace
285	[BUG]  [BUGGY]  typeVarAssigns    =    getTypeArguments(ownerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  Type[]  subtypeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]    AssertionError    [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns    =    getTypeArguments(ownerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  Type[]  subtypeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns        =        getTypeArguments(ownerType,        getRawType(parameterizedOwnerType),        subtypeVarAssigns);        typeVarAssigns    =    getTypeArguments(ownerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    Type[]  subtypeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	43	None	add
286	[BUG]  [BUGGY]  Class  <?>[]  subtypeVarAssigns  =  parametersizedType.getRawTypeArguments();  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  Class  <?>[]  subtypeVarAssigns  =  parametersizedType.getRawTypeArguments();  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Class  <?>[]  subtypeVarAssigns  =  parametersizedType.getRawTypeArguments();	  Class    <?>[]    subtypeVarAssigns    =    parameterizedType.getRawTypeArguments();    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	35	None	replace
287	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  toClass,  typeParams);  [CE]  cannot  find  symbol  typeParams  [FE]        NullPointerException      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  toClass,  typeParams);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  toClass,  typeParams);	  typeVarAssigns    =    getTypeArguments(cls,    getRawType(parameterizedOwnerType),    toClass);    	non-compiled	[CE]  cannot  find  symbol  typeParams	59	None	replace
288	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  toClass,  subtypeVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	add	typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  toClass,  subtypeVarAssigns);	  typeVarAssigns    =    getTypeArguments(cls,    parameterizedOwnerType,    subtypeVarAssigns);    	compilable	  [FE]  NullPointerException  	51	2	replace
289	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  toClass,  subtypeVarAssigns);  [FE]  NullPointerException  [FE]        NullPointerException      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  toClass,  subtypeVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  toClass,  subtypeVarAssigns);	  typeVarAssigns    =    getTypeArguments(cls,    parameterizedOwnerType,    subtypeVarAssigns);    	compilable	  [FE]  NullPointerException  	51	2	replace
290	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  toClass,  typeVarAssigns);  [CE]  no  suitable  method  found  for  getTypeArguments(ParameterizedType,Class<CAP#1>,Class<CAP#2>,Map<TypeVariable<?>,Type>)  [FE]            AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  toClass,  typeVarAssigns);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  toClass,  typeVarAssigns);	  typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    toClass,    typeParams);    	non-compiled	[CE]  no  suitable  method  found  for  getTypeArguments(ParameterizedType,Class<CAP#1>,Class<CAP#2>,Map<TypeVariable<?>,Type>)	88	None	replace
291	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  toClass,  cls);  [CE]  no  suitable  method  found  for  getTypeArguments(ParameterizedType,Class<CAP#1>,Class<CAP#2>,Class<CAP#3>)  [FE]              AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  toClass,  cls);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  toClass,  cls);	  typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    toClass,    typeParams);    	non-compiled	[CE]  no  suitable  method  found  for  getTypeArguments(ParameterizedType,Class<CAP#1>,Class<CAP#2>,Class<CAP#3>)	88	None	replace
292	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  toClass,  types);  [CE]  cannot  find  symbol  types  [FE]                AssertionError      [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;      [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  toClass,  types);  [BUGGY]      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  toClass,  types);	  typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    toClass,    typeParams);    	non-compiled	[CE]  cannot  find  symbol  types	88	None	replace
