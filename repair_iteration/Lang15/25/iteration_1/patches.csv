bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Type[]  toUpperBounds  =  getImplicitUpperBounds(wildcardType,  toLowerBounds);  [CE]  variable  toUpperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]          AssertionError    [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;    [BUGGY]  Type[]  toUpperBounds  =  getImplicitUpperBounds(wildcardType,  toLowerBounds);  [BUGGY]    Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toUpperBounds  =  getImplicitUpperBounds(wildcardType,  toLowerBounds);	  Type[]    toUpperBounds    =    getImplicitUpperBounds(wildcardType);    	non-compiled	[CE]  variable  toUpperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	2	None	replace
2	[BUG]  [BUGGY]  Type[]  toUpperBounds  =  getImplicitUpperBounds(wildcardType,  type);  [CE]  variable  toUpperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]            AssertionError    [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;    [BUGGY]  Type[]  toUpperBounds  =  getImplicitUpperBounds(wildcardType,  type);  [BUGGY]    Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toUpperBounds  =  getImplicitUpperBounds(wildcardType,  type);	  Type[]    toUpperBounds    =    getImplicitUpperBounds(wildcardType);    	non-compiled	[CE]  variable  toUpperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	2	None	replace
3	[BUG]  [BUGGY]  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  [CE]  variable  toUpperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError    [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;    [BUGGY]  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  [BUGGY]    Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);	  Type[]    toUpperBounds    =    getImplicitUpperBounds(wildcardType);    	non-compiled	[CE]  variable  toUpperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	2	None	replace
4	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(wildcardType,  type);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]            AssertionError    [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;    [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(wildcardType,  type);  [BUGGY]    Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toLowerBounds  =  getImplicitUpperBounds(wildcardType,  type);	  Type[]    toLowerBounds    =    getImplicitUpperBounds(wildcardType);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	3	None	replace
5	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(wildcardType,  toLowerBounds);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError    [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;    [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(wildcardType,  toLowerBounds);  [BUGGY]    Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toLowerBounds  =  getImplicitUpperBounds(wildcardType,  toLowerBounds);	  Type[]    toLowerBounds    =    getImplicitUpperBounds(wildcardType);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	3	None	replace
6	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(toLowerType);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]          AssertionError    [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;    [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(toLowerType);  [BUGGY]    Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toLowerBounds  =  getImplicitUpperBounds(toLowerType);	      Type[]    toLowerBounds    =    getImplicitUpperBounds(toLowerBounds);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	6	None	replace
7	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitToLowerBounds(toLowerType);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError    [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;    [BUGGY]  Type[]  toLowerBounds  =  getImplicitToLowerBounds(toLowerType);  [BUGGY]    Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toLowerBounds  =  getImplicitToLowerBounds(toLowerType);	      Type[]    toLowerBounds    =    getImplicitToLowerBounds(toLowerBounds);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	8	None	replace
8	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitToLowerBounds(type);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                AssertionError    [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;    [BUGGY]  Type[]  toLowerBounds  =  getImplicitToLowerBounds(type);  [BUGGY]    Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toLowerBounds  =  getImplicitToLowerBounds(type);	      Type[]    toLowerBounds    =    getImplicitToLowerBounds(toLowerBounds);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	8	None	replace
9	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitVowerBounds(wildcardType,  toLowerBounds);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]        AssertionError    [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;    [BUGGY]  Type[]  toLowerBounds  =  getImplicitVowerBounds(wildcardType,  toLowerBounds);  [BUGGY]    Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toLowerBounds  =  getImplicitVowerBounds(wildcardType,  toLowerBounds);	      Type[]    toLowerBounds    =    getImplicitVowerBounds(wildcardType);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	13	None	replace
10	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitVowerBounds(wildcardType,  type);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]          AssertionError    [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;    [BUGGY]  Type[]  toLowerBounds  =  getImplicitVowerBounds(wildcardType,  type);  [BUGGY]    Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toLowerBounds  =  getImplicitVowerBounds(wildcardType,  type);	      Type[]    toLowerBounds    =    getImplicitVowerBounds(wildcardType);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	13	None	replace
11	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitVowerBounds(toWildcardType);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]            AssertionError    [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;    [BUGGY]  Type[]  toLowerBounds  =  getImplicitVowerBounds(toWildcardType);  [BUGGY]    Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toLowerBounds  =  getImplicitVowerBounds(toWildcardType);	      Type[]    toLowerBounds    =    getImplicitVowerBounds(wildcardType);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	13	None	replace
12	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType,  toLowerBounds,  typeVarAssigns);  [CE]  method  getImplicitUpperBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]        AssertionError    [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;    [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType,  toLowerBounds,  typeVarAssigns);  [BUGGY]    Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType,  toLowerBounds,  typeVarAssigns);	  Type[]    upperBounds    =    getImplicitUpperBounds(wildcardType,    toLowerBounds);    	non-compiled	[CE]  method  getImplicitUpperBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;	1	None	replace
13	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType,  toLowerBounds,  type);  [CE]  method  getImplicitUpperBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]          AssertionError    [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;    [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType,  toLowerBounds,  type);  [BUGGY]    Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType,  toLowerBounds,  type);	  Type[]    upperBounds    =    getImplicitUpperBounds(wildcardType,    toLowerBounds);    	non-compiled	[CE]  method  getImplicitUpperBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;	1	None	replace
14	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitLowerBounds(wildcardType);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError    [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;    [BUGGY]  Type[]  toLowerBounds  =  getImplicitLowerBounds(wildcardType);  [BUGGY]    Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toLowerBounds  =  getImplicitLowerBounds(wildcardType);	      	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	4	None	replace
15	[BUG]  [BUGGY]  Type[]  toUpperBounds  =  getImplicitLowerBounds(wildcardType);  [CE]  variable  toUpperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                AssertionError    [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;    [BUGGY]  Type[]  toUpperBounds  =  getImplicitLowerBounds(wildcardType);  [BUGGY]    Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toUpperBounds  =  getImplicitLowerBounds(wildcardType);	      	non-compiled	[CE]  variable  toUpperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	4	None	replace
16	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitToUpperBounds(wildcardType,  type);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]          AssertionError    [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;    [BUGGY]  Type[]  toLowerBounds  =  getImplicitToUpperBounds(wildcardType,  type);  [BUGGY]    Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toLowerBounds  =  getImplicitToUpperBounds(wildcardType,  type);	      Type[]    toLowerBounds    =    getImplicitToUpperBounds(wildcardType);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	12	None	replace
17	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitToUpperBounds(wildcardType,  toLowerBounds);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]            AssertionError    [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;    [BUGGY]  Type[]  toLowerBounds  =  getImplicitToUpperBounds(wildcardType,  toLowerBounds);  [BUGGY]    Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toLowerBounds  =  getImplicitToUpperBounds(wildcardType,  toLowerBounds);	      Type[]    toLowerBounds    =    getImplicitToUpperBounds(wildcardType);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	12	None	replace
18	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitToUpperBounds(toWildcardType);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError    [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;    [BUGGY]  Type[]  toLowerBounds  =  getImplicitToUpperBounds(toWildcardType);  [BUGGY]    Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toLowerBounds  =  getImplicitToUpperBounds(toWildcardType);	      Type[]    toLowerBounds    =    getImplicitToUpperBounds(wildcardType);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	12	None	replace
19	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitToLowerBounds(wildcardType,  toLowerBounds);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]        AssertionError    [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;    [BUGGY]  Type[]  toLowerBounds  =  getImplicitToLowerBounds(wildcardType,  toLowerBounds);  [BUGGY]    Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toLowerBounds  =  getImplicitToLowerBounds(wildcardType,  toLowerBounds);	      Type[]    toLowerBounds    =    getImplicitToLowerBounds(wildcardType);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	11	None	replace
20	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitToLowerBounds(wildcardType,  type);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]          AssertionError    [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;    [BUGGY]  Type[]  toLowerBounds  =  getImplicitToLowerBounds(wildcardType,  type);  [BUGGY]    Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toLowerBounds  =  getImplicitToLowerBounds(wildcardType,  type);	      Type[]    toLowerBounds    =    getImplicitToLowerBounds(wildcardType);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	11	None	replace
21	[BUG]  [BUGGY]  Type[]  wildcardTypeVarAssigns  =  getImplicitWildcardTypeVariables(wildcardType,  toWildcardType);  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;    [BUGGY]  Type[]  wildcardTypeVarAssigns  =  getImplicitWildcardTypeVariables(wildcardType,  toWildcardType);  [BUGGY]    Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  wildcardTypeVarAssigns  =  getImplicitWildcardTypeVariables(wildcardType,  toWildcardType);	      Type[]    wildcardTypeVarAssigns    =    getImplicitWildcardTypeVariables(wildcardType);    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
22	[BUG]  [BUGGY]  Type[]  wildcardTypeVarAssigns  =  getImplicitWildcardTypeVariables(toWildcardType);  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;    [BUGGY]  Type[]  wildcardTypeVarAssigns  =  getImplicitWildcardTypeVariables(toWildcardType);  [BUGGY]    Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  wildcardTypeVarAssigns  =  getImplicitWildcardTypeVariables(toWildcardType);	      Type[]    wildcardTypeVarAssigns    =    getImplicitWildcardTypeVariables(wildcardType);    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
23	[BUG]  [BUGGY]  Type[]  wildcardTypeVarAssigns  =  getImplicitWildcardTypeVariables(wildcardType,  type);  [CE]  cannot  find  symbol  [FE]              AssertionError    [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;    [BUGGY]  Type[]  wildcardTypeVarAssigns  =  getImplicitWildcardTypeVariables(wildcardType,  type);  [BUGGY]    Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  wildcardTypeVarAssigns  =  getImplicitWildcardTypeVariables(wildcardType,  type);	      Type[]    wildcardTypeVarAssigns    =    getImplicitWildcardTypeVariables(wildcardType);    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
24	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(toWildcardType,  wildcardType);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]            AssertionError    [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;    [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(toWildcardType,  wildcardType);  [BUGGY]    Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toLowerBounds  =  getImplicitUpperBounds(toWildcardType,  wildcardType);	      Type[]    toLowerBounds    =    getImplicitUpperBounds(toWildcardType);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	7	None	replace
25	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(wildcardType,  toWildcardType);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError    [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;    [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(wildcardType,  toWildcardType);  [BUGGY]    Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toLowerBounds  =  getImplicitUpperBounds(wildcardType,  toWildcardType);	      Type[]    toLowerBounds    =    getImplicitUpperBounds(toWildcardType);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	7	None	replace
26	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  upperBounds  =  getImplicitUpperBounds(toWildcardType);  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]    AssertionError    [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;    [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  upperBounds  =  getImplicitUpperBounds(toWildcardType);  [BUGGY]    Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]    upperBounds    =    getImplicitUpperBounds(toWildcardType);    Type[]  upperBounds  =  getImplicitUpperBounds(toWildcardType);	  	non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	9	None	add
27	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  upperBounds  =  getImplicitUpperBounds(toWildcardType);  for  (Type[]  toLowerBounds  =  getImplicitUpperBounds(toWildcardType);  [CE]  '.class'  expected  [FE]      AssertionError    [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;    [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  upperBounds  =  getImplicitUpperBounds(toWildcardType);  for  (Type[]  toLowerBounds  =  getImplicitUpperBounds(toWildcardType);  [BUGGY]    Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]    upperBounds    =    getImplicitUpperBounds(toWildcardType);    Type[]  upperBounds  =  getImplicitUpperBounds(toWildcardType);  for  (Type[]  toLowerBounds  =  getImplicitUpperBounds(toWildcardType);	  	non-compiled	[CE]  '.class'  expected	9	None	add
28	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  upperBounds  =  getImplicitUpperBounds(toWildcardType);  for  (Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  [CE]  '.class'  expected  [FE]        AssertionError    [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;    [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  upperBounds  =  getImplicitUpperBounds(toWildcardType);  for  (Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  [BUGGY]    Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]    upperBounds    =    getImplicitUpperBounds(toWildcardType);    Type[]  upperBounds  =  getImplicitUpperBounds(toWildcardType);  for  (Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);	  	non-compiled	[CE]  '.class'  expected	9	None	add
29	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  lowerBounds  =  getImplicitUpperBounds(toWildcardType);  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]          AssertionError    [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;    [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  lowerBounds  =  getImplicitUpperBounds(toWildcardType);  [BUGGY]    Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]    upperBounds    =    getImplicitUpperBounds(toWildcardType);    Type[]  lowerBounds  =  getImplicitUpperBounds(toWildcardType);	  	non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	9	None	add
30	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  toLowerBounds.toArray(new  Type[toLowerBounds.size()  ]);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]        AssertionError    [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;    [BUGGY]  Type[]  toLowerBounds  =  toLowerBounds.toArray(new  Type[toLowerBounds.size()  ]);  [BUGGY]    Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toLowerBounds  =  toLowerBounds.toArray(new  Type[toLowerBounds.size()  ]);	      Type[]    wildcardType    =    toLowerBounds.toArray(new    Type[toLowerBounds.size()    ]);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	5	None	replace
31	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  toLowerBounds.toArray(new  Type[toLowerBounds.size()  +  1]);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]          AssertionError    [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;    [BUGGY]  Type[]  toLowerBounds  =  toLowerBounds.toArray(new  Type[toLowerBounds.size()  +  1]);  [BUGGY]    Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toLowerBounds  =  toLowerBounds.toArray(new  Type[toLowerBounds.size()  +  1]);	      Type[]    wildcardType    =    toLowerBounds.toArray(new    Type[toLowerBounds.size()    ]);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	5	None	replace
32	[BUG]  [BUGGY]  Type[]  toUpperBounds  =  toLowerBounds.toArray(new  Type[toLowerBounds.size()  ]);  [CE]  variable  toUpperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]            AssertionError    [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;    [BUGGY]  Type[]  toUpperBounds  =  toLowerBounds.toArray(new  Type[toLowerBounds.size()  ]);  [BUGGY]    Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toUpperBounds  =  toLowerBounds.toArray(new  Type[toLowerBounds.size()  ]);	      Type[]    wildcardType    =    toLowerBounds.toArray(new    Type[toLowerBounds.size()    ]);    	non-compiled	[CE]  variable  toUpperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	5	None	replace
33	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(toLowerBounds,  type);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]          AssertionError    [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;    [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(toLowerBounds,  type);  [BUGGY]    Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toLowerBounds  =  getImplicitUpperBounds(toLowerBounds,  type);	      Type[]    toLowerBounds    =    getImplicitUpperBounds(toLowerBounds);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	6	None	replace
34	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitToLowerBounds(toWildcardType);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]        AssertionError    [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;    [BUGGY]  Type[]  toLowerBounds  =  getImplicitToLowerBounds(toWildcardType);  [BUGGY]    Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toLowerBounds  =  getImplicitToLowerBounds(toWildcardType);	      Type[]    toLowerBounds    =    getImplicitToLowerBounds(wildcardType);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	11	None	replace
35	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(toLowerBounds,  wildcardType);  [CE]  method  getImplicitUpperBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]        AssertionError    [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;    [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(toLowerBounds,  wildcardType);  [BUGGY]    Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  upperBounds  =  getImplicitUpperBounds(toLowerBounds,  wildcardType);	  Type[]    upperBounds    =    getImplicitUpperBounds(wildcardType,    toLowerBounds);    	non-compiled	[CE]  method  getImplicitUpperBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;	1	None	replace
36	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  topBounds  =  getImplicitUpperBounds(toWildcardType);  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]    AssertionError    [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;    [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  topBounds  =  getImplicitUpperBounds(toWildcardType);  [BUGGY]    Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]    upperBounds    =    getImplicitUpperBounds(toWildcardType);    Type[]  topBounds  =  getImplicitUpperBounds(toWildcardType);	  	non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	9	None	add
37	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  upperBounds  =  getImplicitUpperBounds(toWillcardType);  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]      AssertionError    [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;    [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  upperBounds  =  getImplicitUpperBounds(toWillcardType);  [BUGGY]    Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]    upperBounds    =    getImplicitUpperBounds(toWildcardType);    Type[]  upperBounds  =  getImplicitUpperBounds(toWillcardType);	  	non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	9	None	add
38	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(toWildcardType,  type);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]            AssertionError    [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;    [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(toWildcardType,  type);  [BUGGY]    Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toLowerBounds  =  getImplicitUpperBounds(toWildcardType,  type);	      Type[]    toLowerBounds    =    getImplicitUpperBounds(toWildcardType);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	7	None	replace
39	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  toLowerBounds.toArray(new  Type[typeVarAssigns.size()  ]);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]        AssertionError    [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;    [BUGGY]  Type[]  toLowerBounds  =  toLowerBounds.toArray(new  Type[typeVarAssigns.size()  ]);  [BUGGY]    Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toLowerBounds  =  toLowerBounds.toArray(new  Type[typeVarAssigns.size()  ]);	      Type[]    wildcardType    =    toLowerBounds.toArray(new    Type[toLowerBounds.size()    ]);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	5	None	replace
40	[BUG]  [BUGGY]  Type[]  wildcardTypeVarAssigns  =  getImplicitWildcardTypeVariables(wildcardType,  typeVarAssigns);  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;    [BUGGY]  Type[]  wildcardTypeVarAssigns  =  getImplicitWildcardTypeVariables(wildcardType,  typeVarAssigns);  [BUGGY]    Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  wildcardTypeVarAssigns  =  getImplicitWildcardTypeVariables(wildcardType,  typeVarAssigns);	      Type[]    wildcardTypeVarAssigns    =    getImplicitWildcardTypeVariables(wildcardType);    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
41	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitToUpperBounds(toLowerBounds);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]          AssertionError    [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;    [BUGGY]  Type[]  toLowerBounds  =  getImplicitToUpperBounds(toLowerBounds);  [BUGGY]    Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toLowerBounds  =  getImplicitToUpperBounds(toLowerBounds);	      Type[]    toLowerBounds    =    getImplicitToUpperBounds(wildcardType);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	12	None	replace
42	[BUG]  [BUGGY]  Type[]  toUpperBounds  =  getImplicitUpperBounds(toUpperBound);  [CE]  variable  toUpperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]          AssertionError    [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;    [BUGGY]  Type[]  toUpperBounds  =  getImplicitUpperBounds(toUpperBound);  [BUGGY]    Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toUpperBounds  =  getImplicitUpperBounds(toUpperBound);	  Type[]    toUpperBounds    =    getImplicitUpperBounds(wildcardType);    	non-compiled	[CE]  variable  toUpperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	2	None	replace
43	[BUG]  [BUGGY]  Type[]  toUpperBounds  =  getImplicitUpperBounds(wildcardType,  toUpperBounds);  [CE]  variable  toUpperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]            AssertionError    [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;    [BUGGY]  Type[]  toUpperBounds  =  getImplicitUpperBounds(wildcardType,  toUpperBounds);  [BUGGY]    Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toUpperBounds  =  getImplicitUpperBounds(wildcardType,  toUpperBounds);	  Type[]    toUpperBounds    =    getImplicitUpperBounds(wildcardType);    	non-compiled	[CE]  variable  toUpperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	2	None	replace
44	[BUG]  [BUGGY]  Type[]  toUpperBounds  =  getImplicitUpperBounds(toUpperBounds);  [CE]  variable  toUpperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError    [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;    [BUGGY]  Type[]  toUpperBounds  =  getImplicitUpperBounds(toUpperBounds);  [BUGGY]    Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toUpperBounds  =  getImplicitUpperBounds(toUpperBounds);	      	non-compiled	[CE]  variable  toUpperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	4	None	replace
45	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitVowerBounds(toLowerBounds);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]        AssertionError    [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;    [BUGGY]  Type[]  toLowerBounds  =  getImplicitVowerBounds(toLowerBounds);  [BUGGY]    Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toLowerBounds  =  getImplicitVowerBounds(toLowerBounds);	      Type[]    toLowerBounds    =    getImplicitVowerBounds(wildcardType);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	13	None	replace
46	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;    [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType);  [BUGGY]    Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	add	Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType);	  Type[]    upperBounds    =    getImplicitUpperBounds(toWildcardType);    	compilable	  [FE]  AssertionError  	10	2	replace
47	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;    [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType);  [BUGGY]    Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType);	  Type[]    upperBounds    =    getImplicitUpperBounds(toWildcardType);    	compilable	  [FE]  AssertionError  	10	2	replace
48	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitToLowerBounds(toLowerBounds,  type);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError    [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;    [BUGGY]  Type[]  toLowerBounds  =  getImplicitToLowerBounds(toLowerBounds,  type);  [BUGGY]    Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toLowerBounds  =  getImplicitToLowerBounds(toLowerBounds,  type);	      Type[]    toLowerBounds    =    getImplicitToLowerBounds(toLowerBounds);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	8	None	replace
49	[BUG]  [BUGGY]  Type[]  wildcardType  =  toLowerBounds.toArray(new  Type[toLowerBounds.size()  +  1]);  [CE]  variable  wildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]        AssertionError    [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;    [BUGGY]  Type[]  wildcardType  =  toLowerBounds.toArray(new  Type[toLowerBounds.size()  +  1]);  [BUGGY]    Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  wildcardType  =  toLowerBounds.toArray(new  Type[toLowerBounds.size()  +  1]);	      Type[]    wildcardType    =    toLowerBounds.toArray(new    Type[toLowerBounds.size()    ]);    	non-compiled	[CE]  variable  wildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	5	None	replace
50	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(toWildcardType,  toLowerBounds);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]          AssertionError    [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;    [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(toWildcardType,  toLowerBounds);  [BUGGY]    Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toLowerBounds  =  getImplicitUpperBounds(toWildcardType,  toLowerBounds);	      Type[]    toLowerBounds    =    getImplicitUpperBounds(toLowerBounds);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	6	None	replace
51	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitToLowerBounds(toWildcardType,  toLowerBounds);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError    [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;    [BUGGY]  Type[]  toLowerBounds  =  getImplicitToLowerBounds(toWildcardType,  toLowerBounds);  [BUGGY]    Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toLowerBounds  =  getImplicitToLowerBounds(toWildcardType,  toLowerBounds);	      Type[]    toLowerBounds    =    getImplicitToLowerBounds(toLowerBounds);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	8	None	replace
52	[BUG]  [BUGGY]  Type[]  wildcardTypeVarAssigns  =  getImplicitWildcardTypeVariables(wildcardType.type);  [CE]  cannot  find  symbol  type  [FE]          AssertionError    [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;    [BUGGY]  Type[]  wildcardTypeVarAssigns  =  getImplicitWildcardTypeVariables(wildcardType.type);  [BUGGY]    Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  wildcardTypeVarAssigns  =  getImplicitWildcardTypeVariables(wildcardType.type);	      Type[]    wildcardTypeVarAssigns    =    getImplicitWildcardTypeVariables(wildcardType);    	non-compiled	[CE]  cannot  find  symbol  type	14	None	replace
