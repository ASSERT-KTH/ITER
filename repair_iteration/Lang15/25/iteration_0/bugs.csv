bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
49	[BUG] [BUGGY] Type[] upperBounds = getImplicitUpperBounds(wildcardType); [FE] AssertionError [CONTEXT]  if (toWildcardType.equals(type)) { return true; } Type[] toUpperBounds = getImplicitUpperBounds(toWildcardType); Type[] toLowerBounds = getImplicitLowerBounds(toWildcardType); if (type instanceof WildcardType) { WildcardType wildcardType = (WildcardType) type; [BUGGY] Type[] upperBounds = getImplicitUpperBounds(wildcardType); [BUGGY] Type[] lowerBounds = getImplicitLowerBounds(wildcardType); for (Type toBound : toUpperBounds) {   toBound = substituteTypeVariables(toBound, typeVarAssigns);     [CLASS] TypeUtils [METHOD] isAssignable [RETURN_TYPE] boolean  Type type WildcardType toWildcardType Type> typeVarAssigns [VARIABLES] Type bound toBound type WildcardType toWildcardType wildcardType boolean Type[] lowerBounds toLowerBounds toUpperBounds upperBounds Map typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	
50	[BUG] [BUGGY] [FE] AssertionError [CONTEXT]  if (toWildcardType.equals(type)) { return true; } Type[] toUpperBounds = getImplicitUpperBounds(toWildcardType); Type[] toLowerBounds = getImplicitLowerBounds(toWildcardType); if (type instanceof WildcardType) { WildcardType wildcardType = (WildcardType) type; [BUGGY] [BUGGY] Type[] upperBounds = getImplicitUpperBounds(wildcardType); Type[] lowerBounds = getImplicitLowerBounds(wildcardType); for (Type toBound : toUpperBounds) {   toBound = substituteTypeVariables(toBound, typeVarAssigns);     [CLASS] TypeUtils [METHOD] isAssignable [RETURN_TYPE] boolean  Type type WildcardType toWildcardType Type> typeVarAssigns [VARIABLES] Type bound toBound type WildcardType toWildcardType wildcardType boolean Type[] lowerBounds toLowerBounds toUpperBounds upperBounds Map typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	add	
