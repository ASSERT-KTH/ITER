bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Type  toBound  =  substituteTypeVariables(toBound,  lowerBounds);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  Type  toBound  =  substituteTypeVariables(toBound,  lowerBounds);  [BUGGY]        toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	Type  toBound  =  substituteTypeVariables(toBound,  lowerBounds);	  for    (Type    toBound    :    upperBounds)    {    Type    toBound    =    substituteTypeVariables(toBound,    typeVarAssigns);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
2	[BUG]  [BUGGY]  for(Type  toBound  :  lowerBounds)  {  Type  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  for(Type  toBound  :  lowerBounds)  {  Type  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }  [BUGGY]        toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	for(Type  toBound  :  lowerBounds)  {  Type  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }	  for    (Type    toBound    :    upperBounds)    {    Type    toBound    =    substituteTypeVariables(toBound,    typeVarAssigns);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
3	[BUG]  [BUGGY]  Type[]  lowerBounds  =  getImplicitLopperBounds(lowerBounds);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  Type[]  lowerBounds  =  getImplicitLopperBounds(lowerBounds);  [BUGGY]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	Type[]  lowerBounds  =  getImplicitLopperBounds(lowerBounds);	  Type[]    lowerBounds    =    getImplicitUpperBounds(lowerBounds);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
4	[BUG]  [BUGGY]  Type[]  lowerBounds  =  getImplicitUpperBounds(lowerBounds,  typeVarAssigns);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  Type[]  lowerBounds  =  getImplicitUpperBounds(lowerBounds,  typeVarAssigns);  [BUGGY]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	Type[]  lowerBounds  =  getImplicitUpperBounds(lowerBounds,  typeVarAssigns);	  Type[]    lowerBounds    =    getImplicitUpperBounds(lowerBounds);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
5	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitToLowerBounds(toWildcardType);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  Type[]  toLowerBounds  =  getImplicitToLowerBounds(toWildcardType);  [BUGGY]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	Type[]  toLowerBounds  =  getImplicitToLowerBounds(toWildcardType);	  Type[]    toLowerBounds    =    getImplicitLowerBounds(toWildcardType);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
6	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType,  toLowerBounds);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType,  toLowerBounds);  [BUGGY]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType,  toLowerBounds);	  Type[]    toLowerBounds    =    getImplicitLowerBounds(toWildcardType);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
7	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(upperBounds);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(upperBounds);  [BUGGY]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	Type[]  upperBounds  =  getImplicitUpperBounds(upperBounds);	  Type[]    upperBounds    =    getImplicitUpperBounds(lowerBounds);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
8	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(upperBoundType);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(upperBoundType);  [BUGGY]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	Type[]  upperBounds  =  getImplicitUpperBounds(upperBoundType);	  Type[]    upperBounds    =    getImplicitUpperBounds(lowerBounds);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
9	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(toWildcardType,  type);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(toWildcardType,  type);  [BUGGY]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	Type[]  toLowerBounds  =  getImplicitUpperBounds(toWildcardType,  type);	  Type[]    toLowerBounds    =    getImplicitUpperBounds(toWildcardType);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
10	[BUG]  [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(grabcardType,  toLowerBounds);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(grabcardType,  toLowerBounds);  [BUGGY]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	Type[]  lowerBounds  =  getImplicitLowerBounds(grabcardType,  toLowerBounds);	  Type[]    lowerBounds    =    getImplicitLowerBounds(grabcardType);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
11	[BUG]  [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(grabcardType,  type);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(grabcardType,  type);  [BUGGY]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	Type[]  lowerBounds  =  getImplicitLowerBounds(grabcardType,  type);	  Type[]    lowerBounds    =    getImplicitLowerBounds(grabcardType);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
12	[BUG]  [BUGGY]  Type[]  toBound  =  substituteTypeVariables(toBound,  toLowerBounds);  for  (Type  toBound  :  lowerBounds)  {  [CE]  method  substituteTypeVariables  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  Type[]  toBound  =  substituteTypeVariables(toBound,  toLowerBounds);  for  (Type  toBound  :  lowerBounds)  {  [BUGGY]        toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	Type[]  toBound  =  substituteTypeVariables(toBound,  toLowerBounds);  for  (Type  toBound  :  lowerBounds)  {	  for    (Type    toBound    :    lowerBounds)    {    Type[]    toBound    =    substituteTypeVariables(toBound,    typeVarAssigns);    for    (Type    toBound    :    lowerBounds)    {    	non-compiled	[CE]  method  substituteTypeVariables  in  class  TypeUtils  cannot  be  applied  to  given  types;	22	None	replace
13	[BUG]  [BUGGY]  Type[]  toBound  =  substituteTypeVariables(toBound,  upperBounds);  for  (Type  toBound  :  lowerBounds)  {  [CE]  method  substituteTypeVariables  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  Type[]  toBound  =  substituteTypeVariables(toBound,  upperBounds);  for  (Type  toBound  :  lowerBounds)  {  [BUGGY]        toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	Type[]  toBound  =  substituteTypeVariables(toBound,  upperBounds);  for  (Type  toBound  :  lowerBounds)  {	  for    (Type    toBound    :    lowerBounds)    {    Type[]    toBound    =    substituteTypeVariables(toBound,    typeVarAssigns);    for    (Type    toBound    :    lowerBounds)    {    	non-compiled	[CE]  method  substituteTypeVariables  in  class  TypeUtils  cannot  be  applied  to  given  types;	22	None	replace
14	[BUG]  [BUGGY]  Type[]  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  for  (Type  toBound  :  lowerBounds)  {  [CE]  method  substituteTypeVariables  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  Type[]  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  for  (Type  toBound  :  lowerBounds)  {  [BUGGY]        toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	Type[]  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  for  (Type  toBound  :  lowerBounds)  {	  for    (Type    toBound    :    lowerBounds)    {    Type[]    toBound    =    substituteTypeVariables(toBound,    typeVarAssigns);    for    (Type    toBound    :    lowerBounds)    {    	non-compiled	[CE]  method  substituteTypeVariables  in  class  TypeUtils  cannot  be  applied  to  given  types;	22	None	replace
15	[BUG]  [BUGGY]  Type[]  toBounds  =  substituteTypeVariables(toBound,  typeVarAssigns);  for  (Type  toBound  :  lowerBounds)  {  [CE]  cannot  find  symbol  toBound  [FE]                    AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  Type[]  toBounds  =  substituteTypeVariables(toBound,  typeVarAssigns);  for  (Type  toBound  :  lowerBounds)  {  [BUGGY]        toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	Type[]  toBounds  =  substituteTypeVariables(toBound,  typeVarAssigns);  for  (Type  toBound  :  lowerBounds)  {	  for    (Type    toBound    :    lowerBounds)    {    Type[]    toBound    =    substituteTypeVariables(toBound,    typeVarAssigns);    for    (Type    toBound    :    lowerBounds)    {    	non-compiled	[CE]  cannot  find  symbol  toBound	22	None	replace
16	[BUG]  [BUGGY]  Type[]  toBound  =  substituteTypeVariables(toBound,  upperBounds);  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  Type[]  toBound  =  substituteTypeVariables(toBound,  upperBounds);  [BUGGY]        toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	Type[]  toBound  =  substituteTypeVariables(toBound,  upperBounds);	  for    (Type    toBound    :    lowerBounds)    {    Type[]    toBound    =    substituteTypeVariables(toBound,    typeVarAssigns);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
17	[BUG]  [BUGGY]  Type[]  toBound  =  substituteTypeVariables(toBound,  lowerBounds);  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  Type[]  toBound  =  substituteTypeVariables(toBound,  lowerBounds);  [BUGGY]        toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	Type[]  toBound  =  substituteTypeVariables(toBound,  lowerBounds);	  for    (Type    toBound    :    lowerBounds)    {    Type[]    toBound    =    substituteTypeVariables(toBound,    typeVarAssigns);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
18	[BUG]  [BUGGY]  for(Type  toBound  :  toUpperBounds)  {  Type[]  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CE]  variable  toBound  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]            AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  for(Type  toBound  :  toUpperBounds)  {  Type[]  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [BUGGY]        toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	for(Type  toBound  :  toUpperBounds)  {  Type[]  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);	  for    (Type    toBound    :    lowerBounds)    {    Type[]    toBound    =    substituteTypeVariables(toBound,    typeVarAssigns);    	non-compiled	[CE]  variable  toBound  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	34	None	replace
19	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(toWildcardType);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(toWildcardType);  [BUGGY]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	Type[]  upperBounds  =  getImplicitUpperBounds(toWildcardType);	  Type[]    upperBounds    =    getImplicitLowerBounds(toWildcardType);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
20	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(toWildcardType,  toLowerBounds);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(toWildcardType,  toLowerBounds);  [BUGGY]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	Type[]  upperBounds  =  getImplicitLowerBounds(toWildcardType,  toLowerBounds);	  Type[]    upperBounds    =    getImplicitLowerBounds(toWildcardType);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
21	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(typeVarAssigns);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(typeVarAssigns);  [BUGGY]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	Type[]  upperBounds  =  getImplicitUpperBounds(typeVarAssigns);	  Type[]    upperBounds    =    getImplicitLowerBounds(typeVarAssigns);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
22	[BUG]  [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(toWildcardType,  toLowerBounds);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(toWildcardType,  toLowerBounds);  [BUGGY]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	Type[]  lowerBounds  =  getImplicitLowerBounds(toWildcardType,  toLowerBounds);	  Type[]    lowerBounds    =    getImplicitLowerBounds(toWildcardType);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
23	[BUG]  [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(highcardType);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(highcardType);  [BUGGY]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	Type[]  lowerBounds  =  getImplicitLowerBounds(highcardType);	  Type[]    lowerBounds    =    getImplicitLowerBounds(toWildcardType);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
24	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(grainBoundType);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(grainBoundType);  [BUGGY]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	Type[]  upperBounds  =  getImplicitUpperBounds(grainBoundType);	  Type[]    upperBounds    =    getImplicitLowerBounds(grainBoundType);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
25	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(grainType);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(grainType);  [BUGGY]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	Type[]  upperBounds  =  getImplicitLowerBounds(grainType);	  Type[]    upperBounds    =    getImplicitLowerBounds(grainBoundType);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
26	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(grainType);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(grainType);  [BUGGY]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	Type[]  upperBounds  =  getImplicitUpperBounds(grainType);	  Type[]    upperBounds    =    getImplicitLowerBounds(grainBoundType);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
27	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(grainType,  typeVarAssigns);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(grainType,  typeVarAssigns);  [BUGGY]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	Type[]  upperBounds  =  getImplicitLowerBounds(grainType,  typeVarAssigns);	  Type[]    upperBounds    =    getImplicitLowerBounds(grainBoundType);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
28	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitLowerBounds(toLowerBounds,  upperBounds);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  Type[]  toLowerBounds  =  getImplicitLowerBounds(toLowerBounds,  upperBounds);  [BUGGY]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	Type[]  toLowerBounds  =  getImplicitLowerBounds(toLowerBounds,  upperBounds);	  Type[]    toLowerBounds    =    getImplicitLowerBounds(lowerBounds,    upperBounds);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
29	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitLowerBounds(toLowerBounds,  type);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  Type[]  toLowerBounds  =  getImplicitLowerBounds(toLowerBounds,  type);  [BUGGY]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	Type[]  toLowerBounds  =  getImplicitLowerBounds(toLowerBounds,  type);	  Type[]    toLowerBounds    =    getImplicitLowerBounds(lowerBounds,    type);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
30	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitLowerBounds(upperBounds,  type);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  Type[]  toLowerBounds  =  getImplicitLowerBounds(upperBounds,  type);  [BUGGY]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	Type[]  toLowerBounds  =  getImplicitLowerBounds(upperBounds,  type);	  Type[]    toLowerBounds    =    getImplicitLowerBounds(lowerBounds,    type);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
31	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(toLowerBounds);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(toLowerBounds);  [BUGGY]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	Type[]  upperBounds  =  getImplicitUpperBounds(toLowerBounds);	  Type[]    upperBounds    =    getImplicitLowerBounds(toLowerBounds);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
32	[BUG]  [BUGGY]  for(Type  toBound  :  lowerBounds)  {  Type[]  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  for(Type  toBound  :  lowerBounds)  {  Type[]  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }  [BUGGY]        toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	for(Type  toBound  :  lowerBounds)  {  Type[]  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }	  for    (Type    toBound    :    upperBounds)    {    Type[]    toBound    =    substituteTypeVariables(toBound,    typeVarAssigns);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
33	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(toLowerBounds,  upperBounds);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(toLowerBounds,  upperBounds);  [BUGGY]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	Type[]  toLowerBounds  =  getImplicitUpperBounds(toLowerBounds,  upperBounds);	  Type[]    toLowerBounds    =    getImplicitUpperBounds(lowerBounds,    upperBounds);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
34	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(upperBounds,  type);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(upperBounds,  type);  [BUGGY]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	Type[]  toLowerBounds  =  getImplicitUpperBounds(upperBounds,  type);	  Type[]    toLowerBounds    =    getImplicitUpperBounds(lowerBounds,    upperBounds);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
35	[BUG]  [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType,  toLowerBounds);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType,  toLowerBounds);  [BUGGY]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType,  toLowerBounds);	  Type[]    lowerBounds    =    getImplicitLowerBounds(wildcardType);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
36	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  Type[]  toBounds  =  getImplicitLowerBounds(toWildcardType);  for  (Type  toBound  :  lowerBounds)  {  [BUGGY]        toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	add	Type[]  toBounds  =  getImplicitLowerBounds(toWildcardType);  for  (Type  toBound  :  lowerBounds)  {	  for    (Type    toBound    :    lowerBounds)    {    Type[]    toBounds    =    getImplicitLowerBounds(toWildcardType);    for    (Type    toBound    :    lowerBounds)    {    	compilable	  [FE]  AssertionError  	23	2	replace
37	[BUG]  [BUGGY]  Type[]  toBounds  =  getImplicitLowerBounds(toWildcardType);  for  (Type  toBound  :  lowerBounds)  {  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  Type[]  toBounds  =  getImplicitLowerBounds(toWildcardType);  for  (Type  toBound  :  lowerBounds)  {  [BUGGY]        toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	Type[]  toBounds  =  getImplicitLowerBounds(toWildcardType);  for  (Type  toBound  :  lowerBounds)  {	  for    (Type    toBound    :    lowerBounds)    {    Type[]    toBounds    =    getImplicitLowerBounds(toWildcardType);    for    (Type    toBound    :    lowerBounds)    {    	compilable	  [FE]  AssertionError  	23	2	replace
38	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                  AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  Type[]  toBounds  =  getImplicitUpperBounds(toWildcardType);  for  (Type  toBound  :  lowerBounds)  {  [BUGGY]        toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	add	Type[]  toBounds  =  getImplicitUpperBounds(toWildcardType);  for  (Type  toBound  :  lowerBounds)  {	  for    (Type    toBound    :    lowerBounds)    {    Type[]    toBounds    =    getImplicitLowerBounds(toWildcardType);    for    (Type    toBound    :    lowerBounds)    {    	compilable	  [FE]  AssertionError  	23	2	replace
39	[BUG]  [BUGGY]  Type[]  toBounds  =  getImplicitUpperBounds(toWildcardType);  for  (Type  toBound  :  lowerBounds)  {  [FE]  AssertionError  [FE]                  AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  Type[]  toBounds  =  getImplicitUpperBounds(toWildcardType);  for  (Type  toBound  :  lowerBounds)  {  [BUGGY]        toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	Type[]  toBounds  =  getImplicitUpperBounds(toWildcardType);  for  (Type  toBound  :  lowerBounds)  {	  for    (Type    toBound    :    lowerBounds)    {    Type[]    toBounds    =    getImplicitLowerBounds(toWildcardType);    for    (Type    toBound    :    lowerBounds)    {    	compilable	  [FE]  AssertionError  	23	2	replace
40	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                    AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  Type[]  toBounds  =  getImplicitLowerBounds(toWildcardType);  for  (Type  toBound  :  upperBounds)  {  [BUGGY]        toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	add	Type[]  toBounds  =  getImplicitLowerBounds(toWildcardType);  for  (Type  toBound  :  upperBounds)  {	  for    (Type    toBound    :    lowerBounds)    {    Type[]    toBounds    =    getImplicitLowerBounds(toWildcardType);    for    (Type    toBound    :    lowerBounds)    {    	compilable	  [FE]  AssertionError  	23	2	replace
41	[BUG]  [BUGGY]  Type[]  toBounds  =  getImplicitLowerBounds(toWildcardType);  for  (Type  toBound  :  upperBounds)  {  [FE]  AssertionError  [FE]                    AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  Type[]  toBounds  =  getImplicitLowerBounds(toWildcardType);  for  (Type  toBound  :  upperBounds)  {  [BUGGY]        toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	Type[]  toBounds  =  getImplicitLowerBounds(toWildcardType);  for  (Type  toBound  :  upperBounds)  {	  for    (Type    toBound    :    lowerBounds)    {    Type[]    toBounds    =    getImplicitLowerBounds(toWildcardType);    for    (Type    toBound    :    lowerBounds)    {    	compilable	  [FE]  AssertionError  	23	2	replace
42	[BUG]  [BUGGY]  Type[]  toBounds  =  substituteTypeVariables(toBound,  upperBounds);  for  (Type  toBound  :  lowerBounds)  {  [CE]  cannot  find  symbol  toBound  [FE]        AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  Type[]  toBounds  =  substituteTypeVariables(toBound,  upperBounds);  for  (Type  toBound  :  lowerBounds)  {  [BUGGY]        toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	Type[]  toBounds  =  substituteTypeVariables(toBound,  upperBounds);  for  (Type  toBound  :  lowerBounds)  {	  for    (Type    toBound    :    lowerBounds)    {    Type[]    toBounds    =    substituteTypeVariables(toBound,    typeVarAssigns);    for    (Type    toBound    :    lowerBounds)    {    	non-compiled	[CE]  cannot  find  symbol  toBound	45	None	replace
43	[BUG]  [BUGGY]  Type[]  toBounds  =  substituteTypeVariables(toBound,  lowerBounds);  for  (Type  toBound  :  lowerBounds)  {  [CE]  cannot  find  symbol  toBound  [FE]          AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  Type[]  toBounds  =  substituteTypeVariables(toBound,  lowerBounds);  for  (Type  toBound  :  lowerBounds)  {  [BUGGY]        toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	Type[]  toBounds  =  substituteTypeVariables(toBound,  lowerBounds);  for  (Type  toBound  :  lowerBounds)  {	  for    (Type    toBound    :    lowerBounds)    {    Type[]    toBounds    =    substituteTypeVariables(toBound,    typeVarAssigns);    for    (Type    toBound    :    lowerBounds)    {    	non-compiled	[CE]  cannot  find  symbol  toBound	45	None	replace
44	[BUG]  [BUGGY]  Type[]  toBounds  =  substituteTypeVariables(toBound,  toLowerBounds);  for  (Type  toBound  :  lowerBounds)  {  [CE]  cannot  find  symbol  toBound  [FE]            AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  Type[]  toBounds  =  substituteTypeVariables(toBound,  toLowerBounds);  for  (Type  toBound  :  lowerBounds)  {  [BUGGY]        toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	Type[]  toBounds  =  substituteTypeVariables(toBound,  toLowerBounds);  for  (Type  toBound  :  lowerBounds)  {	  for    (Type    toBound    :    lowerBounds)    {    Type[]    toBounds    =    substituteTypeVariables(toBound,    typeVarAssigns);    for    (Type    toBound    :    lowerBounds)    {    	non-compiled	[CE]  cannot  find  symbol  toBound	45	None	replace
45	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(upperBound,  typeVarAssigns);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(upperBound,  typeVarAssigns);  [BUGGY]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	Type[]  upperBounds  =  getImplicitLowerBounds(upperBound,  typeVarAssigns);	  Type[]    upperBounds    =    getImplicitLowerBounds(lowerBounds,    typeVarAssigns);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
46	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(upperBound,  typeVarAssigns);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(upperBound,  typeVarAssigns);  [BUGGY]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	Type[]  upperBounds  =  getImplicitUpperBounds(upperBound,  typeVarAssigns);	  Type[]    upperBounds    =    getImplicitLowerBounds(lowerBounds,    typeVarAssigns);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
47	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(lowerBound,  typeVarAssigns);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(lowerBound,  typeVarAssigns);  [BUGGY]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	Type[]  upperBounds  =  getImplicitUpperBounds(lowerBound,  typeVarAssigns);	  Type[]    upperBounds    =    getImplicitLowerBounds(lowerBounds,    typeVarAssigns);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
48	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(lowerBound,  typeVarAssigns);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(lowerBound,  typeVarAssigns);  [BUGGY]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	Type[]  upperBounds  =  getImplicitLowerBounds(lowerBound,  typeVarAssigns);	  Type[]    upperBounds    =    getImplicitLowerBounds(lowerBounds,    typeVarAssigns);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
49	[BUG]  [BUGGY]  Type  toBound  =  substituteTypeVariables(toBound,  upperBounds);  for  (Type  toBound  :  lowerBounds)  {  [CE]  method  substituteTypeVariables  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]          AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  Type  toBound  =  substituteTypeVariables(toBound,  upperBounds);  for  (Type  toBound  :  lowerBounds)  {  [BUGGY]        toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	Type  toBound  =  substituteTypeVariables(toBound,  upperBounds);  for  (Type  toBound  :  lowerBounds)  {	  for    (Type    toBound    :    lowerBounds)    {    Type    toBound    =    substituteTypeVariables(toBound,    typeVarAssigns);    for    (Type    toBound    :    lowerBounds)    {    	non-compiled	[CE]  method  substituteTypeVariables  in  class  TypeUtils  cannot  be  applied  to  given  types;	20	None	replace
50	[BUG]  [BUGGY]  Type  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  for  (Type  toBound  :  lowerBounds)  {  [CE]  variable  toBound  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]            AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  Type  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  for  (Type  toBound  :  lowerBounds)  {  [BUGGY]        toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	Type  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  for  (Type  toBound  :  lowerBounds)  {	  for    (Type    toBound    :    lowerBounds)    {    Type    toBound    =    substituteTypeVariables(toBound,    typeVarAssigns);    for    (Type    toBound    :    lowerBounds)    {    	non-compiled	[CE]  variable  toBound  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	20	None	replace
51	[BUG]  [BUGGY]  Type  toBound  =  substituteTypeVariables(toBound,  lowerBounds);  for  (Type  toBound  :  lowerBounds)  {  [CE]  method  substituteTypeVariables  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  Type  toBound  =  substituteTypeVariables(toBound,  lowerBounds);  for  (Type  toBound  :  lowerBounds)  {  [BUGGY]        toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	Type  toBound  =  substituteTypeVariables(toBound,  lowerBounds);  for  (Type  toBound  :  lowerBounds)  {	  for    (Type    toBound    :    lowerBounds)    {    Type    toBound    =    substituteTypeVariables(toBound,    typeVarAssigns);    for    (Type    toBound    :    lowerBounds)    {    	non-compiled	[CE]  method  substituteTypeVariables  in  class  TypeUtils  cannot  be  applied  to  given  types;	20	None	replace
52	[BUG]  [BUGGY]  Type  toBound  =  substituteTypeVariables(toBound,  toLowerBounds);  for  (Type  toBound  :  lowerBounds)  {  [CE]  method  substituteTypeVariables  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  Type  toBound  =  substituteTypeVariables(toBound,  toLowerBounds);  for  (Type  toBound  :  lowerBounds)  {  [BUGGY]        toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	Type  toBound  =  substituteTypeVariables(toBound,  toLowerBounds);  for  (Type  toBound  :  lowerBounds)  {	  for    (Type    toBound    :    lowerBounds)    {    Type    toBound    =    substituteTypeVariables(toBound,    typeVarAssigns);    for    (Type    toBound    :    lowerBounds)    {    	non-compiled	[CE]  method  substituteTypeVariables  in  class  TypeUtils  cannot  be  applied  to  given  types;	20	None	replace
53	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  Type[]  toBounds  =  getImplicitUpperBounds(toWildcardType);  for  (Type  toBound  :  upperBounds)  {  [BUGGY]        toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	add	Type[]  toBounds  =  getImplicitUpperBounds(toWildcardType);  for  (Type  toBound  :  upperBounds)  {	  for    (Type    toBound    :    upperBounds)    {    Type[]    toBounds    =    getImplicitUpperBounds(toWildcardType);    for    (Type    toBound    :    upperBounds)    {    	compilable	  [FE]  AssertionError  	15	2	replace
54	[BUG]  [BUGGY]  Type[]  toBounds  =  getImplicitUpperBounds(toWildcardType);  for  (Type  toBound  :  upperBounds)  {  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  Type[]  toBounds  =  getImplicitUpperBounds(toWildcardType);  for  (Type  toBound  :  upperBounds)  {  [BUGGY]        toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	Type[]  toBounds  =  getImplicitUpperBounds(toWildcardType);  for  (Type  toBound  :  upperBounds)  {	  for    (Type    toBound    :    upperBounds)    {    Type[]    toBounds    =    getImplicitUpperBounds(toWildcardType);    for    (Type    toBound    :    upperBounds)    {    	compilable	  [FE]  AssertionError  	15	2	replace
55	[BUG]  [BUGGY]  Type[]  toBounds  =  getImplicitUpperBounds(toWildcardType);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  Type[]  toBounds  =  getImplicitUpperBounds(toWildcardType);  [BUGGY]        toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	Type[]  toBounds  =  getImplicitUpperBounds(toWildcardType);	  for    (Type    toBound    :    upperBounds)    {    Type[]    toBounds    =    getImplicitUpperBounds(toWildcardType);    for    (Type    toBound    :    upperBounds)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
56	[BUG]  [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(lowerBounds,  toLowerBounds);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(lowerBounds,  toLowerBounds);  [BUGGY]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	Type[]  lowerBounds  =  getImplicitLowerBounds(lowerBounds,  toLowerBounds);	  Type[]    lowerBounds    =    getImplicitLowerBounds(lowerBounds,    typeVarAssigns);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
57	[BUG]  [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(lowerBounds,  typeVarAssigns,  toLowerBounds);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(lowerBounds,  typeVarAssigns,  toLowerBounds);  [BUGGY]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	Type[]  lowerBounds  =  getImplicitLowerBounds(lowerBounds,  typeVarAssigns,  toLowerBounds);	  Type[]    lowerBounds    =    getImplicitLowerBounds(lowerBounds,    typeVarAssigns);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
58	[BUG]  [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(upperBound,  typeVarAssigns);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(upperBound,  typeVarAssigns);  [BUGGY]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	Type[]  lowerBounds  =  getImplicitLowerBounds(upperBound,  typeVarAssigns);	  Type[]    lowerBounds    =    getImplicitLowerBounds(lowerBounds,    typeVarAssigns);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
59	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType,  toLowerBounds);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType,  toLowerBounds);  [BUGGY]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType,  toLowerBounds);	  Type[]    upperBounds    =    getImplicitUpperBounds(wildcardType);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
60	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType,  type);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType,  type);  [BUGGY]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType,  type);	  Type[]    upperBounds    =    getImplicitUpperBounds(wildcardType);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
61	[BUG]  [BUGGY]  Type  toBound  =  substituteTypeVariables(toBound,  upperBounds);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  Type  toBound  =  substituteTypeVariables(toBound,  upperBounds);  [BUGGY]        toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	Type  toBound  =  substituteTypeVariables(toBound,  upperBounds);	  for    (Type    toBound    :    lowerBounds)    {    Type    toBound    =    substituteTypeVariables(toBound,    typeVarAssigns);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
62	[BUG]  [BUGGY]  for(Type  toBound  :  upperBounds)  {  Type  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  for(Type  toBound  :  upperBounds)  {  Type  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }  [BUGGY]        toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	for(Type  toBound  :  upperBounds)  {  Type  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }	  for    (Type    toBound    :    lowerBounds)    {    Type    toBound    =    substituteTypeVariables(toBound,    typeVarAssigns);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
63	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType,  toLowerBounds);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType,  toLowerBounds);  [BUGGY]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType,  toLowerBounds);	  Type[]    upperBounds    =    getImplicitLowerBounds(wildcardType);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
64	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitToLowerBounds(toLowerBounds);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  Type[]  toLowerBounds  =  getImplicitToLowerBounds(toLowerBounds);  [BUGGY]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	Type[]  toLowerBounds  =  getImplicitToLowerBounds(toLowerBounds);	  Type[]    toLowerBounds    =    getImplicitLowerBounds(toLowerBounds);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
65	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(toLowerBounds,  type);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(toLowerBounds,  type);  [BUGGY]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	Type[]  toLowerBounds  =  getImplicitUpperBounds(toLowerBounds,  type);	  Type[]    toLowerBounds    =    getImplicitUpperBounds(lowerBounds,    type);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
66	[BUG]  [BUGGY]  Type[]  toBound  =  substituteTypeVariables(toBound,  lowerBounds);  for  (Type  toBound  :  upperBounds)  {  [CE]  method  substituteTypeVariables  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  Type[]  toBound  =  substituteTypeVariables(toBound,  lowerBounds);  for  (Type  toBound  :  upperBounds)  {  [BUGGY]        toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	Type[]  toBound  =  substituteTypeVariables(toBound,  lowerBounds);  for  (Type  toBound  :  upperBounds)  {	  for    (Type    toBound    :    upperBounds)    {    Type[]    toBound    =    substituteTypeVariables(toBound,    typeVarAssigns);    for    (Type    toBound    :    upperBounds)    {    	non-compiled	[CE]  method  substituteTypeVariables  in  class  TypeUtils  cannot  be  applied  to  given  types;	13	None	replace
67	[BUG]  [BUGGY]  Type[]  toBounds  =  substituteTypeVariables(toBound,  lowerBounds);  for  (Type  toBound  :  upperBounds)  {  [CE]  cannot  find  symbol  toBound  [FE]              AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  Type[]  toBounds  =  substituteTypeVariables(toBound,  lowerBounds);  for  (Type  toBound  :  upperBounds)  {  [BUGGY]        toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	Type[]  toBounds  =  substituteTypeVariables(toBound,  lowerBounds);  for  (Type  toBound  :  upperBounds)  {	  for    (Type    toBound    :    upperBounds)    {    Type[]    toBound    =    substituteTypeVariables(toBound,    typeVarAssigns);    for    (Type    toBound    :    upperBounds)    {    	non-compiled	[CE]  cannot  find  symbol  toBound	13	None	replace
68	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(toLowerBounds,  typeVarAssigns);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(toLowerBounds,  typeVarAssigns);  [BUGGY]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	Type[]  toLowerBounds  =  getImplicitUpperBounds(toLowerBounds,  typeVarAssigns);	  Type[]    toLowerBounds    =    getImplicitUpperBounds(lowerBounds,    typeVarAssigns);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
69	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(toWildcardType,  typeVarAssigns);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(toWildcardType,  typeVarAssigns);  [BUGGY]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	Type[]  toLowerBounds  =  getImplicitUpperBounds(toWildcardType,  typeVarAssigns);	  Type[]    toLowerBounds    =    getImplicitUpperBounds(lowerBounds,    typeVarAssigns);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
70	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(upperBound,  typeVarAssigns);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(upperBound,  typeVarAssigns);  [BUGGY]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	Type[]  toLowerBounds  =  getImplicitUpperBounds(upperBound,  typeVarAssigns);	  Type[]    toLowerBounds    =    getImplicitUpperBounds(lowerBounds,    typeVarAssigns);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
71	[BUG]  [BUGGY]  Type[]  toUpperBounds  =  getImplicitLowerBounds(toUpperBounds);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  Type[]  toUpperBounds  =  getImplicitLowerBounds(toUpperBounds);  [BUGGY]        toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	Type[]  toUpperBounds  =  getImplicitLowerBounds(toUpperBounds);	  Type[]    toUpperBounds    =    getImplicitLowerBounds(lowerBounds);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
72	[BUG]  [BUGGY]  Type[]  toUpperBounds  =  getImplicitToUpperBounds(toWildcardType);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  Type[]  toUpperBounds  =  getImplicitToUpperBounds(toWildcardType);  [BUGGY]        toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	Type[]  toUpperBounds  =  getImplicitToUpperBounds(toWildcardType);	  Type[]    toUpperBounds    =    getImplicitLowerBounds(lowerBounds);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
73	[BUG]  [BUGGY]  Type[]  toUpperBounds  =  getImplicitToUpperBounds(lowerBounds);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  Type[]  toUpperBounds  =  getImplicitToUpperBounds(lowerBounds);  [BUGGY]        toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	Type[]  toUpperBounds  =  getImplicitToUpperBounds(lowerBounds);	  Type[]    toUpperBounds    =    getImplicitLowerBounds(lowerBounds);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
74	[BUG]  [BUGGY]  Type[]  toUpperBounds  =  getImplicitUpperBounds(toUpperBounds);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  Type[]  toUpperBounds  =  getImplicitUpperBounds(toUpperBounds);  [BUGGY]        toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	Type[]  toUpperBounds  =  getImplicitUpperBounds(toUpperBounds);	  Type[]    toUpperBounds    =    getImplicitLowerBounds(lowerBounds);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
75	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(highestBounds);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(highestBounds);  [BUGGY]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	Type[]  upperBounds  =  getImplicitUpperBounds(highestBounds);	  Type[]    upperBounds    =    getImplicitLowerBounds(highestBounds);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
76	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(lowestBounds);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(lowestBounds);  [BUGGY]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	Type[]  upperBounds  =  getImplicitUpperBounds(lowestBounds);	  Type[]    upperBounds    =    getImplicitLowerBounds(highestBounds);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
77	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitLowerBounds(toLowerBounds,  typeVarAssigns);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  Type[]  toLowerBounds  =  getImplicitLowerBounds(toLowerBounds,  typeVarAssigns);  [BUGGY]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	Type[]  toLowerBounds  =  getImplicitLowerBounds(toLowerBounds,  typeVarAssigns);	  Type[]    toLowerBounds    =    getImplicitLowerBounds(lowerBounds,    typeVarAssigns);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
78	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitLowerBounds(toLowerBound,  typeVarAssigns);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  Type[]  toLowerBounds  =  getImplicitLowerBounds(toLowerBound,  typeVarAssigns);  [BUGGY]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	Type[]  toLowerBounds  =  getImplicitLowerBounds(toLowerBound,  typeVarAssigns);	  Type[]    toLowerBounds    =    getImplicitLowerBounds(lowerBounds,    typeVarAssigns);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
79	[BUG]  [BUGGY]  for(Type  toBound  :  lowerBounds.length,  toLowerBounds.length)  {  [CE]  ')'  expected  [FE]        AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  for(Type  toBound  :  lowerBounds.length,  toLowerBounds.length)  {  [BUGGY]        toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	for(Type  toBound  :  lowerBounds.length,  toLowerBounds.length)  {	  for(Type    toBound    :    lowerBounds.length)    {    	non-compiled	[CE]  ')'  expected	39	None	replace
80	[BUG]  [BUGGY]  for(Type  toBound  :  lowerBounds.length,  upperBounds.length)  {  [CE]  ')'  expected  [FE]          AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  for(Type  toBound  :  lowerBounds.length,  upperBounds.length)  {  [BUGGY]        toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	for(Type  toBound  :  lowerBounds.length,  upperBounds.length)  {	  for(Type    toBound    :    lowerBounds.length)    {    	non-compiled	[CE]  ')'  expected	39	None	replace
81	[BUG]  [BUGGY]  Type  toBound  =  substituteTypeVariables(toBound,  lowerBounds);  for  (Type  toBound  :  upperBounds)  {  [CE]  method  substituteTypeVariables  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]          AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  Type  toBound  =  substituteTypeVariables(toBound,  lowerBounds);  for  (Type  toBound  :  upperBounds)  {  [BUGGY]        toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	Type  toBound  =  substituteTypeVariables(toBound,  lowerBounds);  for  (Type  toBound  :  upperBounds)  {	  for    (Type    toBound    :    upperBounds)    {    Type    toBound    =    substituteTypeVariables(toBound,    typeVarAssigns);    for    (Type    toBound    :    upperBounds)    {    	non-compiled	[CE]  method  substituteTypeVariables  in  class  TypeUtils  cannot  be  applied  to  given  types;	12	None	replace
82	[BUG]  [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(upperBounds,  typeVarAssigns);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(upperBounds,  typeVarAssigns);  [BUGGY]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	Type[]  lowerBounds  =  getImplicitLowerBounds(upperBounds,  typeVarAssigns);	  Type[]    lowerBounds    =    getImplicitLowerBounds(upperBounds);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
83	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(type);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(type);  [BUGGY]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	Type[]  upperBounds  =  getImplicitUpperBounds(type);	  Type[]    upperBounds    =    getImplicitLowerBounds(type);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
84	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(lowerBounds,  typeVarAssigns);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(lowerBounds,  typeVarAssigns);  [BUGGY]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	Type[]  upperBounds  =  getImplicitUpperBounds(lowerBounds,  typeVarAssigns);	  Type[]    upperBounds    =    getImplicitLowerBounds(lowerBounds,    typeVarAssigns);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
85	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(toWildcardType,  upperBounds);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(toWildcardType,  upperBounds);  [BUGGY]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	Type[]  toLowerBounds  =  getImplicitUpperBounds(toWildcardType,  upperBounds);	  Type[]    toLowerBounds    =    getImplicitUpperBounds(toWildcardType);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
86	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(upperBound);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(upperBound);  [BUGGY]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	Type[]  upperBounds  =  getImplicitUpperBounds(upperBound);	  Type[]    upperBounds    =    getImplicitLowerBounds(typeVarAssigns);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
87	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitLowerBounds(lowerBounds,  lowerBounds);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  Type[]  toLowerBounds  =  getImplicitLowerBounds(lowerBounds,  lowerBounds);  [BUGGY]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	Type[]  toLowerBounds  =  getImplicitLowerBounds(lowerBounds,  lowerBounds);	  Type[]    toLowerBounds    =    getImplicitLowerBounds(lowerBounds,    type);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
88	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(lowerBounds,  lowerBounds);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(lowerBounds,  lowerBounds);  [BUGGY]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	Type[]  toLowerBounds  =  getImplicitUpperBounds(lowerBounds,  lowerBounds);	  Type[]    toLowerBounds    =    getImplicitUpperBounds(lowerBounds,    type);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
89	[BUG]  [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(toWildcardType,  upperBounds);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(toWildcardType,  upperBounds);  [BUGGY]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	Type[]  lowerBounds  =  getImplicitLowerBounds(toWildcardType,  upperBounds);	  Type[]    lowerBounds    =    getImplicitLowerBounds(toWildcardType);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
90	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(lowestBounds);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(lowestBounds);  [BUGGY]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	Type[]  upperBounds  =  getImplicitLowerBounds(lowestBounds);	  Type[]    upperBounds    =    getImplicitLowerBounds(highestBounds);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
91	[BUG]  [BUGGY]  for(Type  toBound  :  topBounds)  {  [CE]  cannot  find  symbol  topBounds  [FE]        AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  for(Type  toBound  :  topBounds)  {  [BUGGY]        toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	for(Type  toBound  :  topBounds)  {	  for(Type    toBound    :    lowBounds)    {    	non-compiled	[CE]  cannot  find  symbol  topBounds	38	None	replace
92	[BUG]  [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(grabcardType,  upperBounds);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(grabcardType,  upperBounds);  [BUGGY]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	Type[]  lowerBounds  =  getImplicitLowerBounds(grabcardType,  upperBounds);	  Type[]    lowerBounds    =    getImplicitLowerBounds(grabcardType);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
93	[BUG]  [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(grabcardType,  typeVarAssigns);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(grabcardType,  typeVarAssigns);  [BUGGY]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	Type[]  lowerBounds  =  getImplicitLowerBounds(grabcardType,  typeVarAssigns);	  Type[]    lowerBounds    =    getImplicitLowerBounds(grabcardType);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
94	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType,  typeVarAssigns);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType,  typeVarAssigns);  [BUGGY]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType,  typeVarAssigns);	  Type[]    upperBounds    =    getImplicitLowerBounds(wildcardType);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
95	[BUG]  [BUGGY]  for(Type  toBound  :  upperBounds)  {  Type  toBound  =  substituteTypeVariables(toBound,  lowerBounds);  [CE]  variable  toBound  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  for(Type  toBound  :  upperBounds)  {  Type  toBound  =  substituteTypeVariables(toBound,  lowerBounds);  [BUGGY]        toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	for(Type  toBound  :  upperBounds)  {  Type  toBound  =  substituteTypeVariables(toBound,  lowerBounds);	  for    (Type    toBound    :    upperBounds)    {    Type    toBound    =    substituteTypeVariables(toBound,    typeVarAssigns);    	non-compiled	[CE]  variable  toBound  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	14	None	replace
96	[BUG]  [BUGGY]  Type[]  toBounds  =  getImplicitLowerBounds(toWildcardType);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  Type[]  toBounds  =  getImplicitLowerBounds(toWildcardType);  [BUGGY]        toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	Type[]  toBounds  =  getImplicitLowerBounds(toWildcardType);	  for    (Type    toBound    :    lowerBounds)    {    Type[]    toBounds    =    getImplicitLowerBounds(toWildcardType);    for    (Type    toBound    :    lowerBounds)    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
97	[BUG]  [BUGGY]  Type[]  toUpperBounds  =  getImplicitToUpperBounds(toUpperBounds);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  Type[]  toUpperBounds  =  getImplicitToUpperBounds(toUpperBounds);  [BUGGY]        toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	Type[]  toUpperBounds  =  getImplicitToUpperBounds(toUpperBounds);	  Type[]    toUpperBounds    =    getImplicitLowerBounds(lowerBounds);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
98	[BUG]  [BUGGY]  Type[]  lowerBounds  =  getImplicitLowBounds(lowerBounds);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  Type[]  lowerBounds  =  getImplicitLowBounds(lowerBounds);  [BUGGY]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	Type[]  lowerBounds  =  getImplicitLowBounds(lowerBounds);	  Type[]    lowerBounds    =    getImplicitUpperBounds(lowerBounds);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
99	[BUG]  [BUGGY]  for(Type  toBound  :  lowerBounds)  {  Type[]  toBound  =  substituteTypeVariables(toBound,  upperBounds);  [CE]  variable  toBound  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]        AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  for(Type  toBound  :  lowerBounds)  {  Type[]  toBound  =  substituteTypeVariables(toBound,  upperBounds);  [BUGGY]        toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	for(Type  toBound  :  lowerBounds)  {  Type[]  toBound  =  substituteTypeVariables(toBound,  upperBounds);	  for    (Type    toBound    :    lowerBounds)    {    Type[]    toBound    =    substituteTypeVariables(toBound,    typeVarAssigns);    	non-compiled	[CE]  variable  toBound  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	34	None	replace
100	[BUG]  [BUGGY]  Type[]  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  Type[]  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [BUGGY]        toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	Type[]  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);	  for    (Type    toBound    :    lowerBounds)    {    Type[]    toBound    =    substituteTypeVariables(toBound,    typeVarAssigns);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
101	[BUG]  [BUGGY]  for(Type  toBound  :  lowerBounds.length,  typeVarAssigns)  {  [CE]  ')'  expected  [FE]        AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  for(Type  toBound  :  lowerBounds.length,  typeVarAssigns)  {  [BUGGY]        toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	for(Type  toBound  :  lowerBounds.length,  typeVarAssigns)  {	  for(Type    toBound    :    lowerBounds.length)    {    	non-compiled	[CE]  ')'  expected	39	None	replace
102	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(highcardType);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(highcardType);  [BUGGY]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	Type[]  upperBounds  =  getImplicitUpperBounds(highcardType);	  Type[]    upperBounds    =    getImplicitLowerBounds(type);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
103	[BUG]  [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(lowerBounds,  upperBounds);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(lowerBounds,  upperBounds);  [BUGGY]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	Type[]  lowerBounds  =  getImplicitLowerBounds(lowerBounds,  upperBounds);	  Type[]    lowerBounds    =    getImplicitLowerBounds(lowerBounds,    typeVarAssigns);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
104	[BUG]  [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(lowerBounds,  typeVarAssigns,  upperBounds);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(lowerBounds,  typeVarAssigns,  upperBounds);  [BUGGY]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	Type[]  lowerBounds  =  getImplicitLowerBounds(lowerBounds,  typeVarAssigns,  upperBounds);	  Type[]    lowerBounds    =    getImplicitLowerBounds(lowerBounds,    typeVarAssigns);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
105	[BUG]  [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(higherBounds,  typeVarAssigns);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(higherBounds,  typeVarAssigns);  [BUGGY]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	Type[]  lowerBounds  =  getImplicitLowerBounds(higherBounds,  typeVarAssigns);	  Type[]    lowerBounds    =    getImplicitLowerBounds(higherBounds);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
106	[BUG]  [BUGGY]  for(Type  toBound  :  lowerBounds)  {  Type  toBound  =  substituteTypeVariables(toBound,  upperBounds);  [CE]  variable  toBound  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]            AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  for(Type  toBound  :  lowerBounds)  {  Type  toBound  =  substituteTypeVariables(toBound,  upperBounds);  [BUGGY]        toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	for(Type  toBound  :  lowerBounds)  {  Type  toBound  =  substituteTypeVariables(toBound,  upperBounds);	  for    (Type    toBound    :    lowerBounds)    {    Type    toBound    =    substituteTypeVariables(toBound,    typeVarAssigns);    	non-compiled	[CE]  variable  toBound  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	21	None	replace
107	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType,  typeVarAssigns);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType,  typeVarAssigns);  [BUGGY]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType,  typeVarAssigns);	  Type[]    upperBounds    =    getImplicitUpperBounds(wildcardType);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
108	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  Type[]  toBounds  =  getImplicitLowerBounds(toWildcardType);  for  (Type  toBound  :  toBounds)  {  [BUGGY]        toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	add	Type[]  toBounds  =  getImplicitLowerBounds(toWildcardType);  for  (Type  toBound  :  toBounds)  {	  for    (Type    toBound    :    lowerBounds)    {    Type[]    toBounds    =    getImplicitLowerBounds(toWildcardType);    for    (Type    toBound    :    lowerBounds)    {    	compilable	  [FE]  AssertionError  	23	2	replace
109	[BUG]  [BUGGY]  Type[]  toBounds  =  getImplicitLowerBounds(toWildcardType);  for  (Type  toBound  :  toBounds)  {  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  Type[]  toBounds  =  getImplicitLowerBounds(toWildcardType);  for  (Type  toBound  :  toBounds)  {  [BUGGY]        toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	Type[]  toBounds  =  getImplicitLowerBounds(toWildcardType);  for  (Type  toBound  :  toBounds)  {	  for    (Type    toBound    :    lowerBounds)    {    Type[]    toBounds    =    getImplicitLowerBounds(toWildcardType);    for    (Type    toBound    :    lowerBounds)    {    	compilable	  [FE]  AssertionError  	23	2	replace
110	[BUG]  [BUGGY]  Type  toBound  =  substituteTypeVariables(toBound,  toLowerBounds);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  Type  toBound  =  substituteTypeVariables(toBound,  toLowerBounds);  [BUGGY]        toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	Type  toBound  =  substituteTypeVariables(toBound,  toLowerBounds);	  for    (Type    toBound    :    lowerBounds)    {    Type    toBound    =    substituteTypeVariables(toBound,    typeVarAssigns);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
111	[BUG]  [BUGGY]  Type  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  Type  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [BUGGY]        toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	Type  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);	  for    (Type    toBound    :    lowerBounds)    {    Type    toBound    =    substituteTypeVariables(toBound,    typeVarAssigns);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
112	[BUG]  [BUGGY]  Type[]  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  for  (Type  toBound  :  upperBounds)  {  [CE]  method  substituteTypeVariables  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  Type[]  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  for  (Type  toBound  :  upperBounds)  {  [BUGGY]        toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	Type[]  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  for  (Type  toBound  :  upperBounds)  {	  for    (Type    toBound    :    upperBounds)    {    Type[]    toBound    =    substituteTypeVariables(toBound,    typeVarAssigns);    for    (Type    toBound    :    upperBounds)    {    	non-compiled	[CE]  method  substituteTypeVariables  in  class  TypeUtils  cannot  be  applied  to  given  types;	13	None	replace
113	[BUG]  [BUGGY]  Type[]  toBounds  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  Type[]  toBounds  =  substituteTypeVariables(toBound,  typeVarAssigns);  [BUGGY]        toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	Type[]  toBounds  =  substituteTypeVariables(toBound,  typeVarAssigns);	  for    (Type    toBound    :    lowerBounds)    {    Type[]    toBounds    =    substituteTypeVariables(toBound,    typeVarAssigns);    for    (Type    toBound    :    lowerBounds)    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
114	[BUG]  [BUGGY]  Type[]  toBounds  =  substituteTypeVariables(toBound,  typeVarAssigns);  for  (Type  toBound  :  toBounds)  {  [CE]  cannot  find  symbol  toBound  [FE]          AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  Type[]  toBounds  =  substituteTypeVariables(toBound,  typeVarAssigns);  for  (Type  toBound  :  toBounds)  {  [BUGGY]        toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	Type[]  toBounds  =  substituteTypeVariables(toBound,  typeVarAssigns);  for  (Type  toBound  :  toBounds)  {	  for    (Type    toBound    :    lowerBounds)    {    Type[]    toBounds    =    substituteTypeVariables(toBound,    typeVarAssigns);    for    (Type    toBound    :    lowerBounds)    {    	non-compiled	[CE]  cannot  find  symbol  toBound	45	None	replace
115	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(lowerBounds,  wildcardType);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(lowerBounds,  wildcardType);  [BUGGY]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	Type[]  toLowerBounds  =  getImplicitUpperBounds(lowerBounds,  wildcardType);	  Type[]    toLowerBounds    =    getImplicitUpperBounds(lowerBounds,    upperBounds);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
116	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(domainType);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(domainType);  [BUGGY]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	Type[]  upperBounds  =  getImplicitUpperBounds(domainType);	  Type[]    upperBounds    =    getImplicitLowerBounds(type);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
117	[BUG]  [BUGGY]  Type[]  toBound  =  substituteTypeVariables(toBound,  lowBounds);  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  Type[]  toBound  =  substituteTypeVariables(toBound,  lowBounds);  [BUGGY]        toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	Type[]  toBound  =  substituteTypeVariables(toBound,  lowBounds);	  for    (Type    toBound    :    upperBounds)    {    Type[]    toBound    =    substituteTypeVariables(toBound,    typeVarAssigns);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
118	[BUG]  [BUGGY]  Type  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  for  (Type  toBound  :  upperBounds)  {  [CE]  variable  toBound  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]          AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  Type  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  for  (Type  toBound  :  upperBounds)  {  [BUGGY]        toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	Type  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  for  (Type  toBound  :  upperBounds)  {	  for    (Type    toBound    :    lowerBounds)    {    Type    toBound    =    substituteTypeVariables(toBound,    typeVarAssigns);    for    (Type    toBound    :    lowerBounds)    {    	non-compiled	[CE]  variable  toBound  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	20	None	replace
119	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(higherBounds);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(higherBounds);  [BUGGY]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	Type[]  upperBounds  =  getImplicitLowerBounds(higherBounds);	  Type[]    lowerBounds    =    getImplicitLowerBounds(higherBounds);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
120	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  Type[]  toBounds  =  getImplicitUpperBounds(toWildcardType);  for  (Type  toBound  :  toBounds)  {  [BUGGY]        toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	add	Type[]  toBounds  =  getImplicitUpperBounds(toWildcardType);  for  (Type  toBound  :  toBounds)  {	  for    (Type    toBound    :    upperBounds)    {    Type[]    toBounds    =    getImplicitUpperBounds(toWildcardType);    for    (Type    toBound    :    upperBounds)    {    	compilable	  [FE]  AssertionError  	15	2	replace
121	[BUG]  [BUGGY]  Type[]  toBounds  =  getImplicitUpperBounds(toWildcardType);  for  (Type  toBound  :  toBounds)  {  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  Type[]  toBounds  =  getImplicitUpperBounds(toWildcardType);  for  (Type  toBound  :  toBounds)  {  [BUGGY]        toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	Type[]  toBounds  =  getImplicitUpperBounds(toWildcardType);  for  (Type  toBound  :  toBounds)  {	  for    (Type    toBound    :    upperBounds)    {    Type[]    toBounds    =    getImplicitUpperBounds(toWildcardType);    for    (Type    toBound    :    upperBounds)    {    	compilable	  [FE]  AssertionError  	15	2	replace
122	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitToLowerBounds(lowerBounds,  upperBounds);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  Type[]  toLowerBounds  =  getImplicitToLowerBounds(lowerBounds,  upperBounds);  [BUGGY]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	Type[]  toLowerBounds  =  getImplicitToLowerBounds(lowerBounds,  upperBounds);	  Type[]    toLowerBounds    =    getImplicitLowerBounds(lowerBounds,    upperBounds);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
123	[BUG]  [BUGGY]  Type[]  lowerBounds  =  getImplicitUpperBounds(wildcardType);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  Type[]  lowerBounds  =  getImplicitUpperBounds(wildcardType);  [BUGGY]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	Type[]  lowerBounds  =  getImplicitUpperBounds(wildcardType);	  Type[]    upperBounds    =    getImplicitUpperBounds(lowerBounds);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
124	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  for(Type  toBound  :  toLowerBounds)  {  [BUGGY]        toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	add	for(Type  toBound  :  toLowerBounds)  {	  for(Type    toBound    :    lowBounds)    {    	compilable	  [FE]  AssertionError  	38	2	replace
125	[BUG]  [BUGGY]  for(Type  toBound  :  toLowerBounds)  {  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  for(Type  toBound  :  toLowerBounds)  {  [BUGGY]        toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	for(Type  toBound  :  toLowerBounds)  {	  for(Type    toBound    :    lowBounds)    {    	compilable	  [FE]  AssertionError  	38	2	replace
126	[BUG]  [BUGGY]  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  [BUGGY]        toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);	  Type[]    toUpperBounds    =    getImplicitLowerBounds(lowerBounds);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
127	[BUG]  [BUGGY]  Type[]  toUpperBounds  =  getImplicitLowerBounds(toWildcardType);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  Type[]  toUpperBounds  =  getImplicitLowerBounds(toWildcardType);  [BUGGY]        toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	Type[]  toUpperBounds  =  getImplicitLowerBounds(toWildcardType);	  Type[]    toUpperBounds    =    getImplicitLowerBounds(lowerBounds);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
128	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType,  type);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType,  type);  [BUGGY]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType,  type);	  Type[]    toLowerBounds    =    getImplicitLowerBounds(toWildcardType);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
129	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitLowerBounds(type,  lowerBounds);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  Type[]  toLowerBounds  =  getImplicitLowerBounds(type,  lowerBounds);  [BUGGY]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	Type[]  toLowerBounds  =  getImplicitLowerBounds(type,  lowerBounds);	  Type[]    toLowerBounds    =    getImplicitLowerBounds(lowerBounds,    type);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
130	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(grabcardType);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(grabcardType);  [BUGGY]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	Type[]  upperBounds  =  getImplicitLowerBounds(grabcardType);	  Type[]    lowerBounds    =    getImplicitLowerBounds(grabcardType);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
131	[BUG]  [BUGGY]  Type[]  toBound  =  substituteTypeVariables(toBound,  toLowerBounds);  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  Type[]  toBound  =  substituteTypeVariables(toBound,  toLowerBounds);  [BUGGY]        toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	Type[]  toBound  =  substituteTypeVariables(toBound,  toLowerBounds);	  for    (Type    toBound    :    lowerBounds)    {    Type[]    toBound    =    substituteTypeVariables(toBound,    typeVarAssigns);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
132	[BUG]  [BUGGY]  Type[]  toBound  =  substituteTypeVariables(toBound,  toUpperBounds);  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  Type[]  toBound  =  substituteTypeVariables(toBound,  toUpperBounds);  [BUGGY]        toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	Type[]  toBound  =  substituteTypeVariables(toBound,  toUpperBounds);	  for    (Type    toBound    :    lowerBounds)    {    Type[]    toBound    =    substituteTypeVariables(toBound,    typeVarAssigns);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
133	[BUG]  [BUGGY]  Type[]  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  for  (Type  toBound  :  toBounds)  {  [CE]  method  substituteTypeVariables  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);      [BUGGY]  Type[]  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  for  (Type  toBound  :  toBounds)  {  [BUGGY]        toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	Type[]  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  for  (Type  toBound  :  toBounds)  {	  for    (Type    toBound    :    lowerBounds)    {    Type[]    toBound    =    substituteTypeVariables(toBound,    typeVarAssigns);    for    (Type    toBound    :    lowerBounds)    {    	non-compiled	[CE]  method  substituteTypeVariables  in  class  TypeUtils  cannot  be  applied  to  given  types;	22	None	replace
