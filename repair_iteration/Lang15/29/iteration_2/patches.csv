bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Type[]  upperBounds  =  toBound.getImplicitUpperBounds(wildcardType);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  upperBounds  =  toBound.getImplicitUpperBounds(wildcardType);  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  upperBounds  =  toBound.getImplicitUpperBounds(wildcardType);	  Type[]    upperBounds    =    toBound.getImplicitLowerBounds(wildcardType);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
2	[BUG]  [BUGGY]  Type[]  upperBounds  =  toBound.getImplicitLowerBounds(typeVarAssigns);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  upperBounds  =  toBound.getImplicitLowerBounds(typeVarAssigns);  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  upperBounds  =  toBound.getImplicitLowerBounds(typeVarAssigns);	  Type[]    upperBounds    =    toBound.getImplicitLowerBounds(wildcardType);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
3	[BUG]  [BUGGY]  Type[]  upperBounds  =  toBound.getImplicitLowerBounds(type);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  upperBounds  =  toBound.getImplicitLowerBounds(type);  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  upperBounds  =  toBound.getImplicitLowerBounds(type);	  Type[]    upperBounds    =    toBound.getImplicitLowerBounds(wildcardType);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
4	[BUG]  [BUGGY]  Type[]  upperBounds  =  toBound.getImplicitLowerBounds(wildcardType,  toWildcardType);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  upperBounds  =  toBound.getImplicitLowerBounds(wildcardType,  toWildcardType);  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  upperBounds  =  toBound.getImplicitLowerBounds(wildcardType,  toWildcardType);	  Type[]    upperBounds    =    toBound.getImplicitLowerBounds(wildcardType);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
5	[BUG]  [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType,  toBound,  typeVarAssigns);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType,  toBound,  typeVarAssigns);  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType,  toBound,  typeVarAssigns);	  Type[]    lowerBounds    =    getImplicitLowerBounds(wildcardType,    toBound);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
6	[BUG]  [BUGGY]  Type[]  lowerBounds  =  getImplicitUpperBounds(wildcardType,  toBound);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  lowerBounds  =  getImplicitUpperBounds(wildcardType,  toBound);  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  lowerBounds  =  getImplicitUpperBounds(wildcardType,  toBound);	  Type[]    lowerBounds    =    getImplicitLowerBounds(wildcardType,    toBound);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
7	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(wildcardType);  for(Type  upperBound  :  toLowerBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(wildcardType);  for(Type  upperBound  :  toLowerBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  toLowerBounds  =  getImplicitUpperBounds(wildcardType);  for(Type  upperBound  :  toLowerBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }	  Type[]    toLowerBounds    =    getImplicitLowerBounds(wildcardType);    for(Type    upperBound    :    toLowerBounds)    {    toBound    =    substituteTypeVariables(upperBound,    typeVarAssigns);    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
8	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitAssignments(wildcardType);  for(Type  upperBound  :  toLowerBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  toLowerBounds  =  getImplicitAssignments(wildcardType);  for(Type  upperBound  :  toLowerBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  toLowerBounds  =  getImplicitAssignments(wildcardType);  for(Type  upperBound  :  toLowerBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }	  Type[]    toLowerBounds    =    getImplicitLowerBounds(wildcardType);    for(Type    upperBound    :    toLowerBounds)    {    toBound    =    substituteTypeVariables(upperBound,    typeVarAssigns);    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
9	[BUG]  [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  if(lowerBounds!=  null)  {  for(Type  bound  :  toLowerBounds)  {  }  [CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]          AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  if(lowerBounds!=  null)  {  for(Type  bound  :  toLowerBounds)  {  }  [BUGGY]      if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  if(lowerBounds!=  null)  {  for(Type  bound  :  toLowerBounds)  {  }	  for(Type    bound    :    toLowerBounds)    {    Type[]    upperBounds    =    getImplicitLowerBounds(wildcardType);    if(toLowerBounds!=    null)    {    for(Type    bound    :    toLowerBounds)    {    }    	non-compiled	[CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	79	None	replace
10	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType);  if(upperBounds!=  null)  {  for(Type  bound  :  toLowerBounds)  {  }  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]            AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType);  if(upperBounds!=  null)  {  for(Type  bound  :  toLowerBounds)  {  }  [BUGGY]      if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType);  if(upperBounds!=  null)  {  for(Type  bound  :  toLowerBounds)  {  }	  for(Type    bound    :    toLowerBounds)    {    Type[]    upperBounds    =    getImplicitLowerBounds(wildcardType);    if(toLowerBounds!=    null)    {    for(Type    bound    :    toLowerBounds)    {    }    	non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	79	None	replace
11	[BUG]  [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  if(upperBounds!=  null)  {  for(Type  bound  :  toLowerBounds)  {  }  [CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  if(upperBounds!=  null)  {  for(Type  bound  :  toLowerBounds)  {  }  [BUGGY]      if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  if(upperBounds!=  null)  {  for(Type  bound  :  toLowerBounds)  {  }	  for(Type    bound    :    toLowerBounds)    {    Type[]    upperBounds    =    getImplicitLowerBounds(wildcardType);    if(toLowerBounds!=    null)    {    for(Type    bound    :    toLowerBounds)    {    }    	non-compiled	[CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	79	None	replace
12	[BUG]  [BUGGY]  for(Type  toBound  :  toLowerBounds,  lowerBounds)  {  [CE]  ')'  expected  [FE]        AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  for(Type  toBound  :  toLowerBounds,  lowerBounds)  {  [BUGGY]      if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	for(Type  toBound  :  toLowerBounds,  lowerBounds)  {	  for(Type    toBound    :    toLowerBounds)    {    	non-compiled	[CE]  ')'  expected	43	None	replace
13	[BUG]  [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType,  toUpperBounds);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType,  toUpperBounds);  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType,  toUpperBounds);	  Type[]    lowerBounds    =    getImplicitLowerBounds(wildcardType,    toWildcardType);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
14	[BUG]  [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType,  typeVarAssigns);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType,  typeVarAssigns);  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType,  typeVarAssigns);	  Type[]    lowerBounds    =    getImplicitLowerBounds(wildcardType,    toWildcardType);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
15	[BUG]  [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(toWildcardType,  wildcardType);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(toWildcardType,  wildcardType);  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  lowerBounds  =  getImplicitLowerBounds(toWildcardType,  wildcardType);	  Type[]    lowerBounds    =    getImplicitLowerBounds(wildcardType,    toWildcardType);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
16	[BUG]  [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType,  upperBounds);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType,  upperBounds);  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType,  upperBounds);	  Type[]    lowerBounds    =    getImplicitLowerBounds(wildcardType,    toWildcardType);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
17	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType,  toUpperBounds);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType,  toUpperBounds);  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType,  toUpperBounds);	  Type[]    upperBounds    =    getImplicitLowerBounds(wildcardType,    toWildcardType);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
18	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType,  typeVarAssigns);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType,  typeVarAssigns);  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType,  typeVarAssigns);	  Type[]    upperBounds    =    getImplicitLowerBounds(wildcardType,    toWildcardType);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
19	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(toWildcardType,  wildcardType);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(toWildcardType,  wildcardType);  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  upperBounds  =  getImplicitLowerBounds(toWildcardType,  wildcardType);	  Type[]    upperBounds    =    getImplicitLowerBounds(wildcardType,    toWildcardType);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
20	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType);  for(Type  toBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType);  for(Type  toBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType);  for(Type  toBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }	  Type[]    lowerBounds    =    getImplicitLowerBounds(wildcardType,    toWildcardType);    for(Type    toBound    :    toUpperBounds)    {    toBound    =    substituteTypeVariables(toBound,    typeVarAssigns);    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
21	[BUG]  [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType);  for(Type  toBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(toBound,  type  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType);  for(Type  toBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(toBound,  type  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType);  for(Type  toBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(toBound,  type	  Type[]    lowerBounds    =    getImplicitLowerBounds(wildcardType,    toWildcardType);    for(Type    toBound    :    toUpperBounds)    {    toBound    =    substituteTypeVariables(toBound,    typeVarAssigns);    }    	non-compiled	[CE]  ')'  expected	24	None	replace
22	[BUG]  [BUGGY]  Type[]  wildcardTypes  =  getImplicitLowerBounds(wildcardType);  for(Type  toBound  :  toWildcardTypes)  {  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  wildcardTypes  =  getImplicitLowerBounds(wildcardType);  for(Type  toBound  :  toWildcardTypes)  {  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  wildcardTypes  =  getImplicitLowerBounds(wildcardType);  for(Type  toBound  :  toWildcardTypes)  {  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }	  Type[]    upperBounds    =    getImplicitLowerBounds(wildcardType);    for(Type    toBound    :    toUpperBounds)    {    toBound    =    substituteTypeVariables(toBound,    typeVarAssigns);    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
23	[BUG]  [BUGGY]  Type[]  wildcardTypes  =  getImplicitLowerBounds(wildcardType);  for(Type  toBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  wildcardTypes  =  getImplicitLowerBounds(wildcardType);  for(Type  toBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  wildcardTypes  =  getImplicitLowerBounds(wildcardType);  for(Type  toBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }	  Type[]    upperBounds    =    getImplicitLowerBounds(wildcardType);    for(Type    toBound    :    toUpperBounds)    {    toBound    =    substituteTypeVariables(toBound,    typeVarAssigns);    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
24	[BUG]  [BUGGY]  Type[]  upperBounds  =  toBound.getImplicitLopperBounds();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  upperBounds  =  toBound.getImplicitLopperBounds();  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  upperBounds  =  toBound.getImplicitLopperBounds();	  Type[]    upperBounds    =    toBound.getImplicitUpperBounds();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
25	[BUG]  [BUGGY]  Type[]  toWildcardType  =  getImplicitLowerBounds(wildcardType,  toWildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  toWildcardType  =  getImplicitLowerBounds(wildcardType,  toWildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  toWildcardType  =  getImplicitLowerBounds(wildcardType,  toWildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }	  Type[]    lowerBounds    =    getImplicitLowerBounds(wildcardType,    toWildcardType);    for(Type    upperBound    :    toUpperBounds)    {    toBound    =    substituteTypeVariables(upperBound,    typeVarAssigns);    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
26	[BUG]  [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarA  [CE]  ')'  expected  [FE]                          AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarA  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarA	  Type[]    lowerBounds    =    getImplicitLowerBounds(wildcardType,    toWildcardType);    for(Type    upperBound    :    toUpperBounds)    {    toBound    =    substituteTypeVariables(upperBound,    typeVarAssigns);    }    	non-compiled	[CE]  ')'  expected	4	None	replace
27	[BUG]  [BUGGY]  Type[]  toUpperBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  toUpperBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  toUpperBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }	  Type[]    lowerBounds    =    getImplicitLowerBounds(wildcardType,    toWildcardType);    for(Type    upperBound    :    toUpperBounds)    {    toBound    =    substituteTypeVariables(upperBound,    typeVarAssigns);    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
28	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType,  toWildcardType,  typeVarAssigns);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType,  toWildcardType,  typeVarAssigns);  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType,  toWildcardType,  typeVarAssigns);	  Type[]    upperBounds    =    getImplicitUpperBounds(wildcardType,    typeVarAssigns);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
29	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType,  typeVarAssigns,  toBound);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType,  typeVarAssigns,  toBound);  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType,  typeVarAssigns,  toBound);	  Type[]    upperBounds    =    getImplicitUpperBounds(wildcardType,    typeVarAssigns);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
30	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(toBound,  typeVarAssigns);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(toBound,  typeVarAssigns);  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  upperBounds  =  getImplicitUpperBounds(toBound,  typeVarAssigns);	  Type[]    upperBounds    =    getImplicitUpperBounds(wildcardType,    typeVarAssigns);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
31	[BUG]  [BUGGY]  Type[]  lowerBounds  =  getImplicitUpperBounds(toBound);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  lowerBounds  =  getImplicitUpperBounds(toBound);  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  lowerBounds  =  getImplicitUpperBounds(toBound);	  Type[]    lowerBounds    =    getImplicitUpperBounds(wildcardType);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
32	[BUG]  [BUGGY]  Type[]  lowerBounds  =  getImplicitUpperBounds(toBound,  wildcardType);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  lowerBounds  =  getImplicitUpperBounds(toBound,  wildcardType);  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  lowerBounds  =  getImplicitUpperBounds(toBound,  wildcardType);	  Type[]    lowerBounds    =    getImplicitUpperBounds(wildcardType);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
33	[BUG]  [BUGGY]  TypewildcardType  upperBounds  =  getImplicitUpperBounds(wildcardType);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  TypewildcardType  upperBounds  =  getImplicitUpperBounds(wildcardType);  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	TypewildcardType  upperBounds  =  getImplicitUpperBounds(wildcardType);	  TypewildcardType    upperBounds    =    getImplicitLowerBounds(wildcardType);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
34	[BUG]  [BUGGY]  TypewildcardType  upperBounds  =  getImplicitLowerBounds(toBound);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  TypewildcardType  upperBounds  =  getImplicitLowerBounds(toBound);  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	TypewildcardType  upperBounds  =  getImplicitLowerBounds(toBound);	  TypewildcardType    upperBounds    =    getImplicitLowerBounds(wildcardType);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
35	[BUG]  [BUGGY]  TypewildcardType  wildcardType  =  getImplicitUpperBounds(wildcardType);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  TypewildcardType  wildcardType  =  getImplicitUpperBounds(wildcardType);  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	TypewildcardType  wildcardType  =  getImplicitUpperBounds(wildcardType);	  TypewildcardType    upperBounds    =    getImplicitLowerBounds(wildcardType);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
36	[BUG]  [BUGGY]  TypewildcardType  upperBounds  =  getImplicitLowerBounds(toBound,  wildcardType);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  TypewildcardType  upperBounds  =  getImplicitLowerBounds(toBound,  wildcardType);  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	TypewildcardType  upperBounds  =  getImplicitLowerBounds(toBound,  wildcardType);	  TypewildcardType    upperBounds    =    getImplicitLowerBounds(wildcardType);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
37	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(wildcardType);  for(Type  upperBound  :  lowerBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(wildcardType);  for(Type  upperBound  :  lowerBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  toLowerBounds  =  getImplicitUpperBounds(wildcardType);  for(Type  upperBound  :  lowerBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }	  Type[]    toLowerBounds    =    getImplicitLowerBounds(wildcardType);    for(Type    upperBound    :    lowerBounds)    {    toBound    =    substituteTypeVariables(upperBound,    typeVarAssigns);    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
38	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType);  for(Type  upperBound  :  lowerBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  toLowerBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType);  for(Type  upperBound  :  lowerBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  toLowerBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType);  for(Type  upperBound  :  lowerBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }	  Type[]    toLowerBounds    =    getImplicitLowerBounds(wildcardType);    for(Type    upperBound    :    lowerBounds)    {    toBound    =    substituteTypeVariables(upperBound,    typeVarAssigns);    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
39	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitLowerBounds(wildcardType,  toLowerBounds);  for(Type  upperBound  :  lowerBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  toLowerBounds  =  getImplicitLowerBounds(wildcardType,  toLowerBounds);  for(Type  upperBound  :  lowerBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  toLowerBounds  =  getImplicitLowerBounds(wildcardType,  toLowerBounds);  for(Type  upperBound  :  lowerBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }	  Type[]    toLowerBounds    =    getImplicitLowerBounds(wildcardType);    for(Type    upperBound    :    lowerBounds)    {    toBound    =    substituteTypeVariables(upperBound,    typeVarAssigns);    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
40	[BUG]  [BUGGY]  Type  wildcardType  =  getImplicitUpperBounds(toBound);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type  wildcardType  =  getImplicitUpperBounds(toBound);  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type  wildcardType  =  getImplicitUpperBounds(toBound);	  Type    wildcardType    =    getImplicitUpperBounds(wildcardType);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
41	[BUG]  [BUGGY]  Type  wildcardType  =  getImplicitUpperBounds(toBound,  typeVarAssigns);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type  wildcardType  =  getImplicitUpperBounds(toBound,  typeVarAssigns);  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type  wildcardType  =  getImplicitUpperBounds(toBound,  typeVarAssigns);	  Type    wildcardType    =    getImplicitUpperBounds(wildcardType);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
42	[BUG]  [BUGGY]  Type  wildcardType  =  getImplicitUpperBounds(wildcardType,  toBound);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type  wildcardType  =  getImplicitUpperBounds(wildcardType,  toBound);  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type  wildcardType  =  getImplicitUpperBounds(wildcardType,  toBound);	  Type    wildcardType    =    getImplicitUpperBounds(wildcardType);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
43	[BUG]  [BUGGY]  Type  wildcardType  =  getImplicitFunctionBounds(wildcardType);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type  wildcardType  =  getImplicitFunctionBounds(wildcardType);  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type  wildcardType  =  getImplicitFunctionBounds(wildcardType);	  Type    wildcardType    =    getImplicitUpperBounds(wildcardType);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
44	[BUG]  [BUGGY]  Type  upperBounds  =  getImplicitUpperBounds(wildcardType,  toWildcardType,  typeVarAssigns);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type  upperBounds  =  getImplicitUpperBounds(wildcardType,  toWildcardType,  typeVarAssigns);  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type  upperBounds  =  getImplicitUpperBounds(wildcardType,  toWildcardType,  typeVarAssigns);	  Type    upperBounds    =    getImplicitUpperBounds(wildcardType,    typeVarAssigns);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
45	[BUG]  [BUGGY]  Type  upperBounds  =  getImplicitUpperBounds(toBound,  typeVarAssigns);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type  upperBounds  =  getImplicitUpperBounds(toBound,  typeVarAssigns);  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type  upperBounds  =  getImplicitUpperBounds(toBound,  typeVarAssigns);	  Type    upperBounds    =    getImplicitUpperBounds(wildcardType,    typeVarAssigns);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
46	[BUG]  [BUGGY]  Type  upperBounds  =  getImplicitUpperBounds(wildcardType,  toWildcardType);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type  upperBounds  =  getImplicitUpperBounds(wildcardType,  toWildcardType);  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type  upperBounds  =  getImplicitUpperBounds(wildcardType,  toWildcardType);	  Type    upperBounds    =    getImplicitUpperBounds(wildcardType,    typeVarAssigns);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
47	[BUG]  [BUGGY]  for(Type  bound  :  toWildcardType)  {  [CE]  for-each  not  applicable  to  expression  type  [FE]            AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  for(Type  bound  :  toWildcardType)  {  [BUGGY]      if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	for(Type  bound  :  toWildcardType)  {	  for(Type    bound    :    toLowerBounds)    {    for(Type    bound    :    toUpperBounds)    {    	non-compiled	[CE]  for-each  not  applicable  to  expression  type	7	None	replace
48	[BUG]  [BUGGY]  for(Type  bound  :  toWildcardType.upperBounds)  {  [CE]  cannot  find  symbol  upperBounds  [FE]              AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  for(Type  bound  :  toWildcardType.upperBounds)  {  [BUGGY]      if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	for(Type  bound  :  toWildcardType.upperBounds)  {	  for(Type    bound    :    toLowerBounds)    {    for(Type    bound    :    toUpperBounds)    {    	non-compiled	[CE]  cannot  find  symbol  upperBounds	7	None	replace
49	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(wildcardType);  for(Type  toBound  :  toLowerBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(wildcardType);  for(Type  toBound  :  toLowerBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  toLowerBounds  =  getImplicitUpperBounds(wildcardType);  for(Type  toBound  :  toLowerBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }	  Type[]    toLowerBounds    =    getImplicitLowerBounds(wildcardType);    for(Type    toBound    :    toUpperBounds)    {    toBound    =    substituteTypeVariables(toBound,    typeVarAssigns);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
50	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitAssignments(wildcardType);  for(Type  toBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  toLowerBounds  =  getImplicitAssignments(wildcardType);  for(Type  toBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  toLowerBounds  =  getImplicitAssignments(wildcardType);  for(Type  toBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }	  Type[]    toLowerBounds    =    getImplicitLowerBounds(wildcardType);    for(Type    toBound    :    toUpperBounds)    {    toBound    =    substituteTypeVariables(toBound,    typeVarAssigns);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
51	[BUG]  [BUGGY]  Type  upperBounds  =  getImplicitUpperBounds(toBound,  toWildcardType);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type  upperBounds  =  getImplicitUpperBounds(toBound,  toWildcardType);  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type  upperBounds  =  getImplicitUpperBounds(toBound,  toWildcardType);	  Type    upperBounds    =    getImplicitUpperBounds(toBound,    wildcardType);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
52	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType,  toWildcardType,  toLowerBounds);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType,  toWildcardType,  toLowerBounds);  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType,  toWildcardType,  toLowerBounds);	  Type[]    upperBounds    =    getImplicitUpperBounds(wildcardType,    toWildcardType);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
53	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(toWildcardType,  wildcardType);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(toWildcardType,  wildcardType);  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  upperBounds  =  getImplicitUpperBounds(toWildcardType,  wildcardType);	  Type[]    upperBounds    =    getImplicitUpperBounds(wildcardType,    toWildcardType);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
54	[BUG]  [BUGGY]  Type[]  toUpperBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType);  for(Type  upperBound  :  lowerBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  toUpperBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType);  for(Type  upperBound  :  lowerBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  toUpperBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType);  for(Type  upperBound  :  lowerBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }	  Type[]    toUpperBounds    =    getImplicitLowerBounds(wildcardType);    for(Type    upperBound    :    lowerBounds)    {    toBound    =    substituteTypeVariables(upperBound,    typeVarAssigns);    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
55	[BUG]  [BUGGY]  Type[]  toUpperBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType);  for(Type  upperBound  :  lowerBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarA  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  toUpperBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType);  for(Type  upperBound  :  lowerBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarA  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  toUpperBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType);  for(Type  upperBound  :  lowerBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarA	  Type[]    toUpperBounds    =    getImplicitLowerBounds(wildcardType);    for(Type    upperBound    :    lowerBounds)    {    toBound    =    substituteTypeVariables(upperBound,    typeVarAssigns);    }    	non-compiled	[CE]  ')'  expected	22	None	replace
56	[BUG]  [BUGGY]  Type[]  toUpperBounds  =  getImplicitToUpperBounds(wildcardType);  for(Type  upperBound  :  lowerBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  toUpperBounds  =  getImplicitToUpperBounds(wildcardType);  for(Type  upperBound  :  lowerBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  toUpperBounds  =  getImplicitToUpperBounds(wildcardType);  for(Type  upperBound  :  lowerBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }	  Type[]    toUpperBounds    =    getImplicitLowerBounds(wildcardType);    for(Type    upperBound    :    lowerBounds)    {    toBound    =    substituteTypeVariables(upperBound,    typeVarAssigns);    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
57	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType,  toLowerBounds,  typeVarAssigns);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType,  toLowerBounds,  typeVarAssigns);  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType,  toLowerBounds,  typeVarAssigns);	  Type[]    upperBounds    =    getImplicitUpperBounds(wildcardType,    toLowerBounds);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
58	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType,  toLowerBounds,  toBounds);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType,  toLowerBounds,  toBounds);  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType,  toLowerBounds,  toBounds);	  Type[]    upperBounds    =    getImplicitUpperBounds(wildcardType,    toLowerBounds);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
59	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType,  toBound,  typeVarAssigns);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType,  toBound,  typeVarAssigns);  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType,  toBound,  typeVarAssigns);	  Type[]    upperBounds    =    getImplicitUpperBounds(wildcardType,    toBound);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
60	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType,  toBound,  toLowerBounds);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType,  toBound,  toLowerBounds);  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType,  toBound,  toLowerBounds);	  Type[]    upperBounds    =    getImplicitUpperBounds(wildcardType,    toBound);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
61	[BUG]  [BUGGY]  Type  wildcardType  =  getImplicitLowerBounds(toBound);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type  wildcardType  =  getImplicitLowerBounds(toBound);  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type  wildcardType  =  getImplicitLowerBounds(toBound);	  Type    wildcardType    =    getImplicitLowerBounds(wildcardType);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
62	[BUG]  [BUGGY]  Type  wildcardType  =  getImplicitLowerBounds(toBound,  typeVarAssigns);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type  wildcardType  =  getImplicitLowerBounds(toBound,  typeVarAssigns);  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type  wildcardType  =  getImplicitLowerBounds(toBound,  typeVarAssigns);	  Type    wildcardType    =    getImplicitLowerBounds(wildcardType);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
63	[BUG]  [BUGGY]  Type  wildcardType  =  getImplicitLowerBounds(wildcardType,  toBound);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type  wildcardType  =  getImplicitLowerBounds(wildcardType,  toBound);  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type  wildcardType  =  getImplicitLowerBounds(wildcardType,  toBound);	  Type    wildcardType    =    getImplicitLowerBounds(wildcardType);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
64	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  bound  :  lowerBounds)  {  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]        AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  bound  :  lowerBounds)  {  [BUGGY]      if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  bound  :  lowerBounds)  {	  for    (Type    bound    :    lowerBounds)    {    Type[]    upperBounds    =    getImplicitLowerBounds(wildcardType);    for    (Type    bound    :    lowerBounds)    {    	non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	64	None	replace
65	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  for  (Type  bound  :  lowerBounds)  {  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]          AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  for  (Type  bound  :  lowerBounds)  {  [BUGGY]      if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  for  (Type  bound  :  lowerBounds)  {	  for    (Type    bound    :    lowerBounds)    {    Type[]    upperBounds    =    getImplicitLowerBounds(wildcardType);    for    (Type    bound    :    lowerBounds)    {    	non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	64	None	replace
66	[BUG]  [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  bound  :  lowerBounds)  {  [CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]            AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  bound  :  lowerBounds)  {  [BUGGY]      if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  bound  :  lowerBounds)  {	  for    (Type    bound    :    lowerBounds)    {    Type[]    upperBounds    =    getImplicitLowerBounds(wildcardType);    for    (Type    bound    :    lowerBounds)    {    	non-compiled	[CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	64	None	replace
67	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  bound  :  upperBounds)  {  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  bound  :  upperBounds)  {  [BUGGY]      if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  bound  :  upperBounds)  {	  for    (Type    bound    :    lowerBounds)    {    Type[]    upperBounds    =    getImplicitLowerBounds(wildcardType);    for    (Type    bound    :    lowerBounds)    {    	non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	64	None	replace
68	[BUG]  [BUGGY]  Type[]  toUpperBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  toUpperBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  toUpperBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }	  Type[]    toUpperBounds    =    getImplicitLowerBounds(wildcardType);    for(Type    upperBound    :    toUpperBounds)    {    toBound    =    substituteTypeVariables(toBound,    typeVarAssigns);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
69	[BUG]  [BUGGY]  Type[]  toUpperBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarA  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  toUpperBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarA  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  toUpperBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarA	  Type[]    toUpperBounds    =    getImplicitLowerBounds(wildcardType);    for(Type    upperBound    :    toUpperBounds)    {    toBound    =    substituteTypeVariables(toBound,    typeVarAssigns);    }    	non-compiled	[CE]  ')'  expected	13	None	replace
70	[BUG]  [BUGGY]  Type  upperBounds  =  getImplicitUpperBounds(lowerBounds);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type  upperBounds  =  getImplicitUpperBounds(lowerBounds);  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type  upperBounds  =  getImplicitUpperBounds(lowerBounds);	  Type    upperBounds    =    getImplicitUpperBounds(toBound);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
71	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(wildcardType);  for(Type  toBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(wildcardType);  for(Type  toBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  toLowerBounds  =  getImplicitUpperBounds(wildcardType);  for(Type  toBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }	  Type[]    toLowerBounds    =    getImplicitLowerBounds(wildcardType);    for(Type    upperBound    :    toUpperBounds)    {    toBound    =    substituteTypeVariables(toBound,    typeVarAssigns);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
72	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  toLowerBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  toLowerBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }	  Type[]    toLowerBounds    =    getImplicitLowerBounds(wildcardType);    for(Type    upperBound    :    toUpperBounds)    {    toBound    =    substituteTypeVariables(toBound,    typeVarAssigns);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
73	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType,  toBound);  for(Type  bound  :  toLowerBounds)  {  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType,  toBound);  for(Type  bound  :  toLowerBounds)  {  [BUGGY]      if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType,  toBound);  for(Type  bound  :  toLowerBounds)  {	  for(Type    bound    :    toLowerBounds)    {    Type[]    upperBounds    =    getImplicitLowerBounds(wildcardType,    toBound);    for(Type    bound    :    toLowerBounds)    {    	non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	81	None	replace
74	[BUG]  [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType,  toBound);  for(Type  bound  :  toLowerBounds)  {  [CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType,  toBound);  for(Type  bound  :  toLowerBounds)  {  [BUGGY]      if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType,  toBound);  for(Type  bound  :  toLowerBounds)  {	  for(Type    bound    :    toLowerBounds)    {    Type[]    upperBounds    =    getImplicitLowerBounds(wildcardType,    toBound);    for(Type    bound    :    toLowerBounds)    {    	non-compiled	[CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	81	None	replace
75	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType,  toBound);  for(Type  bound  :  toLowerBounds)  {  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType,  toBound);  for(Type  bound  :  toLowerBounds)  {  [BUGGY]      if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType,  toBound);  for(Type  bound  :  toLowerBounds)  {	  for(Type    bound    :    toLowerBounds)    {    Type[]    upperBounds    =    getImplicitLowerBounds(wildcardType,    toBound);    for(Type    bound    :    toLowerBounds)    {    	non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	81	None	replace
76	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType,  toBound);  for(Type  bound  :  toUpperBounds)  {  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                    AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType,  toBound);  for(Type  bound  :  toUpperBounds)  {  [BUGGY]      if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType,  toBound);  for(Type  bound  :  toUpperBounds)  {	  for(Type    bound    :    toLowerBounds)    {    Type[]    upperBounds    =    getImplicitLowerBounds(wildcardType,    toBound);    for(Type    bound    :    toLowerBounds)    {    	non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	81	None	replace
77	[BUG]  [BUGGY]  for(Type  bound  :  toUpperBounds)  {  for(Type  bound  :  toUpperBounds)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  for(Type  bound  :  toUpperBounds)  {  for(Type  bound  :  toUpperBounds)  {  [BUGGY]      if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	for(Type    bound    :    toUpperBounds)    {    for(Type  bound  :  toUpperBounds)  {	  	non-compiled	[CE]  illegal  start  of  expression	72	None	add
78	[BUG]  [BUGGY]  for(Type  bound  :  toUpperBounds)  {  For(Type  bound  :  toUpperBounds)  {  [CE]  ')'  expected  [FE]      AssertionError    [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  for(Type  bound  :  toUpperBounds)  {  For(Type  bound  :  toUpperBounds)  {  [BUGGY]      if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	for(Type    bound    :    toUpperBounds)    {    For(Type  bound  :  toUpperBounds)  {	  	non-compiled	[CE]  ')'  expected	72	None	add
79	[BUG]  [BUGGY]  for(Type  bound  :  toUpperBounds)  {  for(Type  toBound  :  toUpperBounds)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  for(Type  bound  :  toUpperBounds)  {  for(Type  toBound  :  toUpperBounds)  {  [BUGGY]      if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	for(Type    bound    :    toUpperBounds)    {    for(Type  toBound  :  toUpperBounds)  {	  	non-compiled	[CE]  illegal  start  of  expression	72	None	add
80	[BUG]  [BUGGY]  for(Type  bound  :  toUpperBounds)  {  for(Type  bound  =  toUpperBounds)  {  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  for(Type  bound  :  toUpperBounds)  {  for(Type  bound  =  toUpperBounds)  {  [BUGGY]      if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	for(Type    bound    :    toUpperBounds)    {    for(Type  bound  =  toUpperBounds)  {	  	non-compiled	[CE]  ';'  expected	72	None	add
81	[BUG]  [BUGGY]  for(Type  bound  :  toUpperBounds)  {  Type  bound  :  toUpperBounds)  {  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  for(Type  bound  :  toUpperBounds)  {  Type  bound  :  toUpperBounds)  {  [BUGGY]      if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	for(Type    bound    :    toUpperBounds)    {    Type  bound  :  toUpperBounds)  {	  	non-compiled	[CE]  ';'  expected	72	None	add
82	[BUG]  [BUGGY]  Type[]  lowerBounds  =  toBound.getImplicitLowerBounds(wildcardType);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  lowerBounds  =  toBound.getImplicitLowerBounds(wildcardType);  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  lowerBounds  =  toBound.getImplicitLowerBounds(wildcardType);	  Type[]    lowerBounds    =    toBound.getImplicitLowerBounds();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
83	[BUG]  [BUGGY]  Type[]  lowerBounds  =  toBound.getImplicitUpperBounds();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  lowerBounds  =  toBound.getImplicitUpperBounds();  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  lowerBounds  =  toBound.getImplicitUpperBounds();	  Type[]    lowerBounds    =    toBound.getImplicitLowerBounds();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
84	[BUG]  [BUGGY]  Type[]  lowerBounds  =  toBound.getWelcomeImplicitLowerBounds();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  lowerBounds  =  toBound.getWelcomeImplicitLowerBounds();  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  lowerBounds  =  toBound.getWelcomeImplicitLowerBounds();	  Type[]    lowerBounds    =    toBound.getImplicitLowerBounds();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
85	[BUG]  [BUGGY]  Type  upperBounds  =  getImplicitLowerBounds(toBound,  typeVarAssigns);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type  upperBounds  =  getImplicitLowerBounds(toBound,  typeVarAssigns);  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type  upperBounds  =  getImplicitLowerBounds(toBound,  typeVarAssigns);	  Type    upperBounds    =    getImplicitLowerBounds(toBound,    wildcardType);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
86	[BUG]  [BUGGY]  Type  upperBounds  =  getImplicitLowerBounds(toBound,  toWildcardType);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type  upperBounds  =  getImplicitLowerBounds(toBound,  toWildcardType);  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type  upperBounds  =  getImplicitLowerBounds(toBound,  toWildcardType);	  Type    upperBounds    =    getImplicitLowerBounds(toBound,    wildcardType);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
87	[BUG]  [BUGGY]  Type[]  toBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  toBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  toBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }	  Type[]    toBounds    =    getImplicitLowerBounds(wildcardType);    for(Type    upperBound    :    toUpperBounds)    {    toBound    =    substituteTypeVariables(upperBound,    typeVarAssigns);    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
88	[BUG]  [BUGGY]  Type[]  toBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarA  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  toBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarA  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  toBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarA	  Type[]    toBounds    =    getImplicitLowerBounds(wildcardType);    for(Type    upperBound    :    toUpperBounds)    {    toBound    =    substituteTypeVariables(upperBound,    typeVarAssigns);    }    	non-compiled	[CE]  ')'  expected	50	None	replace
89	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(type,  toBound);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(type,  toBound);  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  upperBounds  =  getImplicitUpperBounds(type,  toBound);	  Type[]    upperBounds    =    getImplicitLowerBounds(type,    toBound);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
90	[BUG]  [BUGGY]  For(Type  bound  :  toLowerBounds)  {  [CE]  ')'  expected  [FE]          AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  For(Type  bound  :  toLowerBounds)  {  [BUGGY]      if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	For(Type  bound  :  toLowerBounds)  {	  for(Type    bound    :    toLowerBounds)    {    For(Type    bound    :    toLowerBounds)    {    	non-compiled	[CE]  ')'  expected	6	None	replace
91	[BUG]  [BUGGY]  For(Type  bound  :  lowerBounds)  {  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  For(Type  bound  :  lowerBounds)  {  [BUGGY]      if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	For(Type  bound  :  lowerBounds)  {	  for(Type    bound    :    toLowerBounds)    {    For(Type    bound    :    toLowerBounds)    {    	non-compiled	[CE]  ')'  expected	6	None	replace
92	[BUG]  [BUGGY]  for(Type  toBound  :  toLowerBounds,  upperBounds)  {  [CE]  ')'  expected  [FE]          AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  for(Type  toBound  :  toLowerBounds,  upperBounds)  {  [BUGGY]      if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	for(Type  toBound  :  toLowerBounds,  upperBounds)  {	  for(Type    bound    :    toLowerBounds,    lowerBounds)    {    	non-compiled	[CE]  ')'  expected	44	None	replace
93	[BUG]  [BUGGY]  for(Type  bound  :  toBound,  lowerBounds)  {  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  for(Type  bound  :  toBound,  lowerBounds)  {  [BUGGY]      if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	for(Type  bound  :  toBound,  lowerBounds)  {	  for(Type    bound    :    toLowerBounds,    lowerBounds)    {    	non-compiled	[CE]  ')'  expected	44	None	replace
94	[BUG]  [BUGGY]  Type[]  toUpperBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarA  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  toUpperBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarA  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  toUpperBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarA	  Type[]    toUpperBounds    =    getImplicitLowerBounds(wildcardType);    for(Type    upperBound    :    toUpperBounds)    {    toBound    =    substituteTypeVariables(upperBound,    typeVarAssigns);    }    	non-compiled	[CE]  ')'  expected	2	None	replace
95	[BUG]  [BUGGY]  Type[]  toUpperBounds  =  getImplicitAssignments(wildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  toUpperBounds  =  getImplicitAssignments(wildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  toUpperBounds  =  getImplicitAssignments(wildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }	  Type[]    toUpperBounds    =    getImplicitLowerBounds(wildcardType);    for(Type    upperBound    :    toUpperBounds)    {    toBound    =    substituteTypeVariables(upperBound,    typeVarAssigns);    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
96	[BUG]  [BUGGY]  Type[]  upperBounds  =  toWildcardType.getImplicitLowerBounds();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  upperBounds  =  toWildcardType.getImplicitLowerBounds();  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  upperBounds  =  toWildcardType.getImplicitLowerBounds();	  Type[]    upperBounds    =    wildcardType.getImplicitLowerBounds();    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
97	[BUG]  [BUGGY]  Type[]  upperBounds  =  toBound,  wildcardType.getImplicitLowerBounds();  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  upperBounds  =  toBound,  wildcardType.getImplicitLowerBounds();  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  upperBounds  =  toBound,  wildcardType.getImplicitLowerBounds();	  Type[]    upperBounds    =    wildcardType.getImplicitLowerBounds();    	non-compiled	[CE]  ';'  expected	76	None	replace
98	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  for  (Type  bound  :  upperBounds)  {  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]          AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  for  (Type  bound  :  upperBounds)  {  [BUGGY]      if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  for  (Type  bound  :  upperBounds)  {	  for    (Type    bound    :    lowerBounds)    {    Type[]    upperBounds    =    getImplicitUpperBounds(wildcardType);    for    (Type    bound    :    lowerBounds)    {    	non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	65	None	replace
99	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(wildcardType);  for  (Type  bound  :  toLowerBounds)  {  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]            AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(wildcardType);  for  (Type  bound  :  toLowerBounds)  {  [BUGGY]      if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  toLowerBounds  =  getImplicitUpperBounds(wildcardType);  for  (Type  bound  :  toLowerBounds)  {	  for    (Type    bound    :    lowerBounds)    {    Type[]    upperBounds    =    getImplicitUpperBounds(wildcardType);    for    (Type    bound    :    lowerBounds)    {    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	65	None	replace
100	[BUG]  [BUGGY]  Type[]  lowerBounds  =  getImplicitUpperBounds(wildcardType);  for  (Type  bound  :  lowerBounds)  {  [CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  lowerBounds  =  getImplicitUpperBounds(wildcardType);  for  (Type  bound  :  lowerBounds)  {  [BUGGY]      if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  lowerBounds  =  getImplicitUpperBounds(wildcardType);  for  (Type  bound  :  lowerBounds)  {	  for    (Type    bound    :    lowerBounds)    {    Type[]    upperBounds    =    getImplicitUpperBounds(wildcardType);    for    (Type    bound    :    lowerBounds)    {    	non-compiled	[CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	65	None	replace
101	[BUG]  [BUGGY]  Type[]  lowerBounds  =  getImplicitUpperBounds(wildcardType,  toWildcardType);  for(Type  toBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarA  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  lowerBounds  =  getImplicitUpperBounds(wildcardType,  toWildcardType);  for(Type  toBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarA  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  lowerBounds  =  getImplicitUpperBounds(wildcardType,  toWildcardType);  for(Type  toBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarA	  Type[]    lowerBounds    =    getImplicitLowerBounds(wildcardType,    toWildcardType);    for(Type    toBound    :    toUpperBounds)    {    toBound    =    substituteTypeVariables(toBound,    typeVarA    	non-compiled	[CE]  ')'  expected	26	None	replace
102	[BUG]  [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType);  for(Type  toBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVar  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType);  for(Type  toBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVar  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType);  for(Type  toBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVar	  Type[]    lowerBounds    =    getImplicitLowerBounds(wildcardType,    toWildcardType);    for(Type    toBound    :    toUpperBounds)    {    toBound    =    substituteTypeVariables(toBound,    typeVarA    	non-compiled	[CE]  ')'  expected	26	None	replace
103	[BUG]  [BUGGY]  Type[]  toUpperBounds  =  getImplicitUpperBounds(wildcardType,  toBound);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  toUpperBounds  =  getImplicitUpperBounds(wildcardType,  toBound);  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  toUpperBounds  =  getImplicitUpperBounds(wildcardType,  toBound);	  Type[]    toUpperBounds    =    getImplicitLowerBounds(wildcardType,    toBound);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
104	[BUG]  [BUGGY]  Type[]  toUpperBounds  =  getImplicitLowerBounds(toBound,  wildcardType);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  toUpperBounds  =  getImplicitLowerBounds(toBound,  wildcardType);  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  toUpperBounds  =  getImplicitLowerBounds(toBound,  wildcardType);	  Type[]    toUpperBounds    =    getImplicitLowerBounds(wildcardType,    toBound);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
105	[BUG]  [BUGGY]  Type[]  toUpperBounds  =  getImplicitLowerBounds(wildcardType,  toBound,  typeVarAssigns);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  toUpperBounds  =  getImplicitLowerBounds(wildcardType,  toBound,  typeVarAssigns);  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  toUpperBounds  =  getImplicitLowerBounds(wildcardType,  toBound,  typeVarAssigns);	  Type[]    toUpperBounds    =    getImplicitLowerBounds(wildcardType,    toBound);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
106	[BUG]  [BUGGY]  for(Type  bound  :  lowerBounds,  toLowerBounds)  {  [CE]  ')'  expected  [FE]          AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  for(Type  bound  :  lowerBounds,  toLowerBounds)  {  [BUGGY]      if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	for(Type  bound  :  lowerBounds,  toLowerBounds)  {	  for(Type    bound    :    toLowerBounds,    upperBounds)    {    	non-compiled	[CE]  ')'  expected	74	None	replace
107	[BUG]  [BUGGY]  for(Type  bound  :  toLowerBounds,  toUpperBounds)  {  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  for(Type  bound  :  toLowerBounds,  toUpperBounds)  {  [BUGGY]      if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	for(Type  bound  :  toLowerBounds,  toUpperBounds)  {	  for(Type    bound    :    toLowerBounds,    upperBounds)    {    	non-compiled	[CE]  ')'  expected	74	None	replace
108	[BUG]  [BUGGY]  for  (Type  toBound  :  lowBounds)  {  [CE]  variable  toBound  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]          AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  for  (Type  toBound  :  lowBounds)  {  [BUGGY]      if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	for  (Type  toBound  :  lowBounds)  {	  for    (Type    bound    :    lowerBounds)    {    for    (Type    bound    :    lowBounds)    {    	non-compiled	[CE]  variable  toBound  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	36	None	replace
109	[BUG]  [BUGGY]  Type  upperBounds  =  getImplicitUpperBounds(wildcardType,  toBound,  typeVarAssigns);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type  upperBounds  =  getImplicitUpperBounds(wildcardType,  toBound,  typeVarAssigns);  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type  upperBounds  =  getImplicitUpperBounds(wildcardType,  toBound,  typeVarAssigns);	  Type    upperBounds    =    getImplicitUpperBounds(wildcardType,    toBound);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
110	[BUG]  [BUGGY]  for(Type  bound  :  lowerBounds)  {  Type  bound  =  toLowerBounds;  }  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  for(Type  bound  :  lowerBounds)  {  Type  bound  =  toLowerBounds;  }  [BUGGY]      if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	for(Type  bound  :  lowerBounds)  {  Type  bound  =  toLowerBounds;  }	  for(Type    bound    :    toLowerBounds)    {    Type    bound    =    toLowerBounds;    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
111	[BUG]  [BUGGY]  for(Type  bound  :  lowerBounds)  {  Type  bound  =  toLowerBounds;  [CE]  variable  bound  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]          AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  for(Type  bound  :  lowerBounds)  {  Type  bound  =  toLowerBounds;  [BUGGY]      if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	for(Type  bound  :  lowerBounds)  {  Type  bound  =  toLowerBounds;	  for(Type    bound    :    toLowerBounds)    {    Type    bound    =    toLowerBounds;    	non-compiled	[CE]  variable  bound  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	60	None	replace
112	[BUG]  [BUGGY]  for(Type  toBound  :  toUpperBounds)  {  Type  bound  =  toLowerBounds;  [CE]  variable  toBound  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]            AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  for(Type  toBound  :  toUpperBounds)  {  Type  bound  =  toLowerBounds;  [BUGGY]      if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	for(Type  toBound  :  toUpperBounds)  {  Type  bound  =  toLowerBounds;	  for(Type    bound    :    toLowerBounds)    {    Type    bound    =    toLowerBounds;    	non-compiled	[CE]  variable  toBound  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	60	None	replace
113	[BUG]  [BUGGY]  for(Type  toBound  :  toLowerBounds)  {  Type  bound  =  toUpperBounds;  [CE]  variable  toBound  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  for(Type  toBound  :  toLowerBounds)  {  Type  bound  =  toUpperBounds;  [BUGGY]      if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	for(Type  toBound  :  toLowerBounds)  {  Type  bound  =  toUpperBounds;	  for(Type    bound    :    toLowerBounds)    {    Type    bound    =    toLowerBounds;    	non-compiled	[CE]  variable  toBound  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	60	None	replace
114	[BUG]  [BUGGY]  Type[]  toUpperBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType);  for(Type  toBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  toUpperBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType);  for(Type  toBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  toUpperBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType);  for(Type  toBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }	  Type[]    toUpperBounds    =    getImplicitLowerBounds(wildcardType);    for(Type    toBound    :    toUpperBounds)    {    toBound    =    substituteTypeVariables(upperBound,    typeVarAssigns);    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
115	[BUG]  [BUGGY]  Type[]  toUpperBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType);  for(Type  toBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarA  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  toUpperBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType);  for(Type  toBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarA  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  toUpperBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType);  for(Type  toBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarA	  Type[]    toUpperBounds    =    getImplicitLowerBounds(wildcardType);    for(Type    toBound    :    toUpperBounds)    {    toBound    =    substituteTypeVariables(upperBound,    typeVarAssigns);    }    	non-compiled	[CE]  ')'  expected	23	None	replace
116	[BUG]  [BUGGY]  Type[]  toUpperBounds  =  getImplicitAssignments(wildcardType);  for(Type  toBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  toUpperBounds  =  getImplicitAssignments(wildcardType);  for(Type  toBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  toUpperBounds  =  getImplicitAssignments(wildcardType);  for(Type  toBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }	  Type[]    toUpperBounds    =    getImplicitLowerBounds(wildcardType);    for(Type    toBound    :    toUpperBounds)    {    toBound    =    substituteTypeVariables(upperBound,    typeVarAssigns);    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
117	[BUG]  [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  if(lowerBounds!=  null)  {  [CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]            AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  if(lowerBounds!=  null)  {  [BUGGY]      if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  if(lowerBounds!=  null)  {	  for(Type    bound    :    toLowerBounds)    {    Type[]    upperBounds    =    getImplicitLowerBounds(wildcardType);    if(toLowerBounds!=    null)    {    for(Type    bound    :    toLowerBounds)    {    	non-compiled	[CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	80	None	replace
118	[BUG]  [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  if(upperBounds!=  null)  {  [CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  if(upperBounds!=  null)  {  [BUGGY]      if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  if(upperBounds!=  null)  {	  for(Type    bound    :    toLowerBounds)    {    Type[]    upperBounds    =    getImplicitLowerBounds(wildcardType);    if(toLowerBounds!=    null)    {    for(Type    bound    :    toLowerBounds)    {    	non-compiled	[CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	80	None	replace
119	[BUG]  [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  if(toLowerBounds!=  null)  {  [CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  if(toLowerBounds!=  null)  {  [BUGGY]      if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  if(toLowerBounds!=  null)  {	  for(Type    bound    :    toLowerBounds)    {    Type[]    upperBounds    =    getImplicitLowerBounds(wildcardType);    if(toLowerBounds!=    null)    {    for(Type    bound    :    toLowerBounds)    {    	non-compiled	[CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	80	None	replace
120	[BUG]  [BUGGY]  Type[]  wildcardType  =  getImplicitLowerBounds(wildcardType,  toWildcardType);  for(Type  toBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  wildcardType  =  getImplicitLowerBounds(wildcardType,  toWildcardType);  for(Type  toBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  wildcardType  =  getImplicitLowerBounds(wildcardType,  toWildcardType);  for(Type  toBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }	  Type[]    wildcardType    =    getImplicitLowerBounds(wildcardType);    for(Type    toBound    :    toUpperBounds)    {    toBound    =    substituteTypeVariables(toBound,    typeVarAssigns);    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
121	[BUG]  [BUGGY]  Type[]  wildcardType  =  getImplicitLowerBounds(wildcardType);  for(Type  toBound  :  toWildcardType)  {  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  wildcardType  =  getImplicitLowerBounds(wildcardType);  for(Type  toBound  :  toWildcardType)  {  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  wildcardType  =  getImplicitLowerBounds(wildcardType);  for(Type  toBound  :  toWildcardType)  {  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }	  Type[]    wildcardType    =    getImplicitLowerBounds(wildcardType);    for(Type    toBound    :    toUpperBounds)    {    toBound    =    substituteTypeVariables(toBound,    typeVarAssigns);    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
122	[BUG]  [BUGGY]  Type[]  toWildcardType  =  getImplicitLowerBounds(wildcardType);  for(Type  toBound  :  toWildcardType)  {  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  toWildcardType  =  getImplicitLowerBounds(wildcardType);  for(Type  toBound  :  toWildcardType)  {  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  toWildcardType  =  getImplicitLowerBounds(wildcardType);  for(Type  toBound  :  toWildcardType)  {  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }	  Type[]    wildcardType    =    getImplicitLowerBounds(wildcardType);    for(Type    toBound    :    toUpperBounds)    {    toBound    =    substituteTypeVariables(toBound,    typeVarAssigns);    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
123	[BUG]  [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(toBound,  typeVarAssigns);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(toBound,  typeVarAssigns);  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  lowerBounds  =  getImplicitLowerBounds(toBound,  typeVarAssigns);	  Type[]    lowerBounds    =    getImplicitLowerBounds(toBound,    wildcardType);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
124	[BUG]  [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(toBound,  toWildcardType);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(toBound,  toWildcardType);  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  lowerBounds  =  getImplicitLowerBounds(toBound,  toWildcardType);	  Type[]    lowerBounds    =    getImplicitLowerBounds(toBound,    wildcardType);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
125	[BUG]  [BUGGY]  for(Type  toLowerBound  :  toUpperBounds)  {  [CE]  cannot  find  symbol  bound  [FE]              AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  for(Type  toLowerBound  :  toUpperBounds)  {  [BUGGY]      if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	for(Type  toLowerBound  :  toUpperBounds)  {	  for(Type    bound    :    toLowerBounds)    {    for(Type    bound    =    toLowerBounds)    {    	non-compiled	[CE]  cannot  find  symbol  bound	8	None	replace
126	[BUG]  [BUGGY]  Type[]  toUpperBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType);  for(Type  toBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  toUpperBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType);  for(Type  toBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  toUpperBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType);  for(Type  toBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }	  Type[]    toUpperBounds    =    getImplicitLowerBounds(wildcardType);    for(Type    toBound    :    toUpperBounds)    {    toBound    =    substituteTypeVariables(toBound,    typeVarAssigns);    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
127	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  toLowerBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  toLowerBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }	  Type[]    toLowerBounds    =    getImplicitLowerBounds(wildcardType);    for(Type    upperBound    :    toUpperBounds)    {    toBound    =    substituteTypeVariables(upperBound,    typeVarAssigns);    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
128	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(wildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(wildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  toLowerBounds  =  getImplicitUpperBounds(wildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }	  Type[]    toLowerBounds    =    getImplicitLowerBounds(wildcardType);    for(Type    upperBound    :    toUpperBounds)    {    toBound    =    substituteTypeVariables(upperBound,    typeVarAssigns);    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
129	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarA  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  toLowerBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarA  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  toLowerBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarA	  Type[]    toLowerBounds    =    getImplicitLowerBounds(wildcardType);    for(Type    upperBound    :    toUpperBounds)    {    toBound    =    substituteTypeVariables(upperBound,    typeVarAssigns);    }    	non-compiled	[CE]  ')'  expected	1	None	replace
130	[BUG]  [BUGGY]  for(Type  bound  :  toWildcardType.toLowerBounds)  {  [CE]  cannot  find  symbol  toLowerBounds  [FE]                AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  for(Type  bound  :  toWildcardType.toLowerBounds)  {  [BUGGY]      if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	for(Type  bound  :  toWildcardType.toLowerBounds)  {	  for(Type    bound    :    toLowerBounds)    {    Type    bound    :    toLowerBounds)    {    	non-compiled	[CE]  cannot  find  symbol  toLowerBounds	9	None	replace
131	[BUG]  [BUGGY]  Type[]  toUpperBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType);  for(Type  upperBound  :  lowerBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  toUpperBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType);  for(Type  upperBound  :  lowerBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  toUpperBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType);  for(Type  upperBound  :  lowerBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }	  Type[]    toUpperBounds    =    getImplicitLowerBounds(wildcardType);    for(Type    upperBound    :    lowerBounds)    {    toBound    =    substituteTypeVariables(toBound,    typeVarAssigns);    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
132	[BUG]  [BUGGY]  Type[]  toUpperBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType);  for(Type  upperBound  :  lowerBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarA  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  toUpperBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType);  for(Type  upperBound  :  lowerBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarA  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  toUpperBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType);  for(Type  upperBound  :  lowerBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarA	  Type[]    toUpperBounds    =    getImplicitLowerBounds(wildcardType);    for(Type    upperBound    :    lowerBounds)    {    toBound    =    substituteTypeVariables(toBound,    typeVarAssigns);    }    	non-compiled	[CE]  ')'  expected	58	None	replace
133	[BUG]  [BUGGY]  Type[]  toUpperBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  toUpperBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType);  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  toUpperBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType);	  Type[]    toUpperBounds    =    getImplicitLowerBounds(wildcardType);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
134	[BUG]  [BUGGY]  Type[]  toUpperBounds  =  getImplicitUpperBounds(wildcardType);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  toUpperBounds  =  getImplicitUpperBounds(wildcardType);  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  toUpperBounds  =  getImplicitUpperBounds(wildcardType);	  Type[]    toUpperBounds    =    getImplicitLowerBounds(wildcardType);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
135	[BUG]  [BUGGY]  Type[]  toUpperBounds  =  getImplicitLowerBounds(toBound);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  toUpperBounds  =  getImplicitLowerBounds(toBound);  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  toUpperBounds  =  getImplicitLowerBounds(toBound);	  Type[]    toUpperBounds    =    getImplicitLowerBounds(wildcardType);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
136	[BUG]  [BUGGY]  Type[]  toUpperBounds  =  getImplicitToUpperBounds(wildcardType);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  toUpperBounds  =  getImplicitToUpperBounds(wildcardType);  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  toUpperBounds  =  getImplicitToUpperBounds(wildcardType);	  Type[]    toUpperBounds    =    getImplicitLowerBounds(wildcardType);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
137	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitLeowerBounds(wildcardType);  for  (Type  bound  :  lowerBounds)  {  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]            AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  upperBounds  =  getImplicitLeowerBounds(wildcardType);  for  (Type  bound  :  lowerBounds)  {  [BUGGY]      if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  upperBounds  =  getImplicitLeowerBounds(wildcardType);  for  (Type  bound  :  lowerBounds)  {	  for    (Type    bound    :    lowerBounds)    {    Type[]    upperBounds    =    getImplicitLeowerBounds(wildcardType);    for    (Type    bound    :    lowerBounds)    {    	non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	66	None	replace
138	[BUG]  [BUGGY]  Type[]  lowerBounds  =  getImplicitLeowerBounds(wildcardType);  for  (Type  bound  :  lowerBounds)  {  [CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  lowerBounds  =  getImplicitLeowerBounds(wildcardType);  for  (Type  bound  :  lowerBounds)  {  [BUGGY]      if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  lowerBounds  =  getImplicitLeowerBounds(wildcardType);  for  (Type  bound  :  lowerBounds)  {	  for    (Type    bound    :    lowerBounds)    {    Type[]    upperBounds    =    getImplicitLeowerBounds(wildcardType);    for    (Type    bound    :    lowerBounds)    {    	non-compiled	[CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	66	None	replace
139	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitLeowerBounds(wildcardType);  for  (Type  bound  :  upperBounds)  {  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  upperBounds  =  getImplicitLeowerBounds(wildcardType);  for  (Type  bound  :  upperBounds)  {  [BUGGY]      if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  upperBounds  =  getImplicitLeowerBounds(wildcardType);  for  (Type  bound  :  upperBounds)  {	  for    (Type    bound    :    lowerBounds)    {    Type[]    upperBounds    =    getImplicitLeowerBounds(wildcardType);    for    (Type    bound    :    lowerBounds)    {    	non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	66	None	replace
140	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitLeowerBounds(wildcardType);  for  (Type  toBound  :  lowerBounds)  {  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  upperBounds  =  getImplicitLeowerBounds(wildcardType);  for  (Type  toBound  :  lowerBounds)  {  [BUGGY]      if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  upperBounds  =  getImplicitLeowerBounds(wildcardType);  for  (Type  toBound  :  lowerBounds)  {	  for    (Type    bound    :    lowerBounds)    {    Type[]    upperBounds    =    getImplicitLeowerBounds(wildcardType);    for    (Type    bound    :    lowerBounds)    {    	non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	66	None	replace
141	[BUG]  [BUGGY]  Type[]  wildcardType  =  getImplicitLowerBounds(wildcardType,  toWildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  wildcardType  =  getImplicitLowerBounds(wildcardType,  toWildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  wildcardType  =  getImplicitLowerBounds(wildcardType,  toWildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }	  Type[]    wildcardType    =    getImplicitLowerBounds(wildcardType);    for(Type    upperBound    :    toUpperBounds)    {    toBound    =    substituteTypeVariables(upperBound,    typeVarAssigns);    }    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
142	[BUG]  [BUGGY]  Type[]  toWildcardType  =  getImplicitLowerBounds(wildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  toWildcardType  =  getImplicitLowerBounds(wildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  toWildcardType  =  getImplicitLowerBounds(wildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }	  Type[]    wildcardType    =    getImplicitLowerBounds(wildcardType);    for(Type    upperBound    :    toUpperBounds)    {    toBound    =    substituteTypeVariables(upperBound,    typeVarAssigns);    }    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
143	[BUG]  [BUGGY]  Type[]  wildcardType  =  getImplicitLowerBounds(wildcardType);  for(Type  toBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  wildcardType  =  getImplicitLowerBounds(wildcardType);  for(Type  toBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  wildcardType  =  getImplicitLowerBounds(wildcardType);  for(Type  toBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }	  Type[]    wildcardType    =    getImplicitLowerBounds(wildcardType);    for(Type    upperBound    :    toUpperBounds)    {    toBound    =    substituteTypeVariables(upperBound,    typeVarAssigns);    }    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
144	[BUG]  [BUGGY]  Type[]  toWildcardType  =  getImplicitLowerBounds(wildcardType);  for(Type  upperBound  :  toWildcardType)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  toWildcardType  =  getImplicitLowerBounds(wildcardType);  for(Type  upperBound  :  toWildcardType)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  toWildcardType  =  getImplicitLowerBounds(wildcardType);  for(Type  upperBound  :  toWildcardType)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }	  Type[]    wildcardType    =    getImplicitLowerBounds(wildcardType);    for(Type    upperBound    :    toUpperBounds)    {    toBound    =    substituteTypeVariables(upperBound,    typeVarAssigns);    }    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
145	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType,  toBound,  typeVarAssigns,  toUpperBounds);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType,  toBound,  typeVarAssigns,  toUpperBounds);  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType,  toBound,  typeVarAssigns,  toUpperBounds);	  Type[]    upperBounds    =    getImplicitLowerBounds(wildcardType,    toBound,    typeVarAssigns);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
146	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(toBound,  typeVarAssigns);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(toBound,  typeVarAssigns);  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  upperBounds  =  getImplicitLowerBounds(toBound,  typeVarAssigns);	  Type[]    upperBounds    =    getImplicitLowerBounds(wildcardType,    toBound,    typeVarAssigns);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
147	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(toBound,  toWildcardType);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(toBound,  toWildcardType);  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  upperBounds  =  getImplicitUpperBounds(toBound,  toWildcardType);	  Type[]    upperBounds    =    getImplicitUpperBounds(toBound,    wildcardType);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
148	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(wildcardType);  for(Type  upperBound  :  lowerBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(wildcardType);  for(Type  upperBound  :  lowerBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  toLowerBounds  =  getImplicitUpperBounds(wildcardType);  for(Type  upperBound  :  lowerBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }	  Type[]    toLowerBounds    =    getImplicitLowerBounds(wildcardType);    for(Type    upperBound    :    lowerBounds)    {    toBound    =    substituteTypeVariables(toBound,    typeVarAssigns);    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
149	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType);  for(Type  upperBound  :  lowerBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  toLowerBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType);  for(Type  upperBound  :  lowerBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  toLowerBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType);  for(Type  upperBound  :  lowerBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }	  Type[]    toLowerBounds    =    getImplicitLowerBounds(wildcardType);    for(Type    upperBound    :    lowerBounds)    {    toBound    =    substituteTypeVariables(toBound,    typeVarAssigns);    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
150	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitLowerBounds(wildcardType,  toLowerBounds);  for(Type  upperBound  :  lowerBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  toLowerBounds  =  getImplicitLowerBounds(wildcardType,  toLowerBounds);  for(Type  upperBound  :  lowerBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  toLowerBounds  =  getImplicitLowerBounds(wildcardType,  toLowerBounds);  for(Type  upperBound  :  lowerBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }	  Type[]    toLowerBounds    =    getImplicitLowerBounds(wildcardType);    for(Type    upperBound    :    lowerBounds)    {    toBound    =    substituteTypeVariables(toBound,    typeVarAssigns);    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
151	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType);  for(Type  bound  :  toLowerBounds)  {  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]        AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType);  for(Type  bound  :  toLowerBounds)  {  [BUGGY]      if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType);  for(Type  bound  :  toLowerBounds)  {	  for(Type    bound    :    toLowerBounds)    {    Type[]    upperBounds    =    getImplicitLowerBounds(wildcardType);    for(Type    bound    :    toLowerBounds)    {    	non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	78	None	replace
152	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  for(Type  bound  :  toLowerBounds)  {  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]          AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  for(Type  bound  :  toLowerBounds)  {  [BUGGY]      if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  for(Type  bound  :  toLowerBounds)  {	  for(Type    bound    :    toLowerBounds)    {    Type[]    upperBounds    =    getImplicitLowerBounds(wildcardType);    for(Type    bound    :    toLowerBounds)    {    	non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	78	None	replace
153	[BUG]  [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for(Type  bound  :  toLowerBounds)  {  [CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]            AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for(Type  bound  :  toLowerBounds)  {  [BUGGY]      if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for(Type  bound  :  toLowerBounds)  {	  for(Type    bound    :    toLowerBounds)    {    Type[]    upperBounds    =    getImplicitLowerBounds(wildcardType);    for(Type    bound    :    toLowerBounds)    {    	non-compiled	[CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	78	None	replace
154	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType);  for(Type  bound  :  toUpperBounds)  {  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType);  for(Type  bound  :  toUpperBounds)  {  [BUGGY]      if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType);  for(Type  bound  :  toUpperBounds)  {	  for(Type    bound    :    toLowerBounds)    {    Type[]    upperBounds    =    getImplicitLowerBounds(wildcardType);    for(Type    bound    :    toLowerBounds)    {    	non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	78	None	replace
155	[BUG]  [BUGGY]  Type[]  upperBounds  =  toBound,  typeVarAssigns.getImplicitLowerBounds();  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  upperBounds  =  toBound,  typeVarAssigns.getImplicitLowerBounds();  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  upperBounds  =  toBound,  typeVarAssigns.getImplicitLowerBounds();	  Type[]    upperBounds    =    typeVarAssigns.getImplicitLowerBounds();    	non-compiled	[CE]  ';'  expected	63	None	replace
156	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(wildcardType);  for(Type  toBound  :  toLowerBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(wildcardType);  for(Type  toBound  :  toLowerBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  toLowerBounds  =  getImplicitUpperBounds(wildcardType);  for(Type  toBound  :  toLowerBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns	  Type[]    toLowerBounds    =    getImplicitLowerBounds(wildcardType);    for(Type    upperBound    :    toUpperBounds)    {    toBound    =    substituteTypeVariables(upperBound,    typeVarAssigns    	non-compiled	[CE]  ')'  expected	77	None	replace
157	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(wildcardType);  for(Type  upperBound  :  toLowerBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(wildcardType);  for(Type  upperBound  :  toLowerBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  toLowerBounds  =  getImplicitUpperBounds(wildcardType);  for(Type  upperBound  :  toLowerBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns	  Type[]    toLowerBounds    =    getImplicitLowerBounds(wildcardType);    for(Type    upperBound    :    toUpperBounds)    {    toBound    =    substituteTypeVariables(upperBound,    typeVarAssigns    	non-compiled	[CE]  ')'  expected	77	None	replace
158	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitAssigns(wildcardType);  for(Type  toBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  toLowerBounds  =  getImplicitAssigns(wildcardType);  for(Type  toBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  toLowerBounds  =  getImplicitAssigns(wildcardType);  for(Type  toBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns	  Type[]    toLowerBounds    =    getImplicitLowerBounds(wildcardType);    for(Type    upperBound    :    toUpperBounds)    {    toBound    =    substituteTypeVariables(upperBound,    typeVarAssigns    	non-compiled	[CE]  ')'  expected	77	None	replace
159	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitAssigns(wildcardType);  for(Type  toBound  :  toLowerBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  toLowerBounds  =  getImplicitAssigns(wildcardType);  for(Type  toBound  :  toLowerBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  toLowerBounds  =  getImplicitAssigns(wildcardType);  for(Type  toBound  :  toLowerBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns	  Type[]    toLowerBounds    =    getImplicitLowerBounds(wildcardType);    for(Type    upperBound    :    toUpperBounds)    {    toBound    =    substituteTypeVariables(upperBound,    typeVarAssigns    	non-compiled	[CE]  ')'  expected	77	None	replace
160	[BUG]  [BUGGY]  Type[]  toUpperBounds  =  getImplicitAssignables(wildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  toUpperBounds  =  getImplicitAssignables(wildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  toUpperBounds  =  getImplicitAssignables(wildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }	  Type[]    toUpperBounds    =    getImplicitLowerBounds(wildcardType);    for(Type    upperBound    :    toUpperBounds)    {    toBound    =    substituteTypeVariables(upperBound,    typeVarAssigns);    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
161	[BUG]  [BUGGY]  Type[]  toUpperBounds  =  getImplicitUpperBounds(wildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  toUpperBounds  =  getImplicitUpperBounds(wildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  toUpperBounds  =  getImplicitUpperBounds(wildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }	  Type[]    toUpperBounds    =    getImplicitLowerBounds(wildcardType);    for(Type    upperBound    :    toUpperBounds)    {    toBound    =    substituteTypeVariables(upperBound,    typeVarAssigns);    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
162	[BUG]  [BUGGY]  Type[]  toUpperBounds  =  getImplicitLowerBounds(typeVarAssigns);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  toUpperBounds  =  getImplicitLowerBounds(typeVarAssigns);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  toUpperBounds  =  getImplicitLowerBounds(typeVarAssigns);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }	  Type[]    toUpperBounds    =    getImplicitLowerBounds(wildcardType);    for(Type    upperBound    :    toUpperBounds)    {    toBound    =    substituteTypeVariables(upperBound,    typeVarAssigns);    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
163	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  for(Type  toBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  for(Type  toBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  for(Type  toBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }	  Type[]    upperBounds    =    getImplicitLowerBounds(wildcardType);    for(Type    toBound    :    toUpperBounds)    {    toBound    =    substituteTypeVariables(toBound,    typeVarAssigns);    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
164	[BUG]  [BUGGY]  Type[]  upperBounds  =  toBound.getImplicitUpperBounds(typeVarAssigns);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  upperBounds  =  toBound.getImplicitUpperBounds(typeVarAssigns);  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  upperBounds  =  toBound.getImplicitUpperBounds(typeVarAssigns);	  Type[]    upperBounds    =    toBound.getImplicitLowerBounds(wildcardType);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
165	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  if(upperBounds!=  null)  {  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]            AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  if(upperBounds!=  null)  {  [BUGGY]      if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  if(upperBounds!=  null)  {	  for(Type    bound    :    toLowerBounds)    {    Type[]    upperBounds    =    getImplicitLowerBounds(wildcardType);    if(toLowerBounds!=    null)    {    for(Type    bound    :    toLowerBounds)    {    	non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	80	None	replace
166	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType);  if(upperBounds!=  null)  {  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType);  if(upperBounds!=  null)  {  [BUGGY]      if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType);  if(upperBounds!=  null)  {	  for(Type    bound    :    toLowerBounds)    {    Type[]    upperBounds    =    getImplicitLowerBounds(wildcardType);    if(toLowerBounds!=    null)    {    for(Type    bound    :    toLowerBounds)    {    	non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	80	None	replace
167	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }	  Type[]    toUpperBounds    =    getImplicitLowerBounds(wildcardType);    for(Type    toBound    :    toUpperBounds)    {    toBound    =    substituteTypeVariables(upperBound,    typeVarAssigns);    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
168	[BUG]  [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for(Type  toBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for(Type  toBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for(Type  toBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }	  Type[]    toUpperBounds    =    getImplicitLowerBounds(wildcardType);    for(Type    toBound    :    toUpperBounds)    {    toBound    =    substituteTypeVariables(upperBound,    typeVarAssigns);    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
169	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(typeVarAssigns,  toBound,  wildcardType);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(typeVarAssigns,  toBound,  wildcardType);  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  upperBounds  =  getImplicitLowerBounds(typeVarAssigns,  toBound,  wildcardType);	  Type[]    upperBounds    =    getImplicitLowerBounds(wildcardType,    toBound,    typeVarAssigns);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
170	[BUG]  [BUGGY]  for(Type  bound  :  lowBounds)  {  [CE]  cannot  find  symbol  lowBounds  [FE]          AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  for(Type  bound  :  lowBounds)  {  [BUGGY]      if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	for(Type  bound  :  lowBounds)  {	  for    (Type    bound    :    lowerBounds)    {    for    (Type    bound    :    lowBounds)    {    	non-compiled	[CE]  cannot  find  symbol  lowBounds	36	None	replace
171	[BUG]  [BUGGY]  Type[]  toUpperBounds  =  getImplicitUpperBounds(wildcardType);  for(Type  upperBound  :  lowerBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  toUpperBounds  =  getImplicitUpperBounds(wildcardType);  for(Type  upperBound  :  lowerBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  toUpperBounds  =  getImplicitUpperBounds(wildcardType);  for(Type  upperBound  :  lowerBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }	  Type[]    toUpperBounds    =    getImplicitLowerBounds(wildcardType);    for(Type    upperBound    :    lowerBounds)    {    toBound    =    substituteTypeVariables(toBound,    typeVarAssigns);    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
172	[BUG]  [BUGGY]  Type[]  toUpperBounds  =  getImplicitLowerBounds(typeVarAssigns);  for(Type  upperBound  :  lowerBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  toUpperBounds  =  getImplicitLowerBounds(typeVarAssigns);  for(Type  upperBound  :  lowerBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  toUpperBounds  =  getImplicitLowerBounds(typeVarAssigns);  for(Type  upperBound  :  lowerBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }	  Type[]    toUpperBounds    =    getImplicitLowerBounds(wildcardType);    for(Type    upperBound    :    lowerBounds)    {    toBound    =    substituteTypeVariables(toBound,    typeVarAssigns);    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
173	[BUG]  [BUGGY]  Type[]  toUpperBounds  =  getImplicitAssignables(wildcardType);  for(Type  upperBound  :  lowerBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  toUpperBounds  =  getImplicitAssignables(wildcardType);  for(Type  upperBound  :  lowerBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  toUpperBounds  =  getImplicitAssignables(wildcardType);  for(Type  upperBound  :  lowerBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }	  Type[]    toUpperBounds    =    getImplicitLowerBounds(wildcardType);    for(Type    upperBound    :    lowerBounds)    {    toBound    =    substituteTypeVariables(toBound,    typeVarAssigns);    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
174	[BUG]  [BUGGY]  Type  upperBounds  =  getImplicitUpperBounds(type,  toBound);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type  upperBounds  =  getImplicitUpperBounds(type,  toBound);  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type  upperBounds  =  getImplicitUpperBounds(type,  toBound);	  Type    upperBounds    =    getImplicitUpperBounds(wildcardType,    toBound);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
175	[BUG]  [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(toBound,  toUpperBounds);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(toBound,  toUpperBounds);  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  lowerBounds  =  getImplicitLowerBounds(toBound,  toUpperBounds);	  Type[]    lowerBounds    =    getImplicitLowerBounds(toBound);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
176	[BUG]  [BUGGY]  for(Type  toLowerBound  :  toLowerBounds)  {  Type  bound  =  toLowerBounds;  [CE]  incompatible  types  [FE]        AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  for(Type  toLowerBound  :  toLowerBounds)  {  Type  bound  =  toLowerBounds;  [BUGGY]      if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	for(Type  toLowerBound  :  toLowerBounds)  {  Type  bound  =  toLowerBounds;	  for(Type    bound    :    toLowerBounds)    {    Type    bound    =    toLowerBounds;    	non-compiled	[CE]  incompatible  types	60	None	replace
177	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitAssignables(wildcardType);  for(Type  upperBound  :  lowerBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  toLowerBounds  =  getImplicitAssignables(wildcardType);  for(Type  upperBound  :  lowerBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  toLowerBounds  =  getImplicitAssignables(wildcardType);  for(Type  upperBound  :  lowerBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }	  Type[]    toLowerBounds    =    getImplicitLowerBounds(wildcardType);    for(Type    upperBound    :    lowerBounds)    {    toBound    =    substituteTypeVariables(toBound,    typeVarAssigns);    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
178	[BUG]  [BUGGY]  for(Type  bound  :  toWildcardType,  lowerBounds)  {  [CE]  ')'  expected  [FE]          AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  for(Type  bound  :  toWildcardType,  lowerBounds)  {  [BUGGY]      if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	for(Type  bound  :  toWildcardType,  lowerBounds)  {	  for(Type    bound    :    toLowerBounds,    lowerBounds)    {    	non-compiled	[CE]  ')'  expected	44	None	replace
179	[BUG]  [BUGGY]  for(Type  bound  :  toUpperBounds)  {  Type  bound  =  toUpperBounds;  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  for(Type  bound  :  toUpperBounds)  {  Type  bound  =  toUpperBounds;  [BUGGY]      if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	for(Type    bound    :    toUpperBounds)    {    Type  bound  =  toUpperBounds;	  	non-compiled	[CE]  illegal  start  of  expression	72	None	add
180	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(toBound,  toWildcardType);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(toBound,  toWildcardType);  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  upperBounds  =  getImplicitLowerBounds(toBound,  toWildcardType);	  Type[]    upperBounds    =    getImplicitLowerBounds(wildcardType,    toWildcardType);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
181	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType,  toUpperBounds);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType,  toUpperBounds);  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType,  toUpperBounds);	  Type[]    upperBounds    =    getImplicitLowerBounds(wildcardType,    toWildcardType);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
182	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitAssignables(wildcardType);  for(Type  upperBound  :  lowerBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  toLowerBounds  =  getImplicitAssignables(wildcardType);  for(Type  upperBound  :  lowerBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  toLowerBounds  =  getImplicitAssignables(wildcardType);  for(Type  upperBound  :  lowerBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }	  Type[]    toLowerBounds    =    getImplicitLowerBounds(wildcardType);    for(Type    upperBound    :    lowerBounds)    {    toBound    =    substituteTypeVariables(upperBound,    typeVarAssigns);    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
183	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType,  type);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType,  type);  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType,  type);	  Type[]    upperBounds    =    getImplicitLowerBounds(type);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
184	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitHighestBounds(wildcardType);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  upperBounds  =  getImplicitHighestBounds(wildcardType);  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  upperBounds  =  getImplicitHighestBounds(wildcardType);	  Type[]    upperBounds    =    getImplicitLowerBounds(type);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
185	[BUG]  [BUGGY]  TypewildcardType  upperBounds  =  getImplicitUpperBounds(typeVarAssigns);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  TypewildcardType  upperBounds  =  getImplicitUpperBounds(typeVarAssigns);  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	TypewildcardType  upperBounds  =  getImplicitUpperBounds(typeVarAssigns);	  TypewildcardType    upperBounds    =    getImplicitLowerBounds(wildcardType);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
186	[BUG]  [BUGGY]  TypewildcardType  upperBounds  =  getImplicitLowerBounds(typeVarAssigns);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  TypewildcardType  upperBounds  =  getImplicitLowerBounds(typeVarAssigns);  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	TypewildcardType  upperBounds  =  getImplicitLowerBounds(typeVarAssigns);	  TypewildcardType    upperBounds    =    getImplicitLowerBounds(wildcardType);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
187	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  type  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  toLowerBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  type  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  toLowerBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  type	  Type[]    lowerBounds    =    getImplicitLowerBounds(wildcardType,    toWildcardType);    for(Type    upperBound    :    toUpperBounds)    {    toBound    =    substituteTypeVariables(upperBound,    typeVarAssigns);    }    	non-compiled	[CE]  ')'  expected	4	None	replace
188	[BUG]  [BUGGY]  Type[]  toWildcardType  =  getImplicitLowerBounds(wildcardType,  toWildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarA  [CE]  ')'  expected  [FE]                          AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  toWildcardType  =  getImplicitLowerBounds(wildcardType,  toWildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarA  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  toWildcardType  =  getImplicitLowerBounds(wildcardType,  toWildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarA	  Type[]    lowerBounds    =    getImplicitLowerBounds(wildcardType,    toWildcardType);    for(Type    upperBound    :    toUpperBounds)    {    toBound    =    substituteTypeVariables(upperBound,    typeVarAssigns);    }    	non-compiled	[CE]  ')'  expected	4	None	replace
189	[BUG]  [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  type  [CE]  ')'  expected  [FE]                            AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  type  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  type	  Type[]    lowerBounds    =    getImplicitLowerBounds(wildcardType,    toWildcardType);    for(Type    upperBound    :    toUpperBounds)    {    toBound    =    substituteTypeVariables(upperBound,    typeVarAssigns);    }    	non-compiled	[CE]  ')'  expected	4	None	replace
190	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(wildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(wildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  toLowerBounds  =  getImplicitUpperBounds(wildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns	  Type[]    toLowerBounds    =    getImplicitLowerBounds(wildcardType);    for(Type    upperBound    :    toUpperBounds)    {    toBound    =    substituteTypeVariables(upperBound,    typeVarAssigns    	non-compiled	[CE]  ')'  expected	77	None	replace
191	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitAssignments(wildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  toLowerBounds  =  getImplicitAssignments(wildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  toLowerBounds  =  getImplicitAssignments(wildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns	  Type[]    toLowerBounds    =    getImplicitLowerBounds(wildcardType);    for(Type    upperBound    :    toUpperBounds)    {    toBound    =    substituteTypeVariables(upperBound,    typeVarAssigns    	non-compiled	[CE]  ')'  expected	77	None	replace
192	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitOtherBounds(wildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  toLowerBounds  =  getImplicitOtherBounds(wildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  toLowerBounds  =  getImplicitOtherBounds(wildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns	  Type[]    toLowerBounds    =    getImplicitLowerBounds(wildcardType);    for(Type    upperBound    :    toUpperBounds)    {    toBound    =    substituteTypeVariables(upperBound,    typeVarAssigns    	non-compiled	[CE]  ')'  expected	77	None	replace
193	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitToLowerBounds(wildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  toLowerBounds  =  getImplicitToLowerBounds(wildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  toLowerBounds  =  getImplicitToLowerBounds(wildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns	  Type[]    toLowerBounds    =    getImplicitLowerBounds(wildcardType);    for(Type    upperBound    :    toUpperBounds)    {    toBound    =    substituteTypeVariables(upperBound,    typeVarAssigns    	non-compiled	[CE]  ')'  expected	77	None	replace
194	[BUG]  [BUGGY]  Type[]  lowerBounds  =  getImplicitUpperBounds(typeVarAssigns);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  lowerBounds  =  getImplicitUpperBounds(typeVarAssigns);  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  lowerBounds  =  getImplicitUpperBounds(typeVarAssigns);	  Type[]    lowerBounds    =    getImplicitUpperBounds(wildcardType);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
195	[BUG]  [BUGGY]  for(Type  bound  :  toWildcardType)  {  For(Type  bound  :  toLowerBounds)  {  [CE]  ')'  expected  [FE]          AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  for(Type  bound  :  toWildcardType)  {  For(Type  bound  :  toLowerBounds)  {  [BUGGY]      if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	for(Type  bound  :  toWildcardType)  {  For(Type  bound  :  toLowerBounds)  {	  for(Type    bound    :    toLowerBounds)    {    For(Type    bound    :    toLowerBounds)    {    	non-compiled	[CE]  ')'  expected	6	None	replace
196	[BUG]  [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType,  toBound);  for(Type  bound  :  toUpperBounds)  {  [CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType,  toBound);  for(Type  bound  :  toUpperBounds)  {  [BUGGY]      if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType,  toBound);  for(Type  bound  :  toUpperBounds)  {	  for(Type    bound    :    toLowerBounds)    {    Type[]    upperBounds    =    getImplicitLowerBounds(wildcardType,    toBound);    for(Type    bound    :    toLowerBounds)    {    	non-compiled	[CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	81	None	replace
197	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType,  toBound);  for(Type  bound  :  toUpperBounds)  {  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType,  toBound);  for(Type  bound  :  toUpperBounds)  {  [BUGGY]      if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType,  toBound);  for(Type  bound  :  toUpperBounds)  {	  for(Type    bound    :    toLowerBounds)    {    Type[]    upperBounds    =    getImplicitLowerBounds(wildcardType,    toBound);    for(Type    bound    :    toLowerBounds)    {    	non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	81	None	replace
198	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitAssignables(wildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  toLowerBounds  =  getImplicitAssignables(wildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  toLowerBounds  =  getImplicitAssignables(wildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }	  Type[]    toLowerBounds    =    getImplicitLowerBounds(wildcardType);    for(Type    upperBound    :    toUpperBounds)    {    toBound    =    substituteTypeVariables(upperBound,    typeVarAssigns);    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
199	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitVowelBounds(wildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  toLowerBounds  =  getImplicitVowelBounds(wildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  toLowerBounds  =  getImplicitVowelBounds(wildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }	  Type[]    toLowerBounds    =    getImplicitLowerBounds(wildcardType);    for(Type    upperBound    :    toUpperBounds)    {    toBound    =    substituteTypeVariables(upperBound,    typeVarAssigns);    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
200	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(typeVarAssigns,  wildcardType);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(typeVarAssigns,  wildcardType);  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  upperBounds  =  getImplicitUpperBounds(typeVarAssigns,  wildcardType);	  Type[]    upperBounds    =    getImplicitUpperBounds(wildcardType,    typeVarAssigns);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
201	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(wildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(wildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  toLowerBounds  =  getImplicitUpperBounds(wildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }	  Type[]    toLowerBounds    =    getImplicitLowerBounds(wildcardType);    for(Type    upperBound    :    toUpperBounds)    {    toBound    =    substituteTypeVariables(toBound,    typeVarAssigns);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
202	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitAssignables(wildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  toLowerBounds  =  getImplicitAssignables(wildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  toLowerBounds  =  getImplicitAssignables(wildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }	  Type[]    toLowerBounds    =    getImplicitLowerBounds(wildcardType);    for(Type    upperBound    :    toUpperBounds)    {    toBound    =    substituteTypeVariables(toBound,    typeVarAssigns);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
203	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitAssignments(wildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  toLowerBounds  =  getImplicitAssignments(wildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  toLowerBounds  =  getImplicitAssignments(wildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }	  Type[]    toLowerBounds    =    getImplicitLowerBounds(wildcardType);    for(Type    upperBound    :    toUpperBounds)    {    toBound    =    substituteTypeVariables(toBound,    typeVarAssigns);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
204	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(toBound,  type);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(toBound,  type);  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  upperBounds  =  getImplicitUpperBounds(toBound,  type);	  Type[]    upperBounds    =    getImplicitLowerBounds(type,    toBound);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
205	[BUG]  [BUGGY]  for(Type  toBound  :  lowerBounds)  {  For  (Type  bound  :  toBounds)  {  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  for(Type  toBound  :  lowerBounds)  {  For  (Type  bound  :  toBounds)  {  [BUGGY]      if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	for(Type  toBound  :  lowerBounds)  {  For  (Type  bound  :  toBounds)  {	  for    (Type    bound    :    lowerBounds)    {    For    (Type    bound    :    lowerBounds)    {    	non-compiled	[CE]  ')'  expected	38	None	replace
206	[BUG]  [BUGGY]  for(Type  bound  :  lowerBounds,  upperBounds)  {  [CE]  ')'  expected  [FE]          AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  for(Type  bound  :  lowerBounds,  upperBounds)  {  [BUGGY]      if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	for(Type  bound  :  lowerBounds,  upperBounds)  {	  for(Type    bound    :    toLowerBounds,    upperBounds)    {    	non-compiled	[CE]  ')'  expected	74	None	replace
207	[BUG]  [BUGGY]  Type[]  toUpperBounds  =  getImplicitToUpperBounds(wildcardType,  toBound);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  toUpperBounds  =  getImplicitToUpperBounds(wildcardType,  toBound);  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  toUpperBounds  =  getImplicitToUpperBounds(wildcardType,  toBound);	  Type[]    toUpperBounds    =    getImplicitLowerBounds(wildcardType,    toBound);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
208	[BUG]  [BUGGY]  Type[]  upperBounds  =  typeVarAssigns.getImplicitUpperBounds();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  upperBounds  =  typeVarAssigns.getImplicitUpperBounds();  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  upperBounds  =  typeVarAssigns.getImplicitUpperBounds();	  Type[]    upperBounds    =    typeVarAssigns.getImplicitLowerBounds();    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
209	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(typeVarAssigns,  toBound);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(typeVarAssigns,  toBound);  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  upperBounds  =  getImplicitUpperBounds(typeVarAssigns,  toBound);	  Type[]    upperBounds    =    getImplicitUpperBounds(wildcardType,    toBound);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
210	[BUG]  [BUGGY]  Type  upperBounds  =  getImplicitUpperBounds(upperBound);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type  upperBounds  =  getImplicitUpperBounds(upperBound);  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type  upperBounds  =  getImplicitUpperBounds(upperBound);	  Type    upperBounds    =    getImplicitLowerBounds(toBound);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
211	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitAssignables(wildcardType);  for(Type  upperBound  :  toLowerBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  toLowerBounds  =  getImplicitAssignables(wildcardType);  for(Type  upperBound  :  toLowerBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  toLowerBounds  =  getImplicitAssignables(wildcardType);  for(Type  upperBound  :  toLowerBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }	  Type[]    toLowerBounds    =    getImplicitLowerBounds(wildcardType);    for(Type    upperBound    :    toLowerBounds)    {    toBound    =    substituteTypeVariables(upperBound,    typeVarAssigns);    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
212	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(toBound,  toLowerBounds);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(toBound,  toLowerBounds);  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  upperBounds  =  getImplicitUpperBounds(toBound,  toLowerBounds);	  Type[]    upperBounds    =    getImplicitUpperBounds(wildcardType,    toLowerBounds);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
213	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType,  toUpperBounds);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType,  toUpperBounds);  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType,  toUpperBounds);	  Type[]    upperBounds    =    getImplicitUpperBounds(wildcardType,    toLowerBounds);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
214	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(type,  toLowerBounds);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(type,  toLowerBounds);  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  upperBounds  =  getImplicitUpperBounds(type,  toLowerBounds);	  Type[]    upperBounds    =    getImplicitUpperBounds(wildcardType,    toLowerBounds);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
215	[BUG]  [BUGGY]  Type  wildcardType  =  getImplicitUpperBounds(typeVarAssigns);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type  wildcardType  =  getImplicitUpperBounds(typeVarAssigns);  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type  wildcardType  =  getImplicitUpperBounds(typeVarAssigns);	  Type    wildcardType    =    getImplicitUpperBounds(wildcardType);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
216	[BUG]  [BUGGY]  Type[]  toUpperBounds  =  getImplicitAssignables(wildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  toUpperBounds  =  getImplicitAssignables(wildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  toUpperBounds  =  getImplicitAssignables(wildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }	  Type[]    toUpperBounds    =    getImplicitLowerBounds(wildcardType);    for(Type    upperBound    :    toUpperBounds)    {    toBound    =    substituteTypeVariables(toBound,    typeVarAssigns);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
217	[BUG]  [BUGGY]  Type[]  toUpperBounds  =  getImplicitUpperBounds(wildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  toUpperBounds  =  getImplicitUpperBounds(wildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  toUpperBounds  =  getImplicitUpperBounds(wildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }	  Type[]    toUpperBounds    =    getImplicitLowerBounds(wildcardType);    for(Type    upperBound    :    toUpperBounds)    {    toBound    =    substituteTypeVariables(toBound,    typeVarAssigns);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
218	[BUG]  [BUGGY]  Type[]  toUpperBounds  =  getImplicitLowerBounds(typeVarAssigns);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  toUpperBounds  =  getImplicitLowerBounds(typeVarAssigns);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  toUpperBounds  =  getImplicitLowerBounds(typeVarAssigns);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }	  Type[]    toUpperBounds    =    getImplicitLowerBounds(wildcardType);    for(Type    upperBound    :    toUpperBounds)    {    toBound    =    substituteTypeVariables(toBound,    typeVarAssigns);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
219	[BUG]  [BUGGY]  for(Type  bound  :  lowerBounds)  {  Type  bound  :  toLowerBounds)  {  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  for(Type  bound  :  lowerBounds)  {  Type  bound  :  toLowerBounds)  {  [BUGGY]      if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	for(Type  bound  :  lowerBounds)  {  Type  bound  :  toLowerBounds)  {	  for(Type    bound    :    toLowerBounds)    {    Type    bound    :    toLowerBounds)    {    	non-compiled	[CE]  ';'  expected	9	None	replace
220	[BUG]  [BUGGY]  for(Type  bound  :  toUpperBounds)  {  Type  bound  :  toLowerBounds)  {  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  for(Type  bound  :  toUpperBounds)  {  Type  bound  :  toLowerBounds)  {  [BUGGY]      if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	for(Type  bound  :  toUpperBounds)  {  Type  bound  :  toLowerBounds)  {	  for(Type    bound    :    toLowerBounds)    {    Type    bound    :    toLowerBounds)    {    	non-compiled	[CE]  ';'  expected	9	None	replace
221	[BUG]  [BUGGY]  for(Type  bound  :  toLowerBounds)  {  Type[]  upperBounds  =  lowerBounds.values();  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                    AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  for(Type  bound  :  toLowerBounds)  {  Type[]  upperBounds  =  lowerBounds.values();  [BUGGY]      if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	for(Type  bound  :  toLowerBounds)  {  Type[]  upperBounds  =  lowerBounds.values();	  for(Type    bound    :    toLowerBounds)    {    Type    bound    :    toLowerBounds)    {    	non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	9	None	replace
222	[BUG]  [BUGGY]  Type  upperBounds  =  getImplicitUpperBounds(toBound,  toLowerBounds);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type  upperBounds  =  getImplicitUpperBounds(toBound,  toLowerBounds);  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type  upperBounds  =  getImplicitUpperBounds(toBound,  toLowerBounds);	  Type    upperBounds    =    getImplicitUpperBounds(toBound,    wildcardType);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
223	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType);  for(Type  toBound  :  toBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType);  for(Type  toBound  :  toBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType);  for(Type  toBound  :  toBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }	  Type[]    toUpperBounds    =    getImplicitLowerBounds(wildcardType);    for(Type    toBound    :    toUpperBounds)    {    toBound    =    substituteTypeVariables(toBound,    typeVarAssigns);    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
224	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitLopperBounds(wildcardType);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  upperBounds  =  getImplicitLopperBounds(wildcardType);  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  upperBounds  =  getImplicitLopperBounds(wildcardType);	  Type[]    upperBounds    =    getImplicitUpperBounds(typeVarAssigns);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
225	[BUG]  [BUGGY]  Type[]  toUpperBounds  =  getImplicitLowerBounds(typeVarAssigns);  for(Type  upperBound  :  lowerBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  toUpperBounds  =  getImplicitLowerBounds(typeVarAssigns);  for(Type  upperBound  :  lowerBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  toUpperBounds  =  getImplicitLowerBounds(typeVarAssigns);  for(Type  upperBound  :  lowerBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }	  Type[]    toUpperBounds    =    getImplicitLowerBounds(wildcardType);    for(Type    upperBound    :    lowerBounds)    {    toBound    =    substituteTypeVariables(upperBound,    typeVarAssigns);    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
226	[BUG]  [BUGGY]  Type[]  toUpperBounds  =  getImplicitUpperBounds(wildcardType);  for(Type  upperBound  :  lowerBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  toUpperBounds  =  getImplicitUpperBounds(wildcardType);  for(Type  upperBound  :  lowerBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  toUpperBounds  =  getImplicitUpperBounds(wildcardType);  for(Type  upperBound  :  lowerBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }	  Type[]    toUpperBounds    =    getImplicitLowerBounds(wildcardType);    for(Type    upperBound    :    lowerBounds)    {    toBound    =    substituteTypeVariables(upperBound,    typeVarAssigns);    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
227	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarA  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarA  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarA	  Type[]    lowerBounds    =    getImplicitLowerBounds(wildcardType,    toWildcardType);    for(Type    toBound    :    toUpperBounds)    {    toBound    =    substituteTypeVariables(toBound,    typeVarA    	non-compiled	[CE]  ')'  expected	26	None	replace
228	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType);  for(Type  upperBound  :  upperBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarA  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType);  for(Type  upperBound  :  upperBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarA  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType);  for(Type  upperBound  :  upperBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarA	  Type[]    lowerBounds    =    getImplicitLowerBounds(wildcardType,    toWildcardType);    for(Type    toBound    :    toUpperBounds)    {    toBound    =    substituteTypeVariables(toBound,    typeVarA    	non-compiled	[CE]  ')'  expected	26	None	replace
229	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType);  for(Type  upperBound  :  upperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarA  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType);  for(Type  upperBound  :  upperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarA  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType);  for(Type  upperBound  :  upperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarA	  Type[]    lowerBounds    =    getImplicitLowerBounds(wildcardType,    toWildcardType);    for(Type    toBound    :    toUpperBounds)    {    toBound    =    substituteTypeVariables(toBound,    typeVarA    	non-compiled	[CE]  ')'  expected	26	None	replace
230	[BUG]  [BUGGY]  Type[]  lowerBounds  =  toBound.getUpperBounds();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  lowerBounds  =  toBound.getUpperBounds();  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  lowerBounds  =  toBound.getUpperBounds();	  Type[]    lowerBounds    =    toBound.getImplicitLowerBounds();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
231	[BUG]  [BUGGY]  Type  upperBounds  =  getImplicitUpperBounds(typeVarAssigns,  wildcardType);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type  upperBounds  =  getImplicitUpperBounds(typeVarAssigns,  wildcardType);  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type  upperBounds  =  getImplicitUpperBounds(typeVarAssigns,  wildcardType);	  Type    upperBounds    =    getImplicitUpperBounds(wildcardType,    typeVarAssigns);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
232	[BUG]  [BUGGY]  Type  upperBounds  =  getImplicitUpperBounds(lowerBound,  typeVarAssigns);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type  upperBounds  =  getImplicitUpperBounds(lowerBound,  typeVarAssigns);  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type  upperBounds  =  getImplicitUpperBounds(lowerBound,  typeVarAssigns);	  Type    upperBounds    =    getImplicitUpperBounds(wildcardType,    typeVarAssigns);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
233	[BUG]  [BUGGY]  Type[]  toBounds  =  getImplicitUpperBounds(wildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  toBounds  =  getImplicitUpperBounds(wildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  toBounds  =  getImplicitUpperBounds(wildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }	  Type[]    toBounds    =    getImplicitLowerBounds(wildcardType);    for(Type    upperBound    :    toUpperBounds)    {    toBound    =    substituteTypeVariables(upperBound,    typeVarAssigns);    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
234	[BUG]  [BUGGY]  Type[]  toBounds  =  getImplicitLowerBounds(typeVarAssigns);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  toBounds  =  getImplicitLowerBounds(typeVarAssigns);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  toBounds  =  getImplicitLowerBounds(typeVarAssigns);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }	  Type[]    toBounds    =    getImplicitLowerBounds(wildcardType);    for(Type    upperBound    :    toUpperBounds)    {    toBound    =    substituteTypeVariables(upperBound,    typeVarAssigns);    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
235	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  if(upperBounds!=  null)  {  for(Type  bound  :  toLowerBounds)  {  }  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]          AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  if(upperBounds!=  null)  {  for(Type  bound  :  toLowerBounds)  {  }  [BUGGY]      if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  if(upperBounds!=  null)  {  for(Type  bound  :  toLowerBounds)  {  }	  for(Type    bound    :    toLowerBounds)    {    Type[]    upperBounds    =    getImplicitLowerBounds(wildcardType);    if(toLowerBounds!=    null)    {    for(Type    bound    :    toLowerBounds)    {    }    	non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	79	None	replace
236	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType);  if(upperBounds!=  null)  {  for(Type  bound  :  toUpperBounds)  {  }  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]            AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType);  if(upperBounds!=  null)  {  for(Type  bound  :  toUpperBounds)  {  }  [BUGGY]      if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType);  if(upperBounds!=  null)  {  for(Type  bound  :  toUpperBounds)  {  }	  for(Type    bound    :    toLowerBounds)    {    Type[]    upperBounds    =    getImplicitLowerBounds(wildcardType);    if(toLowerBounds!=    null)    {    for(Type    bound    :    toLowerBounds)    {    }    	non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	79	None	replace
237	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType);  for(Type  toBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarA  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType);  for(Type  toBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarA  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType);  for(Type  toBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarA	  Type[]    lowerBounds    =    getImplicitLowerBounds(wildcardType,    toWildcardType);    for(Type    toBound    :    toUpperBounds)    {    toBound    =    substituteTypeVariables(toBound,    typeVarAssigns);    }    	non-compiled	[CE]  ')'  expected	24	None	replace
238	[BUG]  [BUGGY]  Type[]  lowerBounds  =  getImplicitUpperBounds(wildcardType,  toWildcardType);  for(Type  toBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  lowerBounds  =  getImplicitUpperBounds(wildcardType,  toWildcardType);  for(Type  toBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  lowerBounds  =  getImplicitUpperBounds(wildcardType,  toWildcardType);  for(Type  toBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }	  Type[]    lowerBounds    =    getImplicitLowerBounds(wildcardType,    toWildcardType);    for(Type    toBound    :    toUpperBounds)    {    toBound    =    substituteTypeVariables(toBound,    typeVarAssigns);    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
239	[BUG]  [BUGGY]  Type  wildcardType  =  getImplicitWildcardType(wildcardType);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type  wildcardType  =  getImplicitWildcardType(wildcardType);  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type  wildcardType  =  getImplicitWildcardType(wildcardType);	  Type    wildcardType    =    getImplicitLowerBounds(wildcardType);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
240	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  for(Type  bound  :  toUpperBounds)  {  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]        AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  for(Type  bound  :  toUpperBounds)  {  [BUGGY]      if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  for(Type  bound  :  toUpperBounds)  {	  for(Type    bound    :    toLowerBounds)    {    Type[]    upperBounds    =    getImplicitLowerBounds(wildcardType);    for(Type    bound    :    toLowerBounds)    {    	non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	78	None	replace
241	[BUG]  [BUGGY]  for(Type  bound  =  toLowerBounds)  {  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  for(Type  bound  =  toLowerBounds)  {  [BUGGY]      if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	for(Type  bound  =  toLowerBounds)  {	  for(Type    bound    :    toLowerBounds)    {    for(Type    bound    =    toLowerBounds)    {    	non-compiled	[CE]  ';'  expected	8	None	replace
242	[BUG]  [BUGGY]  Type[]  upperBounds  =  type.getImplicitLowerBounds();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  upperBounds  =  type.getImplicitLowerBounds();  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  upperBounds  =  type.getImplicitLowerBounds();	  Type[]    upperBounds    =    wildcardType.getImplicitLowerBounds();    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
243	[BUG]  [BUGGY]  for(Type  bound  :  toUpperBounds)  {  Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType);  for(Type  bound  :  toUpperBounds)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  for(Type  bound  :  toUpperBounds)  {  Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType);  for(Type  bound  :  toUpperBounds)  {  [BUGGY]      if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	for(Type    bound    :    toUpperBounds)    {    Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType);  for(Type  bound  :  toUpperBounds)  {	  	non-compiled	[CE]  illegal  start  of  expression	72	None	add
244	[BUG]  [BUGGY]  for(Type  bound  :  toUpperBounds)  {  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  for(Type  bound  :  toUpperBounds)  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  for(Type  bound  :  toUpperBounds)  {  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  for(Type  bound  :  toUpperBounds)  {  [BUGGY]      if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	for(Type    bound    :    toUpperBounds)    {    Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  for(Type  bound  :  toUpperBounds)  {	  	non-compiled	[CE]  illegal  start  of  expression	72	None	add
245	[BUG]  [BUGGY]  for(Type  bound  :  toUpperBounds)  {  Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType,  toBound);  for(Type  bound  :  toUpperBounds)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  for(Type  bound  :  toUpperBounds)  {  Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType,  toBound);  for(Type  bound  :  toUpperBounds)  {  [BUGGY]      if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	for(Type    bound    :    toUpperBounds)    {    Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType,  toBound);  for(Type  bound  :  toUpperBounds)  {	  	non-compiled	[CE]  illegal  start  of  expression	72	None	add
246	[BUG]  [BUGGY]  for(Type  bound  :  toUpperBounds)  {  Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  for(Type  bound  :  toUpperBounds)  {  Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType);  [BUGGY]      if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	for(Type    bound    :    toUpperBounds)    {    Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType);	  	non-compiled	[CE]  illegal  start  of  expression	72	None	add
247	[BUG]  [BUGGY]  For(Type  bound  :  toUpperBounds)  {  [CE]  ')'  expected  [FE]          AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  For(Type  bound  :  toUpperBounds)  {  [BUGGY]      if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	For(Type  bound  :  toUpperBounds)  {	  for(Type    bound    :    toLowerBounds)    {    For(Type    bound    :    toLowerBounds)    {    	non-compiled	[CE]  ')'  expected	6	None	replace
248	[BUG]  [BUGGY]  Type[]  toBounds  =  getImplicitLowerBounds(wildcardType);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  toBounds  =  getImplicitLowerBounds(wildcardType);  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  toBounds  =  getImplicitLowerBounds(wildcardType);	  Type[]    toBounds    =    getImplicitLowerBounds(wildcardType);    for(Type    upperBound    :    toUpperBounds)    {    toBound    =    substituteTypeVariables(upperBound,    typeVarAssigns);    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
249	[BUG]  [BUGGY]  Type[]  upperBounds  =  toBound.getImplicitUpperBounds(type);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  upperBounds  =  toBound.getImplicitUpperBounds(type);  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  upperBounds  =  toBound.getImplicitUpperBounds(type);	  Type[]    upperBounds    =    getImplicitUpperBounds(type);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
250	[BUG]  [BUGGY]  Type  upperBounds  =  toBound.getImplicitUpperBounds();  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type  upperBounds  =  toBound.getImplicitUpperBounds();  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type  upperBounds  =  toBound.getImplicitUpperBounds();	  Type    upperBounds    =    getImplicitLowerBounds(toBound);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
251	[BUG]  [BUGGY]  Type  upperBounds  =  getImplicitUpperBounds(type,  typeVarAssigns);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type  upperBounds  =  getImplicitUpperBounds(type,  typeVarAssigns);  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type  upperBounds  =  getImplicitUpperBounds(type,  typeVarAssigns);	  Type    upperBounds    =    getImplicitUpperBounds(wildcardType,    typeVarAssigns);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
252	[BUG]  [BUGGY]  TypewildcardType  upperBounds  =  getImplicitLowerBounds(type);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  TypewildcardType  upperBounds  =  getImplicitLowerBounds(type);  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	TypewildcardType  upperBounds  =  getImplicitLowerBounds(type);	  TypewildcardType    upperBounds    =    getImplicitLowerBounds(wildcardType);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
253	[BUG]  [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType,  toUpperBounds);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType,  toUpperBounds);  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType,  toUpperBounds);	  Type[]    lowerBounds    =    getImplicitLowerBounds(wildcardType,    toWildcardType);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
254	[BUG]  [BUGGY]  for(Type  bound  :  toBounds,  upperBounds)  {  [CE]  ')'  expected  [FE]          AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  for(Type  bound  :  toBounds,  upperBounds)  {  [BUGGY]      if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	for(Type  bound  :  toBounds,  upperBounds)  {	  for(Type    bound    :    toLowerBounds,    lowerBounds)    {    	non-compiled	[CE]  ')'  expected	44	None	replace
255	[BUG]  [BUGGY]  Type[]  upperBounds  =  wildcardType.getImplicitUpperBounds();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  upperBounds  =  wildcardType.getImplicitUpperBounds();  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  upperBounds  =  wildcardType.getImplicitUpperBounds();	  Type[]    upperBounds    =    toBound.getImplicitUpperBounds();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
256	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType);  for(Type  upperBounds  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarA  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType);  for(Type  upperBounds  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarA  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType);  for(Type  upperBounds  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarA	  Type[]    lowerBounds    =    getImplicitLowerBounds(wildcardType,    toWildcardType);    for(Type    toBound    :    toUpperBounds)    {    toBound    =    substituteTypeVariables(toBound,    typeVarA    	non-compiled	[CE]  ')'  expected	26	None	replace
257	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType,  toWildcardType);  for(Type  upperBounds  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarA  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType,  toWildcardType);  for(Type  upperBounds  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarA  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType,  toWildcardType);  for(Type  upperBounds  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarA	  Type[]    lowerBounds    =    getImplicitLowerBounds(wildcardType,    toWildcardType);    for(Type    toBound    :    toUpperBounds)    {    toBound    =    substituteTypeVariables(toBound,    typeVarA    	non-compiled	[CE]  ')'  expected	26	None	replace
258	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(type,  toWildcardType);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(type,  toWildcardType);  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  upperBounds  =  getImplicitUpperBounds(type,  toWildcardType);	  Type[]    upperBounds    =    getImplicitUpperBounds(wildcardType,    toWildcardType);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
259	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(wildcardType);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(wildcardType);  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  toLowerBounds  =  getImplicitUpperBounds(wildcardType);	  Type[]    toLowerBounds    =    getImplicitLowerBounds(wildcardType);    for(Type    upperBound    :    toUpperBounds)    {    toBound    =    substituteTypeVariables(upperBound,    typeVarAssigns);    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
260	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitLeowerBounds(wildcardType);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  upperBounds  =  getImplicitLeowerBounds(wildcardType);  [BUGGY]      if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  upperBounds  =  getImplicitLeowerBounds(wildcardType);	  for    (Type    bound    :    lowerBounds)    {    Type[]    upperBounds    =    getImplicitLeowerBounds(wildcardType);    for    (Type    bound    :    lowerBounds)    {    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
261	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }	  Type[]    toUpperBounds    =    getImplicitLowerBounds(wildcardType);    for(Type    toBound    :    toUpperBounds)    {    toBound    =    substituteTypeVariables(upperBound,    typeVarAssigns);    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
262	[BUG]  [BUGGY]  Type[]  lowerBounds  =  getImplicitUpperBounds(wildcardType);  for(Type  bound  :  toLowerBounds)  {  [CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]        AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  lowerBounds  =  getImplicitUpperBounds(wildcardType);  for(Type  bound  :  toLowerBounds)  {  [BUGGY]      if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  lowerBounds  =  getImplicitUpperBounds(wildcardType);  for(Type  bound  :  toLowerBounds)  {	  for(Type    bound    :    toLowerBounds)    {    Type[]    upperBounds    =    getImplicitLowerBounds(wildcardType);    for(Type    bound    :    toLowerBounds)    {    	non-compiled	[CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	78	None	replace
263	[BUG]  [BUGGY]  for(Type  bound  :  toBounds,  lowerBounds)  {  [CE]  ')'  expected  [FE]          AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  for(Type  bound  :  toBounds,  lowerBounds)  {  [BUGGY]      if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	for(Type  bound  :  toBounds,  lowerBounds)  {	  for(Type    bound    :    toLowerBounds,    upperBounds)    {    	non-compiled	[CE]  ')'  expected	74	None	replace
264	[BUG]  [BUGGY]  Type  bound  =  toLowerBounds;  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type  bound  =  toLowerBounds;  [BUGGY]      if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type  bound  =  toLowerBounds;	  for(Type    bound    :    toLowerBounds)    {    Type    bound    =    toLowerBounds;    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
265	[BUG]  [BUGGY]  for(Type  bound  :  toLowerBounds)  {  Type  bound  =  toUpperBounds;  }  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  for(Type  bound  :  toLowerBounds)  {  Type  bound  =  toUpperBounds;  }  [BUGGY]      if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	for(Type  bound  :  toLowerBounds)  {  Type  bound  =  toUpperBounds;  }	  for(Type    bound    :    toLowerBounds)    {    Type    bound    =    toLowerBounds;    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
266	[BUG]  [BUGGY]  for(Type  bound  :  toBounds.values())  {  [CE]  cannot  find  symbol  toBounds  [FE]                AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  for(Type  bound  :  toBounds.values())  {  [BUGGY]      if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	for(Type  bound  :  toBounds.values())  {	  for(Type    toBound    :    toBounds)    {    	non-compiled	[CE]  cannot  find  symbol  toBounds	47	None	replace
267	[BUG]  [BUGGY]  for(Type  bound  :  toBounds.length)  {  [CE]  cannot  find  symbol  toBounds  [FE]                  AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  for(Type  bound  :  toBounds.length)  {  [BUGGY]      if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	for(Type  bound  :  toBounds.length)  {	  for(Type    toBound    :    toBounds)    {    	non-compiled	[CE]  cannot  find  symbol  toBounds	47	None	replace
268	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(type,  toWildcardType);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(type,  toWildcardType);  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  upperBounds  =  getImplicitLowerBounds(type,  toWildcardType);	  Type[]    upperBounds    =    getImplicitLowerBounds(wildcardType,    toWildcardType);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
269	[BUG]  [BUGGY]  Type  wildcardType  =  getImplicitLowerBounds(wildcardType,  toUpperBounds);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type  wildcardType  =  getImplicitLowerBounds(wildcardType,  toUpperBounds);  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type  wildcardType  =  getImplicitLowerBounds(wildcardType,  toUpperBounds);	  Type    wildcardType    =    getImplicitLowerBounds(wildcardType);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
270	[BUG]  [BUGGY]  Type[]  wildcardType  =  getImplicitUpperBounds(wildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  wildcardType  =  getImplicitUpperBounds(wildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  wildcardType  =  getImplicitUpperBounds(wildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }	  Type[]    wildcardType    =    getImplicitLowerBounds(wildcardType);    for(Type    upperBound    :    toUpperBounds)    {    toBound    =    substituteTypeVariables(upperBound,    typeVarAssigns);    }    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
271	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns	  Type[]    toLowerBounds    =    getImplicitLowerBounds(wildcardType);    for(Type    upperBound    :    toUpperBounds)    {    toBound    =    substituteTypeVariables(upperBound,    typeVarAssigns    	non-compiled	[CE]  ')'  expected	77	None	replace
272	[BUG]  [BUGGY]  Type[]  lowerBounds  =  wildcardType.getImplicitLowerBounds();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);          [BUGGY]  Type[]  lowerBounds  =  wildcardType.getImplicitLowerBounds();  [BUGGY]      for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  lowerBounds  =  wildcardType.getImplicitLowerBounds();	  Type[]    lowerBounds    =    toBound.getImplicitLowerBounds();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
