bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitLowerBounds(wildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  Type[]  toLowerBounds  =  getImplicitLowerBounds(wildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }  [BUGGY]    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  toLowerBounds  =  getImplicitLowerBounds(wildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }	      Type[]    lowerBounds    =    getImplicitLowerBounds(wildcardType);    for(Type    upperBound    :    toUpperBounds)    {    toBound    =    substituteTypeVariables(upperBound,    typeVarAssigns);    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
2	[BUG]  [BUGGY]  Type[]  toUpperBounds  =  getImplicitLowerBounds(wildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  Type[]  toUpperBounds  =  getImplicitLowerBounds(wildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }  [BUGGY]    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  toUpperBounds  =  getImplicitLowerBounds(wildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }	      Type[]    lowerBounds    =    getImplicitLowerBounds(wildcardType);    for(Type    upperBound    :    toUpperBounds)    {    toBound    =    substituteTypeVariables(upperBound,    typeVarAssigns);    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
3	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitLowerBounds(wildcardType);  for(Type  upperBound  :  toLowerBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  Type[]  toLowerBounds  =  getImplicitLowerBounds(wildcardType);  for(Type  upperBound  :  toLowerBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }  [BUGGY]    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  toLowerBounds  =  getImplicitLowerBounds(wildcardType);  for(Type  upperBound  :  toLowerBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }	      Type[]    lowerBounds    =    getImplicitLowerBounds(wildcardType);    for(Type    upperBound    :    toUpperBounds)    {    toBound    =    substituteTypeVariables(upperBound,    typeVarAssigns);    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
4	[BUG]  [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }  [BUGGY]    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }	      Type[]    lowerBounds    =    getImplicitLowerBounds(wildcardType);    for(Type    upperBound    :    toUpperBounds)    {    toBound    =    substituteTypeVariables(upperBound,    typeVarAssigns);    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
5	[BUG]  [BUGGY]  for(Type  bound  :  toLowerBounds)  {  for(Type  bound  :  toLowerBounds)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  for(Type  bound  :  toLowerBounds)  {  for(Type  bound  :  toLowerBounds)  {  [BUGGY]    if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	for(Type    bound    :    toLowerBounds)    {    for(Type  bound  :  toLowerBounds)  {	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
6	[BUG]  [BUGGY]  for(Type  bound  :  toLowerBounds)  {  For(Type  bound  :  toLowerBounds)  {  [CE]  ')'  expected  [FE]      AssertionError    [CONTEXT]    Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  for(Type  bound  :  toLowerBounds)  {  For(Type  bound  :  toLowerBounds)  {  [BUGGY]    if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	for(Type    bound    :    toLowerBounds)    {    For(Type  bound  :  toLowerBounds)  {	  	non-compiled	[CE]  ')'  expected	18	None	add
7	[BUG]  [BUGGY]  for(Type  bound  :  toLowerBounds)  {  for(Type  bound  :  toUpperBounds)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  for(Type  bound  :  toLowerBounds)  {  for(Type  bound  :  toUpperBounds)  {  [BUGGY]    if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	for(Type    bound    :    toLowerBounds)    {    for(Type  bound  :  toUpperBounds)  {	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
8	[BUG]  [BUGGY]  for(Type  bound  :  toLowerBounds)  {  for(Type  bound  =  toLowerBounds)  {  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  for(Type  bound  :  toLowerBounds)  {  for(Type  bound  =  toLowerBounds)  {  [BUGGY]    if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	for(Type    bound    :    toLowerBounds)    {    for(Type  bound  =  toLowerBounds)  {	  	non-compiled	[CE]  ';'  expected	18	None	add
9	[BUG]  [BUGGY]  for(Type  bound  :  toLowerBounds)  {  Type  bound  :  toLowerBounds)  {  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  for(Type  bound  :  toLowerBounds)  {  Type  bound  :  toLowerBounds)  {  [BUGGY]    if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	for(Type    bound    :    toLowerBounds)    {    Type  bound  :  toLowerBounds)  {	  	non-compiled	[CE]  ';'  expected	18	None	add
10	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitLowerBounds(wildcardType);  for(Type  toBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  Type[]  toLowerBounds  =  getImplicitLowerBounds(wildcardType);  for(Type  toBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }  [BUGGY]    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  toLowerBounds  =  getImplicitLowerBounds(wildcardType);  for(Type  toBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }	      Type[]    lowerBounds    =    getImplicitLowerBounds(wildcardType);    for(Type    upperBound    :    toUpperBounds)    {    toBound    =    substituteTypeVariables(toBound,    typeVarAssigns);    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
11	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitLowerBounds(wildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  Type[]  toLowerBounds  =  getImplicitLowerBounds(wildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }  [BUGGY]    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  toLowerBounds  =  getImplicitLowerBounds(wildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }	      Type[]    lowerBounds    =    getImplicitLowerBounds(wildcardType);    for(Type    upperBound    :    toUpperBounds)    {    toBound    =    substituteTypeVariables(toBound,    typeVarAssigns);    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
12	[BUG]  [BUGGY]  Type[]  toUpperBounds  =  getImplicitLowerBounds(wildcardType);  for(Type  toBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  Type[]  toUpperBounds  =  getImplicitLowerBounds(wildcardType);  for(Type  toBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }  [BUGGY]    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  toUpperBounds  =  getImplicitLowerBounds(wildcardType);  for(Type  toBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }	      Type[]    lowerBounds    =    getImplicitLowerBounds(wildcardType);    for(Type    upperBound    :    toUpperBounds)    {    toBound    =    substituteTypeVariables(toBound,    typeVarAssigns);    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
13	[BUG]  [BUGGY]  Type[]  toUpperBounds  =  getImplicitLowerBounds(wildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  Type[]  toUpperBounds  =  getImplicitLowerBounds(wildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }  [BUGGY]    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  toUpperBounds  =  getImplicitLowerBounds(wildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }	      Type[]    lowerBounds    =    getImplicitLowerBounds(wildcardType);    for(Type    upperBound    :    toUpperBounds)    {    toBound    =    substituteTypeVariables(toBound,    typeVarAssigns);    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
14	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType,  toBound,  typeVarAssigns);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType,  toBound,  typeVarAssigns);  [BUGGY]    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType,  toBound,  typeVarAssigns);	      Type[]    upperBounds    =    getImplicitLowerBounds(wildcardType,    toBound);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
15	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(toBound,  wildcardType);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(toBound,  wildcardType);  [BUGGY]    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  upperBounds  =  getImplicitLowerBounds(toBound,  wildcardType);	      Type[]    upperBounds    =    getImplicitLowerBounds(wildcardType,    toBound);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
16	[BUG]  [BUGGY]  Type[]  toUpperBounds  =  getImplicitLowerBounds(wildcardType,  toBound);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  Type[]  toUpperBounds  =  getImplicitLowerBounds(wildcardType,  toBound);  [BUGGY]    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  toUpperBounds  =  getImplicitLowerBounds(wildcardType,  toBound);	      Type[]    upperBounds    =    getImplicitLowerBounds(wildcardType,    toBound);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
17	[BUG]  [BUGGY]  Type[]  wildcardType  =  getImplicitLowerBounds(wildcardType);  for(Type  toBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  Type[]  wildcardType  =  getImplicitLowerBounds(wildcardType);  for(Type  toBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }  [BUGGY]    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  wildcardType  =  getImplicitLowerBounds(wildcardType);  for(Type  toBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }	      Type[]    upperBounds    =    getImplicitLowerBounds(wildcardType);    for(Type    toBound    :    lowerBounds)    {    toBound    =    substituteTypeVariables(toBound,    typeVarAssigns);    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
18	[BUG]  [BUGGY]  Type[]  toUpperBounds  =  getImplicitLowerBounds(wildcardType);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  Type[]  toUpperBounds  =  getImplicitLowerBounds(wildcardType);  [BUGGY]    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  toUpperBounds  =  getImplicitLowerBounds(wildcardType);	      Type[]    upperBounds    =    getImplicitLowerBounds(wildcardType);    for(Type    toBound    :    lowerBounds)    {    toBound    =    substituteTypeVariables(toBound,    typeVarAssigns);    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
19	[BUG]  [BUGGY]  Type[]  upperBounds  =  toBound.getImplicitUpperBounds();  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  Type[]  upperBounds  =  toBound.getImplicitUpperBounds();  [BUGGY]    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  upperBounds  =  toBound.getImplicitUpperBounds();	      Type[]    upperBounds    =    toBound.getImplicitLowerBounds();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
20	[BUG]  [BUGGY]  Type[]  lowerBounds  =  toBound.getImplicitLowerBounds();  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  Type[]  lowerBounds  =  toBound.getImplicitLowerBounds();  [BUGGY]    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  lowerBounds  =  toBound.getImplicitLowerBounds();	      Type[]    upperBounds    =    toBound.getImplicitLowerBounds();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
21	[BUG]  [BUGGY]  Type[]  upperBounds  =  toBound.getImplicitLowerBounds(wildcardType);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  Type[]  upperBounds  =  toBound.getImplicitLowerBounds(wildcardType);  [BUGGY]    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  upperBounds  =  toBound.getImplicitLowerBounds(wildcardType);	      Type[]    upperBounds    =    toBound.getImplicitLowerBounds();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
22	[BUG]  [BUGGY]  Type[]  toUpperBounds  =  getImplicitLowerBounds(wildcardType);  for(Type  upperBound  :  lowerBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  Type[]  toUpperBounds  =  getImplicitLowerBounds(wildcardType);  for(Type  upperBound  :  lowerBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }  [BUGGY]    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  toUpperBounds  =  getImplicitLowerBounds(wildcardType);  for(Type  upperBound  :  lowerBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }	      Type[]    upperBounds    =    getImplicitLowerBounds(wildcardType);    for(Type    upperBound    :    lowerBounds)    {    toBound    =    substituteTypeVariables(upperBound,    typeVarAssigns);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
23	[BUG]  [BUGGY]  Type[]  toUpperBounds  =  getImplicitLowerBounds(wildcardType);  for(Type  toBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  Type[]  toUpperBounds  =  getImplicitLowerBounds(wildcardType);  for(Type  toBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }  [BUGGY]    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  toUpperBounds  =  getImplicitLowerBounds(wildcardType);  for(Type  toBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }	      Type[]    upperBounds    =    getImplicitLowerBounds(wildcardType);    for(Type    upperBound    :    lowerBounds)    {    toBound    =    substituteTypeVariables(upperBound,    typeVarAssigns);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
24	[BUG]  [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType);  for(Type  toBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType);  for(Type  toBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }  [BUGGY]    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType);  for(Type  toBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }	      Type[]    lowerBounds    =    getImplicitLowerBounds(wildcardType);    for(Type    toBound    :    toUpperBounds)    {    toBound    =    substituteTypeVariables(toBound,    typeVarAssigns);    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
25	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType);  for(Type  toBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType);  for(Type  toBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }  [BUGGY]    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType);  for(Type  toBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }	      Type[]    lowerBounds    =    getImplicitLowerBounds(wildcardType);    for(Type    toBound    :    toUpperBounds)    {    toBound    =    substituteTypeVariables(toBound,    typeVarAssigns);    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
26	[BUG]  [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType);  for(Type  toBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarA  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType);  for(Type  toBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarA  [BUGGY]    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType);  for(Type  toBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarA	      Type[]    lowerBounds    =    getImplicitLowerBounds(wildcardType);    for(Type    toBound    :    toUpperBounds)    {    toBound    =    substituteTypeVariables(toBound,    typeVarAssigns);    }    	non-compiled	[CE]  ')'  expected	1	None	replace
27	[BUG]  [BUGGY]  Type  wildcardType  =  getImplicitLowerBounds(wildcardType);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  Type  wildcardType  =  getImplicitLowerBounds(wildcardType);  [BUGGY]    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type  wildcardType  =  getImplicitLowerBounds(wildcardType);	      Type    upperBounds    =    getImplicitLowerBounds(wildcardType);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
28	[BUG]  [BUGGY]  TypewildcardType  upperBounds  =  getImplicitLowerBounds(wildcardType);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  TypewildcardType  upperBounds  =  getImplicitLowerBounds(wildcardType);  [BUGGY]    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	TypewildcardType  upperBounds  =  getImplicitLowerBounds(wildcardType);	      Type    upperBounds    =    getImplicitLowerBounds(wildcardType);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
29	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType);  [BUGGY]    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType);	      Type[]    lowerBounds    =    getImplicitLowerBounds(wildcardType);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
30	[BUG]  [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType,  toBound);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType,  toBound);  [BUGGY]    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType,  toBound);	      Type[]    lowerBounds    =    getImplicitLowerBounds(wildcardType);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
31	[BUG]  [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType);  [BUGGY]    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType);	      Type[]    lowerBounds    =    getImplicitLowerBounds(wildcardType);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
32	[BUG]  [BUGGY]  Type[]  lowerBounds  =  getImplicitUpperBounds(wildcardType);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  Type[]  lowerBounds  =  getImplicitUpperBounds(wildcardType);  [BUGGY]    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  lowerBounds  =  getImplicitUpperBounds(wildcardType);	      Type    upperBounds    =    getImplicitUpperBounds(wildcardType);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
33	[BUG]  [BUGGY]  Type  upperBounds  =  getImplicitUpperBounds(wildcardType,  toBound);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  Type  upperBounds  =  getImplicitUpperBounds(wildcardType,  toBound);  [BUGGY]    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type  upperBounds  =  getImplicitUpperBounds(wildcardType,  toBound);	      Type    upperBounds    =    getImplicitUpperBounds(wildcardType);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
34	[BUG]  [BUGGY]  Type  wildcardType  =  getImplicitUpperBounds(wildcardType);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  Type  wildcardType  =  getImplicitUpperBounds(wildcardType);  [BUGGY]    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type  wildcardType  =  getImplicitUpperBounds(wildcardType);	      Type    upperBounds    =    getImplicitUpperBounds(wildcardType);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
35	[BUG]  [BUGGY]  for  (Type  bound  :  lowerBounds)  {  for  (Type  bound  :  lowerBounds)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  for  (Type  bound  :  lowerBounds)  {  for  (Type  bound  :  lowerBounds)  {  [BUGGY]    if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	for    (Type    bound    :    lowerBounds)    {    for  (Type  bound  :  lowerBounds)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
36	[BUG]  [BUGGY]  for  (Type  bound  :  lowerBounds)  {  for  (Type  bound  :  lowBounds)  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]    Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  for  (Type  bound  :  lowerBounds)  {  for  (Type  bound  :  lowBounds)  {  [BUGGY]    if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	for    (Type    bound    :    lowerBounds)    {    for  (Type  bound  :  lowBounds)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
37	[BUG]  [BUGGY]  for  (Type  bound  :  lowerBounds)  {  for  (Type  bound  :  upperBounds)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  for  (Type  bound  :  lowerBounds)  {  for  (Type  bound  :  upperBounds)  {  [BUGGY]    if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	for    (Type    bound    :    lowerBounds)    {    for  (Type  bound  :  upperBounds)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
38	[BUG]  [BUGGY]  for  (Type  bound  :  lowerBounds)  {  For  (Type  bound  :  lowerBounds)  {  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]    Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  for  (Type  bound  :  lowerBounds)  {  For  (Type  bound  :  lowerBounds)  {  [BUGGY]    if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	for    (Type    bound    :    lowerBounds)    {    For  (Type  bound  :  lowerBounds)  {	  	non-compiled	[CE]  ')'  expected	5	None	add
39	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType,  toBound);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType,  toBound);  [BUGGY]    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType,  toBound);	      Type[]    upperBounds    =    getImplicitUpperBounds(wildcardType);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
40	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType,  toWildcardType);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType,  toWildcardType);  [BUGGY]    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType,  toWildcardType);	      Type[]    upperBounds    =    getImplicitUpperBounds(wildcardType);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
41	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(toBound,  wildcardType);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(toBound,  wildcardType);  [BUGGY]    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  upperBounds  =  getImplicitUpperBounds(toBound,  wildcardType);	      Type[]    upperBounds    =    getImplicitUpperBounds(wildcardType);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
42	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType,  toLowerBounds);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType,  toLowerBounds);  [BUGGY]    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType,  toLowerBounds);	      Type[]    upperBounds    =    getImplicitUpperBounds(wildcardType);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
43	[BUG]  [BUGGY]  for(Type  toBound  :  toLowerBounds)  {  [CE]  variable  toBound  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]    AssertionError    [CONTEXT]    Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  for(Type  toBound  :  toLowerBounds)  {  [BUGGY]    if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	for(Type  toBound  :  toLowerBounds)  {	  for(Type    bound    :    toLowerBounds)    {    	non-compiled	[CE]  variable  toBound  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	19	None	replace
44	[BUG]  [BUGGY]  for(Type  bound  :  toLowerBounds,  lowerBounds)  {  [CE]  ')'  expected  [FE]      AssertionError    [CONTEXT]    Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  for(Type  bound  :  toLowerBounds,  lowerBounds)  {  [BUGGY]    if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	for(Type  bound  :  toLowerBounds,  lowerBounds)  {	  for(Type    bound    :    toLowerBounds)    {    	non-compiled	[CE]  ')'  expected	19	None	replace
45	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(toBound);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(toBound);  [BUGGY]    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  upperBounds  =  getImplicitLowerBounds(toBound);	      Type[]    upperBounds    =    getImplicitLowerBounds(wildcardType);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
46	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(type);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(type);  [BUGGY]    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  upperBounds  =  getImplicitLowerBounds(type);	      Type[]    upperBounds    =    getImplicitLowerBounds(wildcardType);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
47	[BUG]  [BUGGY]  for(Type  toBound  :  toBounds)  {  [CE]  variable  toBound  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]            AssertionError    [CONTEXT]    Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  for(Type  toBound  :  toBounds)  {  [BUGGY]    if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	for(Type  toBound  :  toBounds)  {	  for(Type    toBound    :    lowerBounds)    {    	non-compiled	[CE]  variable  toBound  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	8	None	replace
48	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitLowerBounds(wildcardType);  for(Type  upperBound  :  lowerBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  Type[]  toLowerBounds  =  getImplicitLowerBounds(wildcardType);  for(Type  upperBound  :  lowerBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }  [BUGGY]    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  toLowerBounds  =  getImplicitLowerBounds(wildcardType);  for(Type  upperBound  :  lowerBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }	      Type[]    upperBounds    =    getImplicitLowerBounds(wildcardType);    for(Type    upperBound    :    lowerBounds)    {    toBound    =    substituteTypeVariables(upperBound,    typeVarAssigns);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
49	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(type,  toBound);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(type,  toBound);  [BUGGY]    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  upperBounds  =  getImplicitLowerBounds(type,  toBound);	      Type[]    upperBounds    =    getImplicitLowerBounds(wildcardType,    toBound);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
50	[BUG]  [BUGGY]  Type[]  toBounds  =  getImplicitLowerBounds(wildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  Type[]  toBounds  =  getImplicitLowerBounds(wildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }  [BUGGY]    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  toBounds  =  getImplicitLowerBounds(wildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }	      Type[]    lowerBounds    =    getImplicitLowerBounds(wildcardType);    for(Type    upperBound    :    toUpperBounds)    {    toBound    =    substituteTypeVariables(upperBound,    typeVarAssigns);    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
51	[BUG]  [BUGGY]  Type[]  wildcardType  =  getImplicitLowerBounds(wildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  Type[]  wildcardType  =  getImplicitLowerBounds(wildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }  [BUGGY]    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  wildcardType  =  getImplicitLowerBounds(wildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns);  }	      Type[]    lowerBounds    =    getImplicitLowerBounds(wildcardType);    for(Type    upperBound    :    toUpperBounds)    {    toBound    =    substituteTypeVariables(upperBound,    typeVarAssigns);    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
52	[BUG]  [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(toBound);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(toBound);  [BUGGY]    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  lowerBounds  =  getImplicitLowerBounds(toBound);	      Type[]    lowerBounds    =    getImplicitLowerBounds(wildcardType);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
53	[BUG]  [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(toBound,  wildcardType);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(toBound,  wildcardType);  [BUGGY]    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  lowerBounds  =  getImplicitLowerBounds(toBound,  wildcardType);	      Type[]    lowerBounds    =    getImplicitLowerBounds(wildcardType);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
54	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(toBound);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(toBound);  [BUGGY]    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  upperBounds  =  getImplicitUpperBounds(toBound);	      Type[]    upperBounds    =    getImplicitUpperBounds(wildcardType);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
55	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(typeVarAssigns);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(typeVarAssigns);  [BUGGY]    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  upperBounds  =  getImplicitUpperBounds(typeVarAssigns);	      Type[]    upperBounds    =    getImplicitUpperBounds(wildcardType);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
56	[BUG]  [BUGGY]  Type  upperBounds  =  getImplicitUpperBounds(toBound);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  Type  upperBounds  =  getImplicitUpperBounds(toBound);  [BUGGY]    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type  upperBounds  =  getImplicitUpperBounds(toBound);	      Type    upperBounds    =    getImplicitUpperBounds(wildcardType);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
57	[BUG]  [BUGGY]  Type  upperBounds  =  getImplicitUpperBounds(toBound,  wildcardType);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  Type  upperBounds  =  getImplicitUpperBounds(toBound,  wildcardType);  [BUGGY]    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type  upperBounds  =  getImplicitUpperBounds(toBound,  wildcardType);	      Type    upperBounds    =    getImplicitUpperBounds(wildcardType);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
58	[BUG]  [BUGGY]  Type[]  toUpperBounds  =  getImplicitLowerBounds(wildcardType);  for(Type  upperBound  :  lowerBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  Type[]  toUpperBounds  =  getImplicitLowerBounds(wildcardType);  for(Type  upperBound  :  lowerBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }  [BUGGY]    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  toUpperBounds  =  getImplicitLowerBounds(wildcardType);  for(Type  upperBound  :  lowerBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }	      Type[]    upperBounds    =    getImplicitLowerBounds(wildcardType);    for(Type    upperBound    :    lowerBounds)    {    toBound    =    substituteTypeVariables(toBound,    typeVarAssigns);    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
59	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitLowerBounds(wildcardType);  for(Type  upperBound  :  lowerBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  Type[]  toLowerBounds  =  getImplicitLowerBounds(wildcardType);  for(Type  upperBound  :  lowerBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }  [BUGGY]    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  toLowerBounds  =  getImplicitLowerBounds(wildcardType);  for(Type  upperBound  :  lowerBounds)  {  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  }	      Type[]    upperBounds    =    getImplicitLowerBounds(wildcardType);    for(Type    upperBound    :    lowerBounds)    {    toBound    =    substituteTypeVariables(toBound,    typeVarAssigns);    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
60	[BUG]  [BUGGY]  for(Type  bound  :  toLowerBounds)  {  Type  bound  =  toLowerBounds;  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  for(Type  bound  :  toLowerBounds)  {  Type  bound  =  toLowerBounds;  [BUGGY]    if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	for(Type    bound    :    toLowerBounds)    {    Type  bound  =  toLowerBounds;	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
61	[BUG]  [BUGGY]  for(Type  toBound  :  toUpperBounds)  {  [CE]  variable  toBound  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]            AssertionError    [CONTEXT]    Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  for(Type  toBound  :  toUpperBounds)  {  [BUGGY]    if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	for(Type  toBound  :  toUpperBounds)  {	  for(Type    toBound    :    lowerBounds)    {    	non-compiled	[CE]  variable  toBound  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	8	None	replace
62	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(typeVarAssigns);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(typeVarAssigns);  [BUGGY]    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  upperBounds  =  getImplicitLowerBounds(typeVarAssigns);	      Type[]    upperBounds    =    getImplicitLowerBounds(wildcardType);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
63	[BUG]  [BUGGY]  Type[]  upperBounds  =  typeVarAssigns.getImplicitLowerBounds();  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  Type[]  upperBounds  =  typeVarAssigns.getImplicitLowerBounds();  [BUGGY]    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  upperBounds  =  typeVarAssigns.getImplicitLowerBounds();	      Type[]    upperBounds    =    toBound.getImplicitLowerBounds();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
64	[BUG]  [BUGGY]  for  (Type  bound  :  lowerBounds)  {  Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  bound  :  lowerBounds)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  for  (Type  bound  :  lowerBounds)  {  Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  bound  :  lowerBounds)  {  [BUGGY]    if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	for    (Type    bound    :    lowerBounds)    {    Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  bound  :  lowerBounds)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
65	[BUG]  [BUGGY]  for  (Type  bound  :  lowerBounds)  {  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  for  (Type  bound  :  lowerBounds)  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]    Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  for  (Type  bound  :  lowerBounds)  {  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  for  (Type  bound  :  lowerBounds)  {  [BUGGY]    if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	for    (Type    bound    :    lowerBounds)    {    Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  for  (Type  bound  :  lowerBounds)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
66	[BUG]  [BUGGY]  for  (Type  bound  :  lowerBounds)  {  Type[]  upperBounds  =  getImplicitLeowerBounds(wildcardType);  for  (Type  bound  :  lowerBounds)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  for  (Type  bound  :  lowerBounds)  {  Type[]  upperBounds  =  getImplicitLeowerBounds(wildcardType);  for  (Type  bound  :  lowerBounds)  {  [BUGGY]    if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	for    (Type    bound    :    lowerBounds)    {    Type[]  upperBounds  =  getImplicitLeowerBounds(wildcardType);  for  (Type  bound  :  lowerBounds)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
67	[BUG]  [BUGGY]  Type  upperBounds  =  getImplicitLowerBounds(toBound);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  Type  upperBounds  =  getImplicitLowerBounds(toBound);  [BUGGY]    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type  upperBounds  =  getImplicitLowerBounds(toBound);	      Type    upperBounds    =    getImplicitLowerBounds(wildcardType);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
68	[BUG]  [BUGGY]  Type  upperBounds  =  getImplicitLowerBounds(toBound,  wildcardType);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  Type  upperBounds  =  getImplicitLowerBounds(toBound,  wildcardType);  [BUGGY]    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type  upperBounds  =  getImplicitLowerBounds(toBound,  wildcardType);	      Type    upperBounds    =    getImplicitLowerBounds(wildcardType);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
69	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType,  typeVarAssigns);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType,  typeVarAssigns);  [BUGGY]    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType,  typeVarAssigns);	      Type[]    upperBounds    =    getImplicitUpperBounds(wildcardType);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
70	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(type);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(type);  [BUGGY]    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  upperBounds  =  getImplicitUpperBounds(type);	      Type[]    upperBounds    =    getImplicitUpperBounds(wildcardType);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
71	[BUG]  [BUGGY]  Type  upperBounds  =  getImplicitLowerBounds(wildcardType,  toBound);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  Type  upperBounds  =  getImplicitLowerBounds(wildcardType,  toBound);  [BUGGY]    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type  upperBounds  =  getImplicitLowerBounds(wildcardType,  toBound);	      Type    upperBounds    =    getImplicitLowerBounds(wildcardType);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
72	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  for(Type  bound  :  toUpperBounds)  {  [BUGGY]    if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	add	for(Type  bound  :  toUpperBounds)  {	  for(Type    bound    :    toLowerBounds)    {    	compilable	  [FE]  AssertionError  	19	2	replace
73	[BUG]  [BUGGY]  for(Type  bound  :  toUpperBounds)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  for(Type  bound  :  toUpperBounds)  {  [BUGGY]    if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	for(Type  bound  :  toUpperBounds)  {	  for(Type    bound    :    toLowerBounds)    {    	compilable	  [FE]  AssertionError  	19	2	replace
74	[BUG]  [BUGGY]  for(Type  bound  :  toLowerBounds,  upperBounds)  {  [CE]  ')'  expected  [FE]      AssertionError    [CONTEXT]    Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  for(Type  bound  :  toLowerBounds,  upperBounds)  {  [BUGGY]    if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	for(Type  bound  :  toLowerBounds,  upperBounds)  {	  for(Type    bound    :    toLowerBounds)    {    	non-compiled	[CE]  ')'  expected	19	None	replace
75	[BUG]  [BUGGY]  Type  upperBounds  =  getImplicitUpperBounds(wildcardType,  typeVarAssigns);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  Type  upperBounds  =  getImplicitUpperBounds(wildcardType,  typeVarAssigns);  [BUGGY]    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type  upperBounds  =  getImplicitUpperBounds(wildcardType,  typeVarAssigns);	      Type    upperBounds    =    getImplicitUpperBounds(wildcardType);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
76	[BUG]  [BUGGY]  Type[]  upperBounds  =  wildcardType.getImplicitLowerBounds();  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  Type[]  upperBounds  =  wildcardType.getImplicitLowerBounds();  [BUGGY]    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  upperBounds  =  wildcardType.getImplicitLowerBounds();	      Type[]    upperBounds    =    toBound.getImplicitLowerBounds();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
77	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitLowerBounds(wildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns  [CE]  ')'  expected  [FE]              AssertionError    [CONTEXT]    Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  Type[]  toLowerBounds  =  getImplicitLowerBounds(wildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns  [BUGGY]    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	Type[]  toLowerBounds  =  getImplicitLowerBounds(wildcardType);  for(Type  upperBound  :  toUpperBounds)  {  toBound  =  substituteTypeVariables(upperBound,  typeVarAssigns	      Type[]    lowerBounds    =    getImplicitLowerBounds(wildcardType);    for(Type    upperBound    :    toUpperBounds)    {    toBound    =    substituteTypeVariables(upperBound,    typeVarAssigns);    }    	non-compiled	[CE]  ')'  expected	4	None	replace
78	[BUG]  [BUGGY]  for(Type  bound  :  toLowerBounds)  {  Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType);  for(Type  bound  :  toLowerBounds)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  for(Type  bound  :  toLowerBounds)  {  Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType);  for(Type  bound  :  toLowerBounds)  {  [BUGGY]    if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	for(Type    bound    :    toLowerBounds)    {    Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType);  for(Type  bound  :  toLowerBounds)  {	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
79	[BUG]  [BUGGY]  for(Type  bound  :  toLowerBounds)  {  Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType);  if(toLowerBounds!=  null)  {  for(Type  bound  :  toLowerBounds)  {  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]    Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  for(Type  bound  :  toLowerBounds)  {  Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType);  if(toLowerBounds!=  null)  {  for(Type  bound  :  toLowerBounds)  {  }  [BUGGY]    if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	for(Type    bound    :    toLowerBounds)    {    Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType);  if(toLowerBounds!=  null)  {  for(Type  bound  :  toLowerBounds)  {  }	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
80	[BUG]  [BUGGY]  for(Type  bound  :  toLowerBounds)  {  Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType);  if(toLowerBounds!=  null)  {  for(Type  bound  :  toLowerBounds)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  for(Type  bound  :  toLowerBounds)  {  Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType);  if(toLowerBounds!=  null)  {  for(Type  bound  :  toLowerBounds)  {  [BUGGY]    if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	for(Type    bound    :    toLowerBounds)    {    Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType);  if(toLowerBounds!=  null)  {  for(Type  bound  :  toLowerBounds)  {	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
81	[BUG]  [BUGGY]  for(Type  bound  :  toLowerBounds)  {  Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType,  toBound);  for(Type  bound  :  toLowerBounds)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  for(Type  bound  :  toLowerBounds)  {  Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType,  toBound);  for(Type  bound  :  toLowerBounds)  {  [BUGGY]    if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	for(Type    bound    :    toLowerBounds)    {    Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType,  toBound);  for(Type  bound  :  toLowerBounds)  {	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
